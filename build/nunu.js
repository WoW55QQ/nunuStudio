/*


 opentype.js:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Frederik De Bleser <frederik@debleser.be>
   version: 0.6.5

 tiny-inflate:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Devon Govett <devongovett@gmail.com>
   maintainers: devongovett <devongovett@gmail.com>
   homepage: https://github.com/devongovett/tiny-inflate
   version: 1.0.2

 This header is generated by licensify (https://github.com/twada/licensify)
 Determine if an object is a Buffer

 @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 @license  MIT
 LeapJS v0.6.4                                                  
 http://github.com/leapmotion/leapjs/                                        

 Copyright 2013 LeapMotion, Inc. and other contributors                      
 Released under the Apache-2.0 license                                     
 http://github.com/leapmotion/leapjs/blob/master/LICENSE.txt                 
 chevrotain - v4.6.0 */
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.arrayIteratorImpl = function(a) {
  var c = 0;
  return function() {
    return c < a.length ? {done:!1, value:a[c++]} : {done:!0};
  };
};
$jscomp.arrayIterator = function(a) {
  return {next:$jscomp.arrayIteratorImpl(a)};
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, c, k) {
  a != Array.prototype && a != Object.prototype && (a[c] = k.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.SymbolClass = function(a, c) {
  this.$jscomp$symbol$id_ = a;
  $jscomp.defineProperty(this, "description", {configurable:!0, writable:!0, value:c});
};
$jscomp.SymbolClass.prototype.toString = function() {
  return this.$jscomp$symbol$id_;
};
$jscomp.Symbol = function() {
  function a(k) {
    if (this instanceof a) {
      throw new TypeError("Symbol is not a constructor");
    }
    return new $jscomp.SymbolClass($jscomp.SYMBOL_PREFIX + (k || "") + "_" + c++, k);
  }
  var c = 0;
  return a;
}();
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("Symbol.iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.initSymbolAsyncIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.asyncIterator;
  a || (a = $jscomp.global.Symbol.asyncIterator = $jscomp.global.Symbol("Symbol.asyncIterator"));
  $jscomp.initSymbolAsyncIterator = function() {
  };
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.checkStringArgs = function(a, c, k) {
  if (null == a) {
    throw new TypeError("The 'this' value for String.prototype." + k + " must not be null or undefined");
  }
  if (c instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + k + " must not be a regular expression");
  }
  return a + "";
};
$jscomp.polyfill = function(a, c, k, b) {
  if (c) {
    k = $jscomp.global;
    a = a.split(".");
    for (b = 0; b < a.length - 1; b++) {
      var e = a[b];
      e in k || (k[e] = {});
      k = k[e];
    }
    a = a[a.length - 1];
    b = k[a];
    c = c(b);
    c != b && null != c && $jscomp.defineProperty(k, a, {configurable:!0, writable:!0, value:c});
  }
};
$jscomp.polyfill("String.prototype.endsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "endsWith");
    a += "";
    void 0 === k && (k = b.length);
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var c = a.length; 0 < c && 0 < k;) {
      if (b[--k] != a[--c]) {
        return !1;
      }
    }
    return 0 >= c;
  };
}, "es6", "es3");
$jscomp.owns = function(a, c) {
  return Object.prototype.hasOwnProperty.call(a, c);
};
$jscomp.assign = "function" == typeof Object.assign ? Object.assign : function(a, c) {
  for (var k = 1; k < arguments.length; k++) {
    var b = arguments[k];
    if (b) {
      for (var e in b) {
        $jscomp.owns(b, e) && (a[e] = b[e]);
      }
    }
  }
  return a;
};
$jscomp.polyfill("Object.assign", function(a) {
  return a || $jscomp.assign;
}, "es6", "es3");
$jscomp.polyfill("Number.EPSILON", function(a) {
  return Math.pow(2, -52);
}, "es6", "es3");
$jscomp.polyfill("String.prototype.repeat", function(a) {
  return a ? a : function(a) {
    var c = $jscomp.checkStringArgs(this, null, "repeat");
    if (0 > a || 1342177279 < a) {
      throw new RangeError("Invalid count value");
    }
    a |= 0;
    for (var b = ""; a;) {
      if (a & 1 && (b += c), a >>>= 1) {
        c += c;
      }
    }
    return b;
  };
}, "es6", "es3");
$jscomp.iteratorFromArray = function(a, c) {
  $jscomp.initSymbolIterator();
  a instanceof String && (a += "");
  var k = 0, b = {next:function() {
    if (k < a.length) {
      var e = k++;
      return {value:c(e, a[e]), done:!1};
    }
    b.next = function() {
      return {done:!0, value:void 0};
    };
    return b.next();
  }};
  b[Symbol.iterator] = function() {
    return b;
  };
  return b;
};
$jscomp.polyfill("Array.prototype.keys", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a) {
      return a;
    });
  };
}, "es6", "es3");
$jscomp.checkEs6ConformanceViaProxy = function() {
  try {
    var a = {}, c = Object.create(new $jscomp.global.Proxy(a, {get:function(k, b, e) {
      return k == a && "q" == b && e == c;
    }}));
    return !0 === c.q;
  } catch (k) {
    return !1;
  }
};
$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1;
$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
$jscomp.makeIterator = function(a) {
  var c = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
  return c ? c.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.polyfill("WeakMap", function(a) {
  function c() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), c = Object.seal({}), e = new a([[b, 2], [c, 3]]);
      if (2 != e.get(b) || 3 != e.get(c)) {
        return !1;
      }
      e.delete(b);
      e.set(c, 4);
      return !e.has(b) && 4 == e.get(c);
    } catch (d) {
      return !1;
    }
  }
  function k() {
  }
  function b(a) {
    if (!$jscomp.owns(a, f)) {
      var b = new k;
      $jscomp.defineProperty(a, f, {value:b});
    }
  }
  function e(a) {
    var c = Object[a];
    c && (Object[a] = function(a) {
      if (a instanceof k) {
        return a;
      }
      b(a);
      return c(a);
    });
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (a && $jscomp.ES6_CONFORMANCE) {
      return a;
    }
  } else {
    if (c()) {
      return a;
    }
  }
  var f = "$jscomp_hidden_" + Math.random();
  e("freeze");
  e("preventExtensions");
  e("seal");
  var h = 0, r = function(a) {
    this.id_ = (h += Math.random() + 1).toString();
    if (a) {
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  r.prototype.set = function(a, c) {
    b(a);
    if (!$jscomp.owns(a, f)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[f][this.id_] = c;
    return this;
  };
  r.prototype.get = function(a) {
    return $jscomp.owns(a, f) ? a[f][this.id_] : void 0;
  };
  r.prototype.has = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_);
  };
  r.prototype.delete = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_) ? delete a[f][this.id_] : !1;
  };
  return r;
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "startsWith");
    a += "";
    var c = b.length, f = a.length;
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var h = 0; h < f && k < c;) {
      if (b[k++] != a[h++]) {
        return !1;
      }
    }
    return h >= f;
  };
}, "es6", "es3");
$jscomp.polyfill("Math.sign", function(a) {
  return a ? a : function(a) {
    a = Number(a);
    return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.values", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a, k) {
      return k;
    });
  };
}, "es8", "es3");
$jscomp.polyfill("Number.isFinite", function(a) {
  return a ? a : function(a) {
    return "number" !== typeof a ? !1 : !isNaN(a) && Infinity !== a && -Infinity !== a;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.isInteger", function(a) {
  return a ? a : function(a) {
    return Number.isFinite(a) ? a === Math.floor(a) : !1;
  };
}, "es6", "es3");
$jscomp.polyfill("String.fromCodePoint", function(a) {
  return a ? a : function(a) {
    for (var c = "", b = 0; b < arguments.length; b++) {
      var e = Number(arguments[b]);
      if (0 > e || 1114111 < e || e !== Math.floor(e)) {
        throw new RangeError("invalid_code_point " + e);
      }
      65535 >= e ? c += String.fromCharCode(e) : (e -= 65536, c += String.fromCharCode(e >>> 10 & 1023 | 55296), c += String.fromCharCode(e & 1023 | 56320));
    }
    return c;
  };
}, "es6", "es3");
$jscomp.polyfill("Math.fround", function(a) {
  if (a) {
    return a;
  }
  if ($jscomp.SIMPLE_FROUND_POLYFILL || "function" !== typeof Float32Array) {
    return function(a) {
      return a;
    };
  }
  var c = new Float32Array(1);
  return function(a) {
    c[0] = a;
    return c[0];
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, k, b) {
    var c = this.length || 0;
    0 > k && (k = Math.max(0, c + k));
    if (null == b || b > c) {
      b = c;
    }
    b = Number(b);
    0 > b && (b = Math.max(0, c + b));
    for (k = Number(k || 0); k < b; k++) {
      this[k] = a;
    }
    return this;
  };
}, "es6", "es3");
$jscomp.underscoreProtoCanBeSet = function() {
  var a = {a:!0}, c = {};
  try {
    return c.__proto__ = a, c.a;
  } catch (k) {
  }
  return !1;
};
$jscomp.setPrototypeOf = "function" == typeof Object.setPrototypeOf ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function(a, c) {
  a.__proto__ = c;
  if (a.__proto__ !== c) {
    throw new TypeError(a + " is not extensible");
  }
  return a;
} : null;
$jscomp.polyfill("Object.setPrototypeOf", function(a) {
  return a || $jscomp.setPrototypeOf;
}, "es6", "es5");
$jscomp.findInternal = function(a, c, k) {
  a instanceof String && (a = String(a));
  for (var b = a.length, e = 0; e < b; e++) {
    var f = a[e];
    if (c.call(k, f, e, a)) {
      return {i:e, v:f};
    }
  }
  return {i:-1, v:void 0};
};
$jscomp.polyfill("Array.prototype.find", function(a) {
  return a ? a : function(a, k) {
    return $jscomp.findInternal(this, a, k).v;
  };
}, "es6", "es3");
$jscomp.MapEntry = function() {
};
$jscomp.polyfill("Map", function(a) {
  function c() {
    if ($jscomp.ASSUME_NO_NATIVE_MAP || !a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({x:4}), c = new a($jscomp.makeIterator([[b, "s"]]));
      if ("s" != c.get(b) || 1 != c.size || c.get({x:4}) || c.set({x:4}, "t") != c || 2 != c.size) {
        return !1;
      }
      var e = c.entries(), d = e.next();
      if (d.done || d.value[0] != b || "s" != d.value[1]) {
        return !1;
      }
      d = e.next();
      return d.done || 4 != d.value[0].x || "t" != d.value[1] || !e.next().done ? !1 : !0;
    } catch (l) {
      return !1;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (a && $jscomp.ES6_CONFORMANCE) {
      return a;
    }
  } else {
    if (c()) {
      return a;
    }
  }
  $jscomp.initSymbolIterator();
  var k = new WeakMap, b = function(a) {
    this.data_ = {};
    this.head_ = h();
    this.size = 0;
    if (a) {
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  b.prototype.set = function(a, b) {
    a = 0 === a ? 0 : a;
    var c = e(this, a);
    c.list || (c.list = this.data_[c.id] = []);
    c.entry ? c.entry.value = b : (c.entry = {next:this.head_, previous:this.head_.previous, head:this.head_, key:a, value:b}, c.list.push(c.entry), this.head_.previous.next = c.entry, this.head_.previous = c.entry, this.size++);
    return this;
  };
  b.prototype.delete = function(a) {
    a = e(this, a);
    return a.entry && a.list ? (a.list.splice(a.index, 1), a.list.length || delete this.data_[a.id], a.entry.previous.next = a.entry.next, a.entry.next.previous = a.entry.previous, a.entry.head = null, this.size--, !0) : !1;
  };
  b.prototype.clear = function() {
    this.data_ = {};
    this.head_ = this.head_.previous = h();
    this.size = 0;
  };
  b.prototype.has = function(a) {
    return !!e(this, a).entry;
  };
  b.prototype.get = function(a) {
    return (a = e(this, a).entry) && a.value;
  };
  b.prototype.entries = function() {
    return f(this, function(a) {
      return [a.key, a.value];
    });
  };
  b.prototype.keys = function() {
    return f(this, function(a) {
      return a.key;
    });
  };
  b.prototype.values = function() {
    return f(this, function(a) {
      return a.value;
    });
  };
  b.prototype.forEach = function(a, b) {
    for (var c = this.entries(), d; !(d = c.next()).done;) {
      d = d.value, a.call(b, d[1], d[0], this);
    }
  };
  b.prototype[Symbol.iterator] = b.prototype.entries;
  var e = function(a, b) {
    var c = b && typeof b;
    "object" == c || "function" == c ? k.has(b) ? c = k.get(b) : (c = "" + ++r, k.set(b, c)) : c = "p_" + b;
    var d = a.data_[c];
    if (d && $jscomp.owns(a.data_, c)) {
      for (a = 0; a < d.length; a++) {
        var e = d[a];
        if (b !== b && e.key !== e.key || b === e.key) {
          return {id:c, list:d, index:a, entry:e};
        }
      }
    }
    return {id:c, list:d, index:-1, entry:void 0};
  }, f = function(a, b) {
    var c = a.head_;
    return $jscomp.iteratorPrototype(function() {
      if (c) {
        for (; c.head != a.head_;) {
          c = c.previous;
        }
        for (; c.next != c.head;) {
          return c = c.next, {done:!1, value:b(c)};
        }
        c = null;
      }
      return {done:!0, value:void 0};
    });
  }, h = function() {
    var a = {};
    return a.previous = a.next = a.head = a;
  }, r = 0;
  return b;
}, "es6", "es3");
$jscomp.polyfill("Object.is", function(a) {
  return a ? a : function(a, k) {
    return a === k ? 0 !== a || 1 / a === 1 / k : a !== a && k !== k;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    var b = this;
    b instanceof String && (b = String(b));
    var c = b.length;
    k = k || 0;
    for (0 > k && (k = Math.max(k + c, 0)); k < c; k++) {
      var f = b[k];
      if (f === a || Object.is(f, a)) {
        return !0;
      }
    }
    return !1;
  };
}, "es7", "es3");
$jscomp.polyfill("String.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    return -1 !== $jscomp.checkStringArgs(this, a, "includes").indexOf(a, k || 0);
  };
}, "es6", "es3");
function NunuApp(a) {
  this.renderer = this.program = null;
  this.canvasFitWindow = this.running = !1;
  this.canvas = a;
  this.events = new EventManager;
  void 0 === a && (this.canvas = document.createElement("canvas"), this.canvas.style.position = "absolute", this.canvas.style.left = "0px", this.canvas.style.top = "0px", this.canvasFitWindow = !0, document.body.appendChild(this.canvas));
}
NunuApp.loadApp = function(a, c) {
  "string" === typeof c && (c = document.getElementById(c));
  var k = new NunuApp(c);
  k.loadRunProgram(a);
  window.addEventListener("resize", function() {
    Nunu.isFullscreen() ? (k.canvas.width = window.innerWidth, k.canvas.height = window.innerHeight) : (k.canvas.width = nunuApps[i].canvas.parentElement.offsetWidth, k.canvas.height = nunuApps[i].canvas.parentElement.offsetWidth);
    k.resize();
  });
};
NunuApp.prototype.run = function() {
  if (null === this.program) {
    console.warn("nunuStudio: no program is loaded [app.loadPogram(fname)]");
  } else {
    this.renderer = this.program.rendererConfig.createRenderer(this.canvas);
    this.keyboard = new Keyboard;
    this.mouse = new Mouse;
    this.mouse.setCanvas(this.canvas);
    this.program.app = this;
    this.program.defaultCamera = new PerspectiveCamera(60, 1, .1, 1E5);
    this.program.defaultCamera.position.set(0, 5, -5);
    this.program.setRenderer(this.renderer);
    this.program.setMouseKeyboard(this.mouse, this.keyboard);
    this.program.initialize();
    if (this.program.lockPointer) {
      var a = this.canvas;
      a.requestPointerLock = a.requestPointerLock || a.mozRequestPointerLock || a.webkitRequestPointerLock;
      this.events.add(a, "click", function() {
        a.requestPointerLock && a.requestPointerLock();
      });
    }
    var c = this;
    this.events.add(window, "beforeunload", function() {
      c.exit();
    });
    this.events.create();
    this.resize();
    this.resume();
  }
};
NunuApp.prototype.loadRunProgram = function(a, c, k) {
  this.loadProgramAsync(a, function(a) {
    a.run();
    void 0 !== c && c(a);
  }, k);
};
NunuApp.prototype.loadProgram = function(a) {
  if (a.endsWith(".isp")) {
    var c = new ObjectLoader;
    a = FileSystem.readFile(a);
    this.program = c.parse(JSON.parse(a));
  } else {
    if (a.endsWith(".nsp")) {
      c = new ObjectLoader;
      a = FileSystem.readFileArrayBuffer(a);
      var k = new dcodeIO.PSON.StaticPair;
      this.program = c.parse(k.decode(a));
    }
  }
};
NunuApp.prototype.loadProgramAsync = function(a, c, k) {
  var b = this;
  a.endsWith(".isp") ? FileSystem.readFile(a, !1, function(a) {
    var e = new ObjectLoader;
    b.program = e.parse(JSON.parse(a));
    void 0 !== c && c(b);
  }, k) : a.endsWith(".nsp") && FileSystem.readFileArrayBuffer(a, !1, function(a) {
    var e = new ObjectLoader, h = new dcodeIO.PSON.StaticPair;
    b.program = e.parse(h.decode(a));
    void 0 !== c && c(b);
  }, k);
};
NunuApp.prototype.update = function() {
  this.mouse.update();
  this.keyboard.update();
  this.program.update();
  this.program.render(this.renderer);
};
NunuApp.prototype.exit = function() {
  this.events.destroy();
  null !== this.program && (this.program.dispose(), this.program = null);
  null !== this.renderer && (this.renderer.dispose(), this.renderer = null);
  null !== this.mouse && (this.mouse.dispose(), this.mouse = null);
  null !== this.keyboard && (this.keyboard.dispose(), this.keyboard = null);
  if (void 0 !== this.onExit) {
    this.onExit();
  }
};
NunuApp.prototype.resume = function() {
  if (null !== this.program && !this.running) {
    var a = this, c = function() {
      a.running && (a.update(), requestAnimationFrame(c));
    };
    this.running = !0;
    c();
  }
};
NunuApp.prototype.pause = function() {
  this.running = !1;
};
NunuApp.prototype.setCanvas = function(a) {
  this.canvas = a;
  this.canvasFitWindow = !1;
};
NunuApp.prototype.resize = function() {
  if (null !== this.canvas && null !== this.program && null !== this.renderer) {
    if (this.canvasFitWindow) {
      this.canvas.style.width = window.innerWidth + "px";
      this.canvas.style.height = window.innerHeight + "px";
      var a = window.innerWidth;
      var c = window.innerHeight;
    } else {
      a = this.canvas.offsetWidth, c = this.canvas.offsetHeight;
    }
    this.program.handlePixelRatio && (a *= window.devicePixelRatio, c *= window.devicePixelRatio);
    this.renderer.setSize(a, c, !1);
    this.program.resize(a, c);
  }
};
NunuApp.prototype.sendData = function(a) {
  null !== this.program && this.program.receiveDataApp(a);
};
NunuApp.prototype.setOnDataReceived = function(a) {
  this.onDataReceived = a;
};
NunuApp.prototype.setOnExit = function(a) {
  this.onExit = a;
};
NunuApp.prototype.vrAvailable = function() {
  return null !== this.program && this.program.vrAvailable();
};
NunuApp.prototype.toggleVR = function() {
  this.vrAvailable() ? this.program.vrRunning ? this.program.exitVR() : this.program.enterVR() : console.warn("nunuStudio: Loaded program is not VR enabled.");
};
NunuApp.prototype.toggleFullscreen = function(a) {
  var c = Nunu.isFullscreen();
  void 0 === a && (a = this.canvas);
  Nunu.setFullscreen(!c, a);
};
(function(a, c) {
  "object" === typeof exports && "undefined" !== typeof module ? c(exports) : "function" === typeof define && define.amd ? define(["exports"], c) : (a = a || self, c(a.THREE = {}));
})(this, function(a) {
  function c() {
  }
  function k(g, a) {
    this.x = g || 0;
    this.y = a || 0;
  }
  function b(g, a, d, b) {
    this._x = g || 0;
    this._y = a || 0;
    this._z = d || 0;
    this._w = void 0 !== b ? b : 1;
  }
  function e(g, a, d) {
    this.x = g || 0;
    this.y = a || 0;
    this.z = d || 0;
  }
  function f() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  function h(g, a, d, b, c, e, l, p, m, n) {
    Object.defineProperty(this, "id", {value:Ti++});
    this.uuid = ka.generateUUID();
    this.name = "";
    this.image = void 0 !== g ? g : h.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== a ? a : h.DEFAULT_MAPPING;
    this.wrapS = void 0 !== d ? d : 1001;
    this.wrapT = void 0 !== b ? b : 1001;
    this.magFilter = void 0 !== c ? c : 1006;
    this.minFilter = void 0 !== e ? e : 1008;
    this.anisotropy = void 0 !== m ? m : 1;
    this.format = void 0 !== l ? l : 1023;
    this.type = void 0 !== p ? p : 1009;
    this.offset = new k(0, 0);
    this.repeat = new k(1, 1);
    this.center = new k(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = !0;
    this.matrix = new f;
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this.encoding = void 0 !== n ? n : 3E3;
    this.version = 0;
    this.onUpdate = null;
  }
  function r(g, a, d, b) {
    this.x = g || 0;
    this.y = a || 0;
    this.z = d || 0;
    this.w = void 0 !== b ? b : 1;
  }
  function q(g, a, d) {
    this.width = g;
    this.height = a;
    this.scissor = new r(0, 0, g, a);
    this.scissorTest = !1;
    this.viewport = new r(0, 0, g, a);
    d = d || {};
    this.texture = new h(void 0, void 0, d.wrapS, d.wrapT, d.magFilter, d.minFilter, d.format, d.type, d.anisotropy, d.encoding);
    this.texture.image = {};
    this.texture.image.width = g;
    this.texture.image.height = a;
    this.texture.generateMipmaps = void 0 !== d.generateMipmaps ? d.generateMipmaps : !1;
    this.texture.minFilter = void 0 !== d.minFilter ? d.minFilter : 1006;
    this.depthBuffer = void 0 !== d.depthBuffer ? d.depthBuffer : !0;
    this.stencilBuffer = void 0 !== d.stencilBuffer ? d.stencilBuffer : !0;
    this.depthTexture = void 0 !== d.depthTexture ? d.depthTexture : null;
  }
  function n(g, a, d) {
    q.call(this, g, a, d);
    this.samples = 4;
  }
  function m() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }
  function d(g, a, b, c) {
    this._x = g || 0;
    this._y = a || 0;
    this._z = b || 0;
    this._order = c || d.DefaultOrder;
  }
  function l() {
    this.mask = 1;
  }
  function v() {
    Object.defineProperty(this, "id", {value:Ui++});
    this.uuid = ka.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = v.DefaultUp.clone();
    var g = new e, a = new d, c = new b, h = new e(1, 1, 1);
    a._onChange(function() {
      c.setFromEuler(a, !1);
    });
    c._onChange(function() {
      a.setFromQuaternion(c, void 0, !1);
    });
    Object.defineProperties(this, {position:{configurable:!0, enumerable:!0, value:g}, rotation:{configurable:!0, enumerable:!0, value:a}, quaternion:{configurable:!0, enumerable:!0, value:c}, scale:{configurable:!0, enumerable:!0, value:h}, modelViewMatrix:{value:new m}, normalMatrix:{value:new f}});
    this.matrix = new m;
    this.matrixWorld = new m;
    this.matrixAutoUpdate = v.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = !1;
    this.layers = new l;
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
  }
  function w() {
    v.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = this.background = null;
    this.autoUpdate = !0;
    "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail:this}));
  }
  function x(g, a) {
    this.min = void 0 !== g ? g : new e(Infinity, Infinity, Infinity);
    this.max = void 0 !== a ? a : new e(-Infinity, -Infinity, -Infinity);
  }
  function z(g, a, d, b, c) {
    var t;
    var e = 0;
    for (t = g.length - 3; e <= t; e += 3) {
      oc.fromArray(g, e);
      var l = c.x * Math.abs(oc.x) + c.y * Math.abs(oc.y) + c.z * Math.abs(oc.z), G = a.dot(oc), f = d.dot(oc), h = b.dot(oc);
      if (Math.max(-Math.max(G, f, h), Math.min(G, f, h)) > l) {
        return !1;
      }
    }
    return !0;
  }
  function p(g, a) {
    this.center = void 0 !== g ? g : new e;
    this.radius = void 0 !== a ? a : 0;
  }
  function u(g, a) {
    this.origin = void 0 !== g ? g : new e;
    this.direction = void 0 !== a ? a : new e;
  }
  function y(g, a) {
    this.normal = void 0 !== g ? g : new e(1, 0, 0);
    this.constant = void 0 !== a ? a : 0;
  }
  function A(g, a, d) {
    this.a = void 0 !== g ? g : new e;
    this.b = void 0 !== a ? a : new e;
    this.c = void 0 !== d ? d : new e;
  }
  function B(g, a, d) {
    return void 0 === a && void 0 === d ? this.set(g) : this.setRGB(g, a, d);
  }
  function D(g, a, d) {
    0 > d && (d += 1);
    1 < d && --d;
    return d < 1 / 6 ? g + 6 * (a - g) * d : .5 > d ? a : d < 2 / 3 ? g + 6 * (a - g) * (2 / 3 - d) : g;
  }
  function F(g) {
    return .04045 > g ? .0773993808 * g : Math.pow(.9478672986 * g + .0521327014, 2.4);
  }
  function C(g) {
    return .0031308 > g ? 12.92 * g : 1.055 * Math.pow(g, .41666) - .055;
  }
  function E(g, a, d, b, c, l) {
    this.a = g;
    this.b = a;
    this.c = d;
    this.normal = b && b.isVector3 ? b : new e;
    this.vertexNormals = Array.isArray(b) ? b : [];
    this.color = c && c.isColor ? c : new B;
    this.vertexColors = Array.isArray(c) ? c : [];
    this.materialIndex = void 0 !== l ? l : 0;
  }
  function H() {
    Object.defineProperty(this, "id", {value:Vi++});
    this.uuid = ka.generateUUID();
    this.name = "";
    this.type = "Material";
    this.fog = !0;
    this.blending = 1;
    this.side = 0;
    this.vertexTangents = this.flatShading = !1;
    this.vertexColors = 0;
    this.opacity = 1;
    this.transparent = !1;
    this.blendSrc = 204;
    this.blendDst = 205;
    this.blendEquation = 100;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.depthFunc = 3;
    this.depthWrite = this.depthTest = !0;
    this.stencilWriteMask = 255;
    this.stencilFunc = 519;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilZPass = this.stencilZFail = this.stencilFail = 7680;
    this.stencilWrite = !1;
    this.clippingPlanes = null;
    this.clipShadows = this.clipIntersection = !1;
    this.shadowSide = null;
    this.colorWrite = !0;
    this.precision = null;
    this.polygonOffset = !1;
    this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this.dithering = !1;
    this.alphaTest = 0;
    this.premultipliedAlpha = !1;
    this.toneMapped = this.visible = !0;
    this.userData = {};
    this.needsUpdate = !0;
  }
  function Q(g) {
    H.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new B(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function K(g, a, d) {
    if (Array.isArray(g)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.name = "";
    this.array = g;
    this.itemSize = a;
    this.count = void 0 !== g ? g.length / a : 0;
    this.normalized = !0 === d;
    this.usage = 35044;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function M(g, a, d) {
    K.call(this, new Int8Array(g), a, d);
  }
  function L(g, a, d) {
    K.call(this, new Uint8Array(g), a, d);
  }
  function I(g, a, d) {
    K.call(this, new Uint8ClampedArray(g), a, d);
  }
  function P(g, a, d) {
    K.call(this, new Int16Array(g), a, d);
  }
  function T(g, a, d) {
    K.call(this, new Uint16Array(g), a, d);
  }
  function R(g, a, d) {
    K.call(this, new Int32Array(g), a, d);
  }
  function aa(g, a, d) {
    K.call(this, new Uint32Array(g), a, d);
  }
  function N(g, a, d) {
    K.call(this, new Float32Array(g), a, d);
  }
  function S(g, a, d) {
    K.call(this, new Float64Array(g), a, d);
  }
  function O() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }
  function W(g) {
    if (0 === g.length) {
      return -Infinity;
    }
    for (var a = g[0], d = 1, b = g.length; d < b; ++d) {
      g[d] > a && (a = g[d]);
    }
    return a;
  }
  function J() {
    Object.defineProperty(this, "id", {value:Wi += 2});
    this.uuid = ka.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = !1;
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.drawRange = {start:0, count:Infinity};
    this.userData = {};
  }
  function U(g, a) {
    v.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== g ? g : new J;
    this.material = void 0 !== a ? a : new Q({color:16777215 * Math.random()});
    this.drawMode = 0;
    this.updateMorphTargets();
  }
  function ea(g, a, d, b, c, e, l, f) {
    if (null === (1 === a.side ? b.intersectTriangle(l, e, c, !0, f) : b.intersectTriangle(c, e, l, 2 !== a.side, f))) {
      return null;
    }
    Qe.copy(f);
    Qe.applyMatrix4(g.matrixWorld);
    a = d.ray.origin.distanceTo(Qe);
    return a < d.near || a > d.far ? null : {distance:a, point:Qe.clone(), object:g};
  }
  function ha(g, a, d, b, c, e, l, f, h, p, m, n) {
    pc.fromBufferAttribute(c, p);
    qc.fromBufferAttribute(c, m);
    rc.fromBufferAttribute(c, n);
    c = g.morphTargetInfluences;
    if (a.morphTargets && e && c) {
      Re.set(0, 0, 0);
      Se.set(0, 0, 0);
      Te.set(0, 0, 0);
      for (var t = 0, G = e.length; t < G; t++) {
        var q = c[t], r = e[t];
        0 !== q && (eg.fromBufferAttribute(r, p), fg.fromBufferAttribute(r, m), gg.fromBufferAttribute(r, n), l ? (Re.addScaledVector(eg, q), Se.addScaledVector(fg, q), Te.addScaledVector(gg, q)) : (Re.addScaledVector(eg.sub(pc), q), Se.addScaledVector(fg.sub(qc), q), Te.addScaledVector(gg.sub(rc), q)));
      }
      pc.add(Re);
      qc.add(Se);
      rc.add(Te);
    }
    if (g = ea(g, a, d, b, pc, qc, rc, Md)) {
      f && (Qc.fromBufferAttribute(f, p), Rc.fromBufferAttribute(f, m), Sc.fromBufferAttribute(f, n), g.uv = A.getUV(Md, pc, qc, rc, Qc, Rc, Sc, new k)), h && (Qc.fromBufferAttribute(h, p), Rc.fromBufferAttribute(h, m), Sc.fromBufferAttribute(h, n), g.uv2 = A.getUV(Md, pc, qc, rc, Qc, Rc, Sc, new k)), f = new E(p, m, n), A.getNormal(pc, qc, rc, f.normal), g.face = f;
    }
    return g;
  }
  function V() {
    Object.defineProperty(this, "id", {value:Yi += 2});
    this.uuid = ka.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }
  function la(g) {
    var a = {}, d;
    for (d in g) {
      a[d] = {};
      for (var b in g[d]) {
        var c = g[d][b];
        c && (c.isColor || c.isMatrix3 || c.isMatrix4 || c.isVector2 || c.isVector3 || c.isVector4 || c.isTexture) ? a[d][b] = c.clone() : Array.isArray(c) ? a[d][b] = c.slice() : a[d][b] = c;
      }
    }
    return a;
  }
  function ba(g) {
    for (var a = {}, d = 0; d < g.length; d++) {
      var b = la(g[d]), c;
      for (c in b) {
        a[c] = b[c];
      }
    }
    return a;
  }
  function ja(g) {
    H.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
    this.extensions = {derivatives:!1, fragDepth:!1, drawBuffers:!1, shaderTextureLOD:!1};
    this.defaultAttributeValues = {color:[1, 1, 1], uv:[0, 0], uv2:[0, 0]};
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = !1;
    void 0 !== g && (void 0 !== g.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(g));
  }
  function pa() {
    v.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new m;
    this.projectionMatrix = new m;
    this.projectionMatrixInverse = new m;
  }
  function oa(g, a, d, b) {
    pa.call(this);
    this.type = "PerspectiveCamera";
    this.fov = void 0 !== g ? g : 50;
    this.zoom = 1;
    this.near = void 0 !== d ? d : .1;
    this.far = void 0 !== b ? b : 2E3;
    this.focus = 10;
    this.aspect = void 0 !== a ? a : 1;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  function ma(g, a, d, b) {
    v.call(this);
    this.type = "CubeCamera";
    var t = new oa(90, 1, g, a);
    t.up.set(0, -1, 0);
    t.lookAt(new e(1, 0, 0));
    this.add(t);
    var c = new oa(90, 1, g, a);
    c.up.set(0, -1, 0);
    c.lookAt(new e(-1, 0, 0));
    this.add(c);
    var l = new oa(90, 1, g, a);
    l.up.set(0, 0, 1);
    l.lookAt(new e(0, 1, 0));
    this.add(l);
    var f = new oa(90, 1, g, a);
    f.up.set(0, 0, -1);
    f.lookAt(new e(0, -1, 0));
    this.add(f);
    var G = new oa(90, 1, g, a);
    G.up.set(0, -1, 0);
    G.lookAt(new e(0, 0, 1));
    this.add(G);
    var h = new oa(90, 1, g, a);
    h.up.set(0, -1, 0);
    h.lookAt(new e(0, 0, -1));
    this.add(h);
    b = b || {format:1022, magFilter:1006, minFilter:1006};
    this.renderTarget = new ua(d, d, b);
    this.renderTarget.texture.name = "CubeCamera";
    this.update = function(g, a) {
      null === this.parent && this.updateMatrixWorld();
      var d = g.getRenderTarget(), b = this.renderTarget, e = b.texture.generateMipmaps;
      b.texture.generateMipmaps = !1;
      g.setRenderTarget(b, 0);
      g.render(a, t);
      g.setRenderTarget(b, 1);
      g.render(a, c);
      g.setRenderTarget(b, 2);
      g.render(a, l);
      g.setRenderTarget(b, 3);
      g.render(a, f);
      g.setRenderTarget(b, 4);
      g.render(a, G);
      b.texture.generateMipmaps = e;
      g.setRenderTarget(b, 5);
      g.render(a, h);
      g.setRenderTarget(d);
    };
    this.clear = function(g, a, t, d) {
      for (var b = g.getRenderTarget(), c = this.renderTarget, e = 0; 6 > e; e++) {
        g.setRenderTarget(c, e), g.clear(a, t, d);
      }
      g.setRenderTarget(b);
    };
  }
  function ua(g, a, d) {
    q.call(this, g, a, d);
  }
  function Da(g, a, d, b, c, e, l, f, p, m, n, k) {
    h.call(this, null, e, l, f, p, m, b, c, n, k);
    this.image = {data:g || null, width:a || 1, height:d || 1};
    this.magFilter = void 0 !== p ? p : 1003;
    this.minFilter = void 0 !== m ? m : 1003;
    this.flipY = this.generateMipmaps = !1;
    this.unpackAlignment = 1;
    this.needsUpdate = !0;
  }
  function Pa(g, a, d, b, c, e) {
    this.planes = [void 0 !== g ? g : new y, void 0 !== a ? a : new y, void 0 !== d ? d : new y, void 0 !== b ? b : new y, void 0 !== c ? c : new y, void 0 !== e ? e : new y];
  }
  function Ba() {
    function g(t, c) {
      !1 !== d && (b(t, c), a.requestAnimationFrame(g));
    }
    var a = null, d = !1, b = null;
    return {start:function() {
      !0 !== d && null !== b && (a.requestAnimationFrame(g), d = !0);
    }, stop:function() {
      d = !1;
    }, setAnimationLoop:function(g) {
      b = g;
    }, setContext:function(g) {
      a = g;
    }};
  }
  function hg(g) {
    function a(a, t) {
      var d = a.array, b = a.usage, c = g.createBuffer();
      g.bindBuffer(t, c);
      g.bufferData(t, d, b);
      a.onUploadCallback();
      t = 5126;
      d instanceof Float32Array ? t = 5126 : d instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : d instanceof Uint16Array ? t = 5123 : d instanceof Int16Array ? t = 5122 : d instanceof Uint32Array ? t = 5125 : d instanceof Int32Array ? t = 5124 : d instanceof Int8Array ? t = 5120 : d instanceof Uint8Array && (t = 5121);
      return {buffer:c, type:t, bytesPerElement:d.BYTES_PER_ELEMENT, version:a.version};
    }
    var d = new WeakMap;
    return {get:function(g) {
      g.isInterleavedBufferAttribute && (g = g.data);
      return d.get(g);
    }, remove:function(a) {
      a.isInterleavedBufferAttribute && (a = a.data);
      var t = d.get(a);
      t && (g.deleteBuffer(t.buffer), d.delete(a));
    }, update:function(t, b) {
      t.isInterleavedBufferAttribute && (t = t.data);
      var c = d.get(t);
      if (void 0 === c) {
        d.set(t, a(t, b));
      } else {
        if (c.version < t.version) {
          var e = t.array, l = t.updateRange;
          g.bindBuffer(b, c.buffer);
          -1 === l.count ? g.bufferSubData(b, 0, e) : (g.bufferSubData(b, l.offset * e.BYTES_PER_ELEMENT, e.subarray(l.offset, l.offset + l.count)), l.count = -1);
          c.version = t.version;
        }
      }
    }};
  }
  function fb(g, a, d, b) {
    V.call(this);
    this.type = "PlaneGeometry";
    this.parameters = {width:g, height:a, widthSegments:d, heightSegments:b};
    this.fromBufferGeometry(new Ka(g, a, d, b));
    this.mergeVertices();
  }
  function Ka(g, a, d, b) {
    J.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = {width:g, height:a, widthSegments:d, heightSegments:b};
    g = g || 1;
    a = a || 1;
    var t = g / 2, c = a / 2;
    d = Math.floor(d) || 1;
    b = Math.floor(b) || 1;
    var e = d + 1, l = b + 1, f = g / d, h = a / b, G = [], p = [], m = [], n = [];
    for (g = 0; g < l; g++) {
      var k = g * h - c;
      for (a = 0; a < e; a++) {
        p.push(a * f - t, -k, 0), m.push(0, 0, 1), n.push(a / d), n.push(1 - g / b);
      }
    }
    for (g = 0; g < b; g++) {
      for (a = 0; a < d; a++) {
        t = a + e * (g + 1), c = a + 1 + e * (g + 1), l = a + 1 + e * g, G.push(a + e * g, t, l), G.push(t, c, l);
      }
    }
    this.setIndex(G);
    this.setAttribute("position", new N(p, 3));
    this.setAttribute("normal", new N(m, 3));
    this.setAttribute("uv", new N(n, 2));
  }
  function ig(g, a, d, b) {
    function t(g, t) {
      a.buffers.color.setClear(g.r, g.g, g.b, t, b);
    }
    var c = new B(0), e = 0, l, f, h = null, G = 0;
    return {getClearColor:function() {
      return c;
    }, setClearColor:function(g, a) {
      c.set(g);
      e = void 0 !== a ? a : 1;
      t(c, e);
    }, getClearAlpha:function() {
      return e;
    }, setClearAlpha:function(g) {
      e = g;
      t(c, e);
    }, render:function(a, b, p, m) {
      b = b.background;
      p = g.vr;
      (p = p.getSession && p.getSession()) && "additive" === p.environmentBlendMode && (b = null);
      null === b ? (t(c, e), h = null, G = 0) : b && b.isColor && (t(b, 1), m = !0, h = null, G = 0);
      (g.autoClear || m) && g.clear(g.autoClearColor, g.autoClearDepth, g.autoClearStencil);
      if (b && (b.isCubeTexture || b.isWebGLRenderTargetCube)) {
        void 0 === f && (f = new U(new Nd(1, 1, 1), new ja({type:"BackgroundCubeMaterial", uniforms:la(qb.cube.uniforms), vertexShader:qb.cube.vertexShader, fragmentShader:qb.cube.fragmentShader, side:1, depthTest:!1, depthWrite:!1, fog:!1})), f.geometry.deleteAttribute("normal"), f.geometry.deleteAttribute("uv"), f.onBeforeRender = function(g, a, t) {
          this.matrixWorld.copyPosition(t.matrixWorld);
        }, Object.defineProperty(f.material, "map", {get:function() {
          return this.uniforms.tCube.value;
        }}), d.update(f));
        m = b.isWebGLRenderTargetCube ? b.texture : b;
        f.material.uniforms.tCube.value = m;
        f.material.uniforms.tFlip.value = b.isWebGLRenderTargetCube ? 1 : -1;
        if (h !== b || G !== m.version) {
          f.material.needsUpdate = !0, h = b, G = m.version;
        }
        a.unshift(f, f.geometry, f.material, 0, 0, null);
      } else {
        if (b && b.isTexture) {
          void 0 === l && (l = new U(new Ka(2, 2), new ja({type:"BackgroundMaterial", uniforms:la(qb.background.uniforms), vertexShader:qb.background.vertexShader, fragmentShader:qb.background.fragmentShader, side:0, depthTest:!1, depthWrite:!1, fog:!1})), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", {get:function() {
            return this.uniforms.t2D.value;
          }}), d.update(l));
          l.material.uniforms.t2D.value = b;
          !0 === b.matrixAutoUpdate && b.updateMatrix();
          l.material.uniforms.uvTransform.value.copy(b.matrix);
          if (h !== b || G !== b.version) {
            l.material.needsUpdate = !0, h = b, G = b.version;
          }
          a.unshift(l, l.geometry, l.material, 0, 0, null);
        }
      }
    }};
  }
  function jg(g, a, d, b) {
    var t = b.isWebGL2, c;
    this.setMode = function(g) {
      c = g;
    };
    this.render = function(a, t) {
      g.drawArrays(c, a, t);
      d.update(t, c);
    };
    this.renderInstances = function(b, e, l, f) {
      if (0 !== f) {
        if (t) {
          b = g;
          var h = "drawArraysInstanced";
        } else {
          if (b = a.get("ANGLE_instanced_arrays"), h = "drawArraysInstancedANGLE", null === b) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        b[h](c, e, l, f);
        d.update(l, c, f);
      }
    };
  }
  function kg(g, a, d) {
    function t(a) {
      if ("highp" === a) {
        if (0 < g.getShaderPrecisionFormat(35633, 36338).precision && 0 < g.getShaderPrecisionFormat(35632, 36338).precision) {
          return "highp";
        }
        a = "mediump";
      }
      return "mediump" === a && 0 < g.getShaderPrecisionFormat(35633, 36337).precision && 0 < g.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
    }
    var b, c = "undefined" !== typeof WebGL2RenderingContext && g instanceof WebGL2RenderingContext || "undefined" !== typeof WebGL2ComputeRenderingContext && g instanceof WebGL2ComputeRenderingContext, e = void 0 !== d.precision ? d.precision : "highp", l = t(e);
    l !== e && (console.warn("THREE.WebGLRenderer:", e, "not supported, using", l, "instead."), e = l);
    d = !0 === d.logarithmicDepthBuffer;
    l = g.getParameter(34930);
    var f = g.getParameter(35660), h = g.getParameter(3379), G = g.getParameter(34076), p = g.getParameter(34921), m = g.getParameter(36347), n = g.getParameter(36348), k = g.getParameter(36349), q = 0 < f, r = c || !!a.get("OES_texture_float"), u = q && r, v = c ? g.getParameter(36183) : 0;
    return {isWebGL2:c, getMaxAnisotropy:function() {
      if (void 0 !== b) {
        return b;
      }
      var t = a.get("EXT_texture_filter_anisotropic");
      return b = null !== t ? g.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
    }, getMaxPrecision:t, precision:e, logarithmicDepthBuffer:d, maxTextures:l, maxVertexTextures:f, maxTextureSize:h, maxCubemapSize:G, maxAttributes:p, maxVertexUniforms:m, maxVaryings:n, maxFragmentUniforms:k, vertexTextures:q, floatFragmentTextures:r, floatVertexTextures:u, maxSamples:v};
  }
  function rb() {
    function g() {
      m.value !== b && (m.value = b, m.needsUpdate = 0 < c);
      d.numPlanes = c;
      d.numIntersection = 0;
    }
    function a(g, a, t, b) {
      var c = null !== g ? g.length : 0, e = null;
      if (0 !== c) {
        e = m.value;
        if (!0 !== b || null === e) {
          b = t + 4 * c;
          a = a.matrixWorldInverse;
          p.getNormalMatrix(a);
          if (null === e || e.length < b) {
            e = new Float32Array(b);
          }
          for (b = 0; b !== c; ++b, t += 4) {
            h.copy(g[b]).applyMatrix4(a, p), h.normal.toArray(e, t), e[t + 3] = h.constant;
          }
        }
        m.value = e;
        m.needsUpdate = !0;
      }
      d.numPlanes = c;
      return e;
    }
    var d = this, b = null, c = 0, e = !1, l = !1, h = new y, p = new f, m = {value:null, needsUpdate:!1};
    this.uniform = m;
    this.numIntersection = this.numPlanes = 0;
    this.init = function(g, t, d) {
      var l = 0 !== g.length || t || 0 !== c || e;
      e = t;
      b = a(g, d, 0);
      c = g.length;
      return l;
    };
    this.beginShadows = function() {
      l = !0;
      a(null);
    };
    this.endShadows = function() {
      l = !1;
      g();
    };
    this.setState = function(t, d, f, h, G, p) {
      if (!e || null === t || 0 === t.length || l && !f) {
        l ? a(null) : g();
      } else {
        f = l ? 0 : c;
        var n = 4 * f, k = G.clippingState || null;
        m.value = k;
        k = a(t, h, n, p);
        for (t = 0; t !== n; ++t) {
          k[t] = b[t];
        }
        G.clippingState = k;
        this.numIntersection = d ? this.numPlanes : 0;
        this.numPlanes += f;
      }
    };
  }
  function Db(g) {
    var a = {};
    return {get:function(t) {
      if (void 0 !== a[t]) {
        return a[t];
      }
      switch(t) {
        case "WEBGL_depth_texture":
          var d = g.getExtension("WEBGL_depth_texture") || g.getExtension("MOZ_WEBGL_depth_texture") || g.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          d = g.getExtension("EXT_texture_filter_anisotropic") || g.getExtension("MOZ_EXT_texture_filter_anisotropic") || g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          d = g.getExtension("WEBGL_compressed_texture_s3tc") || g.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          d = g.getExtension("WEBGL_compressed_texture_pvrtc") || g.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          d = g.getExtension(t);
      }
      null === d && console.warn("THREE.WebGLRenderer: " + t + " extension not supported.");
      return a[t] = d;
    }};
  }
  function Od(g, a, d) {
    function t(g) {
      var b = g.target;
      g = c.get(b);
      null !== g.index && a.remove(g.index);
      for (var l in g.attributes) {
        a.remove(g.attributes[l]);
      }
      b.removeEventListener("dispose", t);
      c.delete(b);
      if (l = e.get(g)) {
        a.remove(l), e.delete(g);
      }
      d.memory.geometries--;
    }
    function b(g) {
      var t = [], d = g.index, b = g.attributes.position;
      if (null !== d) {
        var c = d.array;
        d = d.version;
        b = 0;
        for (var l = c.length; b < l; b += 3) {
          var f = c[b + 0], h = c[b + 1], G = c[b + 2];
          t.push(f, h, h, G, G, f);
        }
      } else {
        for (c = b.array, d = b.version, b = 0, l = c.length / 3 - 1; b < l; b += 3) {
          f = b + 0, h = b + 1, G = b + 2, t.push(f, h, h, G, G, f);
        }
      }
      t = new (65535 < W(t) ? aa : T)(t, 1);
      t.version = d;
      a.update(t, 34963);
      (c = e.get(g)) && a.remove(c);
      e.set(g, t);
    }
    var c = new WeakMap, e = new WeakMap;
    return {get:function(g, a) {
      var b = c.get(a);
      if (b) {
        return b;
      }
      a.addEventListener("dispose", t);
      a.isBufferGeometry ? b = a : a.isGeometry && (void 0 === a._bufferGeometry && (a._bufferGeometry = (new J).setFromObject(g)), b = a._bufferGeometry);
      c.set(a, b);
      d.memory.geometries++;
      return b;
    }, update:function(g) {
      var t = g.index, d = g.attributes;
      null !== t && a.update(t, 34963);
      for (var b in d) {
        a.update(d[b], 34962);
      }
      g = g.morphAttributes;
      for (b in g) {
        t = g[b];
        d = 0;
        for (var c = t.length; d < c; d++) {
          a.update(t[d], 34962);
        }
      }
    }, getWireframeAttribute:function(g) {
      var a = e.get(g);
      if (a) {
        var t = g.index;
        null !== t && a.version < t.version && b(g);
      } else {
        b(g);
      }
      return e.get(g);
    }};
  }
  function lg(g, a, d, b) {
    var t = b.isWebGL2, c, e, l;
    this.setMode = function(g) {
      c = g;
    };
    this.setIndex = function(g) {
      e = g.type;
      l = g.bytesPerElement;
    };
    this.render = function(a, t) {
      g.drawElements(c, t, e, a * l);
      d.update(t, c);
    };
    this.renderInstances = function(b, f, h, G) {
      if (0 !== G) {
        if (t) {
          b = g;
          var p = "drawElementsInstanced";
        } else {
          if (b = a.get("ANGLE_instanced_arrays"), p = "drawElementsInstancedANGLE", null === b) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        b[p](c, h, e, f * l, G);
        d.update(h, c, G);
      }
    };
  }
  function Pd(g) {
    var a = {frame:0, calls:0, triangles:0, points:0, lines:0};
    return {memory:{geometries:0, textures:0}, render:a, programs:null, autoReset:!0, reset:function() {
      a.frame++;
      a.calls = 0;
      a.triangles = 0;
      a.points = 0;
      a.lines = 0;
    }, update:function(g, t, d) {
      d = d || 1;
      a.calls++;
      switch(t) {
        case 4:
          a.triangles += g / 3 * d;
          break;
        case 5:
        case 6:
          a.triangles += d * (g - 2);
          break;
        case 1:
          a.lines += g / 2 * d;
          break;
        case 3:
          a.lines += d * (g - 1);
          break;
        case 2:
          a.lines += d * g;
          break;
        case 0:
          a.points += d * g;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", t);
      }
    }};
  }
  function Tc(g, a) {
    return Math.abs(a[1]) - Math.abs(g[1]);
  }
  function Eb(g) {
    var a = {}, d = new Float32Array(8);
    return {update:function(t, b, c, e) {
      var l = t.morphTargetInfluences, f = l.length;
      t = a[b.id];
      if (void 0 === t) {
        t = [];
        for (var h = 0; h < f; h++) {
          t[h] = [h, 0];
        }
        a[b.id] = t;
      }
      var G = c.morphTargets && b.morphAttributes.position;
      c = c.morphNormals && b.morphAttributes.normal;
      for (h = 0; h < f; h++) {
        var p = t[h];
        0 !== p[1] && (G && b.deleteAttribute("morphTarget" + h), c && b.deleteAttribute("morphNormal" + h));
      }
      for (h = 0; h < f; h++) {
        p = t[h], p[0] = h, p[1] = l[h];
      }
      t.sort(Tc);
      for (h = l = 0; 8 > h; h++) {
        if (p = t[h]) {
          if (f = p[0], p = p[1]) {
            G && b.setAttribute("morphTarget" + h, G[f]);
            c && b.setAttribute("morphNormal" + h, c[f]);
            d[h] = p;
            l += p;
            continue;
          }
        }
        d[h] = 0;
      }
      b = b.morphTargetsRelative ? 1 : 1 - l;
      e.getUniforms().setValue(g, "morphTargetBaseInfluence", b);
      e.getUniforms().setValue(g, "morphTargetInfluences", d);
    }};
  }
  function Ue(g, a, d, b) {
    var t = {};
    return {update:function(g) {
      var c = b.render.frame, e = g.geometry, l = a.get(g, e);
      t[l.id] !== c && (e.isGeometry && l.updateFromObject(g), a.update(l), t[l.id] = c);
      g.isInstancedMesh && d.update(g.instanceMatrix, 34962);
      return l;
    }, dispose:function() {
      t = {};
    }};
  }
  function Sa(g, a, d, b, c, e, l, f, p, m) {
    g = void 0 !== g ? g : [];
    h.call(this, g, void 0 !== a ? a : 301, d, b, c, e, void 0 !== l ? l : 1022, f, p, m);
    this.flipY = !1;
  }
  function Wa(g, a, d, b) {
    h.call(this, null);
    this.image = {data:g || null, width:a || 1, height:d || 1, depth:b || 1};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
    this.needsUpdate = !0;
  }
  function Fb(g, a, d, b) {
    h.call(this, null);
    this.image = {data:g || null, width:a || 1, height:d || 1, depth:b || 1};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
    this.needsUpdate = !0;
  }
  function Xa(g, a, d) {
    var t = g[0];
    if (0 >= t || 0 < t) {
      return g;
    }
    var b = a * d, c = rh[b];
    void 0 === c && (c = new Float32Array(b), rh[b] = c);
    if (0 !== a) {
      for (t.toArray(c, 0), t = 1, b = 0; t !== a; ++t) {
        b += d, g[t].toArray(c, b);
      }
    }
    return c;
  }
  function La(g, a) {
    if (g.length !== a.length) {
      return !1;
    }
    for (var t = 0, d = g.length; t < d; t++) {
      if (g[t] !== a[t]) {
        return !1;
      }
    }
    return !0;
  }
  function Ma(g, a) {
    for (var t = 0, d = a.length; t < d; t++) {
      g[t] = a[t];
    }
  }
  function Gb(g, a) {
    var t = sh[a];
    void 0 === t && (t = new Int32Array(a), sh[a] = t);
    for (var d = 0; d !== a; ++d) {
      t[d] = g.allocateTextureUnit();
    }
    return t;
  }
  function Hb(g, a) {
    var t = this.cache;
    t[0] !== a && (g.uniform1f(this.addr, a), t[0] = a);
  }
  function Xb(g, a) {
    var t = this.cache;
    if (void 0 !== a.x) {
      if (t[0] !== a.x || t[1] !== a.y) {
        g.uniform2f(this.addr, a.x, a.y), t[0] = a.x, t[1] = a.y;
      }
    } else {
      La(t, a) || (g.uniform2fv(this.addr, a), Ma(t, a));
    }
  }
  function Ve(g, a) {
    var t = this.cache;
    if (void 0 !== a.x) {
      if (t[0] !== a.x || t[1] !== a.y || t[2] !== a.z) {
        g.uniform3f(this.addr, a.x, a.y, a.z), t[0] = a.x, t[1] = a.y, t[2] = a.z;
      }
    } else {
      if (void 0 !== a.r) {
        if (t[0] !== a.r || t[1] !== a.g || t[2] !== a.b) {
          g.uniform3f(this.addr, a.r, a.g, a.b), t[0] = a.r, t[1] = a.g, t[2] = a.b;
        }
      } else {
        La(t, a) || (g.uniform3fv(this.addr, a), Ma(t, a));
      }
    }
  }
  function Ib(g, a) {
    var t = this.cache;
    if (void 0 !== a.x) {
      if (t[0] !== a.x || t[1] !== a.y || t[2] !== a.z || t[3] !== a.w) {
        g.uniform4f(this.addr, a.x, a.y, a.z, a.w), t[0] = a.x, t[1] = a.y, t[2] = a.z, t[3] = a.w;
      }
    } else {
      La(t, a) || (g.uniform4fv(this.addr, a), Ma(t, a));
    }
  }
  function Yb(g, a) {
    var t = this.cache, d = a.elements;
    void 0 === d ? La(t, a) || (g.uniformMatrix2fv(this.addr, !1, a), Ma(t, a)) : La(t, d) || (th.set(d), g.uniformMatrix2fv(this.addr, !1, th), Ma(t, d));
  }
  function Jb(g, a) {
    var t = this.cache, d = a.elements;
    void 0 === d ? La(t, a) || (g.uniformMatrix3fv(this.addr, !1, a), Ma(t, a)) : La(t, d) || (uh.set(d), g.uniformMatrix3fv(this.addr, !1, uh), Ma(t, d));
  }
  function Ca(g, a) {
    var t = this.cache, d = a.elements;
    void 0 === d ? La(t, a) || (g.uniformMatrix4fv(this.addr, !1, a), Ma(t, a)) : La(t, d) || (vh.set(d), g.uniformMatrix4fv(this.addr, !1, vh), Ma(t, d));
  }
  function Uc(g, a, d) {
    var t = this.cache, b = d.allocateTextureUnit();
    t[0] !== b && (g.uniform1i(this.addr, b), t[0] = b);
    d.safeSetTexture2D(a || wh, b);
  }
  function sc(g, a, d) {
    var t = this.cache, b = d.allocateTextureUnit();
    t[0] !== b && (g.uniform1i(this.addr, b), t[0] = b);
    d.setTexture2DArray(a || Zi, b);
  }
  function Zb(g, a, d) {
    var t = this.cache, b = d.allocateTextureUnit();
    t[0] !== b && (g.uniform1i(this.addr, b), t[0] = b);
    d.setTexture3D(a || $i, b);
  }
  function Ya(g, a, d) {
    var t = this.cache, b = d.allocateTextureUnit();
    t[0] !== b && (g.uniform1i(this.addr, b), t[0] = b);
    d.safeSetTextureCube(a || xh, b);
  }
  function sb(g, a) {
    var t = this.cache;
    t[0] !== a && (g.uniform1i(this.addr, a), t[0] = a);
  }
  function Ea(g, a) {
    var t = this.cache;
    La(t, a) || (g.uniform2iv(this.addr, a), Ma(t, a));
  }
  function Fa(g, a) {
    var t = this.cache;
    La(t, a) || (g.uniform3iv(this.addr, a), Ma(t, a));
  }
  function Qd(g, a) {
    var t = this.cache;
    La(t, a) || (g.uniform4iv(this.addr, a), Ma(t, a));
  }
  function $b(g) {
    switch(g) {
      case 5126:
        return Hb;
      case 35664:
        return Xb;
      case 35665:
        return Ve;
      case 35666:
        return Ib;
      case 35674:
        return Yb;
      case 35675:
        return Jb;
      case 35676:
        return Ca;
      case 35678:
      case 36198:
        return Uc;
      case 35679:
        return Zb;
      case 35680:
        return Ya;
      case 36289:
        return sc;
      case 5124:
      case 35670:
        return sb;
      case 35667:
      case 35671:
        return Ea;
      case 35668:
      case 35672:
        return Fa;
      case 35669:
      case 35673:
        return Qd;
    }
  }
  function Za(g, a) {
    g.uniform1fv(this.addr, a);
  }
  function na(g, a) {
    g.uniform1iv(this.addr, a);
  }
  function Vc(g, a) {
    g.uniform2iv(this.addr, a);
  }
  function ac(g, a) {
    g.uniform3iv(this.addr, a);
  }
  function We(g, a) {
    g.uniform4iv(this.addr, a);
  }
  function tb(g, a) {
    a = Xa(a, this.size, 2);
    g.uniform2fv(this.addr, a);
  }
  function Xe(g, a) {
    a = Xa(a, this.size, 3);
    g.uniform3fv(this.addr, a);
  }
  function bc(g, a) {
    a = Xa(a, this.size, 4);
    g.uniform4fv(this.addr, a);
  }
  function Rd(g, a) {
    a = Xa(a, this.size, 4);
    g.uniformMatrix2fv(this.addr, !1, a);
  }
  function aj(g, a) {
    a = Xa(a, this.size, 9);
    g.uniformMatrix3fv(this.addr, !1, a);
  }
  function bj(g, a) {
    a = Xa(a, this.size, 16);
    g.uniformMatrix4fv(this.addr, !1, a);
  }
  function cj(g, a, d) {
    var t = a.length, b = Gb(d, t);
    g.uniform1iv(this.addr, b);
    for (g = 0; g !== t; ++g) {
      d.safeSetTexture2D(a[g] || wh, b[g]);
    }
  }
  function dj(g, a, d) {
    var t = a.length, b = Gb(d, t);
    g.uniform1iv(this.addr, b);
    for (g = 0; g !== t; ++g) {
      d.safeSetTextureCube(a[g] || xh, b[g]);
    }
  }
  function ej(g) {
    switch(g) {
      case 5126:
        return Za;
      case 35664:
        return tb;
      case 35665:
        return Xe;
      case 35666:
        return bc;
      case 35674:
        return Rd;
      case 35675:
        return aj;
      case 35676:
        return bj;
      case 35678:
        return cj;
      case 35680:
        return dj;
      case 5124:
      case 35670:
        return na;
      case 35667:
      case 35671:
        return Vc;
      case 35668:
      case 35672:
        return ac;
      case 35669:
      case 35673:
        return We;
    }
  }
  function fj(g, a, d) {
    this.id = g;
    this.addr = d;
    this.cache = [];
    this.setValue = $b(a.type);
  }
  function yh(g, a, d) {
    this.id = g;
    this.addr = d;
    this.cache = [];
    this.size = a.size;
    this.setValue = ej(a.type);
  }
  function zh(g) {
    this.id = g;
    this.seq = [];
    this.map = {};
  }
  function cc(g, a) {
    this.seq = [];
    this.map = {};
    for (var t = g.getProgramParameter(a, 35718), d = 0; d < t; ++d) {
      var b = g.getActiveUniform(a, d), c = g.getUniformLocation(a, b.name), e = this, l = b.name, f = l.length;
      for (mg.lastIndex = 0;;) {
        var h = mg.exec(l), p = mg.lastIndex, m = h[1], n = h[3];
        "]" === h[2] && (m |= 0);
        if (void 0 === n || "[" === n && p + 2 === f) {
          l = e;
          b = void 0 === n ? new fj(m, b, c) : new yh(m, b, c);
          l.seq.push(b);
          l.map[b.id] = b;
          break;
        } else {
          n = e.map[m], void 0 === n && (n = new zh(m), m = e, e = n, m.seq.push(e), m.map[e.id] = e), e = n;
        }
      }
    }
  }
  function Ah(g, a, d) {
    a = g.createShader(a);
    g.shaderSource(a, d);
    g.compileShader(a);
    return a;
  }
  function Bh(g) {
    switch(g) {
      case 3E3:
        return ["Linear", "( value )"];
      case 3001:
        return ["sRGB", "( value )"];
      case 3002:
        return ["RGBE", "( value )"];
      case 3004:
        return ["RGBM", "( value, 7.0 )"];
      case 3005:
        return ["RGBM", "( value, 16.0 )"];
      case 3006:
        return ["RGBD", "( value, 256.0 )"];
      case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      case 3003:
        return ["LogLuv", "( value )"];
      default:
        throw Error("unsupported encoding: " + g);
    }
  }
  function Ch(g, a, d) {
    var t = g.getShaderParameter(a, 35713), b = g.getShaderInfoLog(a).trim();
    if (t && "" === b) {
      return "";
    }
    g = g.getShaderSource(a).split("\n");
    for (a = 0; a < g.length; a++) {
      g[a] = a + 1 + ": " + g[a];
    }
    g = g.join("\n");
    return "THREE.WebGLShader: gl.getShaderInfoLog() " + d + "\n" + b + g;
  }
  function Ye(g, a) {
    a = Bh(a);
    return "vec4 " + g + "( vec4 value ) { return " + a[0] + "ToLinear" + a[1] + "; }";
  }
  function gj(g, a) {
    a = Bh(a);
    return "vec4 " + g + "( vec4 value ) { return LinearTo" + a[0] + a[1] + "; }";
  }
  function hj(g, a) {
    switch(a) {
      case 1:
        a = "Linear";
        break;
      case 2:
        a = "Reinhard";
        break;
      case 3:
        a = "Uncharted2";
        break;
      case 4:
        a = "OptimizedCineon";
        break;
      case 5:
        a = "ACESFilmic";
        break;
      default:
        throw Error("unsupported toneMapping: " + a);
    }
    return "vec3 " + g + "( vec3 color ) { return " + a + "ToneMapping( color ); }";
  }
  function ij(g, a, d) {
    g = g || {};
    return [g.derivatives || a.envMapCubeUV || a.bumpMap || a.tangentSpaceNormalMap || a.clearcoatNormalMap || a.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (g.fragDepth || a.logarithmicDepthBuffer) && d.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", g.drawBuffers && d.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (g.shaderTextureLOD || a.envMap) && d.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : 
    ""].filter(Sd).join("\n");
  }
  function jj(g) {
    var a = [], d;
    for (d in g) {
      var b = g[d];
      !1 !== b && a.push("#define " + d + " " + b);
    }
    return a.join("\n");
  }
  function Sd(g) {
    return "" !== g;
  }
  function Dh(g, a) {
    return g.replace(/NUM_DIR_LIGHTS/g, a.numDirLights).replace(/NUM_SPOT_LIGHTS/g, a.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, a.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, a.numPointLights).replace(/NUM_HEMI_LIGHTS/g, a.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, a.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, a.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, a.numPointLightShadows);
  }
  function Eh(g, a) {
    return g.replace(/NUM_CLIPPING_PLANES/g, a.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, a.numClippingPlanes - a.numClipIntersection);
  }
  function ng(g, a) {
    g = ia[a];
    if (void 0 === g) {
      throw Error("Can not resolve #include <" + a + ">");
    }
    return g.replace(og, ng);
  }
  function Fh(g, a, d, b) {
    g = "";
    for (a = parseInt(a); a < parseInt(d); a++) {
      g += b.replace(/\[ i \]/g, "[ " + a + " ]").replace(/UNROLLED_LOOP_INDEX/g, a);
    }
    return g;
  }
  function Gh(g) {
    var a = "precision " + g.precision + " float;\nprecision " + g.precision + " int;";
    "highp" === g.precision ? a += "\n#define HIGH_PRECISION" : "mediump" === g.precision ? a += "\n#define MEDIUM_PRECISION" : "lowp" === g.precision && (a += "\n#define LOW_PRECISION");
    return a;
  }
  function kj(g) {
    var a = "SHADOWMAP_TYPE_BASIC";
    1 === g.shadowMapType ? a = "SHADOWMAP_TYPE_PCF" : 2 === g.shadowMapType ? a = "SHADOWMAP_TYPE_PCF_SOFT" : 3 === g.shadowMapType && (a = "SHADOWMAP_TYPE_VSM");
    return a;
  }
  function lj(g) {
    var a = "ENVMAP_TYPE_CUBE";
    if (g.envMap) {
      switch(g.envMapMode) {
        case 301:
        case 302:
          a = "ENVMAP_TYPE_CUBE";
          break;
        case 306:
        case 307:
          a = "ENVMAP_TYPE_CUBE_UV";
          break;
        case 303:
        case 304:
          a = "ENVMAP_TYPE_EQUIREC";
          break;
        case 305:
          a = "ENVMAP_TYPE_SPHERE";
      }
    }
    return a;
  }
  function mj(g) {
    var a = "ENVMAP_MODE_REFLECTION";
    if (g.envMap) {
      switch(g.envMapMode) {
        case 302:
        case 304:
          a = "ENVMAP_MODE_REFRACTION";
      }
    }
    return a;
  }
  function nj(g) {
    var a = "ENVMAP_BLENDING_MULTIPLY";
    if (g.envMap) {
      switch(g.combine) {
        case 0:
          a = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case 1:
          a = "ENVMAP_BLENDING_MIX";
          break;
        case 2:
          a = "ENVMAP_BLENDING_ADD";
      }
    }
    return a;
  }
  function oj(g, a, d, b, c, e) {
    var t = g.getContext(), l = b.defines, f = c.vertexShader, h = c.fragmentShader, p = kj(e), G = lj(e), m = mj(e), n = nj(e), k = 0 < g.gammaFactor ? g.gammaFactor : 1, q = e.isWebGL2 ? "" : ij(b.extensions, e, a), r = jj(l), u = t.createProgram(), v = e.numMultiviewViews;
    b.isRawShaderMaterial ? (l = [r].filter(Sd).join("\n"), 0 < l.length && (l += "\n"), a = [q, r].filter(Sd).join("\n"), 0 < a.length && (a += "\n")) : (l = [Gh(e), "#define SHADER_NAME " + c.name, r, e.instancing ? "#define USE_INSTANCING" : "", e.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + k, "#define MAX_BONES " + e.maxBones, e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.map ? "#define USE_MAP" : "", e.envMap ? 
    "#define USE_ENVMAP" : "", e.envMap ? "#define " + m : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMap && e.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", e.normalMap && e.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.displacementMap && 
    e.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.vertexTangents ? "#define USE_TANGENT" : "", e.vertexColors ? "#define USE_COLOR" : "", e.vertexUvs ? "#define USE_UV" : "", e.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", e.flatShading ? "#define FLAT_SHADED" : "", e.skinning ? "#define USE_SKINNING" : 
    "", e.useVertexTexture ? "#define BONE_TEXTURE" : "", e.morphTargets ? "#define USE_MORPHTARGETS" : "", e.morphNormals && !1 === e.flatShading ? "#define USE_MORPHNORMALS" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + p : "", e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.logarithmicDepthBuffer && 
    (e.isWebGL2 || a.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", " attribute mat4 instanceMatrix;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", 
    "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", 
    "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Sd).join("\n"), a = [q, Gh(e), "#define SHADER_NAME " + c.name, r, e.alphaTest ? "#define ALPHATEST " + e.alphaTest + (e.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + k, e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.map ? "#define USE_MAP" : "", e.matcap ? "#define USE_MATCAP" : 
    "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + G : "", e.envMap ? "#define " + m : "", e.envMap ? "#define " + n : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMap && e.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", e.normalMap && e.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : 
    "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.sheen ? "#define USE_SHEEN" : "", e.vertexTangents ? "#define USE_TANGENT" : "", e.vertexColors ? "#define USE_COLOR" : "", e.vertexUvs ? "#define USE_UV" : "", e.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", e.gradientMap ? "#define USE_GRADIENTMAP" : 
    "", e.flatShading ? "#define FLAT_SHADED" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + p : "", e.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", e.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.logarithmicDepthBuffer && (e.isWebGL2 || a.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : 
    "", (b.extensions && b.extensions.shaderTextureLOD || e.envMap) && (e.isWebGL2 || a.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", 0 !== e.toneMapping ? "#define TONE_MAPPING" : "", 0 !== e.toneMapping ? ia.tonemapping_pars_fragment : "", 0 !== e.toneMapping ? hj("toneMapping", e.toneMapping) : "", e.dithering ? "#define DITHERING" : "", e.outputEncoding || e.mapEncoding || e.matcapEncoding || 
    e.envMapEncoding || e.emissiveMapEncoding ? ia.encodings_pars_fragment : "", e.mapEncoding ? Ye("mapTexelToLinear", e.mapEncoding) : "", e.matcapEncoding ? Ye("matcapTexelToLinear", e.matcapEncoding) : "", e.envMapEncoding ? Ye("envMapTexelToLinear", e.envMapEncoding) : "", e.emissiveMapEncoding ? Ye("emissiveMapTexelToLinear", e.emissiveMapEncoding) : "", e.outputEncoding ? gj("linearToOutputTexel", e.outputEncoding) : "", e.depthPacking ? "#define DEPTH_PACKING " + b.depthPacking : "", "\n"].filter(Sd).join("\n"));
    f = f.replace(og, ng);
    f = Dh(f, e);
    f = Eh(f, e);
    h = h.replace(og, ng);
    h = Dh(h, e);
    h = Eh(h, e);
    f = f.replace(Hh, Fh);
    h = h.replace(Hh, Fh);
    e.isWebGL2 && !b.isRawShaderMaterial && (p = !1, G = /^\s*#version\s+300\s+es\s*\n/, b.isShaderMaterial && null !== f.match(G) && null !== h.match(G) && (p = !0, f = f.replace(G, ""), h = h.replace(G, "")), l = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + l, a = ["#version 300 es\n\n#define varying in", p ? "" : "out highp vec4 pc_fragColor;", p ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n") + 
    "\n" + a, 0 < v && (l = l.replace("#version 300 es\n", ["#version 300 es\n\n#extension GL_OVR_multiview2 : require", "layout(num_views = " + v + ") in;", "#define VIEW_ID gl_ViewID_OVR"].join("\n")), l = l.replace("uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;", ["uniform mat4 modelViewMatrices[" + v + "];", "uniform mat4 projectionMatrices[" + v + "];", "uniform mat4 viewMatrices[" + v + "];", "uniform mat3 normalMatrices[" + 
    v + "];", "#define modelViewMatrix modelViewMatrices[VIEW_ID]\n#define projectionMatrix projectionMatrices[VIEW_ID]\n#define viewMatrix viewMatrices[VIEW_ID]\n#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")), a = a.replace("#version 300 es\n", "#version 300 es\n\n#extension GL_OVR_multiview2 : require\n#define VIEW_ID gl_ViewID_OVR"), a = a.replace("uniform mat4 viewMatrix;", ["uniform mat4 viewMatrices[" + v + "];", "#define viewMatrix viewMatrices[VIEW_ID]"].join("\n"))));
    h = a + h;
    f = Ah(t, 35633, l + f);
    h = Ah(t, 35632, h);
    t.attachShader(u, f);
    t.attachShader(u, h);
    void 0 !== b.index0AttributeName ? t.bindAttribLocation(u, 0, b.index0AttributeName) : !0 === e.morphTargets && t.bindAttribLocation(u, 0, "position");
    t.linkProgram(u);
    if (g.debug.checkShaderErrors) {
      g = t.getProgramInfoLog(u).trim();
      e = t.getShaderInfoLog(f).trim();
      p = t.getShaderInfoLog(h).trim();
      m = G = !0;
      if (!1 === t.getProgramParameter(u, 35714)) {
        G = !1, n = Ch(t, f, "vertex"), k = Ch(t, h, "fragment"), console.error("THREE.WebGLProgram: shader error: ", t.getError(), "35715", t.getProgramParameter(u, 35715), "gl.getProgramInfoLog", g, n, k);
      } else {
        if ("" !== g) {
          console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", g);
        } else {
          if ("" === e || "" === p) {
            m = !1;
          }
        }
      }
      m && (this.diagnostics = {runnable:G, material:b, programLog:g, vertexShader:{log:e, prefix:l}, fragmentShader:{log:p, prefix:a}});
    }
    t.deleteShader(f);
    t.deleteShader(h);
    var X;
    this.getUniforms = function() {
      void 0 === X && (X = new cc(t, u));
      return X;
    };
    var w;
    this.getAttributes = function() {
      if (void 0 === w) {
        for (var g = {}, a = t.getProgramParameter(u, 35721), d = 0; d < a; d++) {
          var b = t.getActiveAttrib(u, d).name;
          g[b] = t.getAttribLocation(u, b);
        }
        w = g;
      }
      return w;
    };
    this.destroy = function() {
      t.deleteProgram(u);
      this.program = void 0;
    };
    this.name = c.name;
    this.id = pj++;
    this.cacheKey = d;
    this.usedTimes = 1;
    this.program = u;
    this.vertexShader = f;
    this.fragmentShader = h;
    this.numMultiviewViews = v;
    return this;
  }
  function qj(g, a, d) {
    function t(g, a) {
      if (g) {
        g.isTexture ? t = g.encoding : g.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), t = g.texture.encoding);
      } else {
        var t = 3E3;
      }
      3E3 === t && a && (t = 3007);
      return t;
    }
    var b = [], c = d.isWebGL2, e = d.logarithmicDepthBuffer, l = d.floatVertexTextures, f = d.precision, h = d.maxVertexUniforms, p = d.vertexTextures, G = {MeshDepthMaterial:"depth", MeshDistanceMaterial:"distanceRGBA", MeshNormalMaterial:"normal", MeshBasicMaterial:"basic", MeshLambertMaterial:"lambert", MeshPhongMaterial:"phong", MeshToonMaterial:"phong", MeshStandardMaterial:"physical", MeshPhysicalMaterial:"physical", MeshMatcapMaterial:"matcap", LineBasicMaterial:"basic", LineDashedMaterial:"dashed", 
    PointsMaterial:"points", ShadowMaterial:"shadow", SpriteMaterial:"sprite"}, m = "precision isWebGL2 supportsVertexTextures outputEncoding instancing numMultiviewViews map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding envMapCubeUV lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap tangentSpaceNormalMap clearcoatNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents vertexUvs uvsVertexOnly fog useFog fogExp2 flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights numDirLightShadows numPointLightShadows numSpotLightShadows shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering sheen".split(" ");
    this.getParameters = function(a, b, m, n, k, q, u) {
      var r = G[a.type];
      if (u.isSkinnedMesh) {
        var v = u.skeleton.bones;
        if (l) {
          v = 1024;
        } else {
          var X = Math.min(Math.floor((h - 20) / 4), v.length);
          X < v.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + v.length + " bones. This GPU supports " + X + "."), v = 0) : v = X;
        }
      } else {
        v = 0;
      }
      null !== a.precision && (f = d.getMaxPrecision(a.precision), f !== a.precision && console.warn("THREE.WebGLProgram.getParameters:", a.precision, "not supported, using", f, "instead."));
      X = g.getRenderTarget();
      return {isWebGL2:c, shaderID:r, precision:f, instancing:!0 === u.isInstancedMesh, supportsVertexTextures:p, numMultiviewViews:X && X.isWebGLMultiviewRenderTarget ? X.numViews : 0, outputEncoding:t(X ? X.texture : null, g.gammaOutput), map:!!a.map, mapEncoding:t(a.map, g.gammaInput), matcap:!!a.matcap, matcapEncoding:t(a.matcap, g.gammaInput), envMap:!!a.envMap, envMapMode:a.envMap && a.envMap.mapping, envMapEncoding:t(a.envMap, g.gammaInput), envMapCubeUV:!!a.envMap && (306 === a.envMap.mapping || 
      307 === a.envMap.mapping), lightMap:!!a.lightMap, aoMap:!!a.aoMap, emissiveMap:!!a.emissiveMap, emissiveMapEncoding:t(a.emissiveMap, g.gammaInput), bumpMap:!!a.bumpMap, normalMap:!!a.normalMap, objectSpaceNormalMap:1 === a.normalMapType, tangentSpaceNormalMap:0 === a.normalMapType, clearcoatNormalMap:!!a.clearcoatNormalMap, displacementMap:!!a.displacementMap, roughnessMap:!!a.roughnessMap, metalnessMap:!!a.metalnessMap, specularMap:!!a.specularMap, alphaMap:!!a.alphaMap, gradientMap:!!a.gradientMap, 
      sheen:!!a.sheen, combine:a.combine, vertexTangents:a.normalMap && a.vertexTangents, vertexColors:a.vertexColors, vertexUvs:!!a.map || !!a.bumpMap || !!a.normalMap || !!a.specularMap || !!a.alphaMap || !!a.emissiveMap || !!a.roughnessMap || !!a.metalnessMap || !!a.clearcoatNormalMap || !!a.displacementMap, uvsVertexOnly:!(a.map || a.bumpMap || a.normalMap || a.specularMap || a.alphaMap || a.emissiveMap || a.roughnessMap || a.metalnessMap || a.clearcoatNormalMap) && !!a.displacementMap, fog:!!n, 
      useFog:a.fog, fogExp2:n && n.isFogExp2, flatShading:a.flatShading, sizeAttenuation:a.sizeAttenuation, logarithmicDepthBuffer:e, skinning:a.skinning && 0 < v, maxBones:v, useVertexTexture:l, morphTargets:a.morphTargets, morphNormals:a.morphNormals, maxMorphTargets:g.maxMorphTargets, maxMorphNormals:g.maxMorphNormals, numDirLights:b.directional.length, numPointLights:b.point.length, numSpotLights:b.spot.length, numRectAreaLights:b.rectArea.length, numHemiLights:b.hemi.length, numDirLightShadows:b.directionalShadowMap.length, 
      numPointLightShadows:b.pointShadowMap.length, numSpotLightShadows:b.spotShadowMap.length, numClippingPlanes:k, numClipIntersection:q, dithering:a.dithering, shadowMapEnabled:g.shadowMap.enabled && 0 < m.length, shadowMapType:g.shadowMap.type, toneMapping:a.toneMapped ? g.toneMapping : 0, physicallyCorrectLights:g.physicallyCorrectLights, premultipliedAlpha:a.premultipliedAlpha, alphaTest:a.alphaTest, doubleSided:2 === a.side, flipSided:1 === a.side, depthPacking:void 0 !== a.depthPacking ? 
      a.depthPacking : !1};
    };
    this.getProgramCacheKey = function(a, t) {
      var d = [];
      t.shaderID ? d.push(t.shaderID) : (d.push(a.fragmentShader), d.push(a.vertexShader));
      if (void 0 !== a.defines) {
        for (var b in a.defines) {
          d.push(b), d.push(a.defines[b]);
        }
      }
      for (b = 0; b < m.length; b++) {
        d.push(t[m[b]]);
      }
      d.push(a.onBeforeCompile.toString());
      d.push(g.gammaOutput);
      d.push(g.gammaFactor);
      return d.join();
    };
    this.acquireProgram = function(t, d, c, e) {
      for (var l, f = 0, h = b.length; f < h; f++) {
        var p = b[f];
        if (p.cacheKey === e) {
          l = p;
          ++l.usedTimes;
          break;
        }
      }
      void 0 === l && (l = new oj(g, a, e, t, d, c), b.push(l));
      return l;
    };
    this.releaseProgram = function(g) {
      if (0 === --g.usedTimes) {
        var a = b.indexOf(g);
        b[a] = b[b.length - 1];
        b.pop();
        g.destroy();
      }
    };
    this.programs = b;
  }
  function rj() {
    var g = new WeakMap;
    return {get:function(a) {
      var t = g.get(a);
      void 0 === t && (t = {}, g.set(a, t));
      return t;
    }, remove:function(a) {
      g.delete(a);
    }, update:function(a, d, b) {
      g.get(a)[d] = b;
    }, dispose:function() {
      g = new WeakMap;
    }};
  }
  function sj(g, a) {
    return g.groupOrder !== a.groupOrder ? g.groupOrder - a.groupOrder : g.renderOrder !== a.renderOrder ? g.renderOrder - a.renderOrder : g.program !== a.program ? g.program.id - a.program.id : g.material.id !== a.material.id ? g.material.id - a.material.id : g.z !== a.z ? g.z - a.z : g.id - a.id;
  }
  function tj(g, a) {
    return g.groupOrder !== a.groupOrder ? g.groupOrder - a.groupOrder : g.renderOrder !== a.renderOrder ? g.renderOrder - a.renderOrder : g.z !== a.z ? a.z - g.z : g.id - a.id;
  }
  function Ih() {
    function g(g, t, b, c, l, f) {
      var h = a[d];
      void 0 === h ? (h = {id:g.id, object:g, geometry:t, material:b, program:b.program || e, groupOrder:c, renderOrder:g.renderOrder, z:l, group:f}, a[d] = h) : (h.id = g.id, h.object = g, h.geometry = t, h.material = b, h.program = b.program || e, h.groupOrder = c, h.renderOrder = g.renderOrder, h.z = l, h.group = f);
      d++;
      return h;
    }
    var a = [], d = 0, b = [], c = [], e = {id:-1};
    return {opaque:b, transparent:c, init:function() {
      d = 0;
      b.length = 0;
      c.length = 0;
    }, push:function(a, t, d, e, l, f) {
      a = g(a, t, d, e, l, f);
      (!0 === d.transparent ? c : b).push(a);
    }, unshift:function(a, t, d, e, l, f) {
      a = g(a, t, d, e, l, f);
      (!0 === d.transparent ? c : b).unshift(a);
    }, sort:function() {
      1 < b.length && b.sort(sj);
      1 < c.length && c.sort(tj);
    }};
  }
  function uj() {
    function g(t) {
      t = t.target;
      t.removeEventListener("dispose", g);
      a.delete(t);
    }
    var a = new WeakMap;
    return {get:function(t, d) {
      var b = a.get(t);
      if (void 0 === b) {
        var c = new Ih;
        a.set(t, new WeakMap);
        a.get(t).set(d, c);
        t.addEventListener("dispose", g);
      } else {
        c = b.get(d), void 0 === c && (c = new Ih, b.set(d, c));
      }
      return c;
    }, dispose:function() {
      a = new WeakMap;
    }};
  }
  function vj() {
    var g = {};
    return {get:function(a) {
      if (void 0 !== g[a.id]) {
        return g[a.id];
      }
      switch(a.type) {
        case "DirectionalLight":
          var t = {direction:new e, color:new B, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "SpotLight":
          t = {position:new e, direction:new e, color:new B, distance:0, coneCos:0, penumbraCos:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "PointLight":
          t = {position:new e, color:new B, distance:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k, shadowCameraNear:1, shadowCameraFar:1E3};
          break;
        case "HemisphereLight":
          t = {direction:new e, skyColor:new B, groundColor:new B};
          break;
        case "RectAreaLight":
          t = {color:new B, position:new e, halfWidth:new e, halfHeight:new e};
      }
      return g[a.id] = t;
    }};
  }
  function wj(g, a) {
    return (a.castShadow ? 1 : 0) - (g.castShadow ? 1 : 0);
  }
  function xj() {
    for (var g = new vj, a = {version:0, hash:{directionalLength:-1, pointLength:-1, spotLength:-1, rectAreaLength:-1, hemiLength:-1, numDirectionalShadows:-1, numPointShadows:-1, numSpotShadows:-1}, ambient:[0, 0, 0], probe:[], directional:[], directionalShadowMap:[], directionalShadowMatrix:[], spot:[], spotShadowMap:[], spotShadowMatrix:[], rectArea:[], point:[], pointShadowMap:[], pointShadowMatrix:[], hemi:[], numDirectionalShadows:-1, numPointShadows:-1, numSpotShadows:-1}, d = 0; 9 > d; d++) {
      a.probe.push(new e);
    }
    var b = new e, c = new m, l = new m;
    return {setup:function(t, d, e) {
      for (var f = 0, h = 0, p = 0, G = 0; 9 > G; G++) {
        a.probe[G].set(0, 0, 0);
      }
      var m = d = 0, n = 0, k = 0, q = 0, u = 0, r = 0, v = 0;
      e = e.matrixWorldInverse;
      t.sort(wj);
      G = 0;
      for (var X = t.length; G < X; G++) {
        var w = t[G], y = w.color, x = w.intensity, fa = w.distance, z = w.shadow && w.shadow.map ? w.shadow.map.texture : null;
        if (w.isAmbientLight) {
          f += y.r * x, h += y.g * x, p += y.b * x;
        } else {
          if (w.isLightProbe) {
            for (z = 0; 9 > z; z++) {
              a.probe[z].addScaledVector(w.sh.coefficients[z], x);
            }
          } else {
            if (w.isDirectionalLight) {
              var Y = g.get(w);
              Y.color.copy(w.color).multiplyScalar(w.intensity);
              Y.direction.setFromMatrixPosition(w.matrixWorld);
              b.setFromMatrixPosition(w.target.matrixWorld);
              Y.direction.sub(b);
              Y.direction.transformDirection(e);
              if (Y.shadow = w.castShadow) {
                x = w.shadow, Y.shadowBias = x.bias, Y.shadowRadius = x.radius, Y.shadowMapSize = x.mapSize, a.directionalShadowMap[d] = z, a.directionalShadowMatrix[d] = w.shadow.matrix, u++;
              }
              a.directional[d] = Y;
              d++;
            } else {
              if (w.isSpotLight) {
                Y = g.get(w);
                Y.position.setFromMatrixPosition(w.matrixWorld);
                Y.position.applyMatrix4(e);
                Y.color.copy(y).multiplyScalar(x);
                Y.distance = fa;
                Y.direction.setFromMatrixPosition(w.matrixWorld);
                b.setFromMatrixPosition(w.target.matrixWorld);
                Y.direction.sub(b);
                Y.direction.transformDirection(e);
                Y.coneCos = Math.cos(w.angle);
                Y.penumbraCos = Math.cos(w.angle * (1 - w.penumbra));
                Y.decay = w.decay;
                if (Y.shadow = w.castShadow) {
                  x = w.shadow, Y.shadowBias = x.bias, Y.shadowRadius = x.radius, Y.shadowMapSize = x.mapSize, a.spotShadowMap[n] = z, a.spotShadowMatrix[n] = w.shadow.matrix, v++;
                }
                a.spot[n] = Y;
                n++;
              } else {
                if (w.isRectAreaLight) {
                  Y = g.get(w), Y.color.copy(y).multiplyScalar(x), Y.position.setFromMatrixPosition(w.matrixWorld), Y.position.applyMatrix4(e), l.identity(), c.copy(w.matrixWorld), c.premultiply(e), l.extractRotation(c), Y.halfWidth.set(.5 * w.width, 0, 0), Y.halfHeight.set(0, .5 * w.height, 0), Y.halfWidth.applyMatrix4(l), Y.halfHeight.applyMatrix4(l), a.rectArea[k] = Y, k++;
                } else {
                  if (w.isPointLight) {
                    Y = g.get(w);
                    Y.position.setFromMatrixPosition(w.matrixWorld);
                    Y.position.applyMatrix4(e);
                    Y.color.copy(w.color).multiplyScalar(w.intensity);
                    Y.distance = w.distance;
                    Y.decay = w.decay;
                    if (Y.shadow = w.castShadow) {
                      x = w.shadow, Y.shadowBias = x.bias, Y.shadowRadius = x.radius, Y.shadowMapSize = x.mapSize, Y.shadowCameraNear = x.camera.near, Y.shadowCameraFar = x.camera.far, a.pointShadowMap[m] = z, a.pointShadowMatrix[m] = w.shadow.matrix, r++;
                    }
                    a.point[m] = Y;
                    m++;
                  } else {
                    w.isHemisphereLight && (Y = g.get(w), Y.direction.setFromMatrixPosition(w.matrixWorld), Y.direction.transformDirection(e), Y.direction.normalize(), Y.skyColor.copy(w.color).multiplyScalar(x), Y.groundColor.copy(w.groundColor).multiplyScalar(x), a.hemi[q] = Y, q++);
                  }
                }
              }
            }
          }
        }
      }
      a.ambient[0] = f;
      a.ambient[1] = h;
      a.ambient[2] = p;
      t = a.hash;
      if (t.directionalLength !== d || t.pointLength !== m || t.spotLength !== n || t.rectAreaLength !== k || t.hemiLength !== q || t.numDirectionalShadows !== u || t.numPointShadows !== r || t.numSpotShadows !== v) {
        a.directional.length = d, a.spot.length = n, a.rectArea.length = k, a.point.length = m, a.hemi.length = q, a.directionalShadowMap.length = u, a.pointShadowMap.length = r, a.spotShadowMap.length = v, a.directionalShadowMatrix.length = u, a.pointShadowMatrix.length = r, a.spotShadowMatrix.length = v, t.directionalLength = d, t.pointLength = m, t.spotLength = n, t.rectAreaLength = k, t.hemiLength = q, t.numDirectionalShadows = u, t.numPointShadows = r, t.numSpotShadows = v, a.version = yj++;
      }
    }, state:a};
  }
  function Jh() {
    var g = new xj, a = [], d = [];
    return {init:function() {
      a.length = 0;
      d.length = 0;
    }, state:{lightsArray:a, shadowsArray:d, lights:g}, setupLights:function(t) {
      g.setup(a, d, t);
    }, pushLight:function(g) {
      a.push(g);
    }, pushShadow:function(g) {
      d.push(g);
    }};
  }
  function zj() {
    function g(t) {
      t = t.target;
      t.removeEventListener("dispose", g);
      a.delete(t);
    }
    var a = new WeakMap;
    return {get:function(t, d) {
      if (!1 === a.has(t)) {
        var b = new Jh;
        a.set(t, new WeakMap);
        a.get(t).set(d, b);
        t.addEventListener("dispose", g);
      } else {
        !1 === a.get(t).has(d) ? (b = new Jh, a.get(t).set(d, b)) : b = a.get(t).get(d);
      }
      return b;
    }, dispose:function() {
      a = new WeakMap;
    }};
  }
  function dc(g) {
    H.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = 3200;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.fog = !1;
    this.setValues(g);
  }
  function ec(g) {
    H.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new e;
    this.nearDistance = 1;
    this.farDistance = 1E3;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.fog = !1;
    this.setValues(g);
  }
  function Kh(g, a, d) {
    function t(g, a, t) {
      t = g << 0 | a << 1 | t << 2;
      var d = G[t];
      void 0 === d && (d = new dc({depthPacking:3201, morphTargets:g, skinning:a}), G[t] = d);
      return d;
    }
    function b(g, a, t) {
      t = g << 0 | a << 1 | t << 2;
      var d = m[t];
      void 0 === d && (d = new ec({morphTargets:g, skinning:a}), m[t] = d);
      return d;
    }
    function c(a, d, c, e, l, f) {
      var h = a.geometry, p = t, G = a.customDepthMaterial;
      !0 === c.isPointLight && (p = b, G = a.customDistanceMaterial);
      void 0 === G ? (G = !1, !0 === d.morphTargets && (!0 === h.isBufferGeometry ? G = h.morphAttributes && h.morphAttributes.position && 0 < h.morphAttributes.position.length : !0 === h.isGeometry && (G = h.morphTargets && 0 < h.morphTargets.length)), h = !1, !0 === a.isSkinnedMesh && (!0 === d.skinning ? h = !0 : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", a)), a = p(G, h, !0 === a.isInstancedMesh)) : a = G;
      g.localClippingEnabled && !0 === d.clipShadows && 0 !== d.clippingPlanes.length && (G = a.uuid, p = d.uuid, h = n[G], void 0 === h && (h = {}, n[G] = h), G = h[p], void 0 === G && (G = a.clone(), h[p] = G), a = G);
      a.visible = d.visible;
      a.wireframe = d.wireframe;
      a.side = 3 === f ? null !== d.shadowSide ? d.shadowSide : d.side : null !== d.shadowSide ? d.shadowSide : u[d.side];
      a.clipShadows = d.clipShadows;
      a.clippingPlanes = d.clippingPlanes;
      a.clipIntersection = d.clipIntersection;
      a.wireframeLinewidth = d.wireframeLinewidth;
      a.linewidth = d.linewidth;
      !0 === c.isPointLight && !0 === a.isMeshDistanceMaterial && (a.referencePosition.setFromMatrixPosition(c.matrixWorld), a.nearDistance = e, a.farDistance = l);
      return a;
    }
    function e(t, d, b, f, h) {
      if (!1 !== t.visible) {
        if (t.layers.test(d.layers) && (t.isMesh || t.isLine || t.isPoints) && (t.castShadow || t.receiveShadow && 3 === h) && (!t.frustumCulled || l.intersectsObject(t))) {
          t.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, t.matrixWorld);
          var p = a.update(t), G = t.material;
          if (Array.isArray(G)) {
            for (var m = p.groups, n = 0, k = m.length; n < k; n++) {
              var q = m[n], u = G[q.materialIndex];
              u && u.visible && (u = c(t, u, f, b.near, b.far, h), g.renderBufferDirect(b, null, p, u, t, q));
            }
          } else {
            G.visible && (u = c(t, G, f, b.near, b.far, h), g.renderBufferDirect(b, null, p, u, t, null));
          }
        }
        t = t.children;
        p = 0;
        for (G = t.length; p < G; p++) {
          e(t[p], d, b, f, h);
        }
      }
    }
    var l = new Pa, f = new k, h = new k, p = new r, G = [], m = [], n = {}, u = {0:1, 1:0, 2:2}, v = new ja({defines:{SAMPLE_RATE:.25, HALF_SAMPLE_RATE:.125}, uniforms:{shadow_pass:{value:null}, resolution:{value:new k}, radius:{value:4}}, vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}"}), 
    w = v.clone();
    w.defines.HORIZONAL_PASS = 1;
    var y = new J;
    y.setAttribute("position", new K(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3));
    var x = new U(y, v), z = this;
    this.enabled = !1;
    this.autoUpdate = !0;
    this.needsUpdate = !1;
    this.type = 1;
    this.render = function(t, b, c) {
      if (!1 !== z.enabled && (!1 !== z.autoUpdate || !1 !== z.needsUpdate) && 0 !== t.length) {
        var G = g.getRenderTarget(), m = g.getActiveCubeFace(), n = g.getActiveMipmapLevel(), k = g.state;
        k.setBlending(0);
        k.buffers.color.setClear(1, 1, 1, 1);
        k.buffers.depth.setTest(!0);
        k.setScissorTest(!1);
        for (var u = 0, r = t.length; u < r; u++) {
          var X = t[u], y = X.shadow;
          if (void 0 === y) {
            console.warn("THREE.WebGLShadowMap:", X, "has no shadow.");
          } else {
            f.copy(y.mapSize);
            var fa = y.getFrameExtents();
            f.multiply(fa);
            h.copy(y.mapSize);
            if (f.x > d || f.y > d) {
              console.warn("THREE.WebGLShadowMap:", X, "has shadow exceeding max texture size, reducing"), f.x > d && (h.x = Math.floor(d / fa.x), f.x = h.x * fa.x, y.mapSize.x = h.x), f.y > d && (h.y = Math.floor(d / fa.y), f.y = h.y * fa.y, y.mapSize.y = h.y);
            }
            null !== y.map || y.isPointLightShadow || 3 !== this.type || (fa = {minFilter:1006, magFilter:1006, format:1023}, y.map = new q(f.x, f.y, fa), y.map.texture.name = X.name + ".shadowMap", y.mapPass = new q(f.x, f.y, fa), y.camera.updateProjectionMatrix());
            null === y.map && (fa = {minFilter:1003, magFilter:1003, format:1023}, y.map = new q(f.x, f.y, fa), y.map.texture.name = X.name + ".shadowMap", y.camera.updateProjectionMatrix());
            g.setRenderTarget(y.map);
            g.clear();
            fa = y.getViewportCount();
            for (var Y = 0; Y < fa; Y++) {
              var A = y.getViewport(Y);
              p.set(h.x * A.x, h.y * A.y, h.x * A.z, h.y * A.w);
              k.viewport(p);
              y.updateMatrices(X, Y);
              l = y.getFrustum();
              e(b, c, y.camera, X, this.type);
            }
            y.isPointLightShadow || 3 !== this.type || (X = y, y = c, fa = a.update(x), v.uniforms.shadow_pass.value = X.map.texture, v.uniforms.resolution.value = X.mapSize, v.uniforms.radius.value = X.radius, g.setRenderTarget(X.mapPass), g.clear(), g.renderBufferDirect(y, null, fa, v, x, null), w.uniforms.shadow_pass.value = X.mapPass.texture, w.uniforms.resolution.value = X.mapSize, w.uniforms.radius.value = X.radius, g.setRenderTarget(X.map), g.clear(), g.renderBufferDirect(y, null, fa, w, x, 
            null));
          }
        }
        z.needsUpdate = !1;
        g.setRenderTarget(G, m, n);
      }
    };
  }
  function Aj(g, a, d) {
    function t(a, t, d) {
      var b = new Uint8Array(4), c = g.createTexture();
      g.bindTexture(a, c);
      g.texParameteri(a, 10241, 9728);
      g.texParameteri(a, 10240, 9728);
      for (a = 0; a < d; a++) {
        g.texImage2D(t + a, 0, 6408, 1, 1, 0, 6408, 5121, b);
      }
      return c;
    }
    function b(t, d) {
      u[t] = 1;
      0 === v[t] && (g.enableVertexAttribArray(t), v[t] = 1);
      w[t] !== d && ((m ? g : a.get("ANGLE_instanced_arrays"))[m ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](t, d), w[t] = d);
    }
    function c(a) {
      !0 !== y[a] && (g.enable(a), y[a] = !0);
    }
    function e(a) {
      !1 !== y[a] && (g.disable(a), y[a] = !1);
    }
    function l(a, t, d, b, l, f, h, p) {
      if (0 === a) {
        z && (e(3042), z = !1);
      } else {
        if (z || (c(3042), z = !0), 5 !== a) {
          if (a !== A || p !== O) {
            if (100 !== D || 100 !== F) {
              g.blendEquation(32774), F = D = 100;
            }
            if (p) {
              switch(a) {
                case 1:
                  g.blendFuncSeparate(1, 771, 1, 771);
                  break;
                case 2:
                  g.blendFunc(1, 1);
                  break;
                case 3:
                  g.blendFuncSeparate(0, 0, 769, 771);
                  break;
                case 4:
                  g.blendFuncSeparate(0, 768, 0, 770);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            } else {
              switch(a) {
                case 1:
                  g.blendFuncSeparate(770, 771, 1, 771);
                  break;
                case 2:
                  g.blendFunc(770, 1);
                  break;
                case 3:
                  g.blendFunc(0, 769);
                  break;
                case 4:
                  g.blendFunc(0, 768);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            }
            H = E = C = B = null;
            A = a;
            O = p;
          }
        } else {
          l = l || t;
          f = f || d;
          h = h || b;
          if (t !== D || l !== F) {
            g.blendEquationSeparate(S[t], S[l]), D = t, F = l;
          }
          if (d !== B || b !== C || f !== E || h !== H) {
            g.blendFuncSeparate(U[d], U[b], U[f], U[h]), B = d, C = b, E = f, H = h;
          }
          A = a;
          O = null;
        }
      }
    }
    function f(a) {
      I !== a && (a ? g.frontFace(2304) : g.frontFace(2305), I = a);
    }
    function h(a) {
      0 !== a ? (c(2884), a !== P && (1 === a ? g.cullFace(1029) : 2 === a ? g.cullFace(1028) : g.cullFace(1032))) : e(2884);
      P = a;
    }
    function p(a, t, d) {
      if (a) {
        if (c(32823), J !== t || L !== d) {
          g.polygonOffset(t, d), J = t, L = d;
        }
      } else {
        e(32823);
      }
    }
    function G(a) {
      void 0 === a && (a = 33984 + K - 1);
      N !== a && (g.activeTexture(a), N = a);
    }
    var m = d.isWebGL2, n = new function() {
      var a = !1, t = new r, d = null, b = new r(0, 0, 0, 0);
      return {setMask:function(t) {
        d === t || a || (g.colorMask(t, t, t, t), d = t);
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a, d, c, e, l) {
        !0 === l && (a *= e, d *= e, c *= e);
        t.set(a, d, c, e);
        !1 === b.equals(t) && (g.clearColor(a, d, c, e), b.copy(t));
      }, reset:function() {
        a = !1;
        d = null;
        b.set(-1, 0, 0, 0);
      }};
    }, k = new function() {
      var a = !1, t = null, d = null, b = null;
      return {setTest:function(g) {
        g ? c(2929) : e(2929);
      }, setMask:function(d) {
        t === d || a || (g.depthMask(d), t = d);
      }, setFunc:function(a) {
        if (d !== a) {
          if (a) {
            switch(a) {
              case 0:
                g.depthFunc(512);
                break;
              case 1:
                g.depthFunc(519);
                break;
              case 2:
                g.depthFunc(513);
                break;
              case 3:
                g.depthFunc(515);
                break;
              case 4:
                g.depthFunc(514);
                break;
              case 5:
                g.depthFunc(518);
                break;
              case 6:
                g.depthFunc(516);
                break;
              case 7:
                g.depthFunc(517);
                break;
              default:
                g.depthFunc(515);
            }
          } else {
            g.depthFunc(515);
          }
          d = a;
        }
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a) {
        b !== a && (g.clearDepth(a), b = a);
      }, reset:function() {
        a = !1;
        b = d = t = null;
      }};
    }, q = new function() {
      var a = !1, t = null, d = null, b = null, l = null, f = null, h = null, p = null, G = null;
      return {setTest:function(g) {
        a || (g ? c(2960) : e(2960));
      }, setMask:function(d) {
        t === d || a || (g.stencilMask(d), t = d);
      }, setFunc:function(a, t, c) {
        if (d !== a || b !== t || l !== c) {
          g.stencilFunc(a, t, c), d = a, b = t, l = c;
        }
      }, setOp:function(a, t, d) {
        if (f !== a || h !== t || p !== d) {
          g.stencilOp(a, t, d), f = a, h = t, p = d;
        }
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a) {
        G !== a && (g.clearStencil(a), G = a);
      }, reset:function() {
        a = !1;
        G = p = h = f = l = b = d = t = null;
      }};
    };
    d = g.getParameter(34921);
    var u = new Uint8Array(d), v = new Uint8Array(d), w = new Uint8Array(d), y = {}, x = null, z = null, A = null, D = null, B = null, C = null, F = null, E = null, H = null, O = !1, I = null, P = null, R = null, J = null, L = null, K = g.getParameter(35661), W = !1;
    d = 0;
    d = g.getParameter(7938);
    -1 !== d.indexOf("WebGL") ? (d = parseFloat(/^WebGL ([0-9])/.exec(d)[1]), W = 1 <= d) : -1 !== d.indexOf("OpenGL ES") && (d = parseFloat(/^OpenGL ES ([0-9])/.exec(d)[1]), W = 2 <= d);
    var N = null, T = {}, aa = new r, M = new r, Q = {};
    Q[3553] = t(3553, 3553, 1);
    Q[34067] = t(34067, 34069, 6);
    n.setClear(0, 0, 0, 1);
    k.setClear(1);
    q.setClear(0);
    c(2929);
    k.setFunc(3);
    f(!1);
    h(1);
    c(2884);
    l(0);
    var S = {100:32774, 101:32778, 102:32779};
    m ? (S[103] = 32775, S[104] = 32776) : (d = a.get("EXT_blend_minmax"), null !== d && (S[103] = d.MIN_EXT, S[104] = d.MAX_EXT));
    var U = {200:0, 201:1, 202:768, 204:770, 210:776, 208:774, 206:772, 203:769, 205:771, 209:775, 207:773};
    return {buffers:{color:n, depth:k, stencil:q}, initAttributes:function() {
      for (var g = 0, a = u.length; g < a; g++) {
        u[g] = 0;
      }
    }, enableAttribute:function(g) {
      b(g, 0);
    }, enableAttributeAndDivisor:b, disableUnusedAttributes:function() {
      for (var a = 0, t = v.length; a !== t; ++a) {
        v[a] !== u[a] && (g.disableVertexAttribArray(a), v[a] = 0);
      }
    }, enable:c, disable:e, useProgram:function(a) {
      return x !== a ? (g.useProgram(a), x = a, !0) : !1;
    }, setBlending:l, setMaterial:function(g, a) {
      2 === g.side ? e(2884) : c(2884);
      var t = 1 === g.side;
      a && (t = !t);
      f(t);
      1 === g.blending && !1 === g.transparent ? l(0) : l(g.blending, g.blendEquation, g.blendSrc, g.blendDst, g.blendEquationAlpha, g.blendSrcAlpha, g.blendDstAlpha, g.premultipliedAlpha);
      k.setFunc(g.depthFunc);
      k.setTest(g.depthTest);
      k.setMask(g.depthWrite);
      n.setMask(g.colorWrite);
      a = g.stencilWrite;
      q.setTest(a);
      a && (q.setMask(g.stencilWriteMask), q.setFunc(g.stencilFunc, g.stencilRef, g.stencilFuncMask), q.setOp(g.stencilFail, g.stencilZFail, g.stencilZPass));
      p(g.polygonOffset, g.polygonOffsetFactor, g.polygonOffsetUnits);
    }, setFlipSided:f, setCullFace:h, setLineWidth:function(a) {
      a !== R && (W && g.lineWidth(a), R = a);
    }, setPolygonOffset:p, setScissorTest:function(g) {
      g ? c(3089) : e(3089);
    }, activeTexture:G, bindTexture:function(a, t) {
      null === N && G();
      var d = T[N];
      void 0 === d && (d = {type:void 0, texture:void 0}, T[N] = d);
      if (d.type !== a || d.texture !== t) {
        g.bindTexture(a, t || Q[a]), d.type = a, d.texture = t;
      }
    }, unbindTexture:function() {
      var a = T[N];
      void 0 !== a && void 0 !== a.type && (g.bindTexture(a.type, null), a.type = void 0, a.texture = void 0);
    }, compressedTexImage2D:function() {
      try {
        g.compressedTexImage2D.apply(g, arguments);
      } catch (Td) {
        console.error("THREE.WebGLState:", Td);
      }
    }, texImage2D:function() {
      try {
        g.texImage2D.apply(g, arguments);
      } catch (Td) {
        console.error("THREE.WebGLState:", Td);
      }
    }, texImage3D:function() {
      try {
        g.texImage3D.apply(g, arguments);
      } catch (Td) {
        console.error("THREE.WebGLState:", Td);
      }
    }, scissor:function(a) {
      !1 === aa.equals(a) && (g.scissor(a.x, a.y, a.z, a.w), aa.copy(a));
    }, viewport:function(a) {
      !1 === M.equals(a) && (g.viewport(a.x, a.y, a.z, a.w), M.copy(a));
    }, reset:function() {
      for (var a = 0; a < v.length; a++) {
        1 === v[a] && (g.disableVertexAttribArray(a), v[a] = 0);
      }
      y = {};
      N = null;
      T = {};
      P = I = A = x = null;
      n.reset();
      k.reset();
      q.reset();
    }};
  }
  function Bj(g, a, d, b, c, e, l) {
    function t(g, a) {
      return E ? new OffscreenCanvas(g, a) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    }
    function f(g, a, d, b) {
      var c = 1;
      if (g.width > b || g.height > b) {
        c = b / Math.max(g.width, g.height);
      }
      if (1 > c || !0 === a) {
        if ("undefined" !== typeof HTMLImageElement && g instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && g instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && g instanceof ImageBitmap) {
          return b = a ? ka.floorPowerOfTwo : Math.floor, a = b(c * g.width), c = b(c * g.height), void 0 === F && (F = t(a, c)), d = d ? t(a, c) : F, d.width = a, d.height = c, d.getContext("2d").drawImage(g, 0, 0, a, c), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + g.width + "x" + g.height + ") to (" + a + "x" + c + ")."), d;
        }
        "data" in g && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + g.width + "x" + g.height + ").");
      }
      return g;
    }
    function h(g) {
      return ka.isPowerOfTwo(g.width) && ka.isPowerOfTwo(g.height);
    }
    function p(g, a) {
      return g.generateMipmaps && a && 1003 !== g.minFilter && 1006 !== g.minFilter;
    }
    function G(a, d, t, c) {
      g.generateMipmap(a);
      b.get(d).__maxMipLevel = Math.log(Math.max(t, c)) * Math.LOG2E;
    }
    function m(g, d) {
      if (!1 === Y) {
        return g;
      }
      var t = g;
      6403 === g && (5126 === d && (t = 33326), 5131 === d && (t = 33325), 5121 === d && (t = 33321));
      6407 === g && (5126 === d && (t = 34837), 5131 === d && (t = 34843), 5121 === d && (t = 32849));
      6408 === g && (5126 === d && (t = 34836), 5131 === d && (t = 34842), 5121 === d && (t = 32856));
      33325 === t || 33326 === t || 34842 === t || 34836 === t ? a.get("EXT_color_buffer_float") : (34843 === t || 34837 === t) && console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.");
      return t;
    }
    function n(g) {
      return 1003 === g || 1004 === g || 1005 === g ? 9728 : 9729;
    }
    function k(a) {
      a = a.target;
      a.removeEventListener("dispose", k);
      var d = b.get(a);
      void 0 !== d.__webglInit && (g.deleteTexture(d.__webglTexture), b.remove(a));
      a.isVideoTexture && C.delete(a);
      l.memory.textures--;
    }
    function q(a) {
      a = a.target;
      a.removeEventListener("dispose", q);
      var d = b.get(a), t = b.get(a.texture);
      if (a) {
        void 0 !== t.__webglTexture && g.deleteTexture(t.__webglTexture);
        a.depthTexture && a.depthTexture.dispose();
        if (a.isWebGLRenderTargetCube) {
          for (t = 0; 6 > t; t++) {
            g.deleteFramebuffer(d.__webglFramebuffer[t]), d.__webglDepthbuffer && g.deleteRenderbuffer(d.__webglDepthbuffer[t]);
          }
        } else {
          g.deleteFramebuffer(d.__webglFramebuffer), d.__webglDepthbuffer && g.deleteRenderbuffer(d.__webglDepthbuffer);
        }
        if (a.isWebGLMultiviewRenderTarget) {
          g.deleteTexture(d.__webglColorTexture);
          g.deleteTexture(d.__webglDepthStencilTexture);
          l.memory.textures -= 2;
          t = 0;
          for (var c = d.__webglViewFramebuffers.length; t < c; t++) {
            g.deleteFramebuffer(d.__webglViewFramebuffers[t]);
          }
        }
        b.remove(a.texture);
        b.remove(a);
      }
      l.memory.textures--;
    }
    function u(g, a) {
      var t = b.get(g);
      if (g.isVideoTexture) {
        var c = l.render.frame;
        C.get(g) !== c && (C.set(g, c), g.update());
      }
      if (0 < g.version && t.__version !== g.version) {
        if (c = g.image, void 0 === c) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else {
          if (!1 === c.complete) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
          } else {
            y(t, g, a);
            return;
          }
        }
      }
      d.activeTexture(33984 + a);
      d.bindTexture(3553, t.__webglTexture);
    }
    function r(a, t) {
      if (6 === a.image.length) {
        var c = b.get(a);
        if (0 < a.version && c.__version !== a.version) {
          w(c, a);
          d.activeTexture(33984 + t);
          d.bindTexture(34067, c.__webglTexture);
          g.pixelStorei(37440, a.flipY);
          var l = a && a.isCompressedTexture;
          t = a.image[0] && a.image[0].isDataTexture;
          for (var n = [], k = 0; 6 > k; k++) {
            n[k] = l || t ? t ? a.image[k].image : a.image[k] : f(a.image[k], !1, !0, D);
          }
          var q = n[0], u = h(q) || Y, r = e.convert(a.format), v = e.convert(a.type), y = m(r, v);
          X(34067, a, u);
          if (l) {
            for (k = 0; 6 > k; k++) {
              var x = n[k].mipmaps;
              for (l = 0; l < x.length; l++) {
                var fa = x[l];
                1023 !== a.format && 1022 !== a.format ? null !== r ? d.compressedTexImage2D(34069 + k, l, y, fa.width, fa.height, 0, fa.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : d.texImage2D(34069 + k, l, y, fa.width, fa.height, 0, r, v, fa.data);
              }
            }
            c.__maxMipLevel = x.length - 1;
          } else {
            x = a.mipmaps;
            for (k = 0; 6 > k; k++) {
              if (t) {
                for (d.texImage2D(34069 + k, 0, y, n[k].width, n[k].height, 0, r, v, n[k].data), l = 0; l < x.length; l++) {
                  fa = x[l], fa = fa.image[k].image, d.texImage2D(34069 + k, l + 1, y, fa.width, fa.height, 0, r, v, fa.data);
                }
              } else {
                for (d.texImage2D(34069 + k, 0, y, r, v, n[k]), l = 0; l < x.length; l++) {
                  fa = x[l], d.texImage2D(34069 + k, l + 1, y, r, v, fa.image[k]);
                }
              }
            }
            c.__maxMipLevel = x.length;
          }
          p(a, u) && G(34067, a, q.width, q.height);
          c.__version = a.version;
          if (a.onUpdate) {
            a.onUpdate(a);
          }
        } else {
          d.activeTexture(33984 + t), d.bindTexture(34067, c.__webglTexture);
        }
      }
    }
    function v(g, a) {
      d.activeTexture(33984 + a);
      d.bindTexture(34067, b.get(g).__webglTexture);
    }
    function X(d, t, e) {
      e ? (g.texParameteri(d, 10242, O[t.wrapS]), g.texParameteri(d, 10243, O[t.wrapT]), 32879 !== d && 35866 !== d || g.texParameteri(d, 32882, O[t.wrapR]), g.texParameteri(d, 10240, I[t.magFilter]), g.texParameteri(d, 10241, I[t.minFilter])) : (g.texParameteri(d, 10242, 33071), g.texParameteri(d, 10243, 33071), 32879 !== d && 35866 !== d || g.texParameteri(d, 32882, 33071), 1001 === t.wrapS && 1001 === t.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), 
      g.texParameteri(d, 10240, n(t.magFilter)), g.texParameteri(d, 10241, n(t.minFilter)), 1003 !== t.minFilter && 1006 !== t.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
      !(e = a.get("EXT_texture_filter_anisotropic")) || 1015 === t.type && null === a.get("OES_texture_float_linear") || 1016 === t.type && null === (Y || a.get("OES_texture_half_float_linear")) || !(1 < t.anisotropy || b.get(t).__currentAnisotropy) || (g.texParameterf(d, e.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(t.anisotropy, c.getMaxAnisotropy())), b.get(t).__currentAnisotropy = t.anisotropy);
    }
    function w(a, d) {
      void 0 === a.__webglInit && (a.__webglInit = !0, d.addEventListener("dispose", k), a.__webglTexture = g.createTexture(), l.memory.textures++);
    }
    function y(a, t, b) {
      var c = 3553;
      t.isDataTexture2DArray && (c = 35866);
      t.isDataTexture3D && (c = 32879);
      w(a, t);
      d.activeTexture(33984 + b);
      d.bindTexture(c, a.__webglTexture);
      g.pixelStorei(37440, t.flipY);
      g.pixelStorei(37441, t.premultiplyAlpha);
      g.pixelStorei(3317, t.unpackAlignment);
      b = Y ? !1 : 1001 !== t.wrapS || 1001 !== t.wrapT || 1003 !== t.minFilter && 1006 !== t.minFilter;
      b = b && !1 === h(t.image);
      b = f(t.image, b, !1, B);
      var l = h(b) || Y, n = e.convert(t.format), k = e.convert(t.type), q = m(n, k);
      X(c, t, l);
      var u = t.mipmaps;
      if (t.isDepthTexture) {
        q = 6402;
        if (1015 === t.type) {
          if (!1 === Y) {
            throw Error("Float Depth Texture only supported in WebGL2.0");
          }
          q = 36012;
        } else {
          Y && (q = 33189);
        }
        1026 === t.format && 6402 === q && 1012 !== t.type && 1014 !== t.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), t.type = 1012, k = e.convert(t.type));
        1027 === t.format && (q = 34041, 1020 !== t.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), t.type = 1020, k = e.convert(t.type)));
        d.texImage2D(3553, 0, q, b.width, b.height, 0, n, k, null);
      } else {
        if (t.isDataTexture) {
          if (0 < u.length && l) {
            for (var r = 0, v = u.length; r < v; r++) {
              c = u[r], d.texImage2D(3553, r, q, c.width, c.height, 0, n, k, c.data);
            }
            t.generateMipmaps = !1;
            a.__maxMipLevel = u.length - 1;
          } else {
            d.texImage2D(3553, 0, q, b.width, b.height, 0, n, k, b.data), a.__maxMipLevel = 0;
          }
        } else {
          if (t.isCompressedTexture) {
            r = 0;
            for (v = u.length; r < v; r++) {
              c = u[r], 1023 !== t.format && 1022 !== t.format ? null !== n ? d.compressedTexImage2D(3553, r, q, c.width, c.height, 0, c.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : d.texImage2D(3553, r, q, c.width, c.height, 0, n, k, c.data);
            }
            a.__maxMipLevel = u.length - 1;
          } else {
            if (t.isDataTexture2DArray) {
              d.texImage3D(35866, 0, q, b.width, b.height, b.depth, 0, n, k, b.data), a.__maxMipLevel = 0;
            } else {
              if (t.isDataTexture3D) {
                d.texImage3D(32879, 0, q, b.width, b.height, b.depth, 0, n, k, b.data), a.__maxMipLevel = 0;
              } else {
                if (0 < u.length && l) {
                  r = 0;
                  for (v = u.length; r < v; r++) {
                    c = u[r], d.texImage2D(3553, r, q, n, k, c);
                  }
                  t.generateMipmaps = !1;
                  a.__maxMipLevel = u.length - 1;
                } else {
                  d.texImage2D(3553, 0, q, n, k, b), a.__maxMipLevel = 0;
                }
              }
            }
          }
        }
      }
      p(t, l) && G(3553, t, b.width, b.height);
      a.__version = t.version;
      if (t.onUpdate) {
        t.onUpdate(t);
      }
    }
    function x(a, t, c, l) {
      var f = e.convert(t.texture.format), h = e.convert(t.texture.type), p = m(f, h);
      d.texImage2D(l, 0, p, t.width, t.height, 0, f, h, null);
      g.bindFramebuffer(36160, a);
      g.framebufferTexture2D(36160, c, l, b.get(t.texture).__webglTexture, 0);
      g.bindFramebuffer(36160, null);
    }
    function fa(a, t, d) {
      g.bindRenderbuffer(36161, a);
      if (t.depthBuffer && !t.stencilBuffer) {
        d ? (d = z(t), g.renderbufferStorageMultisample(36161, d, 33189, t.width, t.height)) : g.renderbufferStorage(36161, 33189, t.width, t.height), g.framebufferRenderbuffer(36160, 36096, 36161, a);
      } else {
        if (t.depthBuffer && t.stencilBuffer) {
          d ? (d = z(t), g.renderbufferStorageMultisample(36161, d, 35056, t.width, t.height)) : g.renderbufferStorage(36161, 34041, t.width, t.height), g.framebufferRenderbuffer(36160, 33306, 36161, a);
        } else {
          a = e.convert(t.texture.format);
          var b = e.convert(t.texture.type);
          a = m(a, b);
          d ? (d = z(t), g.renderbufferStorageMultisample(36161, d, a, t.width, t.height)) : g.renderbufferStorage(36161, a, t.width, t.height);
        }
      }
      g.bindRenderbuffer(36161, null);
    }
    function z(g) {
      return Y && g.isWebGLMultisampleRenderTarget ? Math.min(Pc, g.samples) : 0;
    }
    var Y = c.isWebGL2, A = c.maxTextures, D = c.maxCubemapSize, B = c.maxTextureSize, Pc = c.maxSamples, C = new WeakMap, F, E = "undefined" !== typeof OffscreenCanvas && null !== (new OffscreenCanvas(1, 1)).getContext("2d"), H = 0, O = {1E3:10497, 1001:33071, 1002:33648}, I = {1003:9728, 1004:9984, 1005:9986, 1006:9729, 1007:9985, 1008:9987}, P = !1, R = !1;
    this.allocateTextureUnit = function() {
      var g = H;
      g >= A && console.warn("THREE.WebGLTextures: Trying to use " + g + " texture units while this GPU supports only " + A);
      H += 1;
      return g;
    };
    this.resetTextureUnits = function() {
      H = 0;
    };
    this.setTexture2D = u;
    this.setTexture2DArray = function(g, a) {
      var t = b.get(g);
      0 < g.version && t.__version !== g.version ? y(t, g, a) : (d.activeTexture(33984 + a), d.bindTexture(35866, t.__webglTexture));
    };
    this.setTexture3D = function(g, a) {
      var t = b.get(g);
      0 < g.version && t.__version !== g.version ? y(t, g, a) : (d.activeTexture(33984 + a), d.bindTexture(32879, t.__webglTexture));
    };
    this.setTextureCube = r;
    this.setTextureCubeDynamic = v;
    this.setupRenderTarget = function(t) {
      var c = b.get(t), f = b.get(t.texture);
      t.addEventListener("dispose", q);
      f.__webglTexture = g.createTexture();
      l.memory.textures++;
      var n = !0 === t.isWebGLRenderTargetCube, k = !0 === t.isWebGLMultisampleRenderTarget, r = !0 === t.isWebGLMultiviewRenderTarget, v = h(t) || Y;
      if (n) {
        c.__webglFramebuffer = [];
        for (var w = 0; 6 > w; w++) {
          c.__webglFramebuffer[w] = g.createFramebuffer();
        }
      } else {
        if (c.__webglFramebuffer = g.createFramebuffer(), k) {
          if (Y) {
            c.__webglMultisampledFramebuffer = g.createFramebuffer();
            c.__webglColorRenderbuffer = g.createRenderbuffer();
            g.bindRenderbuffer(36161, c.__webglColorRenderbuffer);
            k = e.convert(t.texture.format);
            var y = e.convert(t.texture.type);
            k = m(k, y);
            y = z(t);
            g.renderbufferStorageMultisample(36161, y, k, t.width, t.height);
            g.bindFramebuffer(36160, c.__webglMultisampledFramebuffer);
            g.framebufferRenderbuffer(36160, 36064, 36161, c.__webglColorRenderbuffer);
            g.bindRenderbuffer(36161, null);
            t.depthBuffer && (c.__webglDepthRenderbuffer = g.createRenderbuffer(), fa(c.__webglDepthRenderbuffer, t, !0));
            g.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        } else {
          if (r) {
            w = t.width;
            var A = t.height;
            k = t.numViews;
            g.bindFramebuffer(36160, c.__webglFramebuffer);
            var D = a.get("OVR_multiview2");
            l.memory.textures += 2;
            y = g.createTexture();
            g.bindTexture(35866, y);
            g.texParameteri(35866, 10240, 9728);
            g.texParameteri(35866, 10241, 9728);
            g.texImage3D(35866, 0, 32856, w, A, k, 0, 6408, 5121, null);
            D.framebufferTextureMultiviewOVR(36160, 36064, y, 0, 0, k);
            var B = g.createTexture();
            g.bindTexture(35866, B);
            g.texParameteri(35866, 10240, 9728);
            g.texParameteri(35866, 10241, 9728);
            g.texImage3D(35866, 0, 35056, w, A, k, 0, 34041, 34042, null);
            D.framebufferTextureMultiviewOVR(36160, 33306, B, 0, 0, k);
            A = Array(k);
            for (w = 0; w < k; ++w) {
              A[w] = g.createFramebuffer(), g.bindFramebuffer(36160, A[w]), g.framebufferTextureLayer(36160, 36064, y, 0, w);
            }
            c.__webglColorTexture = y;
            c.__webglDepthStencilTexture = B;
            c.__webglViewFramebuffers = A;
            g.bindFramebuffer(36160, null);
            g.bindTexture(35866, null);
          }
        }
      }
      if (n) {
        d.bindTexture(34067, f.__webglTexture);
        X(34067, t.texture, v);
        for (w = 0; 6 > w; w++) {
          x(c.__webglFramebuffer[w], t, 36064, 34069 + w);
        }
        p(t.texture, v) && G(34067, t.texture, t.width, t.height);
        d.bindTexture(34067, null);
      } else {
        r || (d.bindTexture(3553, f.__webglTexture), X(3553, t.texture, v), x(c.__webglFramebuffer, t, 36064, 3553), p(t.texture, v) && G(3553, t.texture, t.width, t.height), d.bindTexture(3553, null));
      }
      if (t.depthBuffer) {
        c = b.get(t);
        f = !0 === t.isWebGLRenderTargetCube;
        if (t.depthTexture) {
          if (f) {
            throw Error("target.depthTexture not supported in Cube render targets");
          }
          if (t && t.isWebGLRenderTargetCube) {
            throw Error("Depth Texture with cube render targets is not supported");
          }
          g.bindFramebuffer(36160, c.__webglFramebuffer);
          if (!t.depthTexture || !t.depthTexture.isDepthTexture) {
            throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          }
          b.get(t.depthTexture).__webglTexture && t.depthTexture.image.width === t.width && t.depthTexture.image.height === t.height || (t.depthTexture.image.width = t.width, t.depthTexture.image.height = t.height, t.depthTexture.needsUpdate = !0);
          u(t.depthTexture, 0);
          c = b.get(t.depthTexture).__webglTexture;
          if (1026 === t.depthTexture.format) {
            g.framebufferTexture2D(36160, 36096, 3553, c, 0);
          } else {
            if (1027 === t.depthTexture.format) {
              g.framebufferTexture2D(36160, 33306, 3553, c, 0);
            } else {
              throw Error("Unknown depthTexture format");
            }
          }
        } else {
          if (f) {
            for (c.__webglDepthbuffer = [], f = 0; 6 > f; f++) {
              g.bindFramebuffer(36160, c.__webglFramebuffer[f]), c.__webglDepthbuffer[f] = g.createRenderbuffer(), fa(c.__webglDepthbuffer[f], t);
            }
          } else {
            g.bindFramebuffer(36160, c.__webglFramebuffer), c.__webglDepthbuffer = g.createRenderbuffer(), fa(c.__webglDepthbuffer, t);
          }
        }
        g.bindFramebuffer(36160, null);
      }
    };
    this.updateRenderTargetMipmap = function(g) {
      var a = g.texture, t = h(g) || Y;
      if (p(a, t)) {
        t = g.isWebGLRenderTargetCube ? 34067 : 3553;
        var c = b.get(a).__webglTexture;
        d.bindTexture(t, c);
        G(t, a, g.width, g.height);
        d.bindTexture(t, null);
      }
    };
    this.updateMultisampleRenderTarget = function(a) {
      if (a.isWebGLMultisampleRenderTarget) {
        if (Y) {
          var t = b.get(a);
          g.bindFramebuffer(36008, t.__webglMultisampledFramebuffer);
          g.bindFramebuffer(36009, t.__webglFramebuffer);
          t = a.width;
          var d = a.height, c = 16384;
          a.depthBuffer && (c |= 256);
          a.stencilBuffer && (c |= 1024);
          g.blitFramebuffer(0, 0, t, d, 0, 0, t, d, c, 9728);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    };
    this.safeSetTexture2D = function(g, a) {
      g && g.isWebGLRenderTarget && (!1 === P && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), P = !0), g = g.texture);
      u(g, a);
    };
    this.safeSetTextureCube = function(g, a) {
      g && g.isWebGLRenderTargetCube && (!1 === R && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), R = !0), g = g.texture);
      g && g.isCubeTexture || Array.isArray(g.image) && 6 === g.image.length ? r(g, a) : v(g, a);
    };
  }
  function Lh(g, a, d) {
    var t = d.isWebGL2;
    return {convert:function(g) {
      if (1009 === g) {
        return 5121;
      }
      if (1017 === g) {
        return 32819;
      }
      if (1018 === g) {
        return 32820;
      }
      if (1019 === g) {
        return 33635;
      }
      if (1010 === g) {
        return 5120;
      }
      if (1011 === g) {
        return 5122;
      }
      if (1012 === g) {
        return 5123;
      }
      if (1013 === g) {
        return 5124;
      }
      if (1014 === g) {
        return 5125;
      }
      if (1015 === g) {
        return 5126;
      }
      if (1016 === g) {
        if (t) {
          return 5131;
        }
        var d = a.get("OES_texture_half_float");
        return null !== d ? d.HALF_FLOAT_OES : null;
      }
      if (1021 === g) {
        return 6406;
      }
      if (1022 === g) {
        return 6407;
      }
      if (1023 === g) {
        return 6408;
      }
      if (1024 === g) {
        return 6409;
      }
      if (1025 === g) {
        return 6410;
      }
      if (1026 === g) {
        return 6402;
      }
      if (1027 === g) {
        return 34041;
      }
      if (1028 === g) {
        return 6403;
      }
      if (33776 === g || 33777 === g || 33778 === g || 33779 === g) {
        if (d = a.get("WEBGL_compressed_texture_s3tc"), null !== d) {
          if (33776 === g) {
            return d.COMPRESSED_RGB_S3TC_DXT1_EXT;
          }
          if (33777 === g) {
            return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          }
          if (33778 === g) {
            return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          }
          if (33779 === g) {
            return d.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }
        } else {
          return null;
        }
      }
      if (35840 === g || 35841 === g || 35842 === g || 35843 === g) {
        if (d = a.get("WEBGL_compressed_texture_pvrtc"), null !== d) {
          if (35840 === g) {
            return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          }
          if (35841 === g) {
            return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          }
          if (35842 === g) {
            return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          }
          if (35843 === g) {
            return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }
        } else {
          return null;
        }
      }
      if (36196 === g) {
        return d = a.get("WEBGL_compressed_texture_etc1"), null !== d ? d.COMPRESSED_RGB_ETC1_WEBGL : null;
      }
      if (37808 === g || 37809 === g || 37810 === g || 37811 === g || 37812 === g || 37813 === g || 37814 === g || 37815 === g || 37816 === g || 37817 === g || 37818 === g || 37819 === g || 37820 === g || 37821 === g) {
        return d = a.get("WEBGL_compressed_texture_astc"), null !== d ? g : null;
      }
      if (1020 === g) {
        if (t) {
          return 34042;
        }
        d = a.get("WEBGL_depth_texture");
        return null !== d ? d.UNSIGNED_INT_24_8_WEBGL : null;
      }
    }};
  }
  function pg(g, a, d, b) {
    q.call(this, g, a, b);
    this.stencilBuffer = this.depthBuffer = !1;
    this.numViews = d;
  }
  function Cj(g, a) {
    function t(g) {
      if (g.isArrayCamera) {
        return g.cameras;
      }
      n[0] = g;
      return n;
    }
    function d(g) {
      if (void 0 === g.isArrayCamera) {
        return !0;
      }
      g = g.cameras;
      if (g.length > r) {
        return !1;
      }
      for (var a = 1, t = g.length; a < t; a++) {
        if (g[0].viewport.z !== g[a].viewport.z || g[0].viewport.w !== g[a].viewport.w) {
          return !1;
        }
      }
      return !0;
    }
    var b = g.extensions, c = g.properties, e, l, h, p, n, q, u, r = 0;
    this.isAvailable = function() {
      if (void 0 === u) {
        var g = b.get("OVR_multiview2");
        if (u = null !== g && !1 === a.getContextAttributes().antialias) {
          for (r = a.getParameter(g.MAX_VIEWS_OVR), e = new pg(0, 0, 2), q = new k, p = [], h = [], n = [], g = 0; g < r; g++) {
            p[g] = new m, h[g] = new f;
          }
        }
      }
      return u;
    };
    this.attachCamera = function(a) {
      if (!1 !== d(a)) {
        (l = g.getRenderTarget()) ? q.set(l.width, l.height) : g.getDrawingBufferSize(q);
        if (a.isArrayCamera) {
          var t = a.cameras[0].viewport;
          e.setSize(t.z, t.w);
          e.setNumViews(a.cameras.length);
        } else {
          e.setSize(q.x, q.y), e.setNumViews(2);
        }
        g.setRenderTarget(e);
      }
    };
    this.detachCamera = function(t) {
      if (e === g.getRenderTarget()) {
        g.setRenderTarget(l);
        var d = e, b = d.numViews, f = c.get(d).__webglViewFramebuffers, h = d.width;
        d = d.height;
        if (t.isArrayCamera) {
          for (var p = 0; p < b; p++) {
            var G = t.cameras[p].viewport, k = G.x, m = G.y, n = k + G.z;
            G = m + G.w;
            a.bindFramebuffer(36008, f[p]);
            a.blitFramebuffer(0, 0, h, d, k, m, n, G, 16384, 9728);
          }
        } else {
          a.bindFramebuffer(36008, f[0]), a.blitFramebuffer(0, 0, h, d, 0, 0, q.x, q.y, 16384, 9728);
        }
      }
    };
    this.updateCameraProjectionMatricesUniform = function(g, d) {
      g = t(g);
      for (var b = 0; b < g.length; b++) {
        p[b].copy(g[b].projectionMatrix);
      }
      d.setValue(a, "projectionMatrices", p);
    };
    this.updateCameraViewMatricesUniform = function(g, d) {
      g = t(g);
      for (var b = 0; b < g.length; b++) {
        p[b].copy(g[b].matrixWorldInverse);
      }
      d.setValue(a, "viewMatrices", p);
    };
    this.updateObjectMatricesUniforms = function(g, d, b) {
      d = t(d);
      for (var c = 0; c < d.length; c++) {
        p[c].multiplyMatrices(d[c].matrixWorldInverse, g.matrixWorld), h[c].getNormalMatrix(p[c]);
      }
      b.setValue(a, "modelViewMatrices", p);
      b.setValue(a, "normalMatrices", h);
    };
  }
  function Wc() {
    v.call(this);
    this.type = "Group";
  }
  function Ud(g) {
    oa.call(this);
    this.cameras = g || [];
  }
  function Mh(g, a, d) {
    Nh.setFromMatrixPosition(a.matrixWorld);
    Oh.setFromMatrixPosition(d.matrixWorld);
    var t = Nh.distanceTo(Oh), b = a.projectionMatrix.elements, c = d.projectionMatrix.elements, e = b[14] / (b[10] - 1);
    d = b[14] / (b[10] + 1);
    var l = (b[9] + 1) / b[5], f = (b[9] - 1) / b[5], h = (b[8] - 1) / b[0], p = (c[8] + 1) / c[0];
    b = e * h;
    c = e * p;
    p = t / (-h + p);
    h = p * -h;
    a.matrixWorld.decompose(g.position, g.quaternion, g.scale);
    g.translateX(h);
    g.translateZ(p);
    g.matrixWorld.compose(g.position, g.quaternion, g.scale);
    g.matrixWorldInverse.getInverse(g.matrixWorld);
    a = e + p;
    e = d + p;
    g.projectionMatrix.makePerspective(b - h, c + (t - h), l * d / e * a, f * d / e * a, a, e);
  }
  function qg(g) {
    function a() {
      return null !== p && !0 === p.isPresenting;
    }
    function d() {
      if (a()) {
        var t = p.getEyeParameters("left");
        l = 2 * t.renderWidth * y;
        f = t.renderHeight * y;
        H = g.getPixelRatio();
        g.getSize(E);
        g.setDrawingBufferSize(l, f, 1);
        B.viewport.set(0, 0, l / 2, f);
        C.viewport.set(l / 2, 0, l / 2, f);
        I.start();
        h.dispatchEvent({type:"sessionstart"});
      } else {
        h.enabled && g.setDrawingBufferSize(E.width, E.height, H), I.stop(), h.dispatchEvent({type:"sessionend"});
      }
    }
    function c(g, a) {
      null !== a && 4 === a.length && g.set(a[0] * l, a[1] * f, a[2] * l, a[3] * f);
    }
    var l, f, h = this, p = null, n = null, q = null, u = [], v = new m, w = new m, y = 1, x = "local-floor";
    "undefined" !== typeof window && "VRFrameData" in window && (n = new window.VRFrameData, window.addEventListener("vrdisplaypresentchange", d, !1));
    var z = new m, A = new b, D = new e, B = new oa;
    B.viewport = new r;
    B.layers.enable(1);
    var C = new oa;
    C.viewport = new r;
    C.layers.enable(2);
    var F = new Ud([B, C]);
    F.layers.enable(1);
    F.layers.enable(2);
    var E = new k, H, O = [];
    this.enabled = !1;
    this.getController = function(g) {
      var a = u[g];
      void 0 === a && (a = new Wc, a.matrixAutoUpdate = !1, a.visible = !1, u[g] = a);
      return a;
    };
    this.getDevice = function() {
      return p;
    };
    this.setDevice = function(g) {
      void 0 !== g && (p = g);
      I.setContext(g);
    };
    this.setFramebufferScaleFactor = function(g) {
      y = g;
    };
    this.setReferenceSpaceType = function(g) {
      x = g;
    };
    this.setPoseTarget = function(g) {
      void 0 !== g && (q = g);
    };
    this.getCamera = function(g) {
      var t = "local-floor" === x ? 1.6 : 0;
      if (!1 === a()) {
        return g.position.set(0, t, 0), g.rotation.set(0, 0, 0), g;
      }
      p.depthNear = g.near;
      p.depthFar = g.far;
      p.getFrameData(n);
      if ("local-floor" === x) {
        var d = p.stageParameters;
        d ? v.fromArray(d.sittingToStandingTransform) : v.makeTranslation(0, t, 0);
      }
      t = n.pose;
      d = null !== q ? q : g;
      d.matrix.copy(v);
      d.matrix.decompose(d.position, d.quaternion, d.scale);
      null !== t.orientation && (A.fromArray(t.orientation), d.quaternion.multiply(A));
      null !== t.position && (A.setFromRotationMatrix(v), D.fromArray(t.position), D.applyQuaternion(A), d.position.add(D));
      d.updateMatrixWorld();
      B.near = g.near;
      C.near = g.near;
      B.far = g.far;
      C.far = g.far;
      B.matrixWorldInverse.fromArray(n.leftViewMatrix);
      C.matrixWorldInverse.fromArray(n.rightViewMatrix);
      w.getInverse(v);
      "local-floor" === x && (B.matrixWorldInverse.multiply(w), C.matrixWorldInverse.multiply(w));
      g = d.parent;
      null !== g && (z.getInverse(g.matrixWorld), B.matrixWorldInverse.multiply(z), C.matrixWorldInverse.multiply(z));
      B.matrixWorld.getInverse(B.matrixWorldInverse);
      C.matrixWorld.getInverse(C.matrixWorldInverse);
      B.projectionMatrix.fromArray(n.leftProjectionMatrix);
      C.projectionMatrix.fromArray(n.rightProjectionMatrix);
      Mh(F, B, C);
      g = p.getLayers();
      g.length && (g = g[0], c(B.viewport, g.leftBounds), c(C.viewport, g.rightBounds));
      a: {
        for (g = 0; g < u.length; g++) {
          t = u[g];
          b: {
            d = g;
            for (var b = navigator.getGamepads && navigator.getGamepads(), e = 0, l = b.length; e < l; e++) {
              var f = b[e];
              if (f && ("Daydream Controller" === f.id || "Gear VR Controller" === f.id || "Oculus Go Controller" === f.id || "OpenVR Gamepad" === f.id || f.id.startsWith("Oculus Touch") || f.id.startsWith("HTC Vive Focus") || f.id.startsWith("Spatial Controller"))) {
                var h = f.hand;
                if (0 === d && ("" === h || "right" === h) || 1 === d && "left" === h) {
                  d = f;
                  break b;
                }
              }
            }
            d = void 0;
          }
          if (void 0 !== d && void 0 !== d.pose) {
            if (null === d.pose) {
              break a;
            }
            b = d.pose;
            !1 === b.hasPosition && t.position.set(.2, -.6, -.05);
            null !== b.position && t.position.fromArray(b.position);
            null !== b.orientation && t.quaternion.fromArray(b.orientation);
            t.matrix.compose(t.position, t.quaternion, t.scale);
            t.matrix.premultiply(v);
            t.matrix.decompose(t.position, t.quaternion, t.scale);
            t.matrixWorldNeedsUpdate = !0;
            t.visible = !0;
            b = "Daydream Controller" === d.id ? 0 : 1;
            void 0 === O[g] && (O[g] = !1);
            O[g] !== d.buttons[b].pressed && (O[g] = d.buttons[b].pressed, !0 === O[g] ? t.dispatchEvent({type:"selectstart"}) : (t.dispatchEvent({type:"selectend"}), t.dispatchEvent({type:"select"})));
          } else {
            t.visible = !1;
          }
        }
      }
      return F;
    };
    this.getStandingMatrix = function() {
      return v;
    };
    this.isPresenting = a;
    var I = new Ba;
    this.setAnimationLoop = function(g) {
      I.setAnimationLoop(g);
      a() && I.start();
    };
    this.submitFrame = function() {
      a() && p.submitFrame();
    };
    this.dispose = function() {
      "undefined" !== typeof window && window.removeEventListener("vrdisplaypresentchange", d);
    };
    this.setFrameOfReferenceType = function() {
      console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.");
    };
  }
  function Ph(g, a) {
    function t() {
      return null !== h && null !== p;
    }
    function d(g) {
      for (var a = 0; a < q.length; a++) {
        u[a] === g.inputSource && q[a].dispatchEvent({type:g.type});
      }
    }
    function b() {
      g.setFramebuffer(null);
      g.setRenderTarget(g.getRenderTarget());
      z.stop();
      f.dispatchEvent({type:"sessionend"});
    }
    function c(g) {
      p = g;
      z.setContext(h);
      z.start();
      f.dispatchEvent({type:"sessionstart"});
    }
    function e() {
      for (var g = 0; g < q.length; g++) {
        var a = g;
        a: {
          var t = h.inputSources;
          for (var d = 0; d < t.length; d++) {
            var b = t[d], c = b.handedness;
            if (0 === g && ("none" === c || "right" === c)) {
              t = b;
              break a;
            }
            if (1 === g && "left" === c) {
              t = b;
              break a;
            }
          }
          t = void 0;
        }
        u[a] = t;
      }
    }
    function l(g, a) {
      null === a ? g.matrixWorld.copy(g.matrix) : g.matrixWorld.multiplyMatrices(a.matrixWorld, g.matrix);
      g.matrixWorldInverse.getInverse(g.matrixWorld);
    }
    var f = this, h = null, p = null, n = "local-floor", k = null, q = [], u = [], v = new oa;
    v.layers.enable(1);
    v.viewport = new r;
    var w = new oa;
    w.layers.enable(2);
    w.viewport = new r;
    var y = new Ud([v, w]);
    y.layers.enable(1);
    y.layers.enable(2);
    this.enabled = !1;
    this.getController = function(g) {
      var a = q[g];
      void 0 === a && (a = new Wc, a.matrixAutoUpdate = !1, a.visible = !1, q[g] = a);
      return a;
    };
    this.setFramebufferScaleFactor = function() {
    };
    this.setReferenceSpaceType = function(g) {
      n = g;
    };
    this.getSession = function() {
      return h;
    };
    this.setSession = function(g) {
      h = g;
      null !== h && (h.addEventListener("select", d), h.addEventListener("selectstart", d), h.addEventListener("selectend", d), h.addEventListener("end", b), h.updateRenderState({baseLayer:new XRWebGLLayer(h, a)}), h.requestReferenceSpace(n).then(c), h.addEventListener("inputsourceschange", e), e());
    };
    this.getCamera = function(g) {
      if (t()) {
        var a = g.parent, d = y.cameras;
        l(y, a);
        for (var b = 0; b < d.length; b++) {
          l(d[b], a);
        }
        g.matrixWorld.copy(y.matrixWorld);
        g = g.children;
        b = 0;
        for (a = g.length; b < a; b++) {
          g[b].updateMatrixWorld(!0);
        }
        Mh(y, v, w);
        return y;
      }
      return g;
    };
    this.isPresenting = t;
    var x = null, z = new Ba;
    z.setAnimationLoop(function(a, t) {
      k = t.getViewerPose(p);
      if (null !== k) {
        var d = k.views, b = h.renderState.baseLayer;
        g.setFramebuffer(b.framebuffer);
        for (var c = 0; c < d.length; c++) {
          var e = d[c], l = b.getViewport(e), f = y.cameras[c];
          f.matrix.fromArray(e.transform.inverse.matrix).getInverse(f.matrix);
          f.projectionMatrix.fromArray(e.projectionMatrix);
          f.viewport.set(l.x, l.y, l.width, l.height);
          0 === c && y.matrix.copy(f.matrix);
        }
      }
      for (c = 0; c < q.length; c++) {
        d = q[c];
        if (b = u[c]) {
          if (b = t.getPose(b.targetRaySpace, p), null !== b) {
            d.matrix.fromArray(b.transform.matrix);
            d.matrix.decompose(d.position, d.rotation, d.scale);
            d.visible = !0;
            continue;
          }
        }
        d.visible = !1;
      }
      x && x(a);
    });
    this.setAnimationLoop = function(g) {
      x = g;
    };
    this.dispose = function() {
    };
    this.getStandingMatrix = function() {
      console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");
      return new m;
    };
    this.getDevice = function() {
      console.warn("THREE.WebXRManager: getDevice() has been deprecated.");
    };
    this.setDevice = function() {
      console.warn("THREE.WebXRManager: setDevice() has been deprecated.");
    };
    this.setFrameOfReferenceType = function() {
      console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.");
    };
    this.submitFrame = function() {
    };
  }
  function rg(g) {
    var a;
    function d() {
      ma = new Db(Z);
      Fa = new kg(Z, ma, g);
      !1 === Fa.isWebGL2 && (ma.get("WEBGL_depth_texture"), ma.get("OES_texture_float"), ma.get("OES_texture_half_float"), ma.get("OES_texture_half_float_linear"), ma.get("OES_standard_derivatives"), ma.get("OES_element_index_uint"), ma.get("ANGLE_instanced_arrays"));
      ma.get("OES_texture_float_linear");
      ra = new Lh(Z, ma, Fa);
      na = new Aj(Z, ma, Fa);
      na.scissor(ha.copy(Zb).multiplyScalar(Ca).floor());
      na.viewport(V.copy($b).multiplyScalar(Ca).floor());
      ua = new Pd(Z);
      Ea = new rj;
      Za = new Bj(Z, ma, na, Ea, Fa, ra, ua);
      bc = new hg(Z);
      fb = new Od(Z, bc, ua);
      Ka = new Ue(Z, fb, bc, ua);
      sa = new Eb(Z);
      ca = new qj(J, ma, Fa);
      Vc = new uj;
      ac = new zj;
      ia = new ig(J, na, Ka, E);
      ta = new jg(Z, ma, ua, Fa);
      We = new lg(Z, ma, ua, Fa);
      ua.programs = ca.programs;
      J.capabilities = Fa;
      J.extensions = ma;
      J.properties = Ea;
      J.renderLists = Vc;
      J.state = na;
      J.info = ua;
    }
    function b(g) {
      g.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      L = !0;
    }
    function c() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      L = !1;
      d();
    }
    function l(g) {
      g = g.target;
      g.removeEventListener("dispose", l);
      f(g);
      Ea.remove(g);
    }
    function f(g) {
      var a = Ea.get(g).program;
      g.program = void 0;
      void 0 !== a && ca.releaseProgram(a);
    }
    function h(g, a) {
      g.render(function(g) {
        J.renderBufferImmediate(g, a);
      });
    }
    function p(g, a, t, d) {
      if (!1 !== g.visible) {
        if (g.layers.test(a.layers)) {
          if (g.isGroup) {
            t = g.renderOrder;
          } else {
            if (g.isLOD) {
              !0 === g.autoUpdate && g.update(a);
            } else {
              if (g.isLight) {
                R.pushLight(g), g.castShadow && R.pushShadow(g);
              } else {
                if (g.isSprite) {
                  if (!g.frustumCulled || ja.intersectsSprite(g)) {
                    d && sb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(sc);
                    var b = Ka.update(g), c = g.material;
                    c.visible && P.push(g, b, c, t, sb.z, null);
                  }
                } else {
                  if (g.isImmediateRenderObject) {
                    d && sb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(sc), P.push(g, null, g.material, t, sb.z, null);
                  } else {
                    if (g.isMesh || g.isLine || g.isPoints) {
                      if (g.isSkinnedMesh && g.skeleton.frame !== ua.render.frame && (g.skeleton.update(), g.skeleton.frame = ua.render.frame), !g.frustumCulled || ja.intersectsObject(g)) {
                        if (d && sb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(sc), b = Ka.update(g), c = g.material, Array.isArray(c)) {
                          for (var e = b.groups, l = 0, f = e.length; l < f; l++) {
                            var h = e[l], G = c[h.materialIndex];
                            G && G.visible && P.push(g, b, G, t, sb.z, h);
                          }
                        } else {
                          c.visible && P.push(g, b, c, t, sb.z, null);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        g = g.children;
        l = 0;
        for (f = g.length; l < f; l++) {
          p(g[l], a, t, d);
        }
      }
    }
    function n(g, a, t, d) {
      for (var b = 0, c = g.length; b < c; b++) {
        var e = g[b], l = e.object, f = e.geometry, h = void 0 === d ? e.material : d;
        e = e.group;
        if (t.isArrayCamera) {
          if (ea = t, qa.enabled && tb.isAvailable()) {
            q(l, a, t, f, h, e);
          } else {
            for (var p = t.cameras, G = 0, n = p.length; G < n; G++) {
              var k = p[G];
              l.layers.test(k.layers) && (na.viewport(V.copy(k.viewport)), R.setupLights(k), q(l, a, k, f, h, e));
            }
          }
        } else {
          ea = null, q(l, a, t, f, h, e);
        }
      }
    }
    function q(g, t, d, b, c, e) {
      g.onBeforeRender(J, t, d, b, c, e);
      R = ac.get(t, ea || d);
      g.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, g.matrixWorld);
      g.normalMatrix.getNormalMatrix(g.modelViewMatrix);
      if (g.isImmediateRenderObject) {
        na.setMaterial(c);
        var l = v(d, t.fog, c, g);
        Q = a = null;
        S = !1;
        h(g, l);
      } else {
        J.renderBufferDirect(d, t.fog, b, c, g, e);
      }
      g.onAfterRender(J, t, d, b, c, e);
      R = ac.get(t, ea || d);
    }
    function u(g, a, t) {
      var d = Ea.get(g), b = R.state.lights, c = b.state.version;
      t = ca.getParameters(g, b.state, R.state.shadowsArray, a, Ya.numPlanes, Ya.numIntersection, t);
      var e = ca.getProgramCacheKey(g, t), h = d.program, p = !0;
      if (void 0 === h) {
        g.addEventListener("dispose", l);
      } else {
        if (h.cacheKey !== e) {
          f(g);
        } else {
          if (d.lightsStateVersion !== c) {
            d.lightsStateVersion = c;
          } else {
            if (void 0 !== t.shaderID) {
              return;
            }
          }
          p = !1;
        }
      }
      p && (t.shaderID ? (e = qb[t.shaderID], d.shader = {name:g.type, uniforms:la(e.uniforms), vertexShader:e.vertexShader, fragmentShader:e.fragmentShader}) : d.shader = {name:g.type, uniforms:g.uniforms, vertexShader:g.vertexShader, fragmentShader:g.fragmentShader}, g.onBeforeCompile(d.shader, J), e = ca.getProgramCacheKey(g, t), h = ca.acquireProgram(g, d.shader, t, e), d.program = h, g.program = h);
      t = h.getAttributes();
      if (g.morphTargets) {
        for (e = g.numSupportedMorphTargets = 0; e < J.maxMorphTargets; e++) {
          0 <= t["morphTarget" + e] && g.numSupportedMorphTargets++;
        }
      }
      if (g.morphNormals) {
        for (e = g.numSupportedMorphNormals = 0; e < J.maxMorphNormals; e++) {
          0 <= t["morphNormal" + e] && g.numSupportedMorphNormals++;
        }
      }
      t = d.shader.uniforms;
      if (!g.isShaderMaterial && !g.isRawShaderMaterial || !0 === g.clipping) {
        d.numClippingPlanes = Ya.numPlanes, d.numIntersection = Ya.numIntersection, t.clippingPlanes = Ya.uniform;
      }
      d.fog = a;
      d.needsLights = g.isMeshLambertMaterial || g.isMeshPhongMaterial || g.isMeshStandardMaterial || g.isShadowMaterial || g.isShaderMaterial && !0 === g.lights;
      d.lightsStateVersion = c;
      d.needsLights && (t.ambientLightColor.value = b.state.ambient, t.lightProbe.value = b.state.probe, t.directionalLights.value = b.state.directional, t.spotLights.value = b.state.spot, t.rectAreaLights.value = b.state.rectArea, t.pointLights.value = b.state.point, t.hemisphereLights.value = b.state.hemi, t.directionalShadowMap.value = b.state.directionalShadowMap, t.directionalShadowMatrix.value = b.state.directionalShadowMatrix, t.spotShadowMap.value = b.state.spotShadowMap, t.spotShadowMatrix.value = 
      b.state.spotShadowMatrix, t.pointShadowMap.value = b.state.pointShadowMap, t.pointShadowMatrix.value = b.state.pointShadowMatrix);
      g = d.program.getUniforms();
      g = cc.seqWithValue(g.seq, t);
      d.uniformsList = g;
    }
    function v(g, a, t, d) {
      Za.resetTextureUnits();
      var b = Ea.get(t), c = R.state.lights;
      Uc && (Qd || g !== U) && Ya.setState(t.clippingPlanes, t.clipIntersection, t.clipShadows, g, b, g === U && t.id === M);
      !1 === t.needsUpdate && (void 0 === b.program ? t.needsUpdate = !0 : t.fog && b.fog !== a ? t.needsUpdate = !0 : b.needsLights && b.lightsStateVersion !== c.state.version ? t.needsUpdate = !0 : void 0 === b.numClippingPlanes || b.numClippingPlanes === Ya.numPlanes && b.numIntersection === Ya.numIntersection || (t.needsUpdate = !0));
      t.needsUpdate && (u(t, a, d), t.needsUpdate = !1);
      var e = !1, l = !1, f = !1;
      c = b.program;
      var h = c.getUniforms(), p = b.shader.uniforms;
      na.useProgram(c.program) && (f = l = e = !0);
      t.id !== M && (M = t.id, l = !0);
      if (e || U !== g) {
        0 < c.numMultiviewViews ? tb.updateCameraProjectionMatricesUniform(g, h) : h.setValue(Z, "projectionMatrix", g.projectionMatrix);
        Fa.logarithmicDepthBuffer && h.setValue(Z, "logDepthBufFC", 2 / (Math.log(g.far + 1) / Math.LN2));
        U !== g && (U = g, f = l = !0);
        if (t.isShaderMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.envMap) {
          e = h.map.cameraPosition, void 0 !== e && e.setValue(Z, sb.setFromMatrixPosition(g.matrixWorld));
        }
        (t.isMeshPhongMaterial || t.isMeshLambertMaterial || t.isMeshBasicMaterial || t.isMeshStandardMaterial || t.isShaderMaterial) && h.setValue(Z, "isOrthographic", !0 === g.isOrthographicCamera);
        if (t.isMeshPhongMaterial || t.isMeshLambertMaterial || t.isMeshBasicMaterial || t.isMeshStandardMaterial || t.isShaderMaterial || t.skinning) {
          0 < c.numMultiviewViews ? tb.updateCameraViewMatricesUniform(g, h) : h.setValue(Z, "viewMatrix", g.matrixWorldInverse);
        }
      }
      if (t.skinning && (h.setOptional(Z, d, "bindMatrix"), h.setOptional(Z, d, "bindMatrixInverse"), e = d.skeleton)) {
        var G = e.bones;
        if (Fa.floatVertexTextures) {
          if (void 0 === e.boneTexture) {
            G = Math.sqrt(4 * G.length);
            G = ka.ceilPowerOfTwo(G);
            G = Math.max(G, 4);
            var n = new Float32Array(G * G * 4);
            n.set(e.boneMatrices);
            var k = new Da(n, G, G, 1023, 1015);
            e.boneMatrices = n;
            e.boneTexture = k;
            e.boneTextureSize = G;
          }
          h.setValue(Z, "boneTexture", e.boneTexture, Za);
          h.setValue(Z, "boneTextureSize", e.boneTextureSize);
        } else {
          h.setOptional(Z, e, "boneMatrices");
        }
      }
      if (l || b.receiveShadow !== d.receiveShadow) {
        b.receiveShadow = d.receiveShadow, h.setValue(Z, "receiveShadow", d.receiveShadow);
      }
      if (l) {
        h.setValue(Z, "toneMappingExposure", J.toneMappingExposure);
        h.setValue(Z, "toneMappingWhitePoint", J.toneMappingWhitePoint);
        b.needsLights && (l = f, p.ambientLightColor.needsUpdate = l, p.lightProbe.needsUpdate = l, p.directionalLights.needsUpdate = l, p.pointLights.needsUpdate = l, p.spotLights.needsUpdate = l, p.rectAreaLights.needsUpdate = l, p.hemisphereLights.needsUpdate = l);
        a && t.fog && (p.fogColor.value.copy(a.color), a.isFog ? (p.fogNear.value = a.near, p.fogFar.value = a.far) : a.isFogExp2 && (p.fogDensity.value = a.density));
        if (t.isMeshBasicMaterial) {
          w(p, t);
        } else {
          if (t.isMeshLambertMaterial) {
            w(p, t), t.emissiveMap && (p.emissiveMap.value = t.emissiveMap);
          } else {
            if (t.isMeshPhongMaterial) {
              w(p, t), t.isMeshToonMaterial ? (y(p, t), t.gradientMap && (p.gradientMap.value = t.gradientMap)) : y(p, t);
            } else {
              if (t.isMeshStandardMaterial) {
                w(p, t), t.isMeshPhysicalMaterial ? (x(p, t), p.reflectivity.value = t.reflectivity, p.clearcoat.value = t.clearcoat, p.clearcoatRoughness.value = t.clearcoatRoughness, t.sheen && p.sheen.value.copy(t.sheen), t.clearcoatNormalMap && (p.clearcoatNormalScale.value.copy(t.clearcoatNormalScale), p.clearcoatNormalMap.value = t.clearcoatNormalMap, 1 === t.side && p.clearcoatNormalScale.value.negate()), p.transparency.value = t.transparency) : x(p, t);
              } else {
                if (t.isMeshMatcapMaterial) {
                  w(p, t), t.matcap && (p.matcap.value = t.matcap), t.bumpMap && (p.bumpMap.value = t.bumpMap, p.bumpScale.value = t.bumpScale, 1 === t.side && (p.bumpScale.value *= -1)), t.normalMap && (p.normalMap.value = t.normalMap, p.normalScale.value.copy(t.normalScale), 1 === t.side && p.normalScale.value.negate()), t.displacementMap && (p.displacementMap.value = t.displacementMap, p.displacementScale.value = t.displacementScale, p.displacementBias.value = t.displacementBias);
                } else {
                  if (t.isMeshDepthMaterial) {
                    w(p, t), t.displacementMap && (p.displacementMap.value = t.displacementMap, p.displacementScale.value = t.displacementScale, p.displacementBias.value = t.displacementBias);
                  } else {
                    if (t.isMeshDistanceMaterial) {
                      w(p, t), t.displacementMap && (p.displacementMap.value = t.displacementMap, p.displacementScale.value = t.displacementScale, p.displacementBias.value = t.displacementBias), p.referencePosition.value.copy(t.referencePosition), p.nearDistance.value = t.nearDistance, p.farDistance.value = t.farDistance;
                    } else {
                      if (t.isMeshNormalMaterial) {
                        w(p, t), t.bumpMap && (p.bumpMap.value = t.bumpMap, p.bumpScale.value = t.bumpScale, 1 === t.side && (p.bumpScale.value *= -1)), t.normalMap && (p.normalMap.value = t.normalMap, p.normalScale.value.copy(t.normalScale), 1 === t.side && p.normalScale.value.negate()), t.displacementMap && (p.displacementMap.value = t.displacementMap, p.displacementScale.value = t.displacementScale, p.displacementBias.value = t.displacementBias);
                      } else {
                        if (t.isLineBasicMaterial) {
                          p.diffuse.value.copy(t.color), p.opacity.value = t.opacity, t.isLineDashedMaterial && (p.dashSize.value = t.dashSize, p.totalSize.value = t.dashSize + t.gapSize, p.scale.value = t.scale);
                        } else {
                          if (t.isPointsMaterial) {
                            p.diffuse.value.copy(t.color);
                            p.opacity.value = t.opacity;
                            p.size.value = t.size * Ca;
                            p.scale.value = .5 * pa;
                            t.map && (p.map.value = t.map);
                            t.alphaMap && (p.alphaMap.value = t.alphaMap);
                            if (t.map) {
                              var m = t.map;
                            } else {
                              t.alphaMap && (m = t.alphaMap);
                            }
                            void 0 !== m && (!0 === m.matrixAutoUpdate && m.updateMatrix(), p.uvTransform.value.copy(m.matrix));
                          } else {
                            if (t.isSpriteMaterial) {
                              p.diffuse.value.copy(t.color);
                              p.opacity.value = t.opacity;
                              p.rotation.value = t.rotation;
                              t.map && (p.map.value = t.map);
                              t.alphaMap && (p.alphaMap.value = t.alphaMap);
                              if (t.map) {
                                var q = t.map;
                              } else {
                                t.alphaMap && (q = t.alphaMap);
                              }
                              void 0 !== q && (!0 === q.matrixAutoUpdate && q.updateMatrix(), p.uvTransform.value.copy(q.matrix));
                            } else {
                              t.isShadowMaterial && (p.color.value.copy(t.color), p.opacity.value = t.opacity);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        void 0 !== p.ltc_1 && (p.ltc_1.value = da.LTC_1);
        void 0 !== p.ltc_2 && (p.ltc_2.value = da.LTC_2);
        cc.upload(Z, b.uniformsList, p, Za);
        t.isShaderMaterial && (t.uniformsNeedUpdate = !1);
      }
      t.isShaderMaterial && !0 === t.uniformsNeedUpdate && (cc.upload(Z, b.uniformsList, p, Za), t.uniformsNeedUpdate = !1);
      t.isSpriteMaterial && h.setValue(Z, "center", d.center);
      0 < c.numMultiviewViews ? tb.updateObjectMatricesUniforms(d, g, h) : (h.setValue(Z, "modelViewMatrix", d.modelViewMatrix), h.setValue(Z, "normalMatrix", d.normalMatrix));
      h.setValue(Z, "modelMatrix", d.matrixWorld);
      return c;
    }
    function w(g, a) {
      g.opacity.value = a.opacity;
      a.color && g.diffuse.value.copy(a.color);
      a.emissive && g.emissive.value.copy(a.emissive).multiplyScalar(a.emissiveIntensity);
      a.map && (g.map.value = a.map);
      a.alphaMap && (g.alphaMap.value = a.alphaMap);
      a.specularMap && (g.specularMap.value = a.specularMap);
      a.envMap && (g.envMap.value = a.envMap, g.flipEnvMap.value = a.envMap.isCubeTexture ? -1 : 1, g.reflectivity.value = a.reflectivity, g.refractionRatio.value = a.refractionRatio, g.maxMipLevel.value = Ea.get(a.envMap).__maxMipLevel);
      a.lightMap && (g.lightMap.value = a.lightMap, g.lightMapIntensity.value = a.lightMapIntensity);
      a.aoMap && (g.aoMap.value = a.aoMap, g.aoMapIntensity.value = a.aoMapIntensity);
      if (a.map) {
        var t = a.map;
      } else {
        a.specularMap ? t = a.specularMap : a.displacementMap ? t = a.displacementMap : a.normalMap ? t = a.normalMap : a.bumpMap ? t = a.bumpMap : a.roughnessMap ? t = a.roughnessMap : a.metalnessMap ? t = a.metalnessMap : a.alphaMap ? t = a.alphaMap : a.emissiveMap && (t = a.emissiveMap);
      }
      void 0 !== t && (t.isWebGLRenderTarget && (t = t.texture), !0 === t.matrixAutoUpdate && t.updateMatrix(), g.uvTransform.value.copy(t.matrix));
    }
    function y(g, a) {
      g.specular.value.copy(a.specular);
      g.shininess.value = Math.max(a.shininess, 1E-4);
      a.emissiveMap && (g.emissiveMap.value = a.emissiveMap);
      a.bumpMap && (g.bumpMap.value = a.bumpMap, g.bumpScale.value = a.bumpScale, 1 === a.side && (g.bumpScale.value *= -1));
      a.normalMap && (g.normalMap.value = a.normalMap, g.normalScale.value.copy(a.normalScale), 1 === a.side && g.normalScale.value.negate());
      a.displacementMap && (g.displacementMap.value = a.displacementMap, g.displacementScale.value = a.displacementScale, g.displacementBias.value = a.displacementBias);
    }
    function x(g, a) {
      g.roughness.value = a.roughness;
      g.metalness.value = a.metalness;
      a.roughnessMap && (g.roughnessMap.value = a.roughnessMap);
      a.metalnessMap && (g.metalnessMap.value = a.metalnessMap);
      a.emissiveMap && (g.emissiveMap.value = a.emissiveMap);
      a.bumpMap && (g.bumpMap.value = a.bumpMap, g.bumpScale.value = a.bumpScale, 1 === a.side && (g.bumpScale.value *= -1));
      a.normalMap && (g.normalMap.value = a.normalMap, g.normalScale.value.copy(a.normalScale), 1 === a.side && g.normalScale.value.negate());
      a.displacementMap && (g.displacementMap.value = a.displacementMap, g.displacementScale.value = a.displacementScale, g.displacementBias.value = a.displacementBias);
      a.envMap && (g.envMapIntensity.value = a.envMapIntensity);
    }
    g = g || {};
    var z = void 0 !== g.canvas ? g.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), A = void 0 !== g.context ? g.context : null, D = void 0 !== g.alpha ? g.alpha : !1, B = void 0 !== g.depth ? g.depth : !0, C = void 0 !== g.stencil ? g.stencil : !0, F = void 0 !== g.antialias ? g.antialias : !1, E = void 0 !== g.premultipliedAlpha ? g.premultipliedAlpha : !0, O = void 0 !== g.preserveDrawingBuffer ? g.preserveDrawingBuffer : !1, H = void 0 !== g.powerPreference ? g.powerPreference : 
    "default", I = void 0 !== g.failIfMajorPerformanceCaveat ? g.failIfMajorPerformanceCaveat : !1, P = null, R = null;
    this.domElement = z;
    this.debug = {checkShaderErrors:!0};
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.clippingPlanes = [];
    this.localClippingEnabled = !1;
    this.gammaFactor = 2;
    this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;
    this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    var J = this, L = !1, K = null, W = 0, N = 0, T = null, aa = null, M = -1;
    var Q = a = null;
    var S = !1;
    var U = null, ea = null, V = new r, ha = new r, ba = null, Jb = z.width, pa = z.height, Ca = 1, $b = new r(0, 0, Jb, pa), Zb = new r(0, 0, Jb, pa), oa = !1, ja = new Pa, Ya = new rb, Uc = !1, Qd = !1, sc = new m, sb = new e;
    try {
      D = {alpha:D, depth:B, stencil:C, antialias:F, premultipliedAlpha:E, preserveDrawingBuffer:O, powerPreference:H, failIfMajorPerformanceCaveat:I, xrCompatible:!0};
      z.addEventListener("webglcontextlost", b, !1);
      z.addEventListener("webglcontextrestored", c, !1);
      var Z = A || z.getContext("webgl", D) || z.getContext("experimental-webgl", D);
      if (null === Z) {
        if (null !== z.getContext("webgl")) {
          throw Error("Error creating WebGL context with your selected attributes.");
        }
        throw Error("Error creating WebGL context.");
      }
      void 0 === Z.getShaderPrecisionFormat && (Z.getShaderPrecisionFormat = function() {
        return {rangeMin:1, rangeMax:1, precision:1};
      });
    } catch (Qh) {
      throw console.error("THREE.WebGLRenderer: " + Qh.message), Qh;
    }
    var ma, Fa, na, ua, Ea, Za, bc, fb, Ka, ca, Vc, ac, ia, sa, ta, We, ra;
    d();
    var qa = "undefined" !== typeof navigator && "xr" in navigator ? new Ph(J, Z) : new qg(J);
    this.vr = qa;
    var tb = new Cj(J, Z), Xe = new Kh(J, Ka, Fa.maxTextureSize);
    this.shadowMap = Xe;
    this.getContext = function() {
      return Z;
    };
    this.getContextAttributes = function() {
      return Z.getContextAttributes();
    };
    this.forceContextLoss = function() {
      var g = ma.get("WEBGL_lose_context");
      g && g.loseContext();
    };
    this.forceContextRestore = function() {
      var g = ma.get("WEBGL_lose_context");
      g && g.restoreContext();
    };
    this.getPixelRatio = function() {
      return Ca;
    };
    this.setPixelRatio = function(g) {
      void 0 !== g && (Ca = g, this.setSize(Jb, pa, !1));
    };
    this.getSize = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), g = new k);
      return g.set(Jb, pa);
    };
    this.setSize = function(g, a, t) {
      qa.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (Jb = g, pa = a, z.width = Math.floor(g * Ca), z.height = Math.floor(a * Ca), !1 !== t && (z.style.width = g + "px", z.style.height = a + "px"), this.setViewport(0, 0, g, a));
    };
    this.getDrawingBufferSize = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), g = new k);
      return g.set(Jb * Ca, pa * Ca).floor();
    };
    this.setDrawingBufferSize = function(g, a, t) {
      Jb = g;
      pa = a;
      Ca = t;
      z.width = Math.floor(g * t);
      z.height = Math.floor(a * t);
      this.setViewport(0, 0, g, a);
    };
    this.getCurrentViewport = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), g = new r);
      return g.copy(V);
    };
    this.getViewport = function(g) {
      return g.copy($b);
    };
    this.setViewport = function(g, a, t, d) {
      g.isVector4 ? $b.set(g.x, g.y, g.z, g.w) : $b.set(g, a, t, d);
      na.viewport(V.copy($b).multiplyScalar(Ca).floor());
    };
    this.getScissor = function(g) {
      return g.copy(Zb);
    };
    this.setScissor = function(g, a, t, d) {
      g.isVector4 ? Zb.set(g.x, g.y, g.z, g.w) : Zb.set(g, a, t, d);
      na.scissor(ha.copy(Zb).multiplyScalar(Ca).floor());
    };
    this.getScissorTest = function() {
      return oa;
    };
    this.setScissorTest = function(g) {
      na.setScissorTest(oa = g);
    };
    this.getClearColor = function() {
      return ia.getClearColor();
    };
    this.setClearColor = function() {
      ia.setClearColor.apply(ia, arguments);
    };
    this.getClearAlpha = function() {
      return ia.getClearAlpha();
    };
    this.setClearAlpha = function() {
      ia.setClearAlpha.apply(ia, arguments);
    };
    this.clear = function(g, a, t) {
      var d = 0;
      if (void 0 === g || g) {
        d |= 16384;
      }
      if (void 0 === a || a) {
        d |= 256;
      }
      if (void 0 === t || t) {
        d |= 1024;
      }
      Z.clear(d);
    };
    this.clearColor = function() {
      this.clear(!0, !1, !1);
    };
    this.clearDepth = function() {
      this.clear(!1, !0, !1);
    };
    this.clearStencil = function() {
      this.clear(!1, !1, !0);
    };
    this.dispose = function() {
      z.removeEventListener("webglcontextlost", b, !1);
      z.removeEventListener("webglcontextrestored", c, !1);
      Vc.dispose();
      ac.dispose();
      Ea.dispose();
      Ka.dispose();
      qa.dispose();
      va.stop();
    };
    this.renderBufferImmediate = function(g, a) {
      na.initAttributes();
      var t = Ea.get(g);
      g.hasPositions && !t.position && (t.position = Z.createBuffer());
      g.hasNormals && !t.normal && (t.normal = Z.createBuffer());
      g.hasUvs && !t.uv && (t.uv = Z.createBuffer());
      g.hasColors && !t.color && (t.color = Z.createBuffer());
      a = a.getAttributes();
      g.hasPositions && (Z.bindBuffer(34962, t.position), Z.bufferData(34962, g.positionArray, 35048), na.enableAttribute(a.position), Z.vertexAttribPointer(a.position, 3, 5126, !1, 0, 0));
      g.hasNormals && (Z.bindBuffer(34962, t.normal), Z.bufferData(34962, g.normalArray, 35048), na.enableAttribute(a.normal), Z.vertexAttribPointer(a.normal, 3, 5126, !1, 0, 0));
      g.hasUvs && (Z.bindBuffer(34962, t.uv), Z.bufferData(34962, g.uvArray, 35048), na.enableAttribute(a.uv), Z.vertexAttribPointer(a.uv, 2, 5126, !1, 0, 0));
      g.hasColors && (Z.bindBuffer(34962, t.color), Z.bufferData(34962, g.colorArray, 35048), na.enableAttribute(a.color), Z.vertexAttribPointer(a.color, 3, 5126, !1, 0, 0));
      na.disableUnusedAttributes();
      Z.drawArrays(4, 0, g.count);
      g.count = 0;
    };
    this.renderBufferDirect = function(g, t, d, b, c, e) {
      var l = c.isMesh && 0 > c.matrixWorld.determinant();
      na.setMaterial(b, l);
      var h = v(g, t, b, c), f = !1;
      if (a !== d.id || Q !== h.id || S !== (!0 === b.wireframe)) {
        a = d.id, Q = h.id, S = !0 === b.wireframe, f = !0;
      }
      c.morphTargetInfluences && (sa.update(c, d, b, h), f = !0);
      l = d.index;
      var p = d.attributes.position;
      t = 1;
      !0 === b.wireframe && (l = fb.getWireframeAttribute(d), t = 2);
      g = ta;
      if (null !== l) {
        var G = bc.get(l);
        g = We;
        g.setIndex(G);
      }
      if (f) {
        if (!1 !== Fa.isWebGL2 || !c.isInstancedMesh && !d.isInstancedBufferGeometry || null !== ma.get("ANGLE_instanced_arrays")) {
          na.initAttributes();
          f = d.attributes;
          h = h.getAttributes();
          var n = b.defaultAttributeValues;
          for (z in h) {
            var k = h[z];
            if (0 <= k) {
              var m = f[z];
              if (void 0 !== m) {
                var q = m.normalized, u = m.itemSize, r = bc.get(m);
                if (void 0 !== r) {
                  var X = r.buffer, w = r.type;
                  r = r.bytesPerElement;
                  if (m.isInterleavedBufferAttribute) {
                    var y = m.data, x = y.stride;
                    m = m.offset;
                    y && y.isInstancedInterleavedBuffer ? (na.enableAttributeAndDivisor(k, y.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = y.meshPerAttribute * y.count)) : na.enableAttribute(k);
                    Z.bindBuffer(34962, X);
                    Z.vertexAttribPointer(k, u, w, q, x * r, m * r);
                  } else {
                    m.isInstancedBufferAttribute ? (na.enableAttributeAndDivisor(k, m.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = m.meshPerAttribute * m.count)) : na.enableAttribute(k), Z.bindBuffer(34962, X), Z.vertexAttribPointer(k, u, w, q, 0, 0);
                  }
                }
              } else {
                if ("instanceMatrix" === z) {
                  r = bc.get(c.instanceMatrix), void 0 !== r && (X = r.buffer, w = r.type, na.enableAttributeAndDivisor(k + 0, 1), na.enableAttributeAndDivisor(k + 1, 1), na.enableAttributeAndDivisor(k + 2, 1), na.enableAttributeAndDivisor(k + 3, 1), Z.bindBuffer(34962, X), Z.vertexAttribPointer(k + 0, 4, w, !1, 64, 0), Z.vertexAttribPointer(k + 1, 4, w, !1, 64, 16), Z.vertexAttribPointer(k + 2, 4, w, !1, 64, 32), Z.vertexAttribPointer(k + 3, 4, w, !1, 64, 48));
                } else {
                  if (void 0 !== n && (q = n[z], void 0 !== q)) {
                    switch(q.length) {
                      case 2:
                        Z.vertexAttrib2fv(k, q);
                        break;
                      case 3:
                        Z.vertexAttrib3fv(k, q);
                        break;
                      case 4:
                        Z.vertexAttrib4fv(k, q);
                        break;
                      default:
                        Z.vertexAttrib1fv(k, q);
                    }
                  }
                }
              }
            }
          }
          na.disableUnusedAttributes();
        }
        null !== l && Z.bindBuffer(34963, G.buffer);
      }
      G = Infinity;
      null !== l ? G = l.count : void 0 !== p && (G = p.count);
      l = d.drawRange.start * t;
      p = null !== e ? e.start * t : 0;
      var z = Math.max(l, p);
      e = Math.max(0, Math.min(G, l + d.drawRange.count * t, p + (null !== e ? e.count * t : Infinity)) - 1 - z + 1);
      if (0 !== e) {
        if (c.isMesh) {
          if (!0 === b.wireframe) {
            na.setLineWidth(b.wireframeLinewidth * (null === T ? Ca : 1)), g.setMode(1);
          } else {
            switch(c.drawMode) {
              case 0:
                g.setMode(4);
                break;
              case 1:
                g.setMode(5);
                break;
              case 2:
                g.setMode(6);
            }
          }
        } else {
          c.isLine ? (b = b.linewidth, void 0 === b && (b = 1), na.setLineWidth(b * (null === T ? Ca : 1)), c.isLineSegments ? g.setMode(1) : c.isLineLoop ? g.setMode(2) : g.setMode(3)) : c.isPoints ? g.setMode(0) : c.isSprite && g.setMode(4);
        }
        c.isInstancedMesh ? g.renderInstances(d, z, e, c.count) : d.isInstancedBufferGeometry ? g.renderInstances(d, z, e, d.maxInstancedCount) : g.render(z, e);
      }
    };
    this.compile = function(g, a) {
      R = ac.get(g, a);
      R.init();
      g.traverse(function(g) {
        g.isLight && (R.pushLight(g), g.castShadow && R.pushShadow(g));
      });
      R.setupLights(a);
      g.traverse(function(a) {
        if (a.material) {
          if (Array.isArray(a.material)) {
            for (var t = 0; t < a.material.length; t++) {
              u(a.material[t], g.fog, a);
            }
          } else {
            u(a.material, g.fog, a);
          }
        }
      });
    };
    var Rd = null, va = new Ba;
    va.setAnimationLoop(function(g) {
      qa.isPresenting() || Rd && Rd(g);
    });
    "undefined" !== typeof window && va.setContext(window);
    this.setAnimationLoop = function(g) {
      Rd = g;
      qa.setAnimationLoop(g);
      va.start();
    };
    this.render = function(g, t, d, b) {
      if (void 0 !== d) {
        console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
        var c = d;
      }
      if (void 0 !== b) {
        console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
        var e = b;
      }
      t && t.isCamera ? L || (Q = a = null, S = !1, M = -1, U = null, !0 === g.autoUpdate && g.updateMatrixWorld(), null === t.parent && t.updateMatrixWorld(), qa.enabled && (t = qa.getCamera(t)), R = ac.get(g, t), R.init(), g.onBeforeRender(J, g, t, c || T), sc.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), ja.setFromMatrix(sc), Qd = this.localClippingEnabled, Uc = Ya.init(this.clippingPlanes, Qd, t), P = Vc.get(g, t), P.init(), p(g, t, 0, J.sortObjects), !0 === J.sortObjects && P.sort(), 
      Uc && Ya.beginShadows(), Xe.render(R.state.shadowsArray, g, t), R.setupLights(t), Uc && Ya.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== c && this.setRenderTarget(c), qa.enabled && tb.isAvailable() && tb.attachCamera(t), ia.render(P, g, t, e), d = P.opaque, b = P.transparent, g.overrideMaterial ? (c = g.overrideMaterial, d.length && n(d, g, t, c), b.length && n(b, g, t, c)) : (d.length && n(d, g, t), b.length && n(b, g, t)), g.onAfterRender(J, g, t), null !== T && (Za.updateRenderTargetMipmap(T), 
      Za.updateMultisampleRenderTarget(T)), na.buffers.depth.setTest(!0), na.buffers.depth.setMask(!0), na.buffers.color.setMask(!0), na.setPolygonOffset(!1), qa.enabled && (tb.isAvailable() && tb.detachCamera(t), qa.submitFrame()), R = P = null) : console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
    };
    this.setFramebuffer = function(g) {
      K !== g && null === T && Z.bindFramebuffer(36160, g);
      K = g;
    };
    this.getActiveCubeFace = function() {
      return W;
    };
    this.getActiveMipmapLevel = function() {
      return N;
    };
    this.getRenderTarget = function() {
      return T;
    };
    this.setRenderTarget = function(g, a, t) {
      T = g;
      W = a;
      N = t;
      g && void 0 === Ea.get(g).__webglFramebuffer && Za.setupRenderTarget(g);
      var d = K, b = !1;
      g ? (d = Ea.get(g).__webglFramebuffer, g.isWebGLRenderTargetCube ? (d = d[a || 0], b = !0) : d = g.isWebGLMultisampleRenderTarget ? Ea.get(g).__webglMultisampledFramebuffer : d, V.copy(g.viewport), ha.copy(g.scissor), ba = g.scissorTest) : (V.copy($b).multiplyScalar(Ca).floor(), ha.copy(Zb).multiplyScalar(Ca).floor(), ba = oa);
      aa !== d && (Z.bindFramebuffer(36160, d), aa = d);
      na.viewport(V);
      na.scissor(ha);
      na.setScissorTest(ba);
      b && (g = Ea.get(g.texture), Z.framebufferTexture2D(36160, 36064, 34069 + (a || 0), g.__webglTexture, t || 0));
    };
    this.readRenderTargetPixels = function(g, a, t, d, b, c, e) {
      if (g && g.isWebGLRenderTarget) {
        var l = Ea.get(g).__webglFramebuffer;
        g.isWebGLRenderTargetCube && void 0 !== e && (l = l[e]);
        if (l) {
          e = !1;
          l !== aa && (Z.bindFramebuffer(36160, l), e = !0);
          try {
            var h = g.texture, f = h.format, p = h.type;
            1023 !== f && ra.convert(f) !== Z.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === p || ra.convert(p) === Z.getParameter(35738) || 1015 === p && (Fa.isWebGL2 || ma.get("OES_texture_float") || ma.get("WEBGL_color_buffer_float")) || 1016 === p && (Fa.isWebGL2 ? ma.get("EXT_color_buffer_float") : ma.get("EXT_color_buffer_half_float")) ? 36053 === Z.checkFramebufferStatus(36160) ? 0 <= 
            a && a <= g.width - d && 0 <= t && t <= g.height - b && Z.readPixels(a, t, d, b, ra.convert(f), ra.convert(p), c) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            e && Z.bindFramebuffer(36160, aa);
          }
        }
      } else {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
    };
    this.copyFramebufferToTexture = function(g, a, t) {
      void 0 === t && (t = 0);
      var d = Math.pow(2, -t), b = Math.floor(a.image.width * d);
      d = Math.floor(a.image.height * d);
      var c = ra.convert(a.format);
      Za.setTexture2D(a, 0);
      Z.copyTexImage2D(3553, t, c, g.x, g.y, b, d, 0);
      na.unbindTexture();
    };
    this.copyTextureToTexture = function(g, a, t, d) {
      var b = a.image.width, c = a.image.height, e = ra.convert(t.format), l = ra.convert(t.type);
      Za.setTexture2D(t, 0);
      a.isDataTexture ? Z.texSubImage2D(3553, d || 0, g.x, g.y, b, c, e, l, a.image.data) : Z.texSubImage2D(3553, d || 0, g.x, g.y, e, l, a.image);
      na.unbindTexture();
    };
    this.initTexture = function(g) {
      Za.setTexture2D(g, 0);
      na.unbindTexture();
    };
    "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail:this}));
  }
  function Ze(g, a) {
    this.name = "";
    this.color = new B(g);
    this.density = void 0 !== a ? a : 2.5E-4;
  }
  function $e(g, a, d) {
    this.name = "";
    this.color = new B(g);
    this.near = void 0 !== a ? a : 1;
    this.far = void 0 !== d ? d : 1E3;
  }
  function Kb(g, a) {
    this.array = g;
    this.stride = a;
    this.count = void 0 !== g ? g.length / a : 0;
    this.usage = 35044;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function Vd(g, a, d, b) {
    this.data = g;
    this.itemSize = a;
    this.offset = d;
    this.normalized = !0 === b;
  }
  function fc(g) {
    H.call(this);
    this.type = "SpriteMaterial";
    this.color = new B(16777215);
    this.alphaMap = this.map = null;
    this.rotation = 0;
    this.transparent = this.sizeAttenuation = !0;
    this.setValues(g);
  }
  function Wd(g) {
    v.call(this);
    this.type = "Sprite";
    if (void 0 === Xc) {
      Xc = new J;
      var a = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);
      a = new Kb(a, 5);
      Xc.setIndex([0, 1, 2, 0, 2, 3]);
      Xc.setAttribute("position", new Vd(a, 3, 0, !1));
      Xc.setAttribute("uv", new Vd(a, 2, 3, !1));
    }
    this.geometry = Xc;
    this.material = void 0 !== g ? g : new fc;
    this.center = new k(.5, .5);
  }
  function af(g, a, d, b, c, e) {
    Yc.subVectors(g, d).addScalar(.5).multiply(b);
    void 0 !== c ? (Xd.x = e * Yc.x - c * Yc.y, Xd.y = c * Yc.x + e * Yc.y) : Xd.copy(Yc);
    g.copy(a);
    g.x += Xd.x;
    g.y += Xd.y;
    g.applyMatrix4(Rh);
  }
  function Yd() {
    v.call(this);
    this.type = "LOD";
    Object.defineProperties(this, {levels:{enumerable:!0, value:[]}});
    this.autoUpdate = !0;
  }
  function Zd(g, a) {
    g && g.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    U.call(this, g, a);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new m;
    this.bindMatrixInverse = new m;
  }
  function bf(g, a) {
    g = g || [];
    this.bones = g.slice(0);
    this.boneMatrices = new Float32Array(16 * this.bones.length);
    this.frame = -1;
    if (void 0 === a) {
      this.calculateInverses();
    } else {
      if (this.bones.length === a.length) {
        this.boneInverses = a.slice(0);
      } else {
        for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], g = 0, a = this.bones.length; g < a; g++) {
          this.boneInverses.push(new m);
        }
      }
    }
  }
  function sg() {
    v.call(this);
    this.type = "Bone";
  }
  function cf(g, a, d) {
    U.call(this, g, a);
    this.instanceMatrix = new K(new Float32Array(16 * d), 16);
    this.count = d;
  }
  function ta(g) {
    H.call(this);
    this.type = "LineBasicMaterial";
    this.color = new B(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.setValues(g);
  }
  function Ga(g, a, d) {
    1 === d && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    v.call(this);
    this.type = "Line";
    this.geometry = void 0 !== g ? g : new J;
    this.material = void 0 !== a ? a : new ta({color:16777215 * Math.random()});
  }
  function ra(g, a) {
    Ga.call(this, g, a);
    this.type = "LineSegments";
  }
  function df(g, a) {
    Ga.call(this, g, a);
    this.type = "LineLoop";
  }
  function gb(g) {
    H.call(this);
    this.type = "PointsMaterial";
    this.color = new B(16777215);
    this.alphaMap = this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.morphTargets = !1;
    this.setValues(g);
  }
  function Zc(g, a) {
    v.call(this);
    this.type = "Points";
    this.geometry = void 0 !== g ? g : new J;
    this.material = void 0 !== a ? a : new gb({color:16777215 * Math.random()});
    this.updateMorphTargets();
  }
  function tg(g, a, d, b, c, l, h) {
    var t = ug.distanceSqToPoint(g);
    t < d && (d = new e, ug.closestPointToPoint(g, d), d.applyMatrix4(b), g = c.ray.origin.distanceTo(d), g < c.near || g > c.far || l.push({distance:g, distanceToRay:Math.sqrt(t), point:d, index:a, face:null, object:h}));
  }
  function vg(g, a, d, b, c, e, l, f, p) {
    h.call(this, g, a, d, b, c, e, l, f, p);
    this.format = void 0 !== l ? l : 1022;
    this.minFilter = void 0 !== e ? e : 1006;
    this.magFilter = void 0 !== c ? c : 1006;
    this.generateMipmaps = !1;
  }
  function $c(g, a, d, b, c, e, l, f, p, k, n, m) {
    h.call(this, null, e, l, f, p, k, b, c, n, m);
    this.image = {width:a, height:d};
    this.mipmaps = g;
    this.generateMipmaps = this.flipY = !1;
  }
  function $d(g, a, d, b, c, e, l, f, p) {
    h.call(this, g, a, d, b, c, e, l, f, p);
    this.needsUpdate = !0;
  }
  function ae(g, a, d, b, c, e, l, f, p, k) {
    k = void 0 !== k ? k : 1026;
    if (1026 !== k && 1027 !== k) {
      throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    void 0 === d && 1026 === k && (d = 1012);
    void 0 === d && 1027 === k && (d = 1020);
    h.call(this, null, b, c, e, l, f, k, d, p);
    this.image = {width:g, height:a};
    this.magFilter = void 0 !== l ? l : 1003;
    this.minFilter = void 0 !== f ? f : 1003;
    this.generateMipmaps = this.flipY = !1;
  }
  function ad(g) {
    J.call(this);
    this.type = "WireframeGeometry";
    var a = [], d, b, c, l = [0, 0], h = {}, f = ["a", "b", "c"];
    if (g && g.isGeometry) {
      var p = g.faces;
      var k = 0;
      for (b = p.length; k < b; k++) {
        var n = p[k];
        for (d = 0; 3 > d; d++) {
          var m = n[f[d]];
          var q = n[f[(d + 1) % 3]];
          l[0] = Math.min(m, q);
          l[1] = Math.max(m, q);
          m = l[0] + "," + l[1];
          void 0 === h[m] && (h[m] = {index1:l[0], index2:l[1]});
        }
      }
      for (m in h) {
        k = h[m], f = g.vertices[k.index1], a.push(f.x, f.y, f.z), f = g.vertices[k.index2], a.push(f.x, f.y, f.z);
      }
    } else {
      if (g && g.isBufferGeometry) {
        if (f = new e, null !== g.index) {
          p = g.attributes.position;
          n = g.index;
          var u = g.groups;
          0 === u.length && (u = [{start:0, count:n.count, materialIndex:0}]);
          g = 0;
          for (c = u.length; g < c; ++g) {
            for (k = u[g], d = k.start, b = k.count, k = d, b = d + b; k < b; k += 3) {
              for (d = 0; 3 > d; d++) {
                m = n.getX(k + d), q = n.getX(k + (d + 1) % 3), l[0] = Math.min(m, q), l[1] = Math.max(m, q), m = l[0] + "," + l[1], void 0 === h[m] && (h[m] = {index1:l[0], index2:l[1]});
              }
            }
          }
          for (m in h) {
            k = h[m], f.fromBufferAttribute(p, k.index1), a.push(f.x, f.y, f.z), f.fromBufferAttribute(p, k.index2), a.push(f.x, f.y, f.z);
          }
        } else {
          for (p = g.attributes.position, k = 0, b = p.count / 3; k < b; k++) {
            for (d = 0; 3 > d; d++) {
              h = 3 * k + d, f.fromBufferAttribute(p, h), a.push(f.x, f.y, f.z), h = 3 * k + (d + 1) % 3, f.fromBufferAttribute(p, h), a.push(f.x, f.y, f.z);
            }
          }
        }
      }
    }
    this.setAttribute("position", new N(a, 3));
  }
  function be(g, a, d) {
    V.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {func:g, slices:a, stacks:d};
    this.fromBufferGeometry(new bd(g, a, d));
    this.mergeVertices();
  }
  function bd(g, a, d) {
    J.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {func:g, slices:a, stacks:d};
    var t = [], b = [], c = [], l = [], f = new e, h = new e, p = new e, k = new e, m = new e, G, n;
    3 > g.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    var q = a + 1;
    for (G = 0; G <= d; G++) {
      var u = G / d;
      for (n = 0; n <= a; n++) {
        var r = n / a;
        g(r, u, h);
        b.push(h.x, h.y, h.z);
        0 <= r - 1E-5 ? (g(r - 1E-5, u, p), k.subVectors(h, p)) : (g(r + 1E-5, u, p), k.subVectors(p, h));
        0 <= u - 1E-5 ? (g(r, u - 1E-5, p), m.subVectors(h, p)) : (g(r, u + 1E-5, p), m.subVectors(p, h));
        f.crossVectors(k, m).normalize();
        c.push(f.x, f.y, f.z);
        l.push(r, u);
      }
    }
    for (G = 0; G < d; G++) {
      for (n = 0; n < a; n++) {
        g = G * q + n + 1, f = (G + 1) * q + n + 1, h = (G + 1) * q + n, t.push(G * q + n, g, h), t.push(g, f, h);
      }
    }
    this.setIndex(t);
    this.setAttribute("position", new N(b, 3));
    this.setAttribute("normal", new N(c, 3));
    this.setAttribute("uv", new N(l, 2));
  }
  function ce(g, a, d, b) {
    V.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = {vertices:g, indices:a, radius:d, detail:b};
    this.fromBufferGeometry(new Ta(g, a, d, b));
    this.mergeVertices();
  }
  function Ta(g, a, d, b) {
    function t(g) {
      f.push(g.x, g.y, g.z);
    }
    function c(a, t) {
      a *= 3;
      t.x = g[a + 0];
      t.y = g[a + 1];
      t.z = g[a + 2];
    }
    function l(g, a, t, d) {
      0 > d && 1 === g.x && (h[a] = g.x - 1);
      0 === t.x && 0 === t.z && (h[a] = d / 2 / Math.PI + .5);
    }
    J.call(this);
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {vertices:g, indices:a, radius:d, detail:b};
    d = d || 1;
    b = b || 0;
    var f = [], h = [];
    (function(g) {
      for (var d = new e, b = new e, l = new e, f = 0; f < a.length; f += 3) {
        c(a[f + 0], d);
        c(a[f + 1], b);
        c(a[f + 2], l);
        var h, p, k = d, n = b, m = l, G = Math.pow(2, g), q = [];
        for (p = 0; p <= G; p++) {
          q[p] = [];
          var u = k.clone().lerp(m, p / G), r = n.clone().lerp(m, p / G), v = G - p;
          for (h = 0; h <= v; h++) {
            q[p][h] = 0 === h && p === G ? u : u.clone().lerp(r, h / v);
          }
        }
        for (p = 0; p < G; p++) {
          for (h = 0; h < 2 * (G - p) - 1; h++) {
            k = Math.floor(h / 2), 0 === h % 2 ? (t(q[p][k + 1]), t(q[p + 1][k]), t(q[p][k])) : (t(q[p][k + 1]), t(q[p + 1][k + 1]), t(q[p + 1][k]));
          }
        }
      }
    })(b);
    (function(g) {
      for (var a = new e, t = 0; t < f.length; t += 3) {
        a.x = f[t + 0], a.y = f[t + 1], a.z = f[t + 2], a.normalize().multiplyScalar(g), f[t + 0] = a.x, f[t + 1] = a.y, f[t + 2] = a.z;
      }
    })(d);
    (function() {
      for (var g = new e, a = 0; a < f.length; a += 3) {
        g.x = f[a + 0], g.y = f[a + 1], g.z = f[a + 2], h.push(Math.atan2(g.z, -g.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-g.y, Math.sqrt(g.x * g.x + g.z * g.z)) / Math.PI + .5));
      }
      g = new e;
      a = new e;
      for (var t = new e, d = new e, b = new k, c = new k, p = new k, n = 0, m = 0; n < f.length; n += 9, m += 6) {
        g.set(f[n + 0], f[n + 1], f[n + 2]);
        a.set(f[n + 3], f[n + 4], f[n + 5]);
        t.set(f[n + 6], f[n + 7], f[n + 8]);
        b.set(h[m + 0], h[m + 1]);
        c.set(h[m + 2], h[m + 3]);
        p.set(h[m + 4], h[m + 5]);
        d.copy(g).add(a).add(t).divideScalar(3);
        var G = Math.atan2(d.z, -d.x);
        l(b, m + 0, g, G);
        l(c, m + 2, a, G);
        l(p, m + 4, t, G);
      }
      for (g = 0; g < h.length; g += 6) {
        a = h[g + 0], t = h[g + 2], d = h[g + 4], b = Math.min(a, t, d), .9 < Math.max(a, t, d) && .1 > b && (.2 > a && (h[g + 0] += 1), .2 > t && (h[g + 2] += 1), .2 > d && (h[g + 4] += 1));
      }
    })();
    this.setAttribute("position", new N(f, 3));
    this.setAttribute("normal", new N(f.slice(), 3));
    this.setAttribute("uv", new N(h, 2));
    0 === b ? this.computeVertexNormals() : this.normalizeNormals();
  }
  function de(g, a) {
    V.call(this);
    this.type = "TetrahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new cd(g, a));
    this.mergeVertices();
  }
  function cd(g, a) {
    Ta.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], g, a);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function ee(g, a) {
    V.call(this);
    this.type = "OctahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new tc(g, a));
    this.mergeVertices();
  }
  function tc(g, a) {
    Ta.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], g, a);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function fe(g, a) {
    V.call(this);
    this.type = "IcosahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new dd(g, a));
    this.mergeVertices();
  }
  function dd(g, a) {
    var t = (1 + Math.sqrt(5)) / 2;
    Ta.call(this, [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], g, a);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function ge(g, a) {
    V.call(this);
    this.type = "DodecahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new ed(g, a));
    this.mergeVertices();
  }
  function ed(g, a) {
    var t = (1 + Math.sqrt(5)) / 2, d = 1 / t;
    Ta.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -t, 0, -d, t, 0, d, -t, 0, d, t, -d, -t, 0, -d, t, 0, d, -t, 0, d, t, 0, -t, 0, -d, t, 0, -d, -t, 0, d, t, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 
    8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], g, a);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function he(g, a, d, b, c, e) {
    V.call(this);
    this.type = "TubeGeometry";
    this.parameters = {path:g, tubularSegments:a, radius:d, radialSegments:b, closed:c};
    void 0 !== e && console.warn("THREE.TubeGeometry: taper has been removed.");
    g = new uc(g, a, d, b, c);
    this.tangents = g.tangents;
    this.normals = g.normals;
    this.binormals = g.binormals;
    this.fromBufferGeometry(g);
    this.mergeVertices();
  }
  function uc(g, a, d, b, c) {
    function t(t) {
      n = g.getPointAt(t / a, n);
      var c = l.normals[t];
      t = l.binormals[t];
      for (G = 0; G <= b; G++) {
        var e = G / b * Math.PI * 2, p = Math.sin(e);
        e = -Math.cos(e);
        f.x = e * c.x + p * t.x;
        f.y = e * c.y + p * t.y;
        f.z = e * c.z + p * t.z;
        f.normalize();
        u.push(f.x, f.y, f.z);
        h.x = n.x + d * f.x;
        h.y = n.y + d * f.y;
        h.z = n.z + d * f.z;
        q.push(h.x, h.y, h.z);
      }
    }
    J.call(this);
    this.type = "TubeBufferGeometry";
    this.parameters = {path:g, tubularSegments:a, radius:d, radialSegments:b, closed:c};
    a = a || 64;
    d = d || 1;
    b = b || 8;
    c = c || !1;
    var l = g.computeFrenetFrames(a, c);
    this.tangents = l.tangents;
    this.normals = l.normals;
    this.binormals = l.binormals;
    var h = new e, f = new e, p = new k, n = new e, m, G, q = [], u = [], r = [], v = [];
    for (m = 0; m < a; m++) {
      t(m);
    }
    t(!1 === c ? a : 0);
    for (m = 0; m <= a; m++) {
      for (G = 0; G <= b; G++) {
        p.x = m / a, p.y = G / b, r.push(p.x, p.y);
      }
    }
    (function() {
      for (G = 1; G <= a; G++) {
        for (m = 1; m <= b; m++) {
          var g = (b + 1) * G + (m - 1), t = (b + 1) * G + m, d = (b + 1) * (G - 1) + m;
          v.push((b + 1) * (G - 1) + (m - 1), g, d);
          v.push(g, t, d);
        }
      }
    })();
    this.setIndex(v);
    this.setAttribute("position", new N(q, 3));
    this.setAttribute("normal", new N(u, 3));
    this.setAttribute("uv", new N(r, 2));
  }
  function ie(g, a, d, b, c, e, l) {
    V.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = {radius:g, tube:a, tubularSegments:d, radialSegments:b, p:c, q:e};
    void 0 !== l && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new fd(g, a, d, b, c, e));
    this.mergeVertices();
  }
  function fd(g, a, d, b, c, l) {
    function t(g, a, t, d, b) {
      var c = Math.sin(g);
      a = t / a * g;
      t = Math.cos(a);
      b.x = d * (2 + t) * .5 * Math.cos(g);
      b.y = d * (2 + t) * c * .5;
      b.z = d * Math.sin(a) * .5;
    }
    J.call(this);
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {radius:g, tube:a, tubularSegments:d, radialSegments:b, p:c, q:l};
    g = g || 1;
    a = a || .4;
    d = Math.floor(d) || 64;
    b = Math.floor(b) || 8;
    c = c || 2;
    l = l || 3;
    var f = [], h = [], p = [], k = [], m, n = new e, G = new e, q = new e, u = new e, r = new e, v = new e, X = new e;
    for (m = 0; m <= d; ++m) {
      var w = m / d * c * Math.PI * 2;
      t(w, c, l, g, q);
      t(w + .01, c, l, g, u);
      v.subVectors(u, q);
      X.addVectors(u, q);
      r.crossVectors(v, X);
      X.crossVectors(r, v);
      r.normalize();
      X.normalize();
      for (w = 0; w <= b; ++w) {
        var y = w / b * Math.PI * 2, x = -a * Math.cos(y);
        y = a * Math.sin(y);
        n.x = q.x + (x * X.x + y * r.x);
        n.y = q.y + (x * X.y + y * r.y);
        n.z = q.z + (x * X.z + y * r.z);
        h.push(n.x, n.y, n.z);
        G.subVectors(n, q).normalize();
        p.push(G.x, G.y, G.z);
        k.push(m / d);
        k.push(w / b);
      }
    }
    for (w = 1; w <= d; w++) {
      for (m = 1; m <= b; m++) {
        g = (b + 1) * w + (m - 1), a = (b + 1) * w + m, c = (b + 1) * (w - 1) + m, f.push((b + 1) * (w - 1) + (m - 1), g, c), f.push(g, a, c);
      }
    }
    this.setIndex(f);
    this.setAttribute("position", new N(h, 3));
    this.setAttribute("normal", new N(p, 3));
    this.setAttribute("uv", new N(k, 2));
  }
  function je(g, a, d, b, c) {
    V.call(this);
    this.type = "TorusGeometry";
    this.parameters = {radius:g, tube:a, radialSegments:d, tubularSegments:b, arc:c};
    this.fromBufferGeometry(new gd(g, a, d, b, c));
    this.mergeVertices();
  }
  function gd(g, a, d, b, c) {
    J.call(this);
    this.type = "TorusBufferGeometry";
    this.parameters = {radius:g, tube:a, radialSegments:d, tubularSegments:b, arc:c};
    g = g || 1;
    a = a || .4;
    d = Math.floor(d) || 8;
    b = Math.floor(b) || 6;
    c = c || 2 * Math.PI;
    var t = [], l = [], f = [], h = [], p = new e, k = new e, m = new e, n, G;
    for (n = 0; n <= d; n++) {
      for (G = 0; G <= b; G++) {
        var q = G / b * c, u = n / d * Math.PI * 2;
        k.x = (g + a * Math.cos(u)) * Math.cos(q);
        k.y = (g + a * Math.cos(u)) * Math.sin(q);
        k.z = a * Math.sin(u);
        l.push(k.x, k.y, k.z);
        p.x = g * Math.cos(q);
        p.y = g * Math.sin(q);
        m.subVectors(k, p).normalize();
        f.push(m.x, m.y, m.z);
        h.push(G / b);
        h.push(n / d);
      }
    }
    for (n = 1; n <= d; n++) {
      for (G = 1; G <= b; G++) {
        g = (b + 1) * (n - 1) + G - 1, a = (b + 1) * (n - 1) + G, c = (b + 1) * n + G, t.push((b + 1) * n + G - 1, g, c), t.push(g, a, c);
      }
    }
    this.setIndex(t);
    this.setAttribute("position", new N(l, 3));
    this.setAttribute("normal", new N(f, 3));
    this.setAttribute("uv", new N(h, 2));
  }
  function Sh(g, a, d, b, c) {
    for (var t, e = 0, l = a, f = d - b; l < d; l += b) {
      e += (g[f] - g[l]) * (g[l + 1] + g[f + 1]), f = l;
    }
    if (c === 0 < e) {
      for (c = a; c < d; c += b) {
        t = Th(c, g[c], g[c + 1], t);
      }
    } else {
      for (c = d - b; c >= a; c -= b) {
        t = Th(c, g[c], g[c + 1], t);
      }
    }
    t && vc(t, t.next) && (ke(t), t = t.next);
    return t;
  }
  function le(g, a) {
    if (!g) {
      return g;
    }
    a || (a = g);
    do {
      var t = !1;
      if (g.steiner || !vc(g, g.next) && 0 !== Ha(g.prev, g, g.next)) {
        g = g.next;
      } else {
        ke(g);
        g = a = g.prev;
        if (g === g.next) {
          break;
        }
        t = !0;
      }
    } while (t || g !== a);
    return a;
  }
  function me(g, a, d, b, c, e, l) {
    if (g) {
      if (!l && e) {
        var t = g, f = t;
        do {
          null === f.z && (f.z = wg(f.x, f.y, b, c, e)), f.prevZ = f.prev, f = f.nextZ = f.next;
        } while (f !== t);
        f.prevZ.nextZ = null;
        f.prevZ = null;
        t = f;
        var h, p, k, m, n = 1;
        do {
          f = t;
          var G = t = null;
          for (p = 0; f;) {
            p++;
            var q = f;
            for (h = k = 0; h < n && (k++, q = q.nextZ, q); h++) {
            }
            for (m = n; 0 < k || 0 < m && q;) {
              0 !== k && (0 === m || !q || f.z <= q.z) ? (h = f, f = f.nextZ, k--) : (h = q, q = q.nextZ, m--), G ? G.nextZ = h : t = h, h.prevZ = G, G = h;
            }
            f = q;
          }
          G.nextZ = null;
          n *= 2;
        } while (1 < p);
      }
      for (t = g; g.prev !== g.next;) {
        f = g.prev;
        q = g.next;
        if (e) {
          G = Dj(g, b, c, e);
        } else {
          a: {
            if (G = g, p = G.prev, k = G, n = G.next, 0 <= Ha(p, k, n)) {
              G = !1;
            } else {
              for (h = G.next.next; h !== G.prev;) {
                if (hd(p.x, p.y, k.x, k.y, n.x, n.y, h.x, h.y) && 0 <= Ha(h.prev, h, h.next)) {
                  G = !1;
                  break a;
                }
                h = h.next;
              }
              G = !0;
            }
          }
        }
        if (G) {
          a.push(f.i / d), a.push(g.i / d), a.push(q.i / d), ke(g), t = g = q.next;
        } else {
          if (g = q, g === t) {
            if (!l) {
              me(le(g), a, d, b, c, e, 1);
            } else {
              if (1 === l) {
                l = a;
                t = d;
                f = g;
                do {
                  q = f.prev, G = f.next.next, !vc(q, G) && Uh(q, f, f.next, G) && ne(q, G) && ne(G, q) && (l.push(q.i / t), l.push(f.i / t), l.push(G.i / t), ke(f), ke(f.next), f = g = G), f = f.next;
                } while (f !== g);
                g = f;
                me(g, a, d, b, c, e, 2);
              } else {
                if (2 === l) {
                  a: {
                    l = g;
                    do {
                      for (t = l.next.next; t !== l.prev;) {
                        if (f = l.i !== t.i) {
                          f = l;
                          q = t;
                          if (G = f.next.i !== q.i && f.prev.i !== q.i) {
                            b: {
                              G = f;
                              do {
                                if (G.i !== f.i && G.next.i !== f.i && G.i !== q.i && G.next.i !== q.i && Uh(G, G.next, f, q)) {
                                  G = !0;
                                  break b;
                                }
                                G = G.next;
                              } while (G !== f);
                              G = !1;
                            }
                            G = !G;
                          }
                          if (G = G && ne(f, q) && ne(q, f)) {
                            G = f;
                            p = !1;
                            k = (f.x + q.x) / 2;
                            q = (f.y + q.y) / 2;
                            do {
                              G.y > q !== G.next.y > q && G.next.y !== G.y && k < (G.next.x - G.x) * (q - G.y) / (G.next.y - G.y) + G.x && (p = !p), G = G.next;
                            } while (G !== f);
                            G = p;
                          }
                          f = G;
                        }
                        if (f) {
                          g = Vh(l, t);
                          l = le(l, l.next);
                          g = le(g, g.next);
                          me(l, a, d, b, c, e);
                          me(g, a, d, b, c, e);
                          break a;
                        }
                        t = t.next;
                      }
                      l = l.next;
                    } while (l !== g);
                  }
                }
              }
            }
            break;
          }
        }
      }
    }
  }
  function Dj(g, a, d, b) {
    var t = g.prev, c = g.next;
    if (0 <= Ha(t, g, c)) {
      return !1;
    }
    var e = t.x > g.x ? t.x > c.x ? t.x : c.x : g.x > c.x ? g.x : c.x, l = t.y > g.y ? t.y > c.y ? t.y : c.y : g.y > c.y ? g.y : c.y, f = wg(t.x < g.x ? t.x < c.x ? t.x : c.x : g.x < c.x ? g.x : c.x, t.y < g.y ? t.y < c.y ? t.y : c.y : g.y < c.y ? g.y : c.y, a, d, b);
    a = wg(e, l, a, d, b);
    d = g.prevZ;
    for (b = g.nextZ; d && d.z >= f && b && b.z <= a;) {
      if (d !== g.prev && d !== g.next && hd(t.x, t.y, g.x, g.y, c.x, c.y, d.x, d.y) && 0 <= Ha(d.prev, d, d.next)) {
        return !1;
      }
      d = d.prevZ;
      if (b !== g.prev && b !== g.next && hd(t.x, t.y, g.x, g.y, c.x, c.y, b.x, b.y) && 0 <= Ha(b.prev, b, b.next)) {
        return !1;
      }
      b = b.nextZ;
    }
    for (; d && d.z >= f;) {
      if (d !== g.prev && d !== g.next && hd(t.x, t.y, g.x, g.y, c.x, c.y, d.x, d.y) && 0 <= Ha(d.prev, d, d.next)) {
        return !1;
      }
      d = d.prevZ;
    }
    for (; b && b.z <= a;) {
      if (b !== g.prev && b !== g.next && hd(t.x, t.y, g.x, g.y, c.x, c.y, b.x, b.y) && 0 <= Ha(b.prev, b, b.next)) {
        return !1;
      }
      b = b.nextZ;
    }
    return !0;
  }
  function Ej(g, a) {
    return g.x - a.x;
  }
  function Fj(g, a) {
    var t = a, d = g.x, b = g.y, c = -Infinity;
    do {
      if (b <= t.y && b >= t.next.y && t.next.y !== t.y) {
        var e = t.x + (b - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
        if (e <= d && e > c) {
          c = e;
          if (e === d) {
            if (b === t.y) {
              return t;
            }
            if (b === t.next.y) {
              return t.next;
            }
          }
          var l = t.x < t.next.x ? t : t.next;
        }
      }
      t = t.next;
    } while (t !== a);
    if (!l) {
      return null;
    }
    if (d === c) {
      return l.prev;
    }
    a = l;
    e = l.x;
    var f = l.y, h = Infinity;
    for (t = l.next; t !== a;) {
      if (d >= t.x && t.x >= e && d !== t.x && hd(b < f ? d : c, b, e, f, b < f ? c : d, b, t.x, t.y)) {
        var p = Math.abs(b - t.y) / (d - t.x);
        (p < h || p === h && t.x > l.x) && ne(t, g) && (l = t, h = p);
      }
      t = t.next;
    }
    return l;
  }
  function wg(g, a, d, b, c) {
    g = 32767 * (g - d) * c;
    a = 32767 * (a - b) * c;
    g = (g | g << 8) & 16711935;
    g = (g | g << 4) & 252645135;
    g = (g | g << 2) & 858993459;
    a = (a | a << 8) & 16711935;
    a = (a | a << 4) & 252645135;
    a = (a | a << 2) & 858993459;
    return (g | g << 1) & 1431655765 | ((a | a << 1) & 1431655765) << 1;
  }
  function Gj(g) {
    var a = g, d = g;
    do {
      if (a.x < d.x || a.x === d.x && a.y < d.y) {
        d = a;
      }
      a = a.next;
    } while (a !== g);
    return d;
  }
  function hd(g, a, d, b, c, e, l, f) {
    return 0 <= (c - l) * (a - f) - (g - l) * (e - f) && 0 <= (g - l) * (b - f) - (d - l) * (a - f) && 0 <= (d - l) * (e - f) - (c - l) * (b - f);
  }
  function Ha(g, a, d) {
    return (a.y - g.y) * (d.x - a.x) - (a.x - g.x) * (d.y - a.y);
  }
  function vc(g, a) {
    return g.x === a.x && g.y === a.y;
  }
  function Uh(g, a, d, b) {
    return vc(g, d) && vc(a, b) || vc(g, b) && vc(d, a) ? !0 : 0 < Ha(g, a, d) !== 0 < Ha(g, a, b) && 0 < Ha(d, b, g) !== 0 < Ha(d, b, a);
  }
  function ne(g, a) {
    return 0 > Ha(g.prev, g, g.next) ? 0 <= Ha(g, a, g.next) && 0 <= Ha(g, g.prev, a) : 0 > Ha(g, a, g.prev) || 0 > Ha(g, g.next, a);
  }
  function Vh(g, a) {
    var d = new xg(g.i, g.x, g.y), t = new xg(a.i, a.x, a.y), b = g.next, c = a.prev;
    g.next = a;
    a.prev = g;
    d.next = b;
    b.prev = d;
    t.next = d;
    d.prev = t;
    c.next = t;
    t.prev = c;
    return t;
  }
  function Th(g, a, d, b) {
    g = new xg(g, a, d);
    b ? (g.next = b.next, g.prev = b, b.next.prev = g, b.next = g) : (g.prev = g, g.next = g);
    return g;
  }
  function ke(g) {
    g.next.prev = g.prev;
    g.prev.next = g.next;
    g.prevZ && (g.prevZ.nextZ = g.nextZ);
    g.nextZ && (g.nextZ.prevZ = g.prevZ);
  }
  function xg(g, a, d) {
    this.i = g;
    this.x = a;
    this.y = d;
    this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
    this.steiner = !1;
  }
  function Wh(g) {
    var a = g.length;
    2 < a && g[a - 1].equals(g[0]) && g.pop();
  }
  function Xh(g, a) {
    for (var d = 0; d < a.length; d++) {
      g.push(a[d].x), g.push(a[d].y);
    }
  }
  function wc(g, a) {
    V.call(this);
    this.type = "ExtrudeGeometry";
    this.parameters = {shapes:g, options:a};
    this.fromBufferGeometry(new ub(g, a));
    this.mergeVertices();
  }
  function ub(g, a) {
    function d(g) {
      function d(g, a, d) {
        a || console.error("THREE.ExtrudeGeometry: vec does not exist");
        return a.clone().multiplyScalar(d).add(g);
      }
      function l(g, a, d) {
        var t = g.x - a.x;
        var b = g.y - a.y;
        var c = d.x - g.x;
        var e = d.y - g.y, l = t * t + b * b;
        if (Math.abs(t * e - b * c) > Number.EPSILON) {
          var f = Math.sqrt(l), h = Math.sqrt(c * c + e * e);
          l = a.x - b / f;
          a = a.y + t / f;
          e = ((d.x - e / h - l) * e - (d.y + c / h - a) * c) / (t * e - b * c);
          c = l + t * e - g.x;
          t = a + b * e - g.y;
          b = c * c + t * t;
          if (2 >= b) {
            return new k(c, t);
          }
          b = Math.sqrt(b / 2);
        } else {
          g = !1, t > Number.EPSILON ? c > Number.EPSILON && (g = !0) : t < -Number.EPSILON ? c < -Number.EPSILON && (g = !0) : Math.sign(b) === Math.sign(e) && (g = !0), g ? (c = -b, b = Math.sqrt(l)) : (c = t, t = b, b = Math.sqrt(l / 2));
        }
        return new k(c / b, t / b);
      }
      function f(g, a) {
        for (L = g.length; 0 <= --L;) {
          var d = L;
          var c = L - 1;
          0 > c && (c = g.length - 1);
          var e, l = u + 2 * x;
          for (e = 0; e < l; e++) {
            var f = P * e, h = P * (e + 1), p = a + c + f, k = a + c + h;
            h = a + d + h;
            m(a + d + f);
            m(p);
            m(h);
            m(p);
            m(k);
            m(h);
            f = b.length / 3;
            f = fa.generateSideWallUV(t, b, f - 6, f - 3, f - 2, f - 1);
            n(f[0]);
            n(f[1]);
            n(f[3]);
            n(f[1]);
            n(f[2]);
            n(f[3]);
          }
        }
      }
      function h(g, a, d) {
        q.push(g);
        q.push(a);
        q.push(d);
      }
      function p(g, a, d) {
        m(g);
        m(a);
        m(d);
        g = b.length / 3;
        g = fa.generateTopUV(t, b, g - 3, g - 2, g - 1);
        n(g[0]);
        n(g[1]);
        n(g[2]);
      }
      function m(g) {
        b.push(q[3 * g]);
        b.push(q[3 * g + 1]);
        b.push(q[3 * g + 2]);
      }
      function n(g) {
        c.push(g.x);
        c.push(g.y);
      }
      var q = [], G = void 0 !== a.curveSegments ? a.curveSegments : 12, u = void 0 !== a.steps ? a.steps : 1, r = void 0 !== a.depth ? a.depth : 100, v = void 0 !== a.bevelEnabled ? a.bevelEnabled : !0, w = void 0 !== a.bevelThickness ? a.bevelThickness : 6, X = void 0 !== a.bevelSize ? a.bevelSize : w - 2, y = void 0 !== a.bevelOffset ? a.bevelOffset : 0, x = void 0 !== a.bevelSegments ? a.bevelSegments : 3, z = a.extrudePath, fa = void 0 !== a.UVGenerator ? a.UVGenerator : Hj;
      void 0 !== a.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), r = a.amount);
      var A = !1;
      if (z) {
        var Y = z.getSpacedPoints(u);
        A = !0;
        v = !1;
        var D = z.computeFrenetFrames(u, !1);
        var B = new e;
        var Pc = new e;
        var C = new e;
      }
      v || (y = X = w = x = 0);
      var F;
      G = g.extractPoints(G);
      g = G.shape;
      var E = G.holes;
      if (!Lb.isClockWise(g)) {
        g = g.reverse();
        var wa = 0;
        for (F = E.length; wa < F; wa++) {
          var O = E[wa];
          Lb.isClockWise(O) && (E[wa] = O.reverse());
        }
      }
      var H = Lb.triangulateShape(g, E), I = g;
      wa = 0;
      for (F = E.length; wa < F; wa++) {
        O = E[wa], g = g.concat(O);
      }
      var R, P = g.length, J, Wb = H.length;
      G = [];
      var L = 0;
      var K = I.length;
      var W = K - 1;
      for (R = L + 1; L < K; L++, W++, R++) {
        W === K && (W = 0), R === K && (R = 0), G[L] = l(I[L], I[W], I[R]);
      }
      z = [];
      var N = G.concat();
      wa = 0;
      for (F = E.length; wa < F; wa++) {
        O = E[wa];
        var T = [];
        L = 0;
        K = O.length;
        W = K - 1;
        for (R = L + 1; L < K; L++, W++, R++) {
          W === K && (W = 0), R === K && (R = 0), T[L] = l(O[L], O[W], O[R]);
        }
        z.push(T);
        N = N.concat(T);
      }
      for (W = 0; W < x; W++) {
        K = W / x;
        var aa = w * Math.cos(K * Math.PI / 2);
        R = X * Math.sin(K * Math.PI / 2) + y;
        L = 0;
        for (K = I.length; L < K; L++) {
          var M = d(I[L], G[L], R);
          h(M.x, M.y, -aa);
        }
        wa = 0;
        for (F = E.length; wa < F; wa++) {
          for (O = E[wa], T = z[wa], L = 0, K = O.length; L < K; L++) {
            M = d(O[L], T[L], R), h(M.x, M.y, -aa);
          }
        }
      }
      R = X + y;
      for (L = 0; L < P; L++) {
        M = v ? d(g[L], N[L], R) : g[L], A ? (Pc.copy(D.normals[0]).multiplyScalar(M.x), B.copy(D.binormals[0]).multiplyScalar(M.y), C.copy(Y[0]).add(Pc).add(B), h(C.x, C.y, C.z)) : h(M.x, M.y, 0);
      }
      for (K = 1; K <= u; K++) {
        for (L = 0; L < P; L++) {
          M = v ? d(g[L], N[L], R) : g[L], A ? (Pc.copy(D.normals[K]).multiplyScalar(M.x), B.copy(D.binormals[K]).multiplyScalar(M.y), C.copy(Y[K]).add(Pc).add(B), h(C.x, C.y, C.z)) : h(M.x, M.y, r / u * K);
        }
      }
      for (W = x - 1; 0 <= W; W--) {
        K = W / x;
        aa = w * Math.cos(K * Math.PI / 2);
        R = X * Math.sin(K * Math.PI / 2) + y;
        L = 0;
        for (K = I.length; L < K; L++) {
          M = d(I[L], G[L], R), h(M.x, M.y, r + aa);
        }
        wa = 0;
        for (F = E.length; wa < F; wa++) {
          for (O = E[wa], T = z[wa], L = 0, K = O.length; L < K; L++) {
            M = d(O[L], T[L], R), A ? h(M.x, M.y + Y[u - 1].y, Y[u - 1].x + aa) : h(M.x, M.y, r + aa);
          }
        }
      }
      (function() {
        var g = b.length / 3;
        if (v) {
          var a = 0 * P;
          for (L = 0; L < Wb; L++) {
            J = H[L], p(J[2] + a, J[1] + a, J[0] + a);
          }
          a = P * (u + 2 * x);
          for (L = 0; L < Wb; L++) {
            J = H[L], p(J[0] + a, J[1] + a, J[2] + a);
          }
        } else {
          for (L = 0; L < Wb; L++) {
            J = H[L], p(J[2], J[1], J[0]);
          }
          for (L = 0; L < Wb; L++) {
            J = H[L], p(J[0] + P * u, J[1] + P * u, J[2] + P * u);
          }
        }
        t.addGroup(g, b.length / 3 - g, 0);
      })();
      (function() {
        var g = b.length / 3, a = 0;
        f(I, a);
        a += I.length;
        wa = 0;
        for (F = E.length; wa < F; wa++) {
          O = E[wa], f(O, a), a += O.length;
        }
        t.addGroup(g, b.length / 3 - g, 1);
      })();
    }
    J.call(this);
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {shapes:g, options:a};
    g = Array.isArray(g) ? g : [g];
    for (var t = this, b = [], c = [], l = 0, f = g.length; l < f; l++) {
      d(g[l]);
    }
    this.setAttribute("position", new N(b, 3));
    this.setAttribute("uv", new N(c, 2));
    this.computeVertexNormals();
  }
  function Yh(g, a, d) {
    d.shapes = [];
    if (Array.isArray(g)) {
      for (var t = 0, b = g.length; t < b; t++) {
        d.shapes.push(g[t].uuid);
      }
    } else {
      d.shapes.push(g.uuid);
    }
    void 0 !== a.extrudePath && (d.options.extrudePath = a.extrudePath.toJSON());
    return d;
  }
  function oe(g, a) {
    V.call(this);
    this.type = "TextGeometry";
    this.parameters = {text:g, parameters:a};
    this.fromBufferGeometry(new id(g, a));
    this.mergeVertices();
  }
  function id(g, a) {
    a = a || {};
    var d = a.font;
    if (!d || !d.isFont) {
      return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new V;
    }
    g = d.generateShapes(g, a.size);
    a.depth = void 0 !== a.height ? a.height : 50;
    void 0 === a.bevelThickness && (a.bevelThickness = 10);
    void 0 === a.bevelSize && (a.bevelSize = 8);
    void 0 === a.bevelEnabled && (a.bevelEnabled = !1);
    ub.call(this, g, a);
    this.type = "TextBufferGeometry";
  }
  function pe(g, a, d, b, c, e, l) {
    V.call(this);
    this.type = "SphereGeometry";
    this.parameters = {radius:g, widthSegments:a, heightSegments:d, phiStart:b, phiLength:c, thetaStart:e, thetaLength:l};
    this.fromBufferGeometry(new gc(g, a, d, b, c, e, l));
    this.mergeVertices();
  }
  function gc(g, a, d, b, c, l, f) {
    J.call(this);
    this.type = "SphereBufferGeometry";
    this.parameters = {radius:g, widthSegments:a, heightSegments:d, phiStart:b, phiLength:c, thetaStart:l, thetaLength:f};
    g = g || 1;
    a = Math.max(3, Math.floor(a) || 8);
    d = Math.max(2, Math.floor(d) || 6);
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 2 * Math.PI;
    l = void 0 !== l ? l : 0;
    f = void 0 !== f ? f : Math.PI;
    var t = Math.min(l + f, Math.PI), h, p, k = 0, m = [], n = new e, q = new e, G = [], u = [], r = [], v = [];
    for (p = 0; p <= d; p++) {
      var w = [], X = p / d, y = 0;
      0 == p && 0 == l ? y = .5 / a : p == d && t == Math.PI && (y = -.5 / a);
      for (h = 0; h <= a; h++) {
        var x = h / a;
        n.x = -g * Math.cos(b + x * c) * Math.sin(l + X * f);
        n.y = g * Math.cos(l + X * f);
        n.z = g * Math.sin(b + x * c) * Math.sin(l + X * f);
        u.push(n.x, n.y, n.z);
        q.copy(n).normalize();
        r.push(q.x, q.y, q.z);
        v.push(x + y, 1 - X);
        w.push(k++);
      }
      m.push(w);
    }
    for (p = 0; p < d; p++) {
      for (h = 0; h < a; h++) {
        g = m[p][h + 1], b = m[p][h], c = m[p + 1][h], f = m[p + 1][h + 1], (0 !== p || 0 < l) && G.push(g, b, f), (p !== d - 1 || t < Math.PI) && G.push(b, c, f);
      }
    }
    this.setIndex(G);
    this.setAttribute("position", new N(u, 3));
    this.setAttribute("normal", new N(r, 3));
    this.setAttribute("uv", new N(v, 2));
  }
  function qe(g, a, d, b, c, e) {
    V.call(this);
    this.type = "RingGeometry";
    this.parameters = {innerRadius:g, outerRadius:a, thetaSegments:d, phiSegments:b, thetaStart:c, thetaLength:e};
    this.fromBufferGeometry(new jd(g, a, d, b, c, e));
    this.mergeVertices();
  }
  function jd(g, a, d, b, c, l) {
    J.call(this);
    this.type = "RingBufferGeometry";
    this.parameters = {innerRadius:g, outerRadius:a, thetaSegments:d, phiSegments:b, thetaStart:c, thetaLength:l};
    g = g || .5;
    a = a || 1;
    c = void 0 !== c ? c : 0;
    l = void 0 !== l ? l : 2 * Math.PI;
    d = void 0 !== d ? Math.max(3, d) : 8;
    b = void 0 !== b ? Math.max(1, b) : 1;
    var t = [], f = [], h = [], p = [], n = g, m = (a - g) / b, q = new e, G = new k, u, r;
    for (u = 0; u <= b; u++) {
      for (r = 0; r <= d; r++) {
        g = c + r / d * l, q.x = n * Math.cos(g), q.y = n * Math.sin(g), f.push(q.x, q.y, q.z), h.push(0, 0, 1), G.x = (q.x / a + 1) / 2, G.y = (q.y / a + 1) / 2, p.push(G.x, G.y);
      }
      n += m;
    }
    for (u = 0; u < b; u++) {
      for (a = u * (d + 1), r = 0; r < d; r++) {
        g = r + a, c = g + d + 1, l = g + d + 2, n = g + 1, t.push(g, c, n), t.push(c, l, n);
      }
    }
    this.setIndex(t);
    this.setAttribute("position", new N(f, 3));
    this.setAttribute("normal", new N(h, 3));
    this.setAttribute("uv", new N(p, 2));
  }
  function re(g, a, d, b) {
    V.call(this);
    this.type = "LatheGeometry";
    this.parameters = {points:g, segments:a, phiStart:d, phiLength:b};
    this.fromBufferGeometry(new kd(g, a, d, b));
    this.mergeVertices();
  }
  function kd(g, a, d, b) {
    J.call(this);
    this.type = "LatheBufferGeometry";
    this.parameters = {points:g, segments:a, phiStart:d, phiLength:b};
    a = Math.floor(a) || 12;
    d = d || 0;
    b = b || 2 * Math.PI;
    b = ka.clamp(b, 0, 2 * Math.PI);
    var t = [], c = [], l = [], f = 1 / a, h = new e, p = new k, n;
    for (n = 0; n <= a; n++) {
      var m = d + n * f * b;
      var q = Math.sin(m), u = Math.cos(m);
      for (m = 0; m <= g.length - 1; m++) {
        h.x = g[m].x * q, h.y = g[m].y, h.z = g[m].x * u, c.push(h.x, h.y, h.z), p.x = n / a, p.y = m / (g.length - 1), l.push(p.x, p.y);
      }
    }
    for (n = 0; n < a; n++) {
      for (m = 0; m < g.length - 1; m++) {
        d = m + n * g.length, f = d + g.length, h = d + g.length + 1, p = d + 1, t.push(d, f, p), t.push(f, h, p);
      }
    }
    this.setIndex(t);
    this.setAttribute("position", new N(c, 3));
    this.setAttribute("uv", new N(l, 2));
    this.computeVertexNormals();
    if (b === 2 * Math.PI) {
      for (b = this.attributes.normal.array, t = new e, c = new e, l = new e, d = a * g.length * 3, m = n = 0; n < g.length; n++, m += 3) {
        t.x = b[m + 0], t.y = b[m + 1], t.z = b[m + 2], c.x = b[d + m + 0], c.y = b[d + m + 1], c.z = b[d + m + 2], l.addVectors(t, c).normalize(), b[m + 0] = b[d + m + 0] = l.x, b[m + 1] = b[d + m + 1] = l.y, b[m + 2] = b[d + m + 2] = l.z;
      }
    }
  }
  function xc(g, a) {
    V.call(this);
    this.type = "ShapeGeometry";
    "object" === typeof a && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), a = a.curveSegments);
    this.parameters = {shapes:g, curveSegments:a};
    this.fromBufferGeometry(new yc(g, a));
    this.mergeVertices();
  }
  function yc(g, a) {
    function d(g) {
      var d, l = b.length / 3;
      g = g.extractPoints(a);
      var h = g.shape, p = g.holes;
      !1 === Lb.isClockWise(h) && (h = h.reverse());
      g = 0;
      for (d = p.length; g < d; g++) {
        var m = p[g];
        !0 === Lb.isClockWise(m) && (p[g] = m.reverse());
      }
      var n = Lb.triangulateShape(h, p);
      g = 0;
      for (d = p.length; g < d; g++) {
        m = p[g], h = h.concat(m);
      }
      g = 0;
      for (d = h.length; g < d; g++) {
        m = h[g], b.push(m.x, m.y, 0), c.push(0, 0, 1), e.push(m.x, m.y);
      }
      g = 0;
      for (d = n.length; g < d; g++) {
        h = n[g], t.push(h[0] + l, h[1] + l, h[2] + l), f += 3;
      }
    }
    J.call(this);
    this.type = "ShapeBufferGeometry";
    this.parameters = {shapes:g, curveSegments:a};
    a = a || 12;
    var t = [], b = [], c = [], e = [], l = 0, f = 0;
    if (!1 === Array.isArray(g)) {
      d(g);
    } else {
      for (var h = 0; h < g.length; h++) {
        d(g[h]), this.addGroup(l, f, h), l += f, f = 0;
      }
    }
    this.setIndex(t);
    this.setAttribute("position", new N(b, 3));
    this.setAttribute("normal", new N(c, 3));
    this.setAttribute("uv", new N(e, 2));
  }
  function Zh(g, a) {
    a.shapes = [];
    if (Array.isArray(g)) {
      for (var d = 0, t = g.length; d < t; d++) {
        a.shapes.push(g[d].uuid);
      }
    } else {
      a.shapes.push(g.uuid);
    }
    return a;
  }
  function ld(g, a) {
    J.call(this);
    this.type = "EdgesGeometry";
    this.parameters = {thresholdAngle:a};
    var d = [];
    a = Math.cos(ka.DEG2RAD * (void 0 !== a ? a : 1));
    var t = [0, 0], b = {}, c = ["a", "b", "c"];
    if (g.isBufferGeometry) {
      var e = new V;
      e.fromBufferGeometry(g);
    } else {
      e = g.clone();
    }
    e.mergeVertices();
    e.computeFaceNormals();
    g = e.vertices;
    e = e.faces;
    for (var l = 0, f = e.length; l < f; l++) {
      for (var h = e[l], p = 0; 3 > p; p++) {
        var m = h[c[p]];
        var n = h[c[(p + 1) % 3]];
        t[0] = Math.min(m, n);
        t[1] = Math.max(m, n);
        m = t[0] + "," + t[1];
        void 0 === b[m] ? b[m] = {index1:t[0], index2:t[1], face1:l, face2:void 0} : b[m].face2 = l;
      }
    }
    for (m in b) {
      if (t = b[m], void 0 === t.face2 || e[t.face1].normal.dot(e[t.face2].normal) <= a) {
        c = g[t.index1], d.push(c.x, c.y, c.z), c = g[t.index2], d.push(c.x, c.y, c.z);
      }
    }
    this.setAttribute("position", new N(d, 3));
  }
  function zc(g, a, d, b, c, e, l, f) {
    V.call(this);
    this.type = "CylinderGeometry";
    this.parameters = {radiusTop:g, radiusBottom:a, height:d, radialSegments:b, heightSegments:c, openEnded:e, thetaStart:l, thetaLength:f};
    this.fromBufferGeometry(new Mb(g, a, d, b, c, e, l, f));
    this.mergeVertices();
  }
  function Mb(g, a, d, b, c, l, f, h) {
    function t(d) {
      var t, c = new k, l = new e, G = 0, y = !0 === d ? g : a, X = !0 === d ? 1 : -1;
      var x = r;
      for (t = 1; t <= b; t++) {
        n.push(0, v * X, 0), q.push(0, X, 0), u.push(.5, .5), r++;
      }
      var z = r;
      for (t = 0; t <= b; t++) {
        var A = t / b * h + f, fa = Math.cos(A);
        A = Math.sin(A);
        l.x = y * A;
        l.y = v * X;
        l.z = y * fa;
        n.push(l.x, l.y, l.z);
        q.push(0, X, 0);
        c.x = .5 * fa + .5;
        c.y = .5 * A * X + .5;
        u.push(c.x, c.y);
        r++;
      }
      for (t = 0; t < b; t++) {
        c = x + t, l = z + t, !0 === d ? m.push(l, l + 1, c) : m.push(l + 1, l, c), G += 3;
      }
      p.addGroup(w, G, !0 === d ? 1 : 2);
      w += G;
    }
    J.call(this);
    this.type = "CylinderBufferGeometry";
    this.parameters = {radiusTop:g, radiusBottom:a, height:d, radialSegments:b, heightSegments:c, openEnded:l, thetaStart:f, thetaLength:h};
    var p = this;
    g = void 0 !== g ? g : 1;
    a = void 0 !== a ? a : 1;
    d = d || 1;
    b = Math.floor(b) || 8;
    c = Math.floor(c) || 1;
    l = void 0 !== l ? l : !1;
    f = void 0 !== f ? f : 0;
    h = void 0 !== h ? h : 2 * Math.PI;
    var m = [], n = [], q = [], u = [], r = 0, G = [], v = d / 2, w = 0;
    (function() {
      var t, l, k = new e, y = new e, X = 0, x = (a - g) / d;
      for (l = 0; l <= c; l++) {
        var z = [], A = l / c, fa = A * (a - g) + g;
        for (t = 0; t <= b; t++) {
          var D = t / b, Y = D * h + f, B = Math.sin(Y);
          Y = Math.cos(Y);
          y.x = fa * B;
          y.y = -A * d + v;
          y.z = fa * Y;
          n.push(y.x, y.y, y.z);
          k.set(B, x, Y).normalize();
          q.push(k.x, k.y, k.z);
          u.push(D, 1 - A);
          z.push(r++);
        }
        G.push(z);
      }
      for (t = 0; t < b; t++) {
        for (l = 0; l < c; l++) {
          k = G[l + 1][t], y = G[l + 1][t + 1], x = G[l][t + 1], m.push(G[l][t], k, x), m.push(k, y, x), X += 6;
        }
      }
      p.addGroup(w, X, 0);
      w += X;
    })();
    !1 === l && (0 < g && t(!0), 0 < a && t(!1));
    this.setIndex(m);
    this.setAttribute("position", new N(n, 3));
    this.setAttribute("normal", new N(q, 3));
    this.setAttribute("uv", new N(u, 2));
  }
  function se(g, a, d, b, c, e, l) {
    zc.call(this, 0, g, a, d, b, c, e, l);
    this.type = "ConeGeometry";
    this.parameters = {radius:g, height:a, radialSegments:d, heightSegments:b, openEnded:c, thetaStart:e, thetaLength:l};
  }
  function te(g, a, d, b, c, e, l) {
    Mb.call(this, 0, g, a, d, b, c, e, l);
    this.type = "ConeBufferGeometry";
    this.parameters = {radius:g, height:a, radialSegments:d, heightSegments:b, openEnded:c, thetaStart:e, thetaLength:l};
  }
  function ue(g, a, d, b) {
    V.call(this);
    this.type = "CircleGeometry";
    this.parameters = {radius:g, segments:a, thetaStart:d, thetaLength:b};
    this.fromBufferGeometry(new md(g, a, d, b));
    this.mergeVertices();
  }
  function md(g, a, d, b) {
    J.call(this);
    this.type = "CircleBufferGeometry";
    this.parameters = {radius:g, segments:a, thetaStart:d, thetaLength:b};
    g = g || 1;
    a = void 0 !== a ? Math.max(3, a) : 8;
    d = void 0 !== d ? d : 0;
    b = void 0 !== b ? b : 2 * Math.PI;
    var t = [], c = [], l = [], f = [], h, p = new e, m = new k;
    c.push(0, 0, 0);
    l.push(0, 0, 1);
    f.push(.5, .5);
    var n = 0;
    for (h = 3; n <= a; n++, h += 3) {
      var q = d + n / a * b;
      p.x = g * Math.cos(q);
      p.y = g * Math.sin(q);
      c.push(p.x, p.y, p.z);
      l.push(0, 0, 1);
      m.x = (c[h] / g + 1) / 2;
      m.y = (c[h + 1] / g + 1) / 2;
      f.push(m.x, m.y);
    }
    for (h = 1; h <= a; h++) {
      t.push(h, h + 1, 0);
    }
    this.setIndex(t);
    this.setAttribute("position", new N(c, 3));
    this.setAttribute("normal", new N(l, 3));
    this.setAttribute("uv", new N(f, 2));
  }
  function Ac(g) {
    H.call(this);
    this.type = "ShadowMaterial";
    this.color = new B(0);
    this.transparent = !0;
    this.setValues(g);
  }
  function nd(g) {
    ja.call(this, g);
    this.type = "RawShaderMaterial";
  }
  function vb(g) {
    H.call(this);
    this.defines = {STANDARD:""};
    this.type = "MeshStandardMaterial";
    this.color = new B(16777215);
    this.metalness = this.roughness = .5;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new B(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function Bc(g) {
    vb.call(this);
    this.defines = {STANDARD:"", PHYSICAL:""};
    this.type = "MeshPhysicalMaterial";
    this.reflectivity = .5;
    this.clearcoatRoughness = this.clearcoat = 0;
    this.sheen = null;
    this.clearcoatNormalScale = new k(1, 1);
    this.clearcoatNormalMap = null;
    this.transparency = 0;
    this.setValues(g);
  }
  function hb(g) {
    H.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new B(16777215);
    this.specular = new B(1118481);
    this.shininess = 30;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new B(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function Cc(g) {
    hb.call(this);
    this.defines = {TOON:""};
    this.type = "MeshToonMaterial";
    this.gradientMap = null;
    this.setValues(g);
  }
  function Dc(g) {
    H.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.fog = !1;
    this.setValues(g);
  }
  function Ec(g) {
    H.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new B(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new B(0);
    this.emissiveIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function Fc(g) {
    H.call(this);
    this.defines = {MATCAP:""};
    this.type = "MeshMatcapMaterial";
    this.color = new B(16777215);
    this.bumpMap = this.map = this.matcap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function Gc(g) {
    ta.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(g);
  }
  function $a(g, a, d, b) {
    this.parameterPositions = g;
    this._cachedIndex = 0;
    this.resultBuffer = void 0 !== b ? b : new a.constructor(d);
    this.sampleValues = a;
    this.valueSize = d;
  }
  function ef(g, a, d, b) {
    $a.call(this, g, a, d, b);
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }
  function ve(g, a, d, b) {
    $a.call(this, g, a, d, b);
  }
  function ff(g, a, d, b) {
    $a.call(this, g, a, d, b);
  }
  function Ia(g, a, d, b) {
    if (void 0 === g) {
      throw Error("THREE.KeyframeTrack: track name is undefined");
    }
    if (void 0 === a || 0 === a.length) {
      throw Error("THREE.KeyframeTrack: no keyframes in track named " + g);
    }
    this.name = g;
    this.times = ya.convertArray(a, this.TimeBufferType);
    this.values = ya.convertArray(d, this.ValueBufferType);
    this.setInterpolation(b || this.DefaultInterpolation);
  }
  function gf(g, a, d) {
    Ia.call(this, g, a, d);
  }
  function hf(g, a, d, b) {
    Ia.call(this, g, a, d, b);
  }
  function od(g, a, d, b) {
    Ia.call(this, g, a, d, b);
  }
  function jf(g, a, d, b) {
    $a.call(this, g, a, d, b);
  }
  function we(g, a, d, b) {
    Ia.call(this, g, a, d, b);
  }
  function kf(g, a, d, b) {
    Ia.call(this, g, a, d, b);
  }
  function pd(g, a, d, b) {
    Ia.call(this, g, a, d, b);
  }
  function db(g, a, d) {
    this.name = g;
    this.tracks = d;
    this.duration = void 0 !== a ? a : -1;
    this.uuid = ka.generateUUID();
    0 > this.duration && this.resetDuration();
  }
  function Ij(g) {
    switch(g.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return od;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return pd;
      case "color":
        return hf;
      case "quaternion":
        return we;
      case "bool":
      case "boolean":
        return gf;
      case "string":
        return kf;
    }
    throw Error("THREE.KeyframeTrack: Unsupported typeName: " + g);
  }
  function Jj(g) {
    if (void 0 === g.type) {
      throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    var a = Ij(g.type);
    if (void 0 === g.times) {
      var d = [], b = [];
      ya.flattenJSON(g.keys, d, b, "value");
      g.times = d;
      g.values = b;
    }
    return void 0 !== a.parse ? a.parse(g) : new a(g.name, g.times, g.values, g.interpolation);
  }
  function yg(g, a, d) {
    var t = this, b = !1, c = 0, e = 0, l = void 0, f = [];
    this.onStart = void 0;
    this.onLoad = g;
    this.onProgress = a;
    this.onError = d;
    this.itemStart = function(g) {
      e++;
      if (!1 === b && void 0 !== t.onStart) {
        t.onStart(g, c, e);
      }
      b = !0;
    };
    this.itemEnd = function(g) {
      c++;
      if (void 0 !== t.onProgress) {
        t.onProgress(g, c, e);
      }
      if (c === e && (b = !1, void 0 !== t.onLoad)) {
        t.onLoad();
      }
    };
    this.itemError = function(g) {
      if (void 0 !== t.onError) {
        t.onError(g);
      }
    };
    this.resolveURL = function(g) {
      return l ? l(g) : g;
    };
    this.setURLModifier = function(g) {
      l = g;
      return this;
    };
    this.addHandler = function(g, a) {
      f.push(g, a);
      return this;
    };
    this.removeHandler = function(g) {
      g = f.indexOf(g);
      -1 !== g && f.splice(g, 2);
      return this;
    };
    this.getHandler = function(g) {
      for (var a = 0, d = f.length; a < d; a += 2) {
        var t = f[a + 1];
        if (f[a].test(g)) {
          return t;
        }
      }
      return null;
    };
  }
  function sa(g) {
    this.manager = void 0 !== g ? g : $h;
    this.crossOrigin = "anonymous";
    this.resourcePath = this.path = "";
  }
  function eb(g) {
    sa.call(this, g);
  }
  function zg(g) {
    sa.call(this, g);
  }
  function Ag(g) {
    sa.call(this, g);
  }
  function lf(g) {
    sa.call(this, g);
  }
  function qd(g) {
    sa.call(this, g);
  }
  function mf(g) {
    sa.call(this, g);
  }
  function nf(g) {
    sa.call(this, g);
  }
  function ca() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  function ab(g, a, d, b, c, e, l, f) {
    ca.call(this);
    this.type = "EllipseCurve";
    this.aX = g || 0;
    this.aY = a || 0;
    this.xRadius = d || 1;
    this.yRadius = b || 1;
    this.aStartAngle = c || 0;
    this.aEndAngle = e || 2 * Math.PI;
    this.aClockwise = l || !1;
    this.aRotation = f || 0;
  }
  function rd(g, a, d, b, c, e) {
    ab.call(this, g, a, d, d, b, c, e);
    this.type = "ArcCurve";
  }
  function Bg() {
    var g = 0, a = 0, d = 0, b = 0;
    return {initCatmullRom:function(t, c, e, l, f) {
      t = f * (e - t);
      l = f * (l - c);
      g = c;
      a = t;
      d = -3 * c + 3 * e - 2 * t - l;
      b = 2 * c - 2 * e + t + l;
    }, initNonuniformCatmullRom:function(t, c, e, l, f, h, p) {
      t = ((c - t) / f - (e - t) / (f + h) + (e - c) / h) * h;
      l = ((e - c) / h - (l - c) / (h + p) + (l - e) / p) * h;
      g = c;
      a = t;
      d = -3 * c + 3 * e - 2 * t - l;
      b = 2 * c - 2 * e + t + l;
    }, calc:function(t) {
      var c = t * t;
      return g + a * t + d * c + b * c * t;
    }};
  }
  function Na(g, a, d, b) {
    ca.call(this);
    this.type = "CatmullRomCurve3";
    this.points = g || [];
    this.closed = a || !1;
    this.curveType = d || "centripetal";
    this.tension = b || .5;
  }
  function ai(g, a, d, b, c) {
    a = .5 * (b - a);
    c = .5 * (c - d);
    var t = g * g;
    return (2 * d - 2 * b + a + c) * g * t + (-3 * d + 3 * b - 2 * a - c) * t + a * g + d;
  }
  function xe(g, a, d, b) {
    var t = 1 - g;
    return t * t * a + 2 * (1 - g) * g * d + g * g * b;
  }
  function ye(g, a, d, b, c) {
    var t = 1 - g, e = 1 - g;
    return t * t * t * a + 3 * e * e * g * d + 3 * (1 - g) * g * g * b + g * g * g * c;
  }
  function ib(g, a, d, b) {
    ca.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = g || new k;
    this.v1 = a || new k;
    this.v2 = d || new k;
    this.v3 = b || new k;
  }
  function wb(g, a, d, b) {
    ca.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = g || new e;
    this.v1 = a || new e;
    this.v2 = d || new e;
    this.v3 = b || new e;
  }
  function Ua(g, a) {
    ca.call(this);
    this.type = "LineCurve";
    this.v1 = g || new k;
    this.v2 = a || new k;
  }
  function jb(g, a) {
    ca.call(this);
    this.type = "LineCurve3";
    this.v1 = g || new e;
    this.v2 = a || new e;
  }
  function kb(g, a, d) {
    ca.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = g || new k;
    this.v1 = a || new k;
    this.v2 = d || new k;
  }
  function xb(g, a, d) {
    ca.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = g || new e;
    this.v1 = a || new e;
    this.v2 = d || new e;
  }
  function lb(g) {
    ca.call(this);
    this.type = "SplineCurve";
    this.points = g || [];
  }
  function Nb() {
    ca.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = !1;
  }
  function mb(g) {
    Nb.call(this);
    this.type = "Path";
    this.currentPoint = new k;
    g && this.setFromPoints(g);
  }
  function hc(g) {
    mb.call(this, g);
    this.uuid = ka.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  function qa(g, a) {
    v.call(this);
    this.type = "Light";
    this.color = new B(g);
    this.intensity = void 0 !== a ? a : 1;
    this.receiveShadow = void 0;
  }
  function of(g, a, d) {
    qa.call(this, g, d);
    this.type = "HemisphereLight";
    this.castShadow = void 0;
    this.position.copy(v.DefaultUp);
    this.updateMatrix();
    this.groundColor = new B(a);
  }
  function yb(g) {
    this.camera = g;
    this.bias = 0;
    this.radius = 1;
    this.mapSize = new k(512, 512);
    this.mapPass = this.map = null;
    this.matrix = new m;
    this._frustum = new Pa;
    this._frameExtents = new k(1, 1);
    this._viewportCount = 1;
    this._viewports = [new r(0, 0, 1, 1)];
  }
  function pf() {
    yb.call(this, new oa(50, 1, .5, 500));
  }
  function qf(g, a, d, b, c, e) {
    qa.call(this, g, a);
    this.type = "SpotLight";
    this.position.copy(v.DefaultUp);
    this.updateMatrix();
    this.target = new v;
    Object.defineProperty(this, "power", {get:function() {
      return this.intensity * Math.PI;
    }, set:function(g) {
      this.intensity = g / Math.PI;
    }});
    this.distance = void 0 !== d ? d : 0;
    this.angle = void 0 !== b ? b : Math.PI / 3;
    this.penumbra = void 0 !== c ? c : 0;
    this.decay = void 0 !== e ? e : 1;
    this.shadow = new pf;
  }
  function Cg() {
    yb.call(this, new oa(90, 1, .5, 500));
    this._frameExtents = new k(4, 2);
    this._viewportCount = 6;
    this._viewports = [new r(2, 1, 1, 1), new r(0, 1, 1, 1), new r(3, 1, 1, 1), new r(1, 1, 1, 1), new r(3, 0, 1, 1), new r(1, 0, 1, 1)];
    this._cubeDirections = [new e(1, 0, 0), new e(-1, 0, 0), new e(0, 0, 1), new e(0, 0, -1), new e(0, 1, 0), new e(0, -1, 0)];
    this._cubeUps = [new e(0, 1, 0), new e(0, 1, 0), new e(0, 1, 0), new e(0, 1, 0), new e(0, 0, 1), new e(0, 0, -1)];
  }
  function rf(g, a, d, b) {
    qa.call(this, g, a);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {get:function() {
      return 4 * this.intensity * Math.PI;
    }, set:function(g) {
      this.intensity = g / (4 * Math.PI);
    }});
    this.distance = void 0 !== d ? d : 0;
    this.decay = void 0 !== b ? b : 1;
    this.shadow = new Cg;
  }
  function ze(g, a, d, b, c, e) {
    pa.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = void 0 !== g ? g : -1;
    this.right = void 0 !== a ? a : 1;
    this.top = void 0 !== d ? d : 1;
    this.bottom = void 0 !== b ? b : -1;
    this.near = void 0 !== c ? c : .1;
    this.far = void 0 !== e ? e : 2E3;
    this.updateProjectionMatrix();
  }
  function sf() {
    yb.call(this, new ze(-5, 5, 5, -5, .5, 500));
  }
  function tf(g, a) {
    qa.call(this, g, a);
    this.type = "DirectionalLight";
    this.position.copy(v.DefaultUp);
    this.updateMatrix();
    this.target = new v;
    this.shadow = new sf;
  }
  function uf(g, a) {
    qa.call(this, g, a);
    this.type = "AmbientLight";
    this.castShadow = void 0;
  }
  function vf(g, a, d, b) {
    qa.call(this, g, a);
    this.type = "RectAreaLight";
    this.width = void 0 !== d ? d : 10;
    this.height = void 0 !== b ? b : 10;
  }
  function wf(g) {
    sa.call(this, g);
    this.textures = {};
  }
  function xf() {
    J.call(this);
    this.type = "InstancedBufferGeometry";
    this.maxInstancedCount = void 0;
  }
  function yf(g, a, d, b) {
    "number" === typeof d && (b = d, d = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
    K.call(this, g, a, d);
    this.meshPerAttribute = b || 1;
  }
  function zf(g) {
    sa.call(this, g);
  }
  function Af(g) {
    sa.call(this, g);
  }
  function Dg(g) {
    "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    "undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    sa.call(this, g);
    this.options = void 0;
  }
  function Eg() {
    this.type = "ShapePath";
    this.color = new B;
    this.subPaths = [];
    this.currentPath = null;
  }
  function Fg(g) {
    this.type = "Font";
    this.data = g;
  }
  function Gg(g) {
    sa.call(this, g);
  }
  function Bf(g) {
    sa.call(this, g);
  }
  function Cf() {
    this.coefficients = [];
    for (var g = 0; 9 > g; g++) {
      this.coefficients.push(new e);
    }
  }
  function nb(g, a) {
    qa.call(this, void 0, a);
    this.sh = void 0 !== g ? g : new Cf;
  }
  function Hg(g, a, d) {
    nb.call(this, void 0, d);
    g = (new B).set(g);
    d = (new B).set(a);
    a = new e(g.r, g.g, g.b);
    g = new e(d.r, d.g, d.b);
    d = Math.sqrt(Math.PI);
    var t = d * Math.sqrt(.75);
    this.sh.coefficients[0].copy(a).add(g).multiplyScalar(d);
    this.sh.coefficients[1].copy(a).sub(g).multiplyScalar(t);
  }
  function Ig(g, a) {
    nb.call(this, void 0, a);
    g = (new B).set(g);
    this.sh.coefficients[0].set(g.r, g.g, g.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
  function bi() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = .064;
    this.cameraL = new oa;
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = !1;
    this.cameraR = new oa;
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = !1;
    this._cache = {focus:null, fov:null, aspect:null, near:null, far:null, zoom:null, eyeSep:null};
  }
  function Jg(g) {
    this.autoStart = void 0 !== g ? g : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
  }
  function Kg() {
    v.call(this);
    this.type = "AudioListener";
    this.context = Lg.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
    this._clock = new Jg;
  }
  function sd(g) {
    v.call(this);
    this.type = "Audio";
    this.listener = g;
    this.context = g.context;
    this.gain = this.context.createGain();
    this.gain.connect(g.getInput());
    this.autoplay = !1;
    this.buffer = null;
    this.detune = 0;
    this.loop = !1;
    this.offset = this.loopEnd = this.loopStart = 0;
    this.duration = void 0;
    this.playbackRate = 1;
    this.isPlaying = !1;
    this.hasPlaybackControl = !0;
    this.sourceType = "empty";
    this._pausedAt = this._startedAt = 0;
    this.filters = [];
  }
  function Mg(g) {
    sd.call(this, g);
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.connect(this.gain);
  }
  function Ng(g, a) {
    this.analyser = g.context.createAnalyser();
    this.analyser.fftSize = void 0 !== a ? a : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    g.getOutput().connect(this.analyser);
  }
  function Og(g, a, d) {
    this.binding = g;
    this.valueSize = d;
    g = Float64Array;
    switch(a) {
      case "quaternion":
        a = this._slerp;
        break;
      case "string":
      case "bool":
        g = Array;
        a = this._select;
        break;
      default:
        a = this._lerp;
    }
    this.buffer = new g(4 * d);
    this._mixBufferRegion = a;
    this.referenceCount = this.useCount = this.cumulativeWeight = 0;
  }
  function ci(g, a, d) {
    d = d || Oa.parseTrackName(a);
    this._targetGroup = g;
    this._bindings = g.subscribe_(a, d);
  }
  function Oa(g, a, d) {
    this.path = a;
    this.parsedPath = d || Oa.parseTrackName(a);
    this.node = Oa.findNode(g, this.parsedPath.nodeName) || g;
    this.rootNode = g;
  }
  function di() {
    this.uuid = ka.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    var g = {};
    this._indicesByUUID = g;
    for (var a = 0, d = arguments.length; a !== d; ++a) {
      g[arguments[a].uuid] = a;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    var b = this;
    this.stats = {objects:{get total() {
      return b._objects.length;
    }, get inUse() {
      return this.total - b.nCachedObjects_;
    }}, get bindingsPerObject() {
      return b._bindings.length;
    }};
  }
  function ei(g, a, d) {
    this._mixer = g;
    this._clip = a;
    this._localRoot = d || null;
    g = a.tracks;
    a = g.length;
    d = Array(a);
    for (var t = {endingStart:2400, endingEnd:2400}, b = 0; b !== a; ++b) {
      var c = g[b].createInterpolant(null);
      d[b] = c;
      c.settings = t;
    }
    this._interpolantSettings = t;
    this._interpolants = d;
    this._propertyBindings = Array(a);
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
    this.loop = 2201;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
    this.repetitions = Infinity;
    this.paused = !1;
    this.enabled = !0;
    this.clampWhenFinished = !1;
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }
  function Pg(g) {
    this._root = g;
    this._initMemoryManager();
    this.time = this._accuIndex = 0;
    this.timeScale = 1;
  }
  function Df(g, a) {
    "string" === typeof g && (console.warn("THREE.Uniform: Type parameter is no longer needed."), g = a);
    this.value = g;
  }
  function Qg(g, a, d) {
    Kb.call(this, g, a);
    this.meshPerAttribute = d || 1;
  }
  function fi(g, a, d, b) {
    this.ray = new u(g, a);
    this.near = d || 0;
    this.far = b || Infinity;
    this.camera = null;
    this.params = {Mesh:{}, Line:{}, LOD:{}, Points:{threshold:1}, Sprite:{}};
    Object.defineProperties(this.params, {PointCloud:{get:function() {
      console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
      return this.Points;
    }}});
  }
  function gi(g, a) {
    return g.distance - a.distance;
  }
  function Rg(g, a, d, b) {
    if (!1 !== g.visible && (g.raycast(a, d), !0 === b)) {
      g = g.children;
      b = 0;
      for (var t = g.length; b < t; b++) {
        Rg(g[b], a, d, !0);
      }
    }
  }
  function hi(g, a, d) {
    this.radius = void 0 !== g ? g : 1;
    this.phi = void 0 !== a ? a : 0;
    this.theta = void 0 !== d ? d : 0;
    return this;
  }
  function ii(g, a, d) {
    this.radius = void 0 !== g ? g : 1;
    this.theta = void 0 !== a ? a : 0;
    this.y = void 0 !== d ? d : 0;
    return this;
  }
  function Sg(g, a) {
    this.min = void 0 !== g ? g : new k(Infinity, Infinity);
    this.max = void 0 !== a ? a : new k(-Infinity, -Infinity);
  }
  function Tg(g, a) {
    this.start = void 0 !== g ? g : new e;
    this.end = void 0 !== a ? a : new e;
  }
  function Ae(g) {
    v.call(this);
    this.material = g;
    this.render = function() {
    };
  }
  function Be(g, a, d, b) {
    this.object = g;
    this.size = void 0 !== a ? a : 1;
    g = void 0 !== d ? d : 16711680;
    b = void 0 !== b ? b : 1;
    a = 0;
    (d = this.object.geometry) && d.isGeometry ? a = 3 * d.faces.length : d && d.isBufferGeometry && (a = d.attributes.normal.count);
    d = new J;
    a = new N(6 * a, 3);
    d.setAttribute("position", a);
    ra.call(this, d, new ta({color:g, linewidth:b}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function td(g, a) {
    v.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = a;
    g = new J;
    a = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
    for (var d = 0, t = 1; 32 > d; d++, t++) {
      var b = d / 32 * Math.PI * 2, c = t / 32 * Math.PI * 2;
      a.push(Math.cos(b), Math.sin(b), 1, Math.cos(c), Math.sin(c), 1);
    }
    g.setAttribute("position", new N(a, 3));
    a = new ta({fog:!1});
    this.cone = new ra(g, a);
    this.add(this.cone);
    this.update();
  }
  function ji(g) {
    var a = [];
    g && g.isBone && a.push(g);
    for (var d = 0; d < g.children.length; d++) {
      a.push.apply(a, ji(g.children[d]));
    }
    return a;
  }
  function ud(g) {
    for (var a = ji(g), d = new J, b = [], c = [], e = new B(0, 0, 1), l = new B(0, 1, 0), f = 0; f < a.length; f++) {
      var h = a[f];
      h.parent && h.parent.isBone && (b.push(0, 0, 0), b.push(0, 0, 0), c.push(e.r, e.g, e.b), c.push(l.r, l.g, l.b));
    }
    d.setAttribute("position", new N(b, 3));
    d.setAttribute("color", new N(c, 3));
    b = new ta({vertexColors:2, depthTest:!1, depthWrite:!1, transparent:!0});
    ra.call(this, d, b);
    this.root = g;
    this.bones = a;
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
  }
  function vd(g, a, d) {
    this.light = g;
    this.light.updateMatrixWorld();
    this.color = d;
    g = new gc(a, 4, 2);
    a = new Q({wireframe:!0, fog:!1});
    U.call(this, g, a);
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function wd(g, a) {
    this.type = "RectAreaLightHelper";
    this.light = g;
    this.color = a;
    g = new J;
    g.setAttribute("position", new N([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], 3));
    g.computeBoundingSphere();
    a = new ta({fog:!1});
    Ga.call(this, g, a);
    g = new J;
    g.setAttribute("position", new N([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], 3));
    g.computeBoundingSphere();
    this.add(new U(g, new Q({side:1, fog:!1})));
    this.update();
  }
  function xd(g, a, d) {
    v.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = d;
    g = new tc(a);
    g.rotateY(.5 * Math.PI);
    this.material = new Q({wireframe:!0, fog:!1});
    void 0 === this.color && (this.material.vertexColors = 2);
    a = g.getAttribute("position");
    a = new Float32Array(3 * a.count);
    g.setAttribute("color", new K(a, 3));
    this.add(new U(g, this.material));
    this.update();
  }
  function yd(g, a) {
    this.lightProbe = g;
    this.size = a;
    g = new ja({defines:{GAMMA_OUTPUT:""}, uniforms:{sh:{value:this.lightProbe.sh.coefficients}, intensity:{value:this.lightProbe.intensity}}, vertexShader:"varying vec3 vNormal;\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#define RECIPROCAL_PI 0.318309886\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\t// matrix is assumed to be orthogonal\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 linearToOutput( in vec3 a ) {\n\t#ifdef GAMMA_OUTPUT\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\t#else\n\t\treturn a;\n\t#endif\n}\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\t// normal is assumed to have unit length\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nuniform vec3 sh[ 9 ]; // sh coefficients\nuniform float intensity; // light probe intensity\nvarying vec3 vNormal;\nvoid main() {\n\tvec3 normal = normalize( vNormal );\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\n\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\n\toutgoingLight = linearToOutput( outgoingLight );\n\tgl_FragColor = vec4( outgoingLight, 1.0 );\n}"});
    a = new gc(1, 32, 16);
    U.call(this, a, g);
    this.onBeforeRender();
  }
  function Ef(g, a, d, b) {
    g = g || 10;
    a = a || 10;
    d = new B(void 0 !== d ? d : 4473924);
    b = new B(void 0 !== b ? b : 8947848);
    var t = a / 2, c = g / a, e = g / 2;
    g = [];
    for (var l = [], f = 0, h = 0, p = -e; f <= a; f++, p += c) {
      g.push(-e, 0, p, e, 0, p);
      g.push(p, 0, -e, p, 0, e);
      var m = f === t ? d : b;
      m.toArray(l, h);
      h += 3;
      m.toArray(l, h);
      h += 3;
      m.toArray(l, h);
      h += 3;
      m.toArray(l, h);
      h += 3;
    }
    a = new J;
    a.setAttribute("position", new N(g, 3));
    a.setAttribute("color", new N(l, 3));
    d = new ta({vertexColors:2});
    ra.call(this, a, d);
  }
  function Ff(g, a, d, b, c, e) {
    g = g || 10;
    a = a || 16;
    d = d || 8;
    b = b || 64;
    c = new B(void 0 !== c ? c : 4473924);
    e = new B(void 0 !== e ? e : 8947848);
    var t = [], l = [], f;
    for (f = 0; f <= a; f++) {
      var h = f / a * 2 * Math.PI;
      var p = Math.sin(h) * g;
      h = Math.cos(h) * g;
      t.push(0, 0, 0);
      t.push(p, 0, h);
      var m = f & 1 ? c : e;
      l.push(m.r, m.g, m.b);
      l.push(m.r, m.g, m.b);
    }
    for (f = 0; f <= d; f++) {
      m = f & 1 ? c : e;
      var n = g - g / d * f;
      for (a = 0; a < b; a++) {
        h = a / b * 2 * Math.PI, p = Math.sin(h) * n, h = Math.cos(h) * n, t.push(p, 0, h), l.push(m.r, m.g, m.b), h = (a + 1) / b * 2 * Math.PI, p = Math.sin(h) * n, h = Math.cos(h) * n, t.push(p, 0, h), l.push(m.r, m.g, m.b);
      }
    }
    g = new J;
    g.setAttribute("position", new N(t, 3));
    g.setAttribute("color", new N(l, 3));
    t = new ta({vertexColors:2});
    ra.call(this, g, t);
  }
  function zd(g, a, d, b) {
    this.audio = g;
    this.range = a || 1;
    this.divisionsInnerAngle = d || 16;
    this.divisionsOuterAngle = b || 2;
    g = new J;
    a = new Float32Array(3 * (3 * (this.divisionsInnerAngle + 2 * this.divisionsOuterAngle) + 3));
    g.setAttribute("position", new K(a, 3));
    a = new ta({color:65280});
    d = new ta({color:16776960});
    Ga.call(this, g, [d, a]);
    this.update();
  }
  function Ce(g, a, d, b) {
    this.object = g;
    this.size = void 0 !== a ? a : 1;
    g = void 0 !== d ? d : 16776960;
    b = void 0 !== b ? b : 1;
    a = 0;
    (d = this.object.geometry) && d.isGeometry ? a = d.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
    d = new J;
    a = new N(6 * a, 3);
    d.setAttribute("position", a);
    ra.call(this, d, new ta({color:g, linewidth:b}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Ad(g, a, d) {
    v.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = d;
    void 0 === a && (a = 1);
    g = new J;
    g.setAttribute("position", new N([-a, a, 0, a, a, 0, a, -a, 0, -a, -a, 0, -a, a, 0], 3));
    a = new ta({fog:!1});
    this.lightPlane = new Ga(g, a);
    this.add(this.lightPlane);
    g = new J;
    g.setAttribute("position", new N([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new Ga(g, a);
    this.add(this.targetLine);
    this.update();
  }
  function De(g) {
    function a(g, a, b) {
      d(g, b);
      d(a, b);
    }
    function d(g, a) {
      e.push(0, 0, 0);
      l.push(a.r, a.g, a.b);
      void 0 === f[g] && (f[g] = []);
      f[g].push(e.length / 3 - 1);
    }
    var b = new J, c = new ta({color:16777215, vertexColors:1}), e = [], l = [], f = {}, h = new B(16755200), p = new B(16711680), m = new B(43775), n = new B(16777215), k = new B(3355443);
    a("n1", "n2", h);
    a("n2", "n4", h);
    a("n4", "n3", h);
    a("n3", "n1", h);
    a("f1", "f2", h);
    a("f2", "f4", h);
    a("f4", "f3", h);
    a("f3", "f1", h);
    a("n1", "f1", h);
    a("n2", "f2", h);
    a("n3", "f3", h);
    a("n4", "f4", h);
    a("p", "n1", p);
    a("p", "n2", p);
    a("p", "n3", p);
    a("p", "n4", p);
    a("u1", "u2", m);
    a("u2", "u3", m);
    a("u3", "u1", m);
    a("c", "t", n);
    a("p", "c", k);
    a("cn1", "cn2", k);
    a("cn3", "cn4", k);
    a("cf1", "cf2", k);
    a("cf3", "cf4", k);
    b.setAttribute("position", new N(e, 3));
    b.setAttribute("color", new N(l, 3));
    ra.call(this, b, c);
    this.camera = g;
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = f;
    this.update();
  }
  function xa(g, a, d, b, c, e, l) {
    Gf.set(c, e, l).unproject(b);
    g = a[g];
    if (void 0 !== g) {
      for (d = d.getAttribute("position"), a = 0, b = g.length; a < b; a++) {
        d.setXYZ(g[a], Gf.x, Gf.y, Gf.z);
      }
    }
  }
  function Ob(g, a) {
    this.object = g;
    void 0 === a && (a = 16776960);
    g = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var d = new Float32Array(24), b = new J;
    b.setIndex(new K(g, 1));
    b.setAttribute("position", new K(d, 3));
    ra.call(this, b, new ta({color:a}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Ee(g, a) {
    this.type = "Box3Helper";
    this.box = g;
    a = a || 16776960;
    g = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var d = new J;
    d.setIndex(new K(g, 1));
    d.setAttribute("position", new N([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));
    ra.call(this, d, new ta({color:a}));
    this.geometry.computeBoundingSphere();
  }
  function Fe(g, a, d) {
    this.type = "PlaneHelper";
    this.plane = g;
    this.size = void 0 === a ? 1 : a;
    g = void 0 !== d ? d : 16776960;
    a = new J;
    a.setAttribute("position", new N([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));
    a.computeBoundingSphere();
    Ga.call(this, a, new ta({color:g}));
    a = new J;
    a.setAttribute("position", new N([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));
    a.computeBoundingSphere();
    this.add(new U(a, new Q({color:g, opacity:.2, transparent:!0, depthWrite:!1})));
  }
  function Pb(g, a, d, b, c, l) {
    v.call(this);
    void 0 === g && (g = new e(0, 0, 1));
    void 0 === a && (a = new e(0, 0, 0));
    void 0 === d && (d = 1);
    void 0 === b && (b = 16776960);
    void 0 === c && (c = .2 * d);
    void 0 === l && (l = .2 * c);
    void 0 === Hf && (Hf = new J, Hf.setAttribute("position", new N([0, 0, 0, 0, 1, 0], 3)), Ug = new Mb(0, .5, 1, 5, 1), Ug.translate(0, -.5, 0));
    this.position.copy(a);
    this.line = new Ga(Hf, new ta({color:b}));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new U(Ug, new Q({color:b}));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(g);
    this.setLength(d, c, l);
  }
  function Ge(g) {
    g = g || 1;
    var a = [0, 0, 0, g, 0, 0, 0, 0, 0, 0, g, 0, 0, 0, 0, 0, 0, g];
    g = new J;
    g.setAttribute("position", new N(a, 3));
    g.setAttribute("color", new N([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
    a = new ta({vertexColors:2});
    ra.call(this, g, a);
  }
  function ki(g) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Na.call(this, g);
    this.type = "catmullrom";
    this.closed = !0;
  }
  function li(g) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Na.call(this, g);
    this.type = "catmullrom";
  }
  function Vg(g) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    Na.call(this, g);
    this.type = "catmullrom";
  }
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
  void 0 === Number.isInteger && (Number.isInteger = function(g) {
    return "number" === typeof g && isFinite(g) && Math.floor(g) === g;
  });
  void 0 === Math.sign && (Math.sign = function(g) {
    return 0 > g ? -1 : 0 < g ? 1 : +g;
  });
  !1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", {get:function() {
    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
  }});
  void 0 === Object.assign && (Object.assign = function(g) {
    if (void 0 === g || null === g) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    for (var a = Object(g), d = 1; d < arguments.length; d++) {
      var b = arguments[d];
      if (void 0 !== b && null !== b) {
        for (var c in b) {
          Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
        }
      }
    }
    return a;
  });
  Object.assign(c.prototype, {addEventListener:function(g, a) {
    void 0 === this._listeners && (this._listeners = {});
    var d = this._listeners;
    void 0 === d[g] && (d[g] = []);
    -1 === d[g].indexOf(a) && d[g].push(a);
  }, hasEventListener:function(g, a) {
    if (void 0 === this._listeners) {
      return !1;
    }
    var d = this._listeners;
    return void 0 !== d[g] && -1 !== d[g].indexOf(a);
  }, removeEventListener:function(g, a) {
    void 0 !== this._listeners && (g = this._listeners[g], void 0 !== g && (a = g.indexOf(a), -1 !== a && g.splice(a, 1)));
  }, dispatchEvent:function(g) {
    if (void 0 !== this._listeners) {
      var a = this._listeners[g.type];
      if (void 0 !== a) {
        g.target = this;
        a = a.slice(0);
        for (var d = 0, b = a.length; d < b; d++) {
          a[d].call(this, g);
        }
      }
    }
  }});
  for (var Ja = [], He = 0; 256 > He; He++) {
    Ja[He] = (16 > He ? "0" : "") + He.toString(16);
  }
  var ka = {DEG2RAD:Math.PI / 180, RAD2DEG:180 / Math.PI, generateUUID:function() {
    var g = 4294967295 * Math.random() | 0, a = 4294967295 * Math.random() | 0, d = 4294967295 * Math.random() | 0, b = 4294967295 * Math.random() | 0;
    return (Ja[g & 255] + Ja[g >> 8 & 255] + Ja[g >> 16 & 255] + Ja[g >> 24 & 255] + "-" + Ja[a & 255] + Ja[a >> 8 & 255] + "-" + Ja[a >> 16 & 15 | 64] + Ja[a >> 24 & 255] + "-" + Ja[d & 63 | 128] + Ja[d >> 8 & 255] + "-" + Ja[d >> 16 & 255] + Ja[d >> 24 & 255] + Ja[b & 255] + Ja[b >> 8 & 255] + Ja[b >> 16 & 255] + Ja[b >> 24 & 255]).toUpperCase();
  }, clamp:function(g, a, d) {
    return Math.max(a, Math.min(d, g));
  }, euclideanModulo:function(g, a) {
    return (g % a + a) % a;
  }, mapLinear:function(g, a, d, b, c) {
    return b + (g - a) * (c - b) / (d - a);
  }, lerp:function(g, a, d) {
    return (1 - d) * g + d * a;
  }, smoothstep:function(g, a, d) {
    if (g <= a) {
      return 0;
    }
    if (g >= d) {
      return 1;
    }
    g = (g - a) / (d - a);
    return g * g * (3 - 2 * g);
  }, smootherstep:function(g, a, d) {
    if (g <= a) {
      return 0;
    }
    if (g >= d) {
      return 1;
    }
    g = (g - a) / (d - a);
    return g * g * g * (g * (6 * g - 15) + 10);
  }, randInt:function(g, a) {
    return g + Math.floor(Math.random() * (a - g + 1));
  }, randFloat:function(g, a) {
    return g + Math.random() * (a - g);
  }, randFloatSpread:function(g) {
    return g * (.5 - Math.random());
  }, degToRad:function(g) {
    return g * ka.DEG2RAD;
  }, radToDeg:function(g) {
    return g * ka.RAD2DEG;
  }, isPowerOfTwo:function(g) {
    return 0 === (g & g - 1) && 0 !== g;
  }, ceilPowerOfTwo:function(g) {
    return Math.pow(2, Math.ceil(Math.log(g) / Math.LN2));
  }, floorPowerOfTwo:function(g) {
    return Math.pow(2, Math.floor(Math.log(g) / Math.LN2));
  }};
  Object.defineProperties(k.prototype, {width:{get:function() {
    return this.x;
  }, set:function(g) {
    this.x = g;
  }}, height:{get:function() {
    return this.y;
  }, set:function(g) {
    this.y = g;
  }}});
  Object.assign(k.prototype, {isVector2:!0, set:function(g, a) {
    this.x = g;
    this.y = a;
    return this;
  }, setScalar:function(g) {
    this.y = this.x = g;
    return this;
  }, setX:function(g) {
    this.x = g;
    return this;
  }, setY:function(g) {
    this.y = g;
    return this;
  }, setComponent:function(g, a) {
    switch(g) {
      case 0:
        this.x = a;
        break;
      case 1:
        this.y = a;
        break;
      default:
        throw Error("index is out of range: " + g);
    }
    return this;
  }, getComponent:function(g) {
    switch(g) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw Error("index is out of range: " + g);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y);
  }, copy:function(g) {
    this.x = g.x;
    this.y = g.y;
    return this;
  }, add:function(g, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(g, a);
    }
    this.x += g.x;
    this.y += g.y;
    return this;
  }, addScalar:function(g) {
    this.x += g;
    this.y += g;
    return this;
  }, addVectors:function(g, a) {
    this.x = g.x + a.x;
    this.y = g.y + a.y;
    return this;
  }, addScaledVector:function(g, a) {
    this.x += g.x * a;
    this.y += g.y * a;
    return this;
  }, sub:function(g, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(g, a);
    }
    this.x -= g.x;
    this.y -= g.y;
    return this;
  }, subScalar:function(g) {
    this.x -= g;
    this.y -= g;
    return this;
  }, subVectors:function(g, a) {
    this.x = g.x - a.x;
    this.y = g.y - a.y;
    return this;
  }, multiply:function(g) {
    this.x *= g.x;
    this.y *= g.y;
    return this;
  }, multiplyScalar:function(g) {
    this.x *= g;
    this.y *= g;
    return this;
  }, divide:function(g) {
    this.x /= g.x;
    this.y /= g.y;
    return this;
  }, divideScalar:function(g) {
    return this.multiplyScalar(1 / g);
  }, applyMatrix3:function(g) {
    var a = this.x, d = this.y;
    g = g.elements;
    this.x = g[0] * a + g[3] * d + g[6];
    this.y = g[1] * a + g[4] * d + g[7];
    return this;
  }, min:function(g) {
    this.x = Math.min(this.x, g.x);
    this.y = Math.min(this.y, g.y);
    return this;
  }, max:function(g) {
    this.x = Math.max(this.x, g.x);
    this.y = Math.max(this.y, g.y);
    return this;
  }, clamp:function(g, a) {
    this.x = Math.max(g.x, Math.min(a.x, this.x));
    this.y = Math.max(g.y, Math.min(a.y, this.y));
    return this;
  }, clampScalar:function(g, a) {
    this.x = Math.max(g, Math.min(a, this.x));
    this.y = Math.max(g, Math.min(a, this.y));
    return this;
  }, clampLength:function(g, a) {
    var d = this.length();
    return this.divideScalar(d || 1).multiplyScalar(Math.max(g, Math.min(a, d)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }, dot:function(g) {
    return this.x * g.x + this.y * g.y;
  }, cross:function(g) {
    return this.x * g.y - this.y * g.x;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, angle:function() {
    var g = Math.atan2(this.y, this.x);
    0 > g && (g += 2 * Math.PI);
    return g;
  }, distanceTo:function(g) {
    return Math.sqrt(this.distanceToSquared(g));
  }, distanceToSquared:function(g) {
    var a = this.x - g.x;
    g = this.y - g.y;
    return a * a + g * g;
  }, manhattanDistanceTo:function(g) {
    return Math.abs(this.x - g.x) + Math.abs(this.y - g.y);
  }, setLength:function(g) {
    return this.normalize().multiplyScalar(g);
  }, lerp:function(g, a) {
    this.x += (g.x - this.x) * a;
    this.y += (g.y - this.y) * a;
    return this;
  }, lerpVectors:function(g, a, d) {
    return this.subVectors(a, g).multiplyScalar(d).add(g);
  }, equals:function(g) {
    return g.x === this.x && g.y === this.y;
  }, fromArray:function(g, a) {
    void 0 === a && (a = 0);
    this.x = g[a];
    this.y = g[a + 1];
    return this;
  }, toArray:function(g, a) {
    void 0 === g && (g = []);
    void 0 === a && (a = 0);
    g[a] = this.x;
    g[a + 1] = this.y;
    return g;
  }, fromBufferAttribute:function(g, a, d) {
    void 0 !== d && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    this.x = g.getX(a);
    this.y = g.getY(a);
    return this;
  }, rotateAround:function(g, a) {
    var d = Math.cos(a);
    a = Math.sin(a);
    var b = this.x - g.x, t = this.y - g.y;
    this.x = b * d - t * a + g.x;
    this.y = b * a + t * d + g.y;
    return this;
  }});
  Object.assign(b, {slerp:function(g, a, d, b) {
    return d.copy(g).slerp(a, b);
  }, slerpFlat:function(g, a, d, b, c, e, l) {
    var t = d[b + 0], f = d[b + 1], h = d[b + 2];
    d = d[b + 3];
    b = c[e + 0];
    var p = c[e + 1], m = c[e + 2];
    c = c[e + 3];
    if (d !== c || t !== b || f !== p || h !== m) {
      e = 1 - l;
      var n = t * b + f * p + h * m + d * c, k = 0 <= n ? 1 : -1, q = 1 - n * n;
      q > Number.EPSILON && (q = Math.sqrt(q), n = Math.atan2(q, n * k), e = Math.sin(e * n) / q, l = Math.sin(l * n) / q);
      k *= l;
      t = t * e + b * k;
      f = f * e + p * k;
      h = h * e + m * k;
      d = d * e + c * k;
      e === 1 - l && (l = 1 / Math.sqrt(t * t + f * f + h * h + d * d), t *= l, f *= l, h *= l, d *= l);
    }
    g[a] = t;
    g[a + 1] = f;
    g[a + 2] = h;
    g[a + 3] = d;
  }});
  Object.defineProperties(b.prototype, {x:{get:function() {
    return this._x;
  }, set:function(g) {
    this._x = g;
    this._onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(g) {
    this._y = g;
    this._onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(g) {
    this._z = g;
    this._onChangeCallback();
  }}, w:{get:function() {
    return this._w;
  }, set:function(g) {
    this._w = g;
    this._onChangeCallback();
  }}});
  Object.assign(b.prototype, {isQuaternion:!0, set:function(g, a, d, b) {
    this._x = g;
    this._y = a;
    this._z = d;
    this._w = b;
    this._onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }, copy:function(g) {
    this._x = g.x;
    this._y = g.y;
    this._z = g.z;
    this._w = g.w;
    this._onChangeCallback();
    return this;
  }, setFromEuler:function(g, a) {
    if (!g || !g.isEuler) {
      throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    var d = g._x, b = g._y, t = g._z;
    g = g.order;
    var c = Math.cos, e = Math.sin, l = c(d / 2), f = c(b / 2);
    c = c(t / 2);
    d = e(d / 2);
    b = e(b / 2);
    t = e(t / 2);
    "XYZ" === g ? (this._x = d * f * c + l * b * t, this._y = l * b * c - d * f * t, this._z = l * f * t + d * b * c, this._w = l * f * c - d * b * t) : "YXZ" === g ? (this._x = d * f * c + l * b * t, this._y = l * b * c - d * f * t, this._z = l * f * t - d * b * c, this._w = l * f * c + d * b * t) : "ZXY" === g ? (this._x = d * f * c - l * b * t, this._y = l * b * c + d * f * t, this._z = l * f * t + d * b * c, this._w = l * f * c - d * b * t) : "ZYX" === g ? (this._x = d * f * c - l * b * t, this._y = 
    l * b * c + d * f * t, this._z = l * f * t - d * b * c, this._w = l * f * c + d * b * t) : "YZX" === g ? (this._x = d * f * c + l * b * t, this._y = l * b * c + d * f * t, this._z = l * f * t - d * b * c, this._w = l * f * c - d * b * t) : "XZY" === g && (this._x = d * f * c - l * b * t, this._y = l * b * c - d * f * t, this._z = l * f * t + d * b * c, this._w = l * f * c + d * b * t);
    !1 !== a && this._onChangeCallback();
    return this;
  }, setFromAxisAngle:function(g, a) {
    a /= 2;
    var d = Math.sin(a);
    this._x = g.x * d;
    this._y = g.y * d;
    this._z = g.z * d;
    this._w = Math.cos(a);
    this._onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(g) {
    var a = g.elements, d = a[0];
    g = a[4];
    var b = a[8], c = a[1], e = a[5], l = a[9], f = a[2], h = a[6];
    a = a[10];
    var p = d + e + a;
    0 < p ? (d = .5 / Math.sqrt(p + 1), this._w = .25 / d, this._x = (h - l) * d, this._y = (b - f) * d, this._z = (c - g) * d) : d > e && d > a ? (d = 2 * Math.sqrt(1 + d - e - a), this._w = (h - l) / d, this._x = .25 * d, this._y = (g + c) / d, this._z = (b + f) / d) : e > a ? (d = 2 * Math.sqrt(1 + e - d - a), this._w = (b - f) / d, this._x = (g + c) / d, this._y = .25 * d, this._z = (l + h) / d) : (d = 2 * Math.sqrt(1 + a - d - e), this._w = (c - g) / d, this._x = (b + f) / d, this._y = (l + 
    h) / d, this._z = .25 * d);
    this._onChangeCallback();
    return this;
  }, setFromUnitVectors:function(a, d) {
    var g = a.dot(d) + 1;
    1E-6 > g ? (g = 0, Math.abs(a.x) > Math.abs(a.z) ? (this._x = -a.y, this._y = a.x, this._z = 0) : (this._x = 0, this._y = -a.z, this._z = a.y)) : (this._x = a.y * d.z - a.z * d.y, this._y = a.z * d.x - a.x * d.z, this._z = a.x * d.y - a.y * d.x);
    this._w = g;
    return this.normalize();
  }, angleTo:function(a) {
    return 2 * Math.acos(Math.abs(ka.clamp(this.dot(a), -1, 1)));
  }, rotateTowards:function(a, d) {
    var g = this.angleTo(a);
    if (0 === g) {
      return this;
    }
    this.slerp(a, Math.min(1, d / g));
    return this;
  }, inverse:function() {
    return this.conjugate();
  }, conjugate:function() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }, dot:function(a) {
    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
  }, lengthSq:function() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }, length:function() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }, normalize:function() {
    var a = this.length();
    0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
    this._onChangeCallback();
    return this;
  }, multiply:function(a, d) {
    return void 0 !== d ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, d)) : this.multiplyQuaternions(this, a);
  }, premultiply:function(a) {
    return this.multiplyQuaternions(a, this);
  }, multiplyQuaternions:function(a, d) {
    var g = a._x, b = a._y, t = a._z;
    a = a._w;
    var c = d._x, e = d._y, l = d._z;
    d = d._w;
    this._x = g * d + a * c + b * l - t * e;
    this._y = b * d + a * e + t * c - g * l;
    this._z = t * d + a * l + g * e - b * c;
    this._w = a * d - g * c - b * e - t * l;
    this._onChangeCallback();
    return this;
  }, slerp:function(a, d) {
    if (0 === d) {
      return this;
    }
    if (1 === d) {
      return this.copy(a);
    }
    var g = this._x, b = this._y, t = this._z, c = this._w, e = c * a._w + g * a._x + b * a._y + t * a._z;
    0 > e ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, e = -e) : this.copy(a);
    if (1 <= e) {
      return this._w = c, this._x = g, this._y = b, this._z = t, this;
    }
    a = 1 - e * e;
    if (a <= Number.EPSILON) {
      return e = 1 - d, this._w = e * c + d * this._w, this._x = e * g + d * this._x, this._y = e * b + d * this._y, this._z = e * t + d * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    a = Math.sqrt(a);
    var l = Math.atan2(a, e);
    e = Math.sin((1 - d) * l) / a;
    d = Math.sin(d * l) / a;
    this._w = c * e + this._w * d;
    this._x = g * e + this._x * d;
    this._y = b * e + this._y * d;
    this._z = t * e + this._z * d;
    this._onChangeCallback();
    return this;
  }, equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    this._x = a[d];
    this._y = a[d + 1];
    this._z = a[d + 2];
    this._w = a[d + 3];
    this._onChangeCallback();
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    a[d] = this._x;
    a[d + 1] = this._y;
    a[d + 2] = this._z;
    a[d + 3] = this._w;
    return a;
  }, _onChange:function(a) {
    this._onChangeCallback = a;
    return this;
  }, _onChangeCallback:function() {
  }});
  var Wg = new e, mi = new b;
  Object.assign(e.prototype, {isVector3:!0, set:function(a, d, b) {
    this.x = a;
    this.y = d;
    this.z = b;
    return this;
  }, setScalar:function(a) {
    this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setComponent:function(a, d) {
    switch(a) {
      case 0:
        this.x = d;
        break;
      case 1:
        this.y = d;
        break;
      case 2:
        this.z = d;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    return this;
  }, add:function(a, d) {
    if (void 0 !== d) {
      return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, d);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    return this;
  }, addVectors:function(a, d) {
    this.x = a.x + d.x;
    this.y = a.y + d.y;
    this.z = a.z + d.z;
    return this;
  }, addScaledVector:function(a, d) {
    this.x += a.x * d;
    this.y += a.y * d;
    this.z += a.z * d;
    return this;
  }, sub:function(a, d) {
    if (void 0 !== d) {
      return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, d);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    return this;
  }, subVectors:function(a, d) {
    this.x = a.x - d.x;
    this.y = a.y - d.y;
    this.z = a.z - d.z;
    return this;
  }, multiply:function(a, d) {
    if (void 0 !== d) {
      return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, d);
    }
    this.x *= a.x;
    this.y *= a.y;
    this.z *= a.z;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    return this;
  }, multiplyVectors:function(a, d) {
    this.x = a.x * d.x;
    this.y = a.y * d.y;
    this.z = a.z * d.z;
    return this;
  }, applyEuler:function(a) {
    a && a.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    return this.applyQuaternion(mi.setFromEuler(a));
  }, applyAxisAngle:function(a, d) {
    return this.applyQuaternion(mi.setFromAxisAngle(a, d));
  }, applyMatrix3:function(a) {
    var g = this.x, d = this.y, b = this.z;
    a = a.elements;
    this.x = a[0] * g + a[3] * d + a[6] * b;
    this.y = a[1] * g + a[4] * d + a[7] * b;
    this.z = a[2] * g + a[5] * d + a[8] * b;
    return this;
  }, applyMatrix4:function(a) {
    var g = this.x, d = this.y, b = this.z;
    a = a.elements;
    var c = 1 / (a[3] * g + a[7] * d + a[11] * b + a[15]);
    this.x = (a[0] * g + a[4] * d + a[8] * b + a[12]) * c;
    this.y = (a[1] * g + a[5] * d + a[9] * b + a[13]) * c;
    this.z = (a[2] * g + a[6] * d + a[10] * b + a[14]) * c;
    return this;
  }, applyQuaternion:function(a) {
    var g = this.x, d = this.y, b = this.z, c = a.x, e = a.y, l = a.z;
    a = a.w;
    var f = a * g + e * b - l * d, h = a * d + l * g - c * b, p = a * b + c * d - e * g;
    g = -c * g - e * d - l * b;
    this.x = f * a + g * -c + h * -l - p * -e;
    this.y = h * a + g * -e + p * -c - f * -l;
    this.z = p * a + g * -l + f * -e - h * -c;
    return this;
  }, project:function(a) {
    return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
  }, unproject:function(a) {
    return this.applyMatrix4(a.projectionMatrixInverse).applyMatrix4(a.matrixWorld);
  }, transformDirection:function(a) {
    var g = this.x, d = this.y, b = this.z;
    a = a.elements;
    this.x = a[0] * g + a[4] * d + a[8] * b;
    this.y = a[1] * g + a[5] * d + a[9] * b;
    this.z = a[2] * g + a[6] * d + a[10] * b;
    return this.normalize();
  }, divide:function(a) {
    this.x /= a.x;
    this.y /= a.y;
    this.z /= a.z;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    return this;
  }, clamp:function(a, d) {
    this.x = Math.max(a.x, Math.min(d.x, this.x));
    this.y = Math.max(a.y, Math.min(d.y, this.y));
    this.z = Math.max(a.z, Math.min(d.z, this.z));
    return this;
  }, clampScalar:function(a, d) {
    this.x = Math.max(a, Math.min(d, this.x));
    this.y = Math.max(a, Math.min(d, this.y));
    this.z = Math.max(a, Math.min(d, this.z));
    return this;
  }, clampLength:function(a, d) {
    var g = this.length();
    return this.divideScalar(g || 1).multiplyScalar(Math.max(a, Math.min(d, g)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, d) {
    this.x += (a.x - this.x) * d;
    this.y += (a.y - this.y) * d;
    this.z += (a.z - this.z) * d;
    return this;
  }, lerpVectors:function(a, d, b) {
    return this.subVectors(d, a).multiplyScalar(b).add(a);
  }, cross:function(a, d) {
    return void 0 !== d ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, d)) : this.crossVectors(this, a);
  }, crossVectors:function(a, d) {
    var g = a.x, b = a.y;
    a = a.z;
    var t = d.x, c = d.y;
    d = d.z;
    this.x = b * d - a * c;
    this.y = a * t - g * d;
    this.z = g * c - b * t;
    return this;
  }, projectOnVector:function(a) {
    var g = a.dot(this) / a.lengthSq();
    return this.copy(a).multiplyScalar(g);
  }, projectOnPlane:function(a) {
    Wg.copy(this).projectOnVector(a);
    return this.sub(Wg);
  }, reflect:function(a) {
    return this.sub(Wg.copy(a).multiplyScalar(2 * this.dot(a)));
  }, angleTo:function(a) {
    var g = Math.sqrt(this.lengthSq() * a.lengthSq());
    0 === g && console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");
    a = this.dot(a) / g;
    return Math.acos(ka.clamp(a, -1, 1));
  }, distanceTo:function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  }, distanceToSquared:function(a) {
    var g = this.x - a.x, d = this.y - a.y;
    a = this.z - a.z;
    return g * g + d * d + a * a;
  }, manhattanDistanceTo:function(a) {
    return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
  }, setFromSpherical:function(a) {
    return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
  }, setFromSphericalCoords:function(a, d, b) {
    var g = Math.sin(d) * a;
    this.x = g * Math.sin(b);
    this.y = Math.cos(d) * a;
    this.z = g * Math.cos(b);
    return this;
  }, setFromCylindrical:function(a) {
    return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
  }, setFromCylindricalCoords:function(a, d, b) {
    this.x = a * Math.sin(d);
    this.y = b;
    this.z = a * Math.cos(d);
    return this;
  }, setFromMatrixPosition:function(a) {
    a = a.elements;
    this.x = a[12];
    this.y = a[13];
    this.z = a[14];
    return this;
  }, setFromMatrixScale:function(a) {
    var g = this.setFromMatrixColumn(a, 0).length(), d = this.setFromMatrixColumn(a, 1).length();
    a = this.setFromMatrixColumn(a, 2).length();
    this.x = g;
    this.y = d;
    this.z = a;
    return this;
  }, setFromMatrixColumn:function(a, d) {
    return this.fromArray(a.elements, 4 * d);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    this.x = a[d];
    this.y = a[d + 1];
    this.z = a[d + 2];
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    a[d] = this.x;
    a[d + 1] = this.y;
    a[d + 2] = this.z;
    return a;
  }, fromBufferAttribute:function(a, d, b) {
    void 0 !== b && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(d);
    this.y = a.getY(d);
    this.z = a.getZ(d);
    return this;
  }});
  var Hc = new e;
  Object.assign(f.prototype, {isMatrix3:!0, set:function(a, d, b, c, e, l, f, h, p) {
    var g = this.elements;
    g[0] = a;
    g[1] = c;
    g[2] = f;
    g[3] = d;
    g[4] = e;
    g[5] = h;
    g[6] = b;
    g[7] = l;
    g[8] = p;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new this.constructor).fromArray(this.elements);
  }, copy:function(a) {
    var g = this.elements;
    a = a.elements;
    g[0] = a[0];
    g[1] = a[1];
    g[2] = a[2];
    g[3] = a[3];
    g[4] = a[4];
    g[5] = a[5];
    g[6] = a[6];
    g[7] = a[7];
    g[8] = a[8];
    return this;
  }, setFromMatrix4:function(a) {
    a = a.elements;
    this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);
    return this;
  }, applyToBufferAttribute:function(a) {
    for (var g = 0, d = a.count; g < d; g++) {
      Hc.x = a.getX(g), Hc.y = a.getY(g), Hc.z = a.getZ(g), Hc.applyMatrix3(this), a.setXYZ(g, Hc.x, Hc.y, Hc.z);
    }
    return a;
  }, multiply:function(a) {
    return this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, d) {
    var g = a.elements, b = d.elements;
    d = this.elements;
    a = g[0];
    var c = g[3], t = g[6], e = g[1], l = g[4], f = g[7], h = g[2], p = g[5];
    g = g[8];
    var m = b[0], n = b[3], k = b[6], q = b[1], u = b[4], r = b[7], v = b[2], w = b[5];
    b = b[8];
    d[0] = a * m + c * q + t * v;
    d[3] = a * n + c * u + t * w;
    d[6] = a * k + c * r + t * b;
    d[1] = e * m + l * q + f * v;
    d[4] = e * n + l * u + f * w;
    d[7] = e * k + l * r + f * b;
    d[2] = h * m + p * q + g * v;
    d[5] = h * n + p * u + g * w;
    d[8] = h * k + p * r + g * b;
    return this;
  }, multiplyScalar:function(a) {
    var g = this.elements;
    g[0] *= a;
    g[3] *= a;
    g[6] *= a;
    g[1] *= a;
    g[4] *= a;
    g[7] *= a;
    g[2] *= a;
    g[5] *= a;
    g[8] *= a;
    return this;
  }, determinant:function() {
    var a = this.elements, d = a[0], b = a[1], c = a[2], e = a[3], l = a[4], f = a[5], h = a[6], p = a[7];
    a = a[8];
    return d * l * a - d * f * p - b * e * a + b * f * h + c * e * p - c * l * h;
  }, getInverse:function(a, d) {
    a && a.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
    var g = a.elements;
    a = this.elements;
    var b = g[0], c = g[1], t = g[2], e = g[3], l = g[4], f = g[5], h = g[6], p = g[7];
    g = g[8];
    var m = g * l - f * p, n = f * h - g * e, k = p * e - l * h, q = b * m + c * n + t * k;
    if (0 === q) {
      if (!0 === d) {
        throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
      return this.identity();
    }
    d = 1 / q;
    a[0] = m * d;
    a[1] = (t * p - g * c) * d;
    a[2] = (f * c - t * l) * d;
    a[3] = n * d;
    a[4] = (g * b - t * h) * d;
    a[5] = (t * e - f * b) * d;
    a[6] = k * d;
    a[7] = (c * h - p * b) * d;
    a[8] = (l * b - c * e) * d;
    return this;
  }, transpose:function() {
    var a = this.elements;
    var d = a[1];
    a[1] = a[3];
    a[3] = d;
    d = a[2];
    a[2] = a[6];
    a[6] = d;
    d = a[5];
    a[5] = a[7];
    a[7] = d;
    return this;
  }, getNormalMatrix:function(a) {
    return this.setFromMatrix4(a).getInverse(this).transpose();
  }, transposeIntoArray:function(a) {
    var g = this.elements;
    a[0] = g[0];
    a[1] = g[3];
    a[2] = g[6];
    a[3] = g[1];
    a[4] = g[4];
    a[5] = g[7];
    a[6] = g[2];
    a[7] = g[5];
    a[8] = g[8];
    return this;
  }, setUvTransform:function(a, d, b, c, e, l, f) {
    var g = Math.cos(e);
    e = Math.sin(e);
    this.set(b * g, b * e, -b * (g * l + e * f) + l + a, -c * e, c * g, -c * (-e * l + g * f) + f + d, 0, 0, 1);
  }, scale:function(a, d) {
    var g = this.elements;
    g[0] *= a;
    g[3] *= a;
    g[6] *= a;
    g[1] *= d;
    g[4] *= d;
    g[7] *= d;
    return this;
  }, rotate:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    var d = this.elements, b = d[0], c = d[3], e = d[6], l = d[1], f = d[4], h = d[7];
    d[0] = g * b + a * l;
    d[3] = g * c + a * f;
    d[6] = g * e + a * h;
    d[1] = -a * b + g * l;
    d[4] = -a * c + g * f;
    d[7] = -a * e + g * h;
    return this;
  }, translate:function(a, d) {
    var g = this.elements;
    g[0] += a * g[2];
    g[3] += a * g[5];
    g[6] += a * g[8];
    g[1] += d * g[2];
    g[4] += d * g[5];
    g[7] += d * g[8];
    return this;
  }, equals:function(a) {
    var g = this.elements;
    a = a.elements;
    for (var d = 0; 9 > d; d++) {
      if (g[d] !== a[d]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    for (var g = 0; 9 > g; g++) {
      this.elements[g] = a[g + d];
    }
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    var g = this.elements;
    a[d] = g[0];
    a[d + 1] = g[1];
    a[d + 2] = g[2];
    a[d + 3] = g[3];
    a[d + 4] = g[4];
    a[d + 5] = g[5];
    a[d + 6] = g[6];
    a[d + 7] = g[7];
    a[d + 8] = g[8];
    return a;
  }});
  var Bd, ic = {getDataURL:function(a) {
    if ("undefined" == typeof HTMLCanvasElement) {
      return a.src;
    }
    if (!(a instanceof HTMLCanvasElement)) {
      void 0 === Bd && (Bd = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"));
      Bd.width = a.width;
      Bd.height = a.height;
      var g = Bd.getContext("2d");
      a instanceof ImageData ? g.putImageData(a, 0, 0) : g.drawImage(a, 0, 0, a.width, a.height);
      a = Bd;
    }
    return 2048 < a.width || 2048 < a.height ? a.toDataURL("image/jpeg", .6) : a.toDataURL("image/png");
  }}, Ti = 0;
  h.DEFAULT_IMAGE = void 0;
  h.DEFAULT_MAPPING = 300;
  h.prototype = Object.assign(Object.create(c.prototype), {constructor:h, isTexture:!0, updateMatrix:function() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.image = a.image;
    this.mipmaps = a.mipmaps.slice(0);
    this.mapping = a.mapping;
    this.wrapS = a.wrapS;
    this.wrapT = a.wrapT;
    this.magFilter = a.magFilter;
    this.minFilter = a.minFilter;
    this.anisotropy = a.anisotropy;
    this.format = a.format;
    this.type = a.type;
    this.offset.copy(a.offset);
    this.repeat.copy(a.repeat);
    this.center.copy(a.center);
    this.rotation = a.rotation;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrix.copy(a.matrix);
    this.generateMipmaps = a.generateMipmaps;
    this.premultiplyAlpha = a.premultiplyAlpha;
    this.flipY = a.flipY;
    this.unpackAlignment = a.unpackAlignment;
    this.encoding = a.encoding;
    return this;
  }, toJSON:function(a) {
    var g = void 0 === a || "string" === typeof a;
    if (!g && void 0 !== a.textures[this.uuid]) {
      return a.textures[this.uuid];
    }
    var d = {metadata:{version:4.5, type:"Texture", generator:"Texture.toJSON"}, uuid:this.uuid, name:this.name, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], format:this.format, type:this.type, encoding:this.encoding, minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY, premultiplyAlpha:this.premultiplyAlpha, 
    unpackAlignment:this.unpackAlignment};
    if (void 0 !== this.image) {
      var b = this.image;
      void 0 === b.uuid && (b.uuid = ka.generateUUID());
      if (!g && void 0 === a.images[b.uuid]) {
        if (Array.isArray(b)) {
          var c = [];
          for (var e = 0, l = b.length; e < l; e++) {
            c.push(ic.getDataURL(b[e]));
          }
        } else {
          c = ic.getDataURL(b);
        }
        a.images[b.uuid] = {uuid:b.uuid, url:c};
      }
      d.image = b.uuid;
    }
    g || (a.textures[this.uuid] = d);
    return d;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }, transformUv:function(a) {
    if (300 !== this.mapping) {
      return a;
    }
    a.applyMatrix3(this.matrix);
    if (0 > a.x || 1 < a.x) {
      switch(this.wrapS) {
        case 1E3:
          a.x -= Math.floor(a.x);
          break;
        case 1001:
          a.x = 0 > a.x ? 0 : 1;
          break;
        case 1002:
          a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);
      }
    }
    if (0 > a.y || 1 < a.y) {
      switch(this.wrapT) {
        case 1E3:
          a.y -= Math.floor(a.y);
          break;
        case 1001:
          a.y = 0 > a.y ? 0 : 1;
          break;
        case 1002:
          a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);
      }
    }
    this.flipY && (a.y = 1 - a.y);
    return a;
  }});
  Object.defineProperty(h.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.defineProperties(r.prototype, {width:{get:function() {
    return this.z;
  }, set:function(a) {
    this.z = a;
  }}, height:{get:function() {
    return this.w;
  }, set:function(a) {
    this.w = a;
  }}});
  Object.assign(r.prototype, {isVector4:!0, set:function(a, d, b, c) {
    this.x = a;
    this.y = d;
    this.z = b;
    this.w = c;
    return this;
  }, setScalar:function(a) {
    this.w = this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setW:function(a) {
    this.w = a;
    return this;
  }, setComponent:function(a, d) {
    switch(a) {
      case 0:
        this.x = d;
        break;
      case 1:
        this.y = d;
        break;
      case 2:
        this.z = d;
        break;
      case 3:
        this.w = d;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    this.w = void 0 !== a.w ? a.w : 1;
    return this;
  }, add:function(a, d) {
    if (void 0 !== d) {
      return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, d);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    this.w += a.w;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    this.w += a;
    return this;
  }, addVectors:function(a, d) {
    this.x = a.x + d.x;
    this.y = a.y + d.y;
    this.z = a.z + d.z;
    this.w = a.w + d.w;
    return this;
  }, addScaledVector:function(a, d) {
    this.x += a.x * d;
    this.y += a.y * d;
    this.z += a.z * d;
    this.w += a.w * d;
    return this;
  }, sub:function(a, d) {
    if (void 0 !== d) {
      return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, d);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    this.w -= a.w;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    this.w -= a;
    return this;
  }, subVectors:function(a, d) {
    this.x = a.x - d.x;
    this.y = a.y - d.y;
    this.z = a.z - d.z;
    this.w = a.w - d.w;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    this.w *= a;
    return this;
  }, applyMatrix4:function(a) {
    var g = this.x, d = this.y, b = this.z, c = this.w;
    a = a.elements;
    this.x = a[0] * g + a[4] * d + a[8] * b + a[12] * c;
    this.y = a[1] * g + a[5] * d + a[9] * b + a[13] * c;
    this.z = a[2] * g + a[6] * d + a[10] * b + a[14] * c;
    this.w = a[3] * g + a[7] * d + a[11] * b + a[15] * c;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, setAxisAngleFromQuaternion:function(a) {
    this.w = 2 * Math.acos(a.w);
    var g = Math.sqrt(1 - a.w * a.w);
    1E-4 > g ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / g, this.y = a.y / g, this.z = a.z / g);
    return this;
  }, setAxisAngleFromRotationMatrix:function(a) {
    a = a.elements;
    var g = a[0];
    var d = a[4];
    var b = a[8], c = a[1], e = a[5], l = a[9];
    var f = a[2];
    var h = a[6];
    var p = a[10];
    if (.01 > Math.abs(d - c) && .01 > Math.abs(b - f) && .01 > Math.abs(l - h)) {
      if (.1 > Math.abs(d + c) && .1 > Math.abs(b + f) && .1 > Math.abs(l + h) && .1 > Math.abs(g + e + p - 3)) {
        return this.set(1, 0, 0, 0), this;
      }
      a = Math.PI;
      g = (g + 1) / 2;
      e = (e + 1) / 2;
      p = (p + 1) / 2;
      d = (d + c) / 4;
      b = (b + f) / 4;
      l = (l + h) / 4;
      g > e && g > p ? .01 > g ? (h = 0, d = f = .707106781) : (h = Math.sqrt(g), f = d / h, d = b / h) : e > p ? .01 > e ? (h = .707106781, f = 0, d = .707106781) : (f = Math.sqrt(e), h = d / f, d = l / f) : .01 > p ? (f = h = .707106781, d = 0) : (d = Math.sqrt(p), h = b / d, f = l / d);
      this.set(h, f, d, a);
      return this;
    }
    a = Math.sqrt((h - l) * (h - l) + (b - f) * (b - f) + (c - d) * (c - d));
    .001 > Math.abs(a) && (a = 1);
    this.x = (h - l) / a;
    this.y = (b - f) / a;
    this.z = (c - d) / a;
    this.w = Math.acos((g + e + p - 1) / 2);
    return this;
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    this.w = Math.min(this.w, a.w);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    this.w = Math.max(this.w, a.w);
    return this;
  }, clamp:function(a, d) {
    this.x = Math.max(a.x, Math.min(d.x, this.x));
    this.y = Math.max(a.y, Math.min(d.y, this.y));
    this.z = Math.max(a.z, Math.min(d.z, this.z));
    this.w = Math.max(a.w, Math.min(d.w, this.w));
    return this;
  }, clampScalar:function(a, d) {
    this.x = Math.max(a, Math.min(d, this.x));
    this.y = Math.max(a, Math.min(d, this.y));
    this.z = Math.max(a, Math.min(d, this.z));
    this.w = Math.max(a, Math.min(d, this.w));
    return this;
  }, clampLength:function(a, d) {
    var g = this.length();
    return this.divideScalar(g || 1).multiplyScalar(Math.max(a, Math.min(d, g)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, d) {
    this.x += (a.x - this.x) * d;
    this.y += (a.y - this.y) * d;
    this.z += (a.z - this.z) * d;
    this.w += (a.w - this.w) * d;
    return this;
  }, lerpVectors:function(a, d, b) {
    return this.subVectors(d, a).multiplyScalar(b).add(a);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    this.x = a[d];
    this.y = a[d + 1];
    this.z = a[d + 2];
    this.w = a[d + 3];
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    a[d] = this.x;
    a[d + 1] = this.y;
    a[d + 2] = this.z;
    a[d + 3] = this.w;
    return a;
  }, fromBufferAttribute:function(a, d, b) {
    void 0 !== b && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(d);
    this.y = a.getY(d);
    this.z = a.getZ(d);
    this.w = a.getW(d);
    return this;
  }});
  q.prototype = Object.assign(Object.create(c.prototype), {constructor:q, isWebGLRenderTarget:!0, setSize:function(a, d) {
    if (this.width !== a || this.height !== d) {
      this.width = a, this.height = d, this.texture.image.width = a, this.texture.image.height = d, this.dispose();
    }
    this.viewport.set(0, 0, a, d);
    this.scissor.set(0, 0, a, d);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.width = a.width;
    this.height = a.height;
    this.viewport.copy(a.viewport);
    this.texture = a.texture.clone();
    this.depthBuffer = a.depthBuffer;
    this.stencilBuffer = a.stencilBuffer;
    this.depthTexture = a.depthTexture;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  n.prototype = Object.assign(Object.create(q.prototype), {constructor:n, isWebGLMultisampleRenderTarget:!0, copy:function(a) {
    q.prototype.copy.call(this, a);
    this.samples = a.samples;
    return this;
  }});
  var bb = new e, za = new m, Kj = new e(0, 0, 0), Lj = new e(1, 1, 1), jc = new e, If = new e, Qa = new e;
  Object.assign(m.prototype, {isMatrix4:!0, set:function(a, d, b, c, e, l, f, h, p, m, n, k, q, u, r, v) {
    var g = this.elements;
    g[0] = a;
    g[4] = d;
    g[8] = b;
    g[12] = c;
    g[1] = e;
    g[5] = l;
    g[9] = f;
    g[13] = h;
    g[2] = p;
    g[6] = m;
    g[10] = n;
    g[14] = k;
    g[3] = q;
    g[7] = u;
    g[11] = r;
    g[15] = v;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new m).fromArray(this.elements);
  }, copy:function(a) {
    var g = this.elements;
    a = a.elements;
    g[0] = a[0];
    g[1] = a[1];
    g[2] = a[2];
    g[3] = a[3];
    g[4] = a[4];
    g[5] = a[5];
    g[6] = a[6];
    g[7] = a[7];
    g[8] = a[8];
    g[9] = a[9];
    g[10] = a[10];
    g[11] = a[11];
    g[12] = a[12];
    g[13] = a[13];
    g[14] = a[14];
    g[15] = a[15];
    return this;
  }, copyPosition:function(a) {
    var g = this.elements;
    a = a.elements;
    g[12] = a[12];
    g[13] = a[13];
    g[14] = a[14];
    return this;
  }, extractBasis:function(a, d, b) {
    a.setFromMatrixColumn(this, 0);
    d.setFromMatrixColumn(this, 1);
    b.setFromMatrixColumn(this, 2);
    return this;
  }, makeBasis:function(a, d, b) {
    this.set(a.x, d.x, b.x, 0, a.y, d.y, b.y, 0, a.z, d.z, b.z, 0, 0, 0, 0, 1);
    return this;
  }, extractRotation:function(a) {
    var g = this.elements, d = a.elements, b = 1 / bb.setFromMatrixColumn(a, 0).length(), c = 1 / bb.setFromMatrixColumn(a, 1).length();
    a = 1 / bb.setFromMatrixColumn(a, 2).length();
    g[0] = d[0] * b;
    g[1] = d[1] * b;
    g[2] = d[2] * b;
    g[3] = 0;
    g[4] = d[4] * c;
    g[5] = d[5] * c;
    g[6] = d[6] * c;
    g[7] = 0;
    g[8] = d[8] * a;
    g[9] = d[9] * a;
    g[10] = d[10] * a;
    g[11] = 0;
    g[12] = 0;
    g[13] = 0;
    g[14] = 0;
    g[15] = 1;
    return this;
  }, makeRotationFromEuler:function(a) {
    a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var g = this.elements, d = a.x, b = a.y, c = a.z, e = Math.cos(d);
    d = Math.sin(d);
    var l = Math.cos(b);
    b = Math.sin(b);
    var f = Math.cos(c);
    c = Math.sin(c);
    if ("XYZ" === a.order) {
      a = e * f;
      var h = e * c, p = d * f, m = d * c;
      g[0] = l * f;
      g[4] = -l * c;
      g[8] = b;
      g[1] = h + p * b;
      g[5] = a - m * b;
      g[9] = -d * l;
      g[2] = m - a * b;
      g[6] = p + h * b;
      g[10] = e * l;
    } else {
      "YXZ" === a.order ? (a = l * f, h = l * c, p = b * f, m = b * c, g[0] = a + m * d, g[4] = p * d - h, g[8] = e * b, g[1] = e * c, g[5] = e * f, g[9] = -d, g[2] = h * d - p, g[6] = m + a * d, g[10] = e * l) : "ZXY" === a.order ? (a = l * f, h = l * c, p = b * f, m = b * c, g[0] = a - m * d, g[4] = -e * c, g[8] = p + h * d, g[1] = h + p * d, g[5] = e * f, g[9] = m - a * d, g[2] = -e * b, g[6] = d, g[10] = e * l) : "ZYX" === a.order ? (a = e * f, h = e * c, p = d * f, m = d * c, g[0] = l * f, g[4] = 
      p * b - h, g[8] = a * b + m, g[1] = l * c, g[5] = m * b + a, g[9] = h * b - p, g[2] = -b, g[6] = d * l, g[10] = e * l) : "YZX" === a.order ? (a = e * l, h = e * b, p = d * l, m = d * b, g[0] = l * f, g[4] = m - a * c, g[8] = p * c + h, g[1] = c, g[5] = e * f, g[9] = -d * f, g[2] = -b * f, g[6] = h * c + p, g[10] = a - m * c) : "XZY" === a.order && (a = e * l, h = e * b, p = d * l, m = d * b, g[0] = l * f, g[4] = -c, g[8] = b * f, g[1] = a * c + m, g[5] = e * f, g[9] = h * c - p, g[2] = p * 
      c - h, g[6] = d * f, g[10] = m * c + a);
    }
    g[3] = 0;
    g[7] = 0;
    g[11] = 0;
    g[12] = 0;
    g[13] = 0;
    g[14] = 0;
    g[15] = 1;
    return this;
  }, makeRotationFromQuaternion:function(a) {
    return this.compose(Kj, a, Lj);
  }, lookAt:function(a, d, b) {
    var g = this.elements;
    Qa.subVectors(a, d);
    0 === Qa.lengthSq() && (Qa.z = 1);
    Qa.normalize();
    jc.crossVectors(b, Qa);
    0 === jc.lengthSq() && (1 === Math.abs(b.z) ? Qa.x += 1E-4 : Qa.z += 1E-4, Qa.normalize(), jc.crossVectors(b, Qa));
    jc.normalize();
    If.crossVectors(Qa, jc);
    g[0] = jc.x;
    g[4] = If.x;
    g[8] = Qa.x;
    g[1] = jc.y;
    g[5] = If.y;
    g[9] = Qa.y;
    g[2] = jc.z;
    g[6] = If.z;
    g[10] = Qa.z;
    return this;
  }, multiply:function(a, d) {
    return void 0 !== d ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, d)) : this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, d) {
    var g = a.elements, b = d.elements;
    d = this.elements;
    a = g[0];
    var c = g[4], e = g[8], t = g[12], l = g[1], f = g[5], h = g[9], p = g[13], m = g[2], n = g[6], k = g[10], q = g[14], u = g[3], r = g[7], v = g[11];
    g = g[15];
    var w = b[0], y = b[4], x = b[8], z = b[12], A = b[1], D = b[5], B = b[9], C = b[13], F = b[2], E = b[6], O = b[10], H = b[14], I = b[3], L = b[7], R = b[11];
    b = b[15];
    d[0] = a * w + c * A + e * F + t * I;
    d[4] = a * y + c * D + e * E + t * L;
    d[8] = a * x + c * B + e * O + t * R;
    d[12] = a * z + c * C + e * H + t * b;
    d[1] = l * w + f * A + h * F + p * I;
    d[5] = l * y + f * D + h * E + p * L;
    d[9] = l * x + f * B + h * O + p * R;
    d[13] = l * z + f * C + h * H + p * b;
    d[2] = m * w + n * A + k * F + q * I;
    d[6] = m * y + n * D + k * E + q * L;
    d[10] = m * x + n * B + k * O + q * R;
    d[14] = m * z + n * C + k * H + q * b;
    d[3] = u * w + r * A + v * F + g * I;
    d[7] = u * y + r * D + v * E + g * L;
    d[11] = u * x + r * B + v * O + g * R;
    d[15] = u * z + r * C + v * H + g * b;
    return this;
  }, multiplyScalar:function(a) {
    var g = this.elements;
    g[0] *= a;
    g[4] *= a;
    g[8] *= a;
    g[12] *= a;
    g[1] *= a;
    g[5] *= a;
    g[9] *= a;
    g[13] *= a;
    g[2] *= a;
    g[6] *= a;
    g[10] *= a;
    g[14] *= a;
    g[3] *= a;
    g[7] *= a;
    g[11] *= a;
    g[15] *= a;
    return this;
  }, applyToBufferAttribute:function(a) {
    for (var g = 0, d = a.count; g < d; g++) {
      bb.x = a.getX(g), bb.y = a.getY(g), bb.z = a.getZ(g), bb.applyMatrix4(this), a.setXYZ(g, bb.x, bb.y, bb.z);
    }
    return a;
  }, determinant:function() {
    var a = this.elements, d = a[0], b = a[4], c = a[8], e = a[12], l = a[1], f = a[5], h = a[9], p = a[13], m = a[2], n = a[6], k = a[10], q = a[14];
    return a[3] * (+e * h * n - c * p * n - e * f * k + b * p * k + c * f * q - b * h * q) + a[7] * (+d * h * q - d * p * k + e * l * k - c * l * q + c * p * m - e * h * m) + a[11] * (+d * p * n - d * f * q - e * l * n + b * l * q + e * f * m - b * p * m) + a[15] * (-c * f * m - d * h * n + d * f * k + c * l * n - b * l * k + b * h * m);
  }, transpose:function() {
    var a = this.elements;
    var d = a[1];
    a[1] = a[4];
    a[4] = d;
    d = a[2];
    a[2] = a[8];
    a[8] = d;
    d = a[6];
    a[6] = a[9];
    a[9] = d;
    d = a[3];
    a[3] = a[12];
    a[12] = d;
    d = a[7];
    a[7] = a[13];
    a[13] = d;
    d = a[11];
    a[11] = a[14];
    a[14] = d;
    return this;
  }, setPosition:function(a, d, b) {
    var g = this.elements;
    a.isVector3 ? (g[12] = a.x, g[13] = a.y, g[14] = a.z) : (g[12] = a, g[13] = d, g[14] = b);
    return this;
  }, getInverse:function(a, d) {
    var g = this.elements, b = a.elements;
    a = b[0];
    var c = b[1], e = b[2], l = b[3], t = b[4], f = b[5], h = b[6], p = b[7], m = b[8], n = b[9], k = b[10], q = b[11], u = b[12], r = b[13], v = b[14];
    b = b[15];
    var w = n * v * p - r * k * p + r * h * q - f * v * q - n * h * b + f * k * b, y = u * k * p - m * v * p - u * h * q + t * v * q + m * h * b - t * k * b, x = m * r * p - u * n * p + u * f * q - t * r * q - m * f * b + t * n * b, z = u * n * h - m * r * h - u * f * k + t * r * k + m * f * v - t * n * v, A = a * w + c * y + e * x + l * z;
    if (0 === A) {
      if (!0 === d) {
        throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
      return this.identity();
    }
    d = 1 / A;
    g[0] = w * d;
    g[1] = (r * k * l - n * v * l - r * e * q + c * v * q + n * e * b - c * k * b) * d;
    g[2] = (f * v * l - r * h * l + r * e * p - c * v * p - f * e * b + c * h * b) * d;
    g[3] = (n * h * l - f * k * l - n * e * p + c * k * p + f * e * q - c * h * q) * d;
    g[4] = y * d;
    g[5] = (m * v * l - u * k * l + u * e * q - a * v * q - m * e * b + a * k * b) * d;
    g[6] = (u * h * l - t * v * l - u * e * p + a * v * p + t * e * b - a * h * b) * d;
    g[7] = (t * k * l - m * h * l + m * e * p - a * k * p - t * e * q + a * h * q) * d;
    g[8] = x * d;
    g[9] = (u * n * l - m * r * l - u * c * q + a * r * q + m * c * b - a * n * b) * d;
    g[10] = (t * r * l - u * f * l + u * c * p - a * r * p - t * c * b + a * f * b) * d;
    g[11] = (m * f * l - t * n * l - m * c * p + a * n * p + t * c * q - a * f * q) * d;
    g[12] = z * d;
    g[13] = (m * r * e - u * n * e + u * c * k - a * r * k - m * c * v + a * n * v) * d;
    g[14] = (u * f * e - t * r * e - u * c * h + a * r * h + t * c * v - a * f * v) * d;
    g[15] = (t * n * e - m * f * e + m * c * h - a * n * h - t * c * k + a * f * k) * d;
    return this;
  }, scale:function(a) {
    var g = this.elements, d = a.x, b = a.y;
    a = a.z;
    g[0] *= d;
    g[4] *= b;
    g[8] *= a;
    g[1] *= d;
    g[5] *= b;
    g[9] *= a;
    g[2] *= d;
    g[6] *= b;
    g[10] *= a;
    g[3] *= d;
    g[7] *= b;
    g[11] *= a;
    return this;
  }, getMaxScaleOnAxis:function() {
    var a = this.elements;
    return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
  }, makeTranslation:function(a, d, b) {
    this.set(1, 0, 0, a, 0, 1, 0, d, 0, 0, 1, b, 0, 0, 0, 1);
    return this;
  }, makeRotationX:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(1, 0, 0, 0, 0, g, -a, 0, 0, a, g, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationY:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(g, 0, a, 0, 0, 1, 0, 0, -a, 0, g, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationZ:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(g, -a, 0, 0, a, g, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationAxis:function(a, d) {
    var g = Math.cos(d);
    d = Math.sin(d);
    var b = 1 - g, c = a.x, e = a.y;
    a = a.z;
    var l = b * c, t = b * e;
    this.set(l * c + g, l * e - d * a, l * a + d * e, 0, l * e + d * a, t * e + g, t * a - d * c, 0, l * a - d * e, t * a + d * c, b * a * a + g, 0, 0, 0, 0, 1);
    return this;
  }, makeScale:function(a, d, b) {
    this.set(a, 0, 0, 0, 0, d, 0, 0, 0, 0, b, 0, 0, 0, 0, 1);
    return this;
  }, makeShear:function(a, d, b) {
    this.set(1, d, b, 0, a, 1, b, 0, a, d, 1, 0, 0, 0, 0, 1);
    return this;
  }, compose:function(a, d, b) {
    var g = this.elements, c = d._x, e = d._y, l = d._z, f = d._w, t = c + c, h = e + e, p = l + l;
    d = c * t;
    var m = c * h;
    c *= p;
    var n = e * h;
    e *= p;
    l *= p;
    t *= f;
    h *= f;
    f *= p;
    p = b.x;
    var k = b.y;
    b = b.z;
    g[0] = (1 - (n + l)) * p;
    g[1] = (m + f) * p;
    g[2] = (c - h) * p;
    g[3] = 0;
    g[4] = (m - f) * k;
    g[5] = (1 - (d + l)) * k;
    g[6] = (e + t) * k;
    g[7] = 0;
    g[8] = (c + h) * b;
    g[9] = (e - t) * b;
    g[10] = (1 - (d + n)) * b;
    g[11] = 0;
    g[12] = a.x;
    g[13] = a.y;
    g[14] = a.z;
    g[15] = 1;
    return this;
  }, decompose:function(a, d, b) {
    var g = this.elements, c = bb.set(g[0], g[1], g[2]).length(), e = bb.set(g[4], g[5], g[6]).length(), l = bb.set(g[8], g[9], g[10]).length();
    0 > this.determinant() && (c = -c);
    a.x = g[12];
    a.y = g[13];
    a.z = g[14];
    za.copy(this);
    a = 1 / c;
    g = 1 / e;
    var f = 1 / l;
    za.elements[0] *= a;
    za.elements[1] *= a;
    za.elements[2] *= a;
    za.elements[4] *= g;
    za.elements[5] *= g;
    za.elements[6] *= g;
    za.elements[8] *= f;
    za.elements[9] *= f;
    za.elements[10] *= f;
    d.setFromRotationMatrix(za);
    b.x = c;
    b.y = e;
    b.z = l;
    return this;
  }, makePerspective:function(a, d, b, c, e, l) {
    void 0 === l && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var g = this.elements;
    g[0] = 2 * e / (d - a);
    g[4] = 0;
    g[8] = (d + a) / (d - a);
    g[12] = 0;
    g[1] = 0;
    g[5] = 2 * e / (b - c);
    g[9] = (b + c) / (b - c);
    g[13] = 0;
    g[2] = 0;
    g[6] = 0;
    g[10] = -(l + e) / (l - e);
    g[14] = -2 * l * e / (l - e);
    g[3] = 0;
    g[7] = 0;
    g[11] = -1;
    g[15] = 0;
    return this;
  }, makeOrthographic:function(a, d, b, c, e, l) {
    var g = this.elements, f = 1 / (d - a), t = 1 / (b - c), h = 1 / (l - e);
    g[0] = 2 * f;
    g[4] = 0;
    g[8] = 0;
    g[12] = -((d + a) * f);
    g[1] = 0;
    g[5] = 2 * t;
    g[9] = 0;
    g[13] = -((b + c) * t);
    g[2] = 0;
    g[6] = 0;
    g[10] = -2 * h;
    g[14] = -((l + e) * h);
    g[3] = 0;
    g[7] = 0;
    g[11] = 0;
    g[15] = 1;
    return this;
  }, equals:function(a) {
    var g = this.elements;
    a = a.elements;
    for (var d = 0; 16 > d; d++) {
      if (g[d] !== a[d]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    for (var g = 0; 16 > g; g++) {
      this.elements[g] = a[g + d];
    }
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    var g = this.elements;
    a[d] = g[0];
    a[d + 1] = g[1];
    a[d + 2] = g[2];
    a[d + 3] = g[3];
    a[d + 4] = g[4];
    a[d + 5] = g[5];
    a[d + 6] = g[6];
    a[d + 7] = g[7];
    a[d + 8] = g[8];
    a[d + 9] = g[9];
    a[d + 10] = g[10];
    a[d + 11] = g[11];
    a[d + 12] = g[12];
    a[d + 13] = g[13];
    a[d + 14] = g[14];
    a[d + 15] = g[15];
    return a;
  }});
  var ni = new m, oi = new b;
  d.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
  d.DefaultOrder = "XYZ";
  Object.defineProperties(d.prototype, {x:{get:function() {
    return this._x;
  }, set:function(a) {
    this._x = a;
    this._onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(a) {
    this._y = a;
    this._onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(a) {
    this._z = a;
    this._onChangeCallback();
  }}, order:{get:function() {
    return this._order;
  }, set:function(a) {
    this._order = a;
    this._onChangeCallback();
  }}});
  Object.assign(d.prototype, {isEuler:!0, set:function(a, d, b, c) {
    this._x = a;
    this._y = d;
    this._z = b;
    this._order = c || this._order;
    this._onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }, copy:function(a) {
    this._x = a._x;
    this._y = a._y;
    this._z = a._z;
    this._order = a._order;
    this._onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(a, d, b) {
    var g = ka.clamp, c = a.elements;
    a = c[0];
    var e = c[4], l = c[8], f = c[1], t = c[5], h = c[9], p = c[2], m = c[6];
    c = c[10];
    d = d || this._order;
    "XYZ" === d ? (this._y = Math.asin(g(l, -1, 1)), .9999999 > Math.abs(l) ? (this._x = Math.atan2(-h, c), this._z = Math.atan2(-e, a)) : (this._x = Math.atan2(m, t), this._z = 0)) : "YXZ" === d ? (this._x = Math.asin(-g(h, -1, 1)), .9999999 > Math.abs(h) ? (this._y = Math.atan2(l, c), this._z = Math.atan2(f, t)) : (this._y = Math.atan2(-p, a), this._z = 0)) : "ZXY" === d ? (this._x = Math.asin(g(m, -1, 1)), .9999999 > Math.abs(m) ? (this._y = Math.atan2(-p, c), this._z = Math.atan2(-e, t)) : (this._y = 
    0, this._z = Math.atan2(f, a))) : "ZYX" === d ? (this._y = Math.asin(-g(p, -1, 1)), .9999999 > Math.abs(p) ? (this._x = Math.atan2(m, c), this._z = Math.atan2(f, a)) : (this._x = 0, this._z = Math.atan2(-e, t))) : "YZX" === d ? (this._z = Math.asin(g(f, -1, 1)), .9999999 > Math.abs(f) ? (this._x = Math.atan2(-h, t), this._y = Math.atan2(-p, a)) : (this._x = 0, this._y = Math.atan2(l, c))) : "XZY" === d ? (this._z = Math.asin(-g(e, -1, 1)), .9999999 > Math.abs(e) ? (this._x = Math.atan2(m, t), 
    this._y = Math.atan2(l, a)) : (this._x = Math.atan2(-h, c), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + d);
    this._order = d;
    !1 !== b && this._onChangeCallback();
    return this;
  }, setFromQuaternion:function(a, d, b) {
    ni.makeRotationFromQuaternion(a);
    return this.setFromRotationMatrix(ni, d, b);
  }, setFromVector3:function(a, d) {
    return this.set(a.x, a.y, a.z, d || this._order);
  }, reorder:function(a) {
    oi.setFromEuler(this);
    return this.setFromQuaternion(oi, a);
  }, equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
  }, fromArray:function(a) {
    this._x = a[0];
    this._y = a[1];
    this._z = a[2];
    void 0 !== a[3] && (this._order = a[3]);
    this._onChangeCallback();
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    a[d] = this._x;
    a[d + 1] = this._y;
    a[d + 2] = this._z;
    a[d + 3] = this._order;
    return a;
  }, toVector3:function(a) {
    return a ? a.set(this._x, this._y, this._z) : new e(this._x, this._y, this._z);
  }, _onChange:function(a) {
    this._onChangeCallback = a;
    return this;
  }, _onChangeCallback:function() {
  }});
  Object.assign(l.prototype, {set:function(a) {
    this.mask = 1 << a | 0;
  }, enable:function(a) {
    this.mask = this.mask | 1 << a | 0;
  }, enableAll:function() {
    this.mask = -1;
  }, toggle:function(a) {
    this.mask ^= 1 << a | 0;
  }, disable:function(a) {
    this.mask &= ~(1 << a | 0);
  }, disableAll:function() {
    this.mask = 0;
  }, test:function(a) {
    return 0 !== (this.mask & a.mask);
  }});
  var Ui = 0, pi = new e, Cd = new b, Qb = new m, Jf = new e, Ie = new e, Mj = new e, Nj = new b, qi = new e(1, 0, 0), ri = new e(0, 1, 0), si = new e(0, 0, 1), Oj = {type:"added"}, Pj = {type:"removed"};
  v.DefaultUp = new e(0, 1, 0);
  v.DefaultMatrixAutoUpdate = !0;
  v.prototype = Object.assign(Object.create(c.prototype), {constructor:v, isObject3D:!0, onBeforeRender:function() {
  }, onAfterRender:function() {
  }, applyMatrix:function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    this.matrix.premultiply(a);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }, applyQuaternion:function(a) {
    this.quaternion.premultiply(a);
    return this;
  }, setRotationFromAxisAngle:function(a, d) {
    this.quaternion.setFromAxisAngle(a, d);
  }, setRotationFromEuler:function(a) {
    this.quaternion.setFromEuler(a, !0);
  }, setRotationFromMatrix:function(a) {
    this.quaternion.setFromRotationMatrix(a);
  }, setRotationFromQuaternion:function(a) {
    this.quaternion.copy(a);
  }, rotateOnAxis:function(a, d) {
    Cd.setFromAxisAngle(a, d);
    this.quaternion.multiply(Cd);
    return this;
  }, rotateOnWorldAxis:function(a, d) {
    Cd.setFromAxisAngle(a, d);
    this.quaternion.premultiply(Cd);
    return this;
  }, rotateX:function(a) {
    return this.rotateOnAxis(qi, a);
  }, rotateY:function(a) {
    return this.rotateOnAxis(ri, a);
  }, rotateZ:function(a) {
    return this.rotateOnAxis(si, a);
  }, translateOnAxis:function(a, d) {
    pi.copy(a).applyQuaternion(this.quaternion);
    this.position.add(pi.multiplyScalar(d));
    return this;
  }, translateX:function(a) {
    return this.translateOnAxis(qi, a);
  }, translateY:function(a) {
    return this.translateOnAxis(ri, a);
  }, translateZ:function(a) {
    return this.translateOnAxis(si, a);
  }, localToWorld:function(a) {
    return a.applyMatrix4(this.matrixWorld);
  }, worldToLocal:function(a) {
    return a.applyMatrix4(Qb.getInverse(this.matrixWorld));
  }, lookAt:function(a, d, b) {
    a.isVector3 ? Jf.copy(a) : Jf.set(a, d, b);
    a = this.parent;
    this.updateWorldMatrix(!0, !1);
    Ie.setFromMatrixPosition(this.matrixWorld);
    this.isCamera || this.isLight ? Qb.lookAt(Ie, Jf, this.up) : Qb.lookAt(Jf, Ie, this.up);
    this.quaternion.setFromRotationMatrix(Qb);
    a && (Qb.extractRotation(a.matrixWorld), Cd.setFromRotationMatrix(Qb), this.quaternion.premultiply(Cd.inverse()));
  }, add:function(a) {
    if (1 < arguments.length) {
      for (var g = 0; g < arguments.length; g++) {
        this.add(arguments[g]);
      }
      return this;
    }
    if (a === this) {
      return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
    }
    a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, this.children.push(a), a.dispatchEvent(Oj)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
    return this;
  }, remove:function(a) {
    if (1 < arguments.length) {
      for (var g = 0; g < arguments.length; g++) {
        this.remove(arguments[g]);
      }
      return this;
    }
    g = this.children.indexOf(a);
    -1 !== g && (a.parent = null, this.children.splice(g, 1), a.dispatchEvent(Pj));
    return this;
  }, attach:function(a) {
    this.updateWorldMatrix(!0, !1);
    Qb.getInverse(this.matrixWorld);
    null !== a.parent && (a.parent.updateWorldMatrix(!0, !1), Qb.multiply(a.parent.matrixWorld));
    a.applyMatrix(Qb);
    a.updateWorldMatrix(!1, !1);
    this.add(a);
    return this;
  }, getObjectById:function(a) {
    return this.getObjectByProperty("id", a);
  }, getObjectByName:function(a) {
    return this.getObjectByProperty("name", a);
  }, getObjectByProperty:function(a, d) {
    if (this[a] === d) {
      return this;
    }
    for (var g = 0, b = this.children.length; g < b; g++) {
      var c = this.children[g].getObjectByProperty(a, d);
      if (void 0 !== c) {
        return c;
      }
    }
  }, getWorldPosition:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new e);
    this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld);
  }, getWorldQuaternion:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), a = new b);
    this.updateMatrixWorld(!0);
    this.matrixWorld.decompose(Ie, a, Mj);
    return a;
  }, getWorldScale:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), a = new e);
    this.updateMatrixWorld(!0);
    this.matrixWorld.decompose(Ie, Nj, a);
    return a;
  }, getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new e);
    this.updateMatrixWorld(!0);
    var g = this.matrixWorld.elements;
    return a.set(g[8], g[9], g[10]).normalize();
  }, raycast:function() {
  }, traverse:function(a) {
    a(this);
    for (var g = this.children, d = 0, b = g.length; d < b; d++) {
      g[d].traverse(a);
    }
  }, traverseVisible:function(a) {
    if (!1 !== this.visible) {
      a(this);
      for (var g = this.children, d = 0, b = g.length; d < b; d++) {
        g[d].traverseVisible(a);
      }
    }
  }, traverseAncestors:function(a) {
    var g = this.parent;
    null !== g && (a(g), g.traverseAncestors(a));
  }, updateMatrix:function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = !0;
  }, updateMatrixWorld:function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || a) {
      null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;
    }
    for (var g = this.children, d = 0, b = g.length; d < b; d++) {
      g[d].updateMatrixWorld(a);
    }
  }, updateWorldMatrix:function(a, d) {
    var g = this.parent;
    !0 === a && null !== g && g.updateWorldMatrix(!0, !1);
    this.matrixAutoUpdate && this.updateMatrix();
    null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    if (!0 === d) {
      for (a = this.children, d = 0, g = a.length; d < g; d++) {
        a[d].updateWorldMatrix(!1, !0);
      }
    }
  }, toJSON:function(a) {
    function g(g, d) {
      void 0 === g[d.uuid] && (g[d.uuid] = d.toJSON(a));
      return d.uuid;
    }
    function d(a) {
      var g = [], d;
      for (d in a) {
        var b = a[d];
        delete b.metadata;
        g.push(b);
      }
      return g;
    }
    var b = void 0 === a || "string" === typeof a, c = {};
    b && (a = {geometries:{}, materials:{}, textures:{}, images:{}, shapes:{}}, c.metadata = {version:4.5, type:"Object", generator:"Object3D.toJSON"});
    var e = {};
    e.uuid = this.uuid;
    e.type = this.type;
    "" !== this.name && (e.name = this.name);
    !0 === this.castShadow && (e.castShadow = !0);
    !0 === this.receiveShadow && (e.receiveShadow = !0);
    !1 === this.visible && (e.visible = !1);
    !1 === this.frustumCulled && (e.frustumCulled = !1);
    0 !== this.renderOrder && (e.renderOrder = this.renderOrder);
    "{}" !== JSON.stringify(this.userData) && (e.userData = this.userData);
    e.layers = this.layers.mask;
    e.matrix = this.matrix.toArray();
    !1 === this.matrixAutoUpdate && (e.matrixAutoUpdate = !1);
    this.isMesh && 0 !== this.drawMode && (e.drawMode = this.drawMode);
    this.isInstancedMesh && (e.type = "InstancedMesh", e.count = this.count, e.instanceMatrix = this.instanceMatrix.toJSON());
    if (this.isMesh || this.isLine || this.isPoints) {
      e.geometry = g(a.geometries, this.geometry);
      var l = this.geometry.parameters;
      if (void 0 !== l && void 0 !== l.shapes) {
        if (l = l.shapes, Array.isArray(l)) {
          for (var f = 0, h = l.length; f < h; f++) {
            g(a.shapes, l[f]);
          }
        } else {
          g(a.shapes, l);
        }
      }
    }
    if (void 0 !== this.material) {
      if (Array.isArray(this.material)) {
        l = [];
        f = 0;
        for (h = this.material.length; f < h; f++) {
          l.push(g(a.materials, this.material[f]));
        }
        e.material = l;
      } else {
        e.material = g(a.materials, this.material);
      }
    }
    if (0 < this.children.length) {
      for (e.children = [], f = 0; f < this.children.length; f++) {
        e.children.push(this.children[f].toJSON(a).object);
      }
    }
    if (b) {
      b = d(a.geometries);
      f = d(a.materials);
      h = d(a.textures);
      var p = d(a.images);
      l = d(a.shapes);
      0 < b.length && (c.geometries = b);
      0 < f.length && (c.materials = f);
      0 < h.length && (c.textures = h);
      0 < p.length && (c.images = p);
      0 < l.length && (c.shapes = l);
    }
    c.object = e;
    return c;
  }, clone:function(a) {
    return (new this.constructor).copy(this, a);
  }, copy:function(a, d) {
    void 0 === d && (d = !0);
    this.name = a.name;
    this.up.copy(a.up);
    this.position.copy(a.position);
    this.quaternion.copy(a.quaternion);
    this.scale.copy(a.scale);
    this.matrix.copy(a.matrix);
    this.matrixWorld.copy(a.matrixWorld);
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
    this.layers.mask = a.layers.mask;
    this.visible = a.visible;
    this.castShadow = a.castShadow;
    this.receiveShadow = a.receiveShadow;
    this.frustumCulled = a.frustumCulled;
    this.renderOrder = a.renderOrder;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    if (!0 === d) {
      for (d = 0; d < a.children.length; d++) {
        this.add(a.children[d].clone());
      }
    }
    return this;
  }});
  w.prototype = Object.assign(Object.create(v.prototype), {constructor:w, isScene:!0, copy:function(a, d) {
    v.prototype.copy.call(this, a, d);
    null !== a.background && (this.background = a.background.clone());
    null !== a.fog && (this.fog = a.fog.clone());
    null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());
    this.autoUpdate = a.autoUpdate;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    return this;
  }, toJSON:function(a) {
    var g = v.prototype.toJSON.call(this, a);
    null !== this.background && (g.object.background = this.background.toJSON(a));
    null !== this.fog && (g.object.fog = this.fog.toJSON());
    return g;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var Rb = [new e, new e, new e, new e, new e, new e, new e, new e], zb = new e, Dd = new e, Ed = new e, Fd = new e, kc = new e, lc = new e, Ic = new e, Je = new e, Kf = new e, Lf = new e, oc = new e;
  Object.assign(x.prototype, {isBox3:!0, set:function(a, d) {
    this.min.copy(a);
    this.max.copy(d);
    return this;
  }, setFromArray:function(a) {
    for (var g = Infinity, d = Infinity, b = Infinity, c = -Infinity, e = -Infinity, l = -Infinity, f = 0, h = a.length; f < h; f += 3) {
      var p = a[f], m = a[f + 1], n = a[f + 2];
      p < g && (g = p);
      m < d && (d = m);
      n < b && (b = n);
      p > c && (c = p);
      m > e && (e = m);
      n > l && (l = n);
    }
    this.min.set(g, d, b);
    this.max.set(c, e, l);
    return this;
  }, setFromBufferAttribute:function(a) {
    for (var g = Infinity, d = Infinity, b = Infinity, c = -Infinity, e = -Infinity, l = -Infinity, f = 0, h = a.count; f < h; f++) {
      var p = a.getX(f), m = a.getY(f), n = a.getZ(f);
      p < g && (g = p);
      m < d && (d = m);
      n < b && (b = n);
      p > c && (c = p);
      m > e && (e = m);
      n > l && (l = n);
    }
    this.min.set(g, d, b);
    this.max.set(c, e, l);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var g = 0, d = a.length; g < d; g++) {
      this.expandByPoint(a[g]);
    }
    return this;
  }, setFromCenterAndSize:function(a, d) {
    d = zb.copy(d).multiplyScalar(.5);
    this.min.copy(a).sub(d);
    this.max.copy(a).add(d);
    return this;
  }, setFromObject:function(a) {
    this.makeEmpty();
    return this.expandByObject(a);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new e);
    return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new e);
    return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, expandByObject:function(a) {
    var g;
    a.updateWorldMatrix(!1, !1);
    var d = a.geometry;
    if (void 0 !== d) {
      if (d.isGeometry) {
        var b = d.vertices;
        d = 0;
        for (g = b.length; d < g; d++) {
          zb.copy(b[d]), zb.applyMatrix4(a.matrixWorld), this.expandByPoint(zb);
        }
      } else {
        if (d.isBufferGeometry && (b = d.attributes.position, void 0 !== b)) {
          for (d = 0, g = b.count; d < g; d++) {
            zb.fromBufferAttribute(b, d).applyMatrix4(a.matrixWorld), this.expandByPoint(zb);
          }
        }
      }
    }
    a = a.children;
    d = 0;
    for (g = a.length; d < g; d++) {
      this.expandByObject(a[d]);
    }
    return this;
  }, containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
  }, getParameter:function(a, d) {
    void 0 === d && (console.warn("THREE.Box3: .getParameter() target is now required"), d = new e);
    return d.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
  }, intersectsSphere:function(a) {
    this.clampPoint(a.center, zb);
    return zb.distanceToSquared(a.center) <= a.radius * a.radius;
  }, intersectsPlane:function(a) {
    if (0 < a.normal.x) {
      var g = a.normal.x * this.min.x;
      var d = a.normal.x * this.max.x;
    } else {
      g = a.normal.x * this.max.x, d = a.normal.x * this.min.x;
    }
    0 < a.normal.y ? (g += a.normal.y * this.min.y, d += a.normal.y * this.max.y) : (g += a.normal.y * this.max.y, d += a.normal.y * this.min.y);
    0 < a.normal.z ? (g += a.normal.z * this.min.z, d += a.normal.z * this.max.z) : (g += a.normal.z * this.max.z, d += a.normal.z * this.min.z);
    return g <= -a.constant && d >= -a.constant;
  }, intersectsTriangle:function(a) {
    if (this.isEmpty()) {
      return !1;
    }
    this.getCenter(Je);
    Kf.subVectors(this.max, Je);
    Dd.subVectors(a.a, Je);
    Ed.subVectors(a.b, Je);
    Fd.subVectors(a.c, Je);
    kc.subVectors(Ed, Dd);
    lc.subVectors(Fd, Ed);
    Ic.subVectors(Dd, Fd);
    a = [0, -kc.z, kc.y, 0, -lc.z, lc.y, 0, -Ic.z, Ic.y, kc.z, 0, -kc.x, lc.z, 0, -lc.x, Ic.z, 0, -Ic.x, -kc.y, kc.x, 0, -lc.y, lc.x, 0, -Ic.y, Ic.x, 0];
    if (!z(a, Dd, Ed, Fd, Kf)) {
      return !1;
    }
    a = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!z(a, Dd, Ed, Fd, Kf)) {
      return !1;
    }
    Lf.crossVectors(kc, lc);
    a = [Lf.x, Lf.y, Lf.z];
    return z(a, Dd, Ed, Fd, Kf);
  }, clampPoint:function(a, d) {
    void 0 === d && (console.warn("THREE.Box3: .clampPoint() target is now required"), d = new e);
    return d.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function(a) {
    return zb.copy(a).clamp(this.min, this.max).sub(a).length();
  }, getBoundingSphere:function(a) {
    void 0 === a && console.error("THREE.Box3: .getBoundingSphere() target is now required");
    this.getCenter(a.center);
    a.radius = .5 * this.getSize(zb).length();
    return a;
  }, intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    this.isEmpty() && this.makeEmpty();
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, applyMatrix4:function(a) {
    if (this.isEmpty()) {
      return this;
    }
    Rb[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(a);
    Rb[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(a);
    Rb[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(a);
    Rb[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(a);
    Rb[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(a);
    Rb[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(a);
    Rb[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(a);
    Rb[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(a);
    this.setFromPoints(Rb);
    return this;
  }, translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  var Qj = new x;
  Object.assign(p.prototype, {set:function(a, d) {
    this.center.copy(a);
    this.radius = d;
    return this;
  }, setFromPoints:function(a, d) {
    var g = this.center;
    void 0 !== d ? g.copy(d) : Qj.setFromPoints(a).getCenter(g);
    for (var b = d = 0, c = a.length; b < c; b++) {
      d = Math.max(d, g.distanceToSquared(a[b]));
    }
    this.radius = Math.sqrt(d);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.center.copy(a.center);
    this.radius = a.radius;
    return this;
  }, empty:function() {
    return 0 >= this.radius;
  }, containsPoint:function(a) {
    return a.distanceToSquared(this.center) <= this.radius * this.radius;
  }, distanceToPoint:function(a) {
    return a.distanceTo(this.center) - this.radius;
  }, intersectsSphere:function(a) {
    var g = this.radius + a.radius;
    return a.center.distanceToSquared(this.center) <= g * g;
  }, intersectsBox:function(a) {
    return a.intersectsSphere(this);
  }, intersectsPlane:function(a) {
    return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
  }, clampPoint:function(a, d) {
    var g = this.center.distanceToSquared(a);
    void 0 === d && (console.warn("THREE.Sphere: .clampPoint() target is now required"), d = new e);
    d.copy(a);
    g > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));
    return d;
  }, getBoundingBox:function(a) {
    void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new x);
    a.set(this.center, this.center);
    a.expandByScalar(this.radius);
    return a;
  }, applyMatrix4:function(a) {
    this.center.applyMatrix4(a);
    this.radius *= a.getMaxScaleOnAxis();
    return this;
  }, translate:function(a) {
    this.center.add(a);
    return this;
  }, equals:function(a) {
    return a.center.equals(this.center) && a.radius === this.radius;
  }});
  var Sb = new e, Xg = new e, Mf = new e, mc = new e, Yg = new e, Nf = new e, Zg = new e;
  Object.assign(u.prototype, {set:function(a, d) {
    this.origin.copy(a);
    this.direction.copy(d);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.origin.copy(a.origin);
    this.direction.copy(a.direction);
    return this;
  }, at:function(a, d) {
    void 0 === d && (console.warn("THREE.Ray: .at() target is now required"), d = new e);
    return d.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, lookAt:function(a) {
    this.direction.copy(a).sub(this.origin).normalize();
    return this;
  }, recast:function(a) {
    this.origin.copy(this.at(a, Sb));
    return this;
  }, closestPointToPoint:function(a, d) {
    void 0 === d && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), d = new e);
    d.subVectors(a, this.origin);
    a = d.dot(this.direction);
    return 0 > a ? d.copy(this.origin) : d.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, distanceToPoint:function(a) {
    return Math.sqrt(this.distanceSqToPoint(a));
  }, distanceSqToPoint:function(a) {
    var g = Sb.subVectors(a, this.origin).dot(this.direction);
    if (0 > g) {
      return this.origin.distanceToSquared(a);
    }
    Sb.copy(this.direction).multiplyScalar(g).add(this.origin);
    return Sb.distanceToSquared(a);
  }, distanceSqToSegment:function(a, d, b, c) {
    Xg.copy(a).add(d).multiplyScalar(.5);
    Mf.copy(d).sub(a).normalize();
    mc.copy(this.origin).sub(Xg);
    var g = .5 * a.distanceTo(d), e = -this.direction.dot(Mf), l = mc.dot(this.direction), f = -mc.dot(Mf), h = mc.lengthSq(), t = Math.abs(1 - e * e);
    if (0 < t) {
      a = e * f - l;
      d = e * l - f;
      var p = g * t;
      0 <= a ? d >= -p ? d <= p ? (g = 1 / t, a *= g, d *= g, e = a * (a + e * d + 2 * l) + d * (e * a + d + 2 * f) + h) : (d = g, a = Math.max(0, -(e * d + l)), e = -a * a + d * (d + 2 * f) + h) : (d = -g, a = Math.max(0, -(e * d + l)), e = -a * a + d * (d + 2 * f) + h) : d <= -p ? (a = Math.max(0, -(-e * g + l)), d = 0 < a ? -g : Math.min(Math.max(-g, -f), g), e = -a * a + d * (d + 2 * f) + h) : d <= p ? (a = 0, d = Math.min(Math.max(-g, -f), g), e = d * (d + 2 * f) + h) : (a = Math.max(0, -(e * 
      g + l)), d = 0 < a ? g : Math.min(Math.max(-g, -f), g), e = -a * a + d * (d + 2 * f) + h);
    } else {
      d = 0 < e ? -g : g, a = Math.max(0, -(e * d + l)), e = -a * a + d * (d + 2 * f) + h;
    }
    b && b.copy(this.direction).multiplyScalar(a).add(this.origin);
    c && c.copy(Mf).multiplyScalar(d).add(Xg);
    return e;
  }, intersectSphere:function(a, d) {
    Sb.subVectors(a.center, this.origin);
    var g = Sb.dot(this.direction), b = Sb.dot(Sb) - g * g;
    a = a.radius * a.radius;
    if (b > a) {
      return null;
    }
    a = Math.sqrt(a - b);
    b = g - a;
    g += a;
    return 0 > b && 0 > g ? null : 0 > b ? this.at(g, d) : this.at(b, d);
  }, intersectsSphere:function(a) {
    return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
  }, distanceToPlane:function(a) {
    var g = a.normal.dot(this.direction);
    if (0 === g) {
      return 0 === a.distanceToPoint(this.origin) ? 0 : null;
    }
    a = -(this.origin.dot(a.normal) + a.constant) / g;
    return 0 <= a ? a : null;
  }, intersectPlane:function(a, d) {
    a = this.distanceToPlane(a);
    return null === a ? null : this.at(a, d);
  }, intersectsPlane:function(a) {
    var g = a.distanceToPoint(this.origin);
    return 0 === g || 0 > a.normal.dot(this.direction) * g ? !0 : !1;
  }, intersectBox:function(a, d) {
    var g = 1 / this.direction.x;
    var b = 1 / this.direction.y;
    var c = 1 / this.direction.z, e = this.origin;
    if (0 <= g) {
      var l = (a.min.x - e.x) * g;
      g *= a.max.x - e.x;
    } else {
      l = (a.max.x - e.x) * g, g *= a.min.x - e.x;
    }
    if (0 <= b) {
      var f = (a.min.y - e.y) * b;
      b *= a.max.y - e.y;
    } else {
      f = (a.max.y - e.y) * b, b *= a.min.y - e.y;
    }
    if (l > b || f > g) {
      return null;
    }
    if (f > l || l !== l) {
      l = f;
    }
    if (b < g || g !== g) {
      g = b;
    }
    0 <= c ? (f = (a.min.z - e.z) * c, a = (a.max.z - e.z) * c) : (f = (a.max.z - e.z) * c, a = (a.min.z - e.z) * c);
    if (l > a || f > g) {
      return null;
    }
    if (f > l || l !== l) {
      l = f;
    }
    if (a < g || g !== g) {
      g = a;
    }
    return 0 > g ? null : this.at(0 <= l ? l : g, d);
  }, intersectsBox:function(a) {
    return null !== this.intersectBox(a, Sb);
  }, intersectTriangle:function(a, d, b, c, e) {
    Yg.subVectors(d, a);
    Nf.subVectors(b, a);
    Zg.crossVectors(Yg, Nf);
    d = this.direction.dot(Zg);
    if (0 < d) {
      if (c) {
        return null;
      }
      c = 1;
    } else {
      if (0 > d) {
        c = -1, d = -d;
      } else {
        return null;
      }
    }
    mc.subVectors(this.origin, a);
    a = c * this.direction.dot(Nf.crossVectors(mc, Nf));
    if (0 > a) {
      return null;
    }
    b = c * this.direction.dot(Yg.cross(mc));
    if (0 > b || a + b > d) {
      return null;
    }
    a = -c * mc.dot(Zg);
    return 0 > a ? null : this.at(a / d, e);
  }, applyMatrix4:function(a) {
    this.origin.applyMatrix4(a);
    this.direction.transformDirection(a);
    return this;
  }, equals:function(a) {
    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
  }});
  var $g = new e, Rj = new e, Sj = new f;
  Object.assign(y.prototype, {isPlane:!0, set:function(a, d) {
    this.normal.copy(a);
    this.constant = d;
    return this;
  }, setComponents:function(a, d, b, c) {
    this.normal.set(a, d, b);
    this.constant = c;
    return this;
  }, setFromNormalAndCoplanarPoint:function(a, d) {
    this.normal.copy(a);
    this.constant = -d.dot(this.normal);
    return this;
  }, setFromCoplanarPoints:function(a, d, b) {
    d = $g.subVectors(b, d).cross(Rj.subVectors(a, d)).normalize();
    this.setFromNormalAndCoplanarPoint(d, a);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.normal.copy(a.normal);
    this.constant = a.constant;
    return this;
  }, normalize:function() {
    var a = 1 / this.normal.length();
    this.normal.multiplyScalar(a);
    this.constant *= a;
    return this;
  }, negate:function() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }, distanceToPoint:function(a) {
    return this.normal.dot(a) + this.constant;
  }, distanceToSphere:function(a) {
    return this.distanceToPoint(a.center) - a.radius;
  }, projectPoint:function(a, d) {
    void 0 === d && (console.warn("THREE.Plane: .projectPoint() target is now required"), d = new e);
    return d.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
  }, intersectLine:function(a, d) {
    void 0 === d && (console.warn("THREE.Plane: .intersectLine() target is now required"), d = new e);
    var g = a.delta($g), b = this.normal.dot(g);
    if (0 === b) {
      if (0 === this.distanceToPoint(a.start)) {
        return d.copy(a.start);
      }
    } else {
      if (b = -(a.start.dot(this.normal) + this.constant) / b, !(0 > b || 1 < b)) {
        return d.copy(g).multiplyScalar(b).add(a.start);
      }
    }
  }, intersectsLine:function(a) {
    var g = this.distanceToPoint(a.start);
    a = this.distanceToPoint(a.end);
    return 0 > g && 0 < a || 0 > a && 0 < g;
  }, intersectsBox:function(a) {
    return a.intersectsPlane(this);
  }, intersectsSphere:function(a) {
    return a.intersectsPlane(this);
  }, coplanarPoint:function(a) {
    void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new e);
    return a.copy(this.normal).multiplyScalar(-this.constant);
  }, applyMatrix4:function(a, d) {
    d = d || Sj.getNormalMatrix(a);
    a = this.coplanarPoint($g).applyMatrix4(a);
    d = this.normal.applyMatrix3(d).normalize();
    this.constant = -a.dot(d);
    return this;
  }, translate:function(a) {
    this.constant -= a.dot(this.normal);
    return this;
  }, equals:function(a) {
    return a.normal.equals(this.normal) && a.constant === this.constant;
  }});
  var ob = new e, Tb = new e, ah = new e, Ub = new e, Gd = new e, Hd = new e, ti = new e, bh = new e, ch = new e, dh = new e;
  Object.assign(A, {getNormal:function(a, d, b, c) {
    void 0 === c && (console.warn("THREE.Triangle: .getNormal() target is now required"), c = new e);
    c.subVectors(b, d);
    ob.subVectors(a, d);
    c.cross(ob);
    a = c.lengthSq();
    return 0 < a ? c.multiplyScalar(1 / Math.sqrt(a)) : c.set(0, 0, 0);
  }, getBarycoord:function(a, d, b, c, l) {
    ob.subVectors(c, d);
    Tb.subVectors(b, d);
    ah.subVectors(a, d);
    a = ob.dot(ob);
    d = ob.dot(Tb);
    b = ob.dot(ah);
    var g = Tb.dot(Tb);
    c = Tb.dot(ah);
    var f = a * g - d * d;
    void 0 === l && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), l = new e);
    if (0 === f) {
      return l.set(-2, -1, -1);
    }
    f = 1 / f;
    g = (g * b - d * c) * f;
    a = (a * c - d * b) * f;
    return l.set(1 - g - a, a, g);
  }, containsPoint:function(a, d, b, c) {
    A.getBarycoord(a, d, b, c, Ub);
    return 0 <= Ub.x && 0 <= Ub.y && 1 >= Ub.x + Ub.y;
  }, getUV:function(a, d, b, c, e, l, f, h) {
    this.getBarycoord(a, d, b, c, Ub);
    h.set(0, 0);
    h.addScaledVector(e, Ub.x);
    h.addScaledVector(l, Ub.y);
    h.addScaledVector(f, Ub.z);
    return h;
  }, isFrontFacing:function(a, d, b, c) {
    ob.subVectors(b, d);
    Tb.subVectors(a, d);
    return 0 > ob.cross(Tb).dot(c) ? !0 : !1;
  }});
  Object.assign(A.prototype, {set:function(a, d, b) {
    this.a.copy(a);
    this.b.copy(d);
    this.c.copy(b);
    return this;
  }, setFromPointsAndIndices:function(a, d, b, c) {
    this.a.copy(a[d]);
    this.b.copy(a[b]);
    this.c.copy(a[c]);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a.copy(a.a);
    this.b.copy(a.b);
    this.c.copy(a.c);
    return this;
  }, getArea:function() {
    ob.subVectors(this.c, this.b);
    Tb.subVectors(this.a, this.b);
    return .5 * ob.cross(Tb).length();
  }, getMidpoint:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new e);
    return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }, getNormal:function(a) {
    return A.getNormal(this.a, this.b, this.c, a);
  }, getPlane:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new y);
    return a.setFromCoplanarPoints(this.a, this.b, this.c);
  }, getBarycoord:function(a, d) {
    return A.getBarycoord(a, this.a, this.b, this.c, d);
  }, getUV:function(a, d, b, c, e) {
    return A.getUV(a, this.a, this.b, this.c, d, b, c, e);
  }, containsPoint:function(a) {
    return A.containsPoint(a, this.a, this.b, this.c);
  }, isFrontFacing:function(a) {
    return A.isFrontFacing(this.a, this.b, this.c, a);
  }, intersectsBox:function(a) {
    return a.intersectsTriangle(this);
  }, closestPointToPoint:function(a, d) {
    void 0 === d && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), d = new e);
    var g = this.a, b = this.b, c = this.c;
    Gd.subVectors(b, g);
    Hd.subVectors(c, g);
    bh.subVectors(a, g);
    var l = Gd.dot(bh), f = Hd.dot(bh);
    if (0 >= l && 0 >= f) {
      return d.copy(g);
    }
    ch.subVectors(a, b);
    var h = Gd.dot(ch), p = Hd.dot(ch);
    if (0 <= h && p <= h) {
      return d.copy(b);
    }
    var t = l * p - h * f;
    if (0 >= t && 0 <= l && 0 >= h) {
      return b = l / (l - h), d.copy(g).addScaledVector(Gd, b);
    }
    dh.subVectors(a, c);
    a = Gd.dot(dh);
    var m = Hd.dot(dh);
    if (0 <= m && a <= m) {
      return d.copy(c);
    }
    l = a * f - l * m;
    if (0 >= l && 0 <= f && 0 >= m) {
      return t = f / (f - m), d.copy(g).addScaledVector(Hd, t);
    }
    f = h * m - a * p;
    if (0 >= f && 0 <= p - h && 0 <= a - m) {
      return ti.subVectors(c, b), t = (p - h) / (p - h + (a - m)), d.copy(b).addScaledVector(ti, t);
    }
    c = 1 / (f + l + t);
    b = l * c;
    t *= c;
    return d.copy(g).addScaledVector(Gd, b).addScaledVector(Hd, t);
  }, equals:function(a) {
    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
  }});
  var ui = {aliceblue:15792383, antiquewhite:16444375, aqua:65535, aquamarine:8388564, azure:15794175, beige:16119260, bisque:16770244, black:0, blanchedalmond:16772045, blue:255, blueviolet:9055202, brown:10824234, burlywood:14596231, cadetblue:6266528, chartreuse:8388352, chocolate:13789470, coral:16744272, cornflowerblue:6591981, cornsilk:16775388, crimson:14423100, cyan:65535, darkblue:139, darkcyan:35723, darkgoldenrod:12092939, darkgray:11119017, darkgreen:25600, darkgrey:11119017, darkkhaki:12433259, 
  darkmagenta:9109643, darkolivegreen:5597999, darkorange:16747520, darkorchid:10040012, darkred:9109504, darksalmon:15308410, darkseagreen:9419919, darkslateblue:4734347, darkslategray:3100495, darkslategrey:3100495, darkturquoise:52945, darkviolet:9699539, deeppink:16716947, deepskyblue:49151, dimgray:6908265, dimgrey:6908265, dodgerblue:2003199, firebrick:11674146, floralwhite:16775920, forestgreen:2263842, fuchsia:16711935, gainsboro:14474460, ghostwhite:16316671, gold:16766720, goldenrod:14329120, 
  gray:8421504, green:32768, greenyellow:11403055, grey:8421504, honeydew:15794160, hotpink:16738740, indianred:13458524, indigo:4915330, ivory:16777200, khaki:15787660, lavender:15132410, lavenderblush:16773365, lawngreen:8190976, lemonchiffon:16775885, lightblue:11393254, lightcoral:15761536, lightcyan:14745599, lightgoldenrodyellow:16448210, lightgray:13882323, lightgreen:9498256, lightgrey:13882323, lightpink:16758465, lightsalmon:16752762, lightseagreen:2142890, lightskyblue:8900346, lightslategray:7833753, 
  lightslategrey:7833753, lightsteelblue:11584734, lightyellow:16777184, lime:65280, limegreen:3329330, linen:16445670, magenta:16711935, maroon:8388608, mediumaquamarine:6737322, mediumblue:205, mediumorchid:12211667, mediumpurple:9662683, mediumseagreen:3978097, mediumslateblue:8087790, mediumspringgreen:64154, mediumturquoise:4772300, mediumvioletred:13047173, midnightblue:1644912, mintcream:16121850, mistyrose:16770273, moccasin:16770229, navajowhite:16768685, navy:128, oldlace:16643558, olive:8421376, 
  olivedrab:7048739, orange:16753920, orangered:16729344, orchid:14315734, palegoldenrod:15657130, palegreen:10025880, paleturquoise:11529966, palevioletred:14381203, papayawhip:16773077, peachpuff:16767673, peru:13468991, pink:16761035, plum:14524637, powderblue:11591910, purple:8388736, rebeccapurple:6697881, red:16711680, rosybrown:12357519, royalblue:4286945, saddlebrown:9127187, salmon:16416882, sandybrown:16032864, seagreen:3050327, seashell:16774638, sienna:10506797, silver:12632256, skyblue:8900331, 
  slateblue:6970061, slategray:7372944, slategrey:7372944, snow:16775930, springgreen:65407, steelblue:4620980, tan:13808780, teal:32896, thistle:14204888, tomato:16737095, turquoise:4251856, violet:15631086, wheat:16113331, white:16777215, whitesmoke:16119285, yellow:16776960, yellowgreen:10145074}, Va = {h:0, s:0, l:0}, Of = {h:0, s:0, l:0};
  Object.assign(B.prototype, {isColor:!0, r:1, g:1, b:1, set:function(a) {
    a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
    return this;
  }, setScalar:function(a) {
    this.b = this.g = this.r = a;
    return this;
  }, setHex:function(a) {
    a = Math.floor(a);
    this.r = (a >> 16 & 255) / 255;
    this.g = (a >> 8 & 255) / 255;
    this.b = (a & 255) / 255;
    return this;
  }, setRGB:function(a, d, b) {
    this.r = a;
    this.g = d;
    this.b = b;
    return this;
  }, setHSL:function(a, d, b) {
    a = ka.euclideanModulo(a, 1);
    d = ka.clamp(d, 0, 1);
    b = ka.clamp(b, 0, 1);
    0 === d ? this.r = this.g = this.b = b : (d = .5 >= b ? b * (1 + d) : b + d - b * d, b = 2 * b - d, this.r = D(b, d, a + 1 / 3), this.g = D(b, d, a), this.b = D(b, d, a - 1 / 3));
    return this;
  }, setStyle:function(a) {
    function g(g) {
      void 0 !== g && 1 > parseFloat(g) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
    }
    var d;
    if (d = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
      var b = d[2];
      switch(d[1]) {
        case "rgb":
        case "rgba":
          if (d = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            return this.r = Math.min(255, parseInt(d[1], 10)) / 255, this.g = Math.min(255, parseInt(d[2], 10)) / 255, this.b = Math.min(255, parseInt(d[3], 10)) / 255, g(d[5]), this;
          }
          if (d = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            return this.r = Math.min(100, parseInt(d[1], 10)) / 100, this.g = Math.min(100, parseInt(d[2], 10)) / 100, this.b = Math.min(100, parseInt(d[3], 10)) / 100, g(d[5]), this;
          }
          break;
        case "hsl":
        case "hsla":
          if (d = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            b = parseFloat(d[1]) / 360;
            var c = parseInt(d[2], 10) / 100, e = parseInt(d[3], 10) / 100;
            g(d[5]);
            return this.setHSL(b, c, e);
          }
      }
    } else {
      if (d = /^#([A-Fa-f0-9]+)$/.exec(a)) {
        d = d[1];
        b = d.length;
        if (3 === b) {
          return this.r = parseInt(d.charAt(0) + d.charAt(0), 16) / 255, this.g = parseInt(d.charAt(1) + d.charAt(1), 16) / 255, this.b = parseInt(d.charAt(2) + d.charAt(2), 16) / 255, this;
        }
        if (6 === b) {
          return this.r = parseInt(d.charAt(0) + d.charAt(1), 16) / 255, this.g = parseInt(d.charAt(2) + d.charAt(3), 16) / 255, this.b = parseInt(d.charAt(4) + d.charAt(5), 16) / 255, this;
        }
      }
    }
    return a && 0 < a.length ? this.setColorName(a) : this;
  }, setColorName:function(a) {
    var g = ui[a];
    void 0 !== g ? this.setHex(g) : console.warn("THREE.Color: Unknown color " + a);
    return this;
  }, clone:function() {
    return new this.constructor(this.r, this.g, this.b);
  }, copy:function(a) {
    this.r = a.r;
    this.g = a.g;
    this.b = a.b;
    return this;
  }, copyGammaToLinear:function(a, d) {
    void 0 === d && (d = 2);
    this.r = Math.pow(a.r, d);
    this.g = Math.pow(a.g, d);
    this.b = Math.pow(a.b, d);
    return this;
  }, copyLinearToGamma:function(a, d) {
    void 0 === d && (d = 2);
    d = 0 < d ? 1 / d : 1;
    this.r = Math.pow(a.r, d);
    this.g = Math.pow(a.g, d);
    this.b = Math.pow(a.b, d);
    return this;
  }, convertGammaToLinear:function(a) {
    this.copyGammaToLinear(this, a);
    return this;
  }, convertLinearToGamma:function(a) {
    this.copyLinearToGamma(this, a);
    return this;
  }, copySRGBToLinear:function(a) {
    this.r = F(a.r);
    this.g = F(a.g);
    this.b = F(a.b);
    return this;
  }, copyLinearToSRGB:function(a) {
    this.r = C(a.r);
    this.g = C(a.g);
    this.b = C(a.b);
    return this;
  }, convertSRGBToLinear:function() {
    this.copySRGBToLinear(this);
    return this;
  }, convertLinearToSRGB:function() {
    this.copyLinearToSRGB(this);
    return this;
  }, getHex:function() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  }, getHexString:function() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }, getHSL:function(a) {
    void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = {h:0, s:0, l:0});
    var g = this.r, d = this.g, b = this.b, c = Math.max(g, d, b), e = Math.min(g, d, b), l, f = (e + c) / 2;
    if (e === c) {
      e = l = 0;
    } else {
      var h = c - e;
      e = .5 >= f ? h / (c + e) : h / (2 - c - e);
      switch(c) {
        case g:
          l = (d - b) / h + (d < b ? 6 : 0);
          break;
        case d:
          l = (b - g) / h + 2;
          break;
        case b:
          l = (g - d) / h + 4;
      }
      l /= 6;
    }
    a.h = l;
    a.s = e;
    a.l = f;
    return a;
  }, getStyle:function() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  }, offsetHSL:function(a, d, b) {
    this.getHSL(Va);
    Va.h += a;
    Va.s += d;
    Va.l += b;
    this.setHSL(Va.h, Va.s, Va.l);
    return this;
  }, add:function(a) {
    this.r += a.r;
    this.g += a.g;
    this.b += a.b;
    return this;
  }, addColors:function(a, d) {
    this.r = a.r + d.r;
    this.g = a.g + d.g;
    this.b = a.b + d.b;
    return this;
  }, addScalar:function(a) {
    this.r += a;
    this.g += a;
    this.b += a;
    return this;
  }, sub:function(a) {
    this.r = Math.max(0, this.r - a.r);
    this.g = Math.max(0, this.g - a.g);
    this.b = Math.max(0, this.b - a.b);
    return this;
  }, multiply:function(a) {
    this.r *= a.r;
    this.g *= a.g;
    this.b *= a.b;
    return this;
  }, multiplyScalar:function(a) {
    this.r *= a;
    this.g *= a;
    this.b *= a;
    return this;
  }, lerp:function(a, d) {
    this.r += (a.r - this.r) * d;
    this.g += (a.g - this.g) * d;
    this.b += (a.b - this.b) * d;
    return this;
  }, lerpHSL:function(a, d) {
    this.getHSL(Va);
    a.getHSL(Of);
    a = ka.lerp(Va.h, Of.h, d);
    var g = ka.lerp(Va.s, Of.s, d);
    d = ka.lerp(Va.l, Of.l, d);
    this.setHSL(a, g, d);
    return this;
  }, equals:function(a) {
    return a.r === this.r && a.g === this.g && a.b === this.b;
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    this.r = a[d];
    this.g = a[d + 1];
    this.b = a[d + 2];
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    a[d] = this.r;
    a[d + 1] = this.g;
    a[d + 2] = this.b;
    return a;
  }, toJSON:function() {
    return this.getHex();
  }});
  B.NAMES = ui;
  Object.assign(E.prototype, {clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a = a.a;
    this.b = a.b;
    this.c = a.c;
    this.normal.copy(a.normal);
    this.color.copy(a.color);
    this.materialIndex = a.materialIndex;
    for (var g = 0, d = a.vertexNormals.length; g < d; g++) {
      this.vertexNormals[g] = a.vertexNormals[g].clone();
    }
    g = 0;
    for (d = a.vertexColors.length; g < d; g++) {
      this.vertexColors[g] = a.vertexColors[g].clone();
    }
    return this;
  }});
  var Vi = 0;
  H.prototype = Object.assign(Object.create(c.prototype), {constructor:H, isMaterial:!0, onBeforeCompile:function() {
  }, setValues:function(a) {
    if (void 0 !== a) {
      for (var g in a) {
        var d = a[g];
        if (void 0 === d) {
          console.warn("THREE.Material: '" + g + "' parameter is undefined.");
        } else {
          if ("shading" === g) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === d ? !0 : !1;
          } else {
            var b = this[g];
            void 0 === b ? console.warn("THREE." + this.type + ": '" + g + "' is not a property of this material.") : b && b.isColor ? b.set(d) : b && b.isVector3 && d && d.isVector3 ? b.copy(d) : this[g] = d;
          }
        }
      }
    }
  }, toJSON:function(a) {
    function g(a) {
      var g = [], d;
      for (d in a) {
        var b = a[d];
        delete b.metadata;
        g.push(b);
      }
      return g;
    }
    var d = void 0 === a || "string" === typeof a;
    d && (a = {textures:{}, images:{}});
    var b = {metadata:{version:4.5, type:"Material", generator:"Material.toJSON"}};
    b.uuid = this.uuid;
    b.type = this.type;
    "" !== this.name && (b.name = this.name);
    this.color && this.color.isColor && (b.color = this.color.getHex());
    void 0 !== this.roughness && (b.roughness = this.roughness);
    void 0 !== this.metalness && (b.metalness = this.metalness);
    this.sheen && this.sheen.isColor && (b.sheen = this.sheen.getHex());
    this.emissive && this.emissive.isColor && (b.emissive = this.emissive.getHex());
    this.emissiveIntensity && 1 !== this.emissiveIntensity && (b.emissiveIntensity = this.emissiveIntensity);
    this.specular && this.specular.isColor && (b.specular = this.specular.getHex());
    void 0 !== this.shininess && (b.shininess = this.shininess);
    void 0 !== this.clearcoat && (b.clearcoat = this.clearcoat);
    void 0 !== this.clearcoatRoughness && (b.clearcoatRoughness = this.clearcoatRoughness);
    this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (b.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(a).uuid, b.clearcoatNormalScale = this.clearcoatNormalScale.toArray());
    this.map && this.map.isTexture && (b.map = this.map.toJSON(a).uuid);
    this.matcap && this.matcap.isTexture && (b.matcap = this.matcap.toJSON(a).uuid);
    this.alphaMap && this.alphaMap.isTexture && (b.alphaMap = this.alphaMap.toJSON(a).uuid);
    this.lightMap && this.lightMap.isTexture && (b.lightMap = this.lightMap.toJSON(a).uuid);
    this.aoMap && this.aoMap.isTexture && (b.aoMap = this.aoMap.toJSON(a).uuid, b.aoMapIntensity = this.aoMapIntensity);
    this.bumpMap && this.bumpMap.isTexture && (b.bumpMap = this.bumpMap.toJSON(a).uuid, b.bumpScale = this.bumpScale);
    this.normalMap && this.normalMap.isTexture && (b.normalMap = this.normalMap.toJSON(a).uuid, b.normalMapType = this.normalMapType, b.normalScale = this.normalScale.toArray());
    this.displacementMap && this.displacementMap.isTexture && (b.displacementMap = this.displacementMap.toJSON(a).uuid, b.displacementScale = this.displacementScale, b.displacementBias = this.displacementBias);
    this.roughnessMap && this.roughnessMap.isTexture && (b.roughnessMap = this.roughnessMap.toJSON(a).uuid);
    this.metalnessMap && this.metalnessMap.isTexture && (b.metalnessMap = this.metalnessMap.toJSON(a).uuid);
    this.emissiveMap && this.emissiveMap.isTexture && (b.emissiveMap = this.emissiveMap.toJSON(a).uuid);
    this.specularMap && this.specularMap.isTexture && (b.specularMap = this.specularMap.toJSON(a).uuid);
    this.envMap && this.envMap.isTexture && (b.envMap = this.envMap.toJSON(a).uuid, b.reflectivity = this.reflectivity, b.refractionRatio = this.refractionRatio, void 0 !== this.combine && (b.combine = this.combine), void 0 !== this.envMapIntensity && (b.envMapIntensity = this.envMapIntensity));
    this.gradientMap && this.gradientMap.isTexture && (b.gradientMap = this.gradientMap.toJSON(a).uuid);
    void 0 !== this.size && (b.size = this.size);
    void 0 !== this.sizeAttenuation && (b.sizeAttenuation = this.sizeAttenuation);
    1 !== this.blending && (b.blending = this.blending);
    !0 === this.flatShading && (b.flatShading = this.flatShading);
    0 !== this.side && (b.side = this.side);
    0 !== this.vertexColors && (b.vertexColors = this.vertexColors);
    1 > this.opacity && (b.opacity = this.opacity);
    !0 === this.transparent && (b.transparent = this.transparent);
    b.depthFunc = this.depthFunc;
    b.depthTest = this.depthTest;
    b.depthWrite = this.depthWrite;
    b.stencilWrite = this.stencilWrite;
    b.stencilWriteMask = this.stencilWriteMask;
    b.stencilFunc = this.stencilFunc;
    b.stencilRef = this.stencilRef;
    b.stencilFuncMask = this.stencilFuncMask;
    b.stencilFail = this.stencilFail;
    b.stencilZFail = this.stencilZFail;
    b.stencilZPass = this.stencilZPass;
    this.rotation && 0 !== this.rotation && (b.rotation = this.rotation);
    !0 === this.polygonOffset && (b.polygonOffset = !0);
    0 !== this.polygonOffsetFactor && (b.polygonOffsetFactor = this.polygonOffsetFactor);
    0 !== this.polygonOffsetUnits && (b.polygonOffsetUnits = this.polygonOffsetUnits);
    this.linewidth && 1 !== this.linewidth && (b.linewidth = this.linewidth);
    void 0 !== this.dashSize && (b.dashSize = this.dashSize);
    void 0 !== this.gapSize && (b.gapSize = this.gapSize);
    void 0 !== this.scale && (b.scale = this.scale);
    !0 === this.dithering && (b.dithering = !0);
    0 < this.alphaTest && (b.alphaTest = this.alphaTest);
    !0 === this.premultipliedAlpha && (b.premultipliedAlpha = this.premultipliedAlpha);
    !0 === this.wireframe && (b.wireframe = this.wireframe);
    1 < this.wireframeLinewidth && (b.wireframeLinewidth = this.wireframeLinewidth);
    "round" !== this.wireframeLinecap && (b.wireframeLinecap = this.wireframeLinecap);
    "round" !== this.wireframeLinejoin && (b.wireframeLinejoin = this.wireframeLinejoin);
    !0 === this.morphTargets && (b.morphTargets = !0);
    !0 === this.morphNormals && (b.morphNormals = !0);
    !0 === this.skinning && (b.skinning = !0);
    !1 === this.visible && (b.visible = !1);
    !1 === this.toneMapped && (b.toneMapped = !1);
    "{}" !== JSON.stringify(this.userData) && (b.userData = this.userData);
    d && (d = g(a.textures), a = g(a.images), 0 < d.length && (b.textures = d), 0 < a.length && (b.images = a));
    return b;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.fog = a.fog;
    this.blending = a.blending;
    this.side = a.side;
    this.flatShading = a.flatShading;
    this.vertexTangents = a.vertexTangents;
    this.vertexColors = a.vertexColors;
    this.opacity = a.opacity;
    this.transparent = a.transparent;
    this.blendSrc = a.blendSrc;
    this.blendDst = a.blendDst;
    this.blendEquation = a.blendEquation;
    this.blendSrcAlpha = a.blendSrcAlpha;
    this.blendDstAlpha = a.blendDstAlpha;
    this.blendEquationAlpha = a.blendEquationAlpha;
    this.depthFunc = a.depthFunc;
    this.depthTest = a.depthTest;
    this.depthWrite = a.depthWrite;
    this.stencilWriteMask = a.stencilWriteMask;
    this.stencilFunc = a.stencilFunc;
    this.stencilRef = a.stencilRef;
    this.stencilFuncMask = a.stencilFuncMask;
    this.stencilFail = a.stencilFail;
    this.stencilZFail = a.stencilZFail;
    this.stencilZPass = a.stencilZPass;
    this.stencilWrite = a.stencilWrite;
    var g = a.clippingPlanes, d = null;
    if (null !== g) {
      var b = g.length;
      d = Array(b);
      for (var c = 0; c !== b; ++c) {
        d[c] = g[c].clone();
      }
    }
    this.clippingPlanes = d;
    this.clipIntersection = a.clipIntersection;
    this.clipShadows = a.clipShadows;
    this.shadowSide = a.shadowSide;
    this.colorWrite = a.colorWrite;
    this.precision = a.precision;
    this.polygonOffset = a.polygonOffset;
    this.polygonOffsetFactor = a.polygonOffsetFactor;
    this.polygonOffsetUnits = a.polygonOffsetUnits;
    this.dithering = a.dithering;
    this.alphaTest = a.alphaTest;
    this.premultipliedAlpha = a.premultipliedAlpha;
    this.visible = a.visible;
    this.toneMapped = a.toneMapped;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  Q.prototype = Object.create(H.prototype);
  Q.prototype.constructor = Q;
  Q.prototype.isMeshBasicMaterial = !0;
  Q.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    return this;
  };
  Object.defineProperty(K.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(K.prototype, {isBufferAttribute:!0, onUploadCallback:function() {
  }, setUsage:function(a) {
    this.usage = a;
    return this;
  }, copy:function(a) {
    this.name = a.name;
    this.array = new a.array.constructor(a.array);
    this.itemSize = a.itemSize;
    this.count = a.count;
    this.normalized = a.normalized;
    this.usage = a.usage;
    return this;
  }, copyAt:function(a, d, b) {
    a *= this.itemSize;
    b *= d.itemSize;
    for (var g = 0, c = this.itemSize; g < c; g++) {
      this.array[a + g] = d.array[b + g];
    }
    return this;
  }, copyArray:function(a) {
    this.array.set(a);
    return this;
  }, copyColorsArray:function(a) {
    for (var g = this.array, d = 0, b = 0, c = a.length; b < c; b++) {
      var e = a[b];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", b), e = new B);
      g[d++] = e.r;
      g[d++] = e.g;
      g[d++] = e.b;
    }
    return this;
  }, copyVector2sArray:function(a) {
    for (var g = this.array, d = 0, b = 0, c = a.length; b < c; b++) {
      var e = a[b];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", b), e = new k);
      g[d++] = e.x;
      g[d++] = e.y;
    }
    return this;
  }, copyVector3sArray:function(a) {
    for (var g = this.array, d = 0, b = 0, c = a.length; b < c; b++) {
      var l = a[b];
      void 0 === l && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", b), l = new e);
      g[d++] = l.x;
      g[d++] = l.y;
      g[d++] = l.z;
    }
    return this;
  }, copyVector4sArray:function(a) {
    for (var g = this.array, d = 0, b = 0, c = a.length; b < c; b++) {
      var e = a[b];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", b), e = new r);
      g[d++] = e.x;
      g[d++] = e.y;
      g[d++] = e.z;
      g[d++] = e.w;
    }
    return this;
  }, set:function(a, d) {
    void 0 === d && (d = 0);
    this.array.set(a, d);
    return this;
  }, getX:function(a) {
    return this.array[a * this.itemSize];
  }, setX:function(a, d) {
    this.array[a * this.itemSize] = d;
    return this;
  }, getY:function(a) {
    return this.array[a * this.itemSize + 1];
  }, setY:function(a, d) {
    this.array[a * this.itemSize + 1] = d;
    return this;
  }, getZ:function(a) {
    return this.array[a * this.itemSize + 2];
  }, setZ:function(a, d) {
    this.array[a * this.itemSize + 2] = d;
    return this;
  }, getW:function(a) {
    return this.array[a * this.itemSize + 3];
  }, setW:function(a, d) {
    this.array[a * this.itemSize + 3] = d;
    return this;
  }, setXY:function(a, d, b) {
    a *= this.itemSize;
    this.array[a + 0] = d;
    this.array[a + 1] = b;
    return this;
  }, setXYZ:function(a, d, b, c) {
    a *= this.itemSize;
    this.array[a + 0] = d;
    this.array[a + 1] = b;
    this.array[a + 2] = c;
    return this;
  }, setXYZW:function(a, d, b, c, e) {
    a *= this.itemSize;
    this.array[a + 0] = d;
    this.array[a + 1] = b;
    this.array[a + 2] = c;
    this.array[a + 3] = e;
    return this;
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }, clone:function() {
    return (new this.constructor(this.array, this.itemSize)).copy(this);
  }, toJSON:function() {
    return {itemSize:this.itemSize, type:this.array.constructor.name, array:Array.prototype.slice.call(this.array), normalized:this.normalized};
  }});
  M.prototype = Object.create(K.prototype);
  M.prototype.constructor = M;
  L.prototype = Object.create(K.prototype);
  L.prototype.constructor = L;
  I.prototype = Object.create(K.prototype);
  I.prototype.constructor = I;
  P.prototype = Object.create(K.prototype);
  P.prototype.constructor = P;
  T.prototype = Object.create(K.prototype);
  T.prototype.constructor = T;
  R.prototype = Object.create(K.prototype);
  R.prototype.constructor = R;
  aa.prototype = Object.create(K.prototype);
  aa.prototype.constructor = aa;
  N.prototype = Object.create(K.prototype);
  N.prototype.constructor = N;
  S.prototype = Object.create(K.prototype);
  S.prototype.constructor = S;
  Object.assign(O.prototype, {computeGroups:function(a) {
    var g = [], d = void 0;
    a = a.faces;
    for (var b = 0; b < a.length; b++) {
      var c = a[b];
      if (c.materialIndex !== d) {
        d = c.materialIndex;
        void 0 !== e && (e.count = 3 * b - e.start, g.push(e));
        var e = {start:3 * b, materialIndex:d};
      }
    }
    void 0 !== e && (e.count = 3 * b - e.start, g.push(e));
    this.groups = g;
  }, fromGeometry:function(a) {
    var g = a.faces, d = a.vertices, b = a.faceVertexUvs, c = b[0] && 0 < b[0].length, e = b[1] && 0 < b[1].length, l = a.morphTargets, f = l.length;
    if (0 < f) {
      var h = [];
      for (var p = 0; p < f; p++) {
        h[p] = {name:l[p].name, data:[]};
      }
      this.morphTargets.position = h;
    }
    var m = a.morphNormals, n = m.length;
    if (0 < n) {
      var q = [];
      for (p = 0; p < n; p++) {
        q[p] = {name:m[p].name, data:[]};
      }
      this.morphTargets.normal = q;
    }
    var u = a.skinIndices, r = a.skinWeights, v = u.length === d.length, w = r.length === d.length;
    0 < d.length && 0 === g.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
    for (p = 0; p < g.length; p++) {
      var y = g[p];
      this.vertices.push(d[y.a], d[y.b], d[y.c]);
      var x = y.vertexNormals;
      3 === x.length ? this.normals.push(x[0], x[1], x[2]) : (x = y.normal, this.normals.push(x, x, x));
      x = y.vertexColors;
      3 === x.length ? this.colors.push(x[0], x[1], x[2]) : (x = y.color, this.colors.push(x, x, x));
      !0 === c && (x = b[0][p], void 0 !== x ? this.uvs.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", p), this.uvs.push(new k, new k, new k)));
      !0 === e && (x = b[1][p], void 0 !== x ? this.uvs2.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", p), this.uvs2.push(new k, new k, new k)));
      for (x = 0; x < f; x++) {
        var z = l[x].vertices;
        h[x].data.push(z[y.a], z[y.b], z[y.c]);
      }
      for (x = 0; x < n; x++) {
        z = m[x].vertexNormals[p], q[x].data.push(z.a, z.b, z.c);
      }
      v && this.skinIndices.push(u[y.a], u[y.b], u[y.c]);
      w && this.skinWeights.push(r[y.a], r[y.b], r[y.c]);
    }
    this.computeGroups(a);
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    return this;
  }});
  var Wi = 1, Ab = new m, eh = new v, Id = new e, cb = new x, Ke = new x, Aa = new e;
  J.prototype = Object.assign(Object.create(c.prototype), {constructor:J, isBufferGeometry:!0, getIndex:function() {
    return this.index;
  }, setIndex:function(a) {
    Array.isArray(a) ? this.index = new (65535 < W(a) ? aa : T)(a, 1) : this.index = a;
  }, getAttribute:function(a) {
    return this.attributes[a];
  }, setAttribute:function(a, d) {
    this.attributes[a] = d;
    return this;
  }, deleteAttribute:function(a) {
    delete this.attributes[a];
    return this;
  }, addGroup:function(a, d, b) {
    this.groups.push({start:a, count:d, materialIndex:void 0 !== b ? b : 0});
  }, clearGroups:function() {
    this.groups = [];
  }, setDrawRange:function(a, d) {
    this.drawRange.start = a;
    this.drawRange.count = d;
  }, applyMatrix:function(a) {
    var g = this.attributes.position;
    void 0 !== g && (a.applyToBufferAttribute(g), g.needsUpdate = !0);
    var d = this.attributes.normal;
    void 0 !== d && (g = (new f).getNormalMatrix(a), g.applyToBufferAttribute(d), d.needsUpdate = !0);
    d = this.attributes.tangent;
    void 0 !== d && (g = (new f).getNormalMatrix(a), g.applyToBufferAttribute(d), d.needsUpdate = !0);
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    return this;
  }, rotateX:function(a) {
    Ab.makeRotationX(a);
    this.applyMatrix(Ab);
    return this;
  }, rotateY:function(a) {
    Ab.makeRotationY(a);
    this.applyMatrix(Ab);
    return this;
  }, rotateZ:function(a) {
    Ab.makeRotationZ(a);
    this.applyMatrix(Ab);
    return this;
  }, translate:function(a, d, b) {
    Ab.makeTranslation(a, d, b);
    this.applyMatrix(Ab);
    return this;
  }, scale:function(a, d, b) {
    Ab.makeScale(a, d, b);
    this.applyMatrix(Ab);
    return this;
  }, lookAt:function(a) {
    eh.lookAt(a);
    eh.updateMatrix();
    this.applyMatrix(eh.matrix);
    return this;
  }, center:function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(Id).negate();
    this.translate(Id.x, Id.y, Id.z);
    return this;
  }, setFromObject:function(a) {
    var g = a.geometry;
    if (a.isPoints || a.isLine) {
      a = new N(3 * g.vertices.length, 3);
      var d = new N(3 * g.colors.length, 3);
      this.setAttribute("position", a.copyVector3sArray(g.vertices));
      this.setAttribute("color", d.copyColorsArray(g.colors));
      g.lineDistances && g.lineDistances.length === g.vertices.length && (a = new N(g.lineDistances.length, 1), this.setAttribute("lineDistance", a.copyArray(g.lineDistances)));
      null !== g.boundingSphere && (this.boundingSphere = g.boundingSphere.clone());
      null !== g.boundingBox && (this.boundingBox = g.boundingBox.clone());
    } else {
      a.isMesh && g && g.isGeometry && this.fromGeometry(g);
    }
    return this;
  }, setFromPoints:function(a) {
    for (var g = [], d = 0, b = a.length; d < b; d++) {
      var c = a[d];
      g.push(c.x, c.y, c.z || 0);
    }
    this.setAttribute("position", new N(g, 3));
    return this;
  }, updateFromObject:function(a) {
    var g = a.geometry;
    if (a.isMesh) {
      var d = g.__directGeometry;
      !0 === g.elementsNeedUpdate && (d = void 0, g.elementsNeedUpdate = !1);
      if (void 0 === d) {
        return this.fromGeometry(g);
      }
      d.verticesNeedUpdate = g.verticesNeedUpdate;
      d.normalsNeedUpdate = g.normalsNeedUpdate;
      d.colorsNeedUpdate = g.colorsNeedUpdate;
      d.uvsNeedUpdate = g.uvsNeedUpdate;
      d.groupsNeedUpdate = g.groupsNeedUpdate;
      g.verticesNeedUpdate = !1;
      g.normalsNeedUpdate = !1;
      g.colorsNeedUpdate = !1;
      g.uvsNeedUpdate = !1;
      g.groupsNeedUpdate = !1;
      g = d;
    }
    !0 === g.verticesNeedUpdate && (d = this.attributes.position, void 0 !== d && (d.copyVector3sArray(g.vertices), d.needsUpdate = !0), g.verticesNeedUpdate = !1);
    !0 === g.normalsNeedUpdate && (d = this.attributes.normal, void 0 !== d && (d.copyVector3sArray(g.normals), d.needsUpdate = !0), g.normalsNeedUpdate = !1);
    !0 === g.colorsNeedUpdate && (d = this.attributes.color, void 0 !== d && (d.copyColorsArray(g.colors), d.needsUpdate = !0), g.colorsNeedUpdate = !1);
    g.uvsNeedUpdate && (d = this.attributes.uv, void 0 !== d && (d.copyVector2sArray(g.uvs), d.needsUpdate = !0), g.uvsNeedUpdate = !1);
    g.lineDistancesNeedUpdate && (d = this.attributes.lineDistance, void 0 !== d && (d.copyArray(g.lineDistances), d.needsUpdate = !0), g.lineDistancesNeedUpdate = !1);
    g.groupsNeedUpdate && (g.computeGroups(a.geometry), this.groups = g.groups, g.groupsNeedUpdate = !1);
    return this;
  }, fromGeometry:function(a) {
    a.__directGeometry = (new O).fromGeometry(a);
    return this.fromDirectGeometry(a.__directGeometry);
  }, fromDirectGeometry:function(a) {
    var g = new Float32Array(3 * a.vertices.length);
    this.setAttribute("position", (new K(g, 3)).copyVector3sArray(a.vertices));
    0 < a.normals.length && (g = new Float32Array(3 * a.normals.length), this.setAttribute("normal", (new K(g, 3)).copyVector3sArray(a.normals)));
    0 < a.colors.length && (g = new Float32Array(3 * a.colors.length), this.setAttribute("color", (new K(g, 3)).copyColorsArray(a.colors)));
    0 < a.uvs.length && (g = new Float32Array(2 * a.uvs.length), this.setAttribute("uv", (new K(g, 2)).copyVector2sArray(a.uvs)));
    0 < a.uvs2.length && (g = new Float32Array(2 * a.uvs2.length), this.setAttribute("uv2", (new K(g, 2)).copyVector2sArray(a.uvs2)));
    this.groups = a.groups;
    for (var d in a.morphTargets) {
      g = [];
      for (var b = a.morphTargets[d], c = 0, e = b.length; c < e; c++) {
        var l = b[c], f = new N(3 * l.data.length, 3);
        f.name = l.name;
        g.push(f.copyVector3sArray(l.data));
      }
      this.morphAttributes[d] = g;
    }
    0 < a.skinIndices.length && (d = new N(4 * a.skinIndices.length, 4), this.setAttribute("skinIndex", d.copyVector4sArray(a.skinIndices)));
    0 < a.skinWeights.length && (d = new N(4 * a.skinWeights.length, 4), this.setAttribute("skinWeight", d.copyVector4sArray(a.skinWeights)));
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    return this;
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new x);
    var a = this.attributes.position, d = this.morphAttributes.position;
    if (void 0 !== a) {
      if (this.boundingBox.setFromBufferAttribute(a), d) {
        a = 0;
        for (var b = d.length; a < b; a++) {
          cb.setFromBufferAttribute(d[a]), this.morphTargetsRelative ? (Aa.addVectors(this.boundingBox.min, cb.min), this.boundingBox.expandByPoint(Aa), Aa.addVectors(this.boundingBox.max, cb.max), this.boundingBox.expandByPoint(Aa)) : (this.boundingBox.expandByPoint(cb.min), this.boundingBox.expandByPoint(cb.max));
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new p);
    var a = this.attributes.position, d = this.morphAttributes.position;
    if (a) {
      var b = this.boundingSphere.center;
      cb.setFromBufferAttribute(a);
      if (d) {
        for (var c = 0, e = d.length; c < e; c++) {
          var l = d[c];
          Ke.setFromBufferAttribute(l);
          this.morphTargetsRelative ? (Aa.addVectors(cb.min, Ke.min), cb.expandByPoint(Aa), Aa.addVectors(cb.max, Ke.max), cb.expandByPoint(Aa)) : (cb.expandByPoint(Ke.min), cb.expandByPoint(Ke.max));
        }
      }
      cb.getCenter(b);
      var f = 0;
      c = 0;
      for (e = a.count; c < e; c++) {
        Aa.fromBufferAttribute(a, c), f = Math.max(f, b.distanceToSquared(Aa));
      }
      if (d) {
        for (c = 0, e = d.length; c < e; c++) {
          l = d[c];
          for (var h = this.morphTargetsRelative, m = 0, n = l.count; m < n; m++) {
            Aa.fromBufferAttribute(l, m), h && (Id.fromBufferAttribute(a, m), Aa.add(Id)), f = Math.max(f, b.distanceToSquared(Aa));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(f);
      isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }, computeFaceNormals:function() {
  }, computeVertexNormals:function() {
    var a = this.index, d = this.attributes;
    if (d.position) {
      var b = d.position.array;
      if (void 0 === d.normal) {
        this.setAttribute("normal", new K(new Float32Array(b.length), 3));
      } else {
        for (var c = d.normal.array, l = 0, f = c.length; l < f; l++) {
          c[l] = 0;
        }
      }
      c = d.normal.array;
      var h = new e, p = new e, m = new e, n = new e, k = new e;
      if (a) {
        var q = a.array;
        l = 0;
        for (f = a.count; l < f; l += 3) {
          a = 3 * q[l + 0];
          var u = 3 * q[l + 1];
          var r = 3 * q[l + 2];
          h.fromArray(b, a);
          p.fromArray(b, u);
          m.fromArray(b, r);
          n.subVectors(m, p);
          k.subVectors(h, p);
          n.cross(k);
          c[a] += n.x;
          c[a + 1] += n.y;
          c[a + 2] += n.z;
          c[u] += n.x;
          c[u + 1] += n.y;
          c[u + 2] += n.z;
          c[r] += n.x;
          c[r + 1] += n.y;
          c[r + 2] += n.z;
        }
      } else {
        for (l = 0, f = b.length; l < f; l += 9) {
          h.fromArray(b, l), p.fromArray(b, l + 3), m.fromArray(b, l + 6), n.subVectors(m, p), k.subVectors(h, p), n.cross(k), c[l] = n.x, c[l + 1] = n.y, c[l + 2] = n.z, c[l + 3] = n.x, c[l + 4] = n.y, c[l + 5] = n.z, c[l + 6] = n.x, c[l + 7] = n.y, c[l + 8] = n.z;
        }
      }
      this.normalizeNormals();
      d.normal.needsUpdate = !0;
    }
  }, merge:function(a, d) {
    if (a && a.isBufferGeometry) {
      void 0 === d && (d = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
      var g = this.attributes, b;
      for (b in g) {
        if (void 0 !== a.attributes[b]) {
          var c = g[b].array, e = a.attributes[b], l = e.array, f = e.itemSize * d;
          e = Math.min(l.length, c.length - f);
          for (var h = 0; h < e; h++, f++) {
            c[f] = l[h];
          }
        }
      }
      return this;
    }
    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
  }, normalizeNormals:function() {
    for (var a = this.attributes.normal, d = 0, b = a.count; d < b; d++) {
      Aa.x = a.getX(d), Aa.y = a.getY(d), Aa.z = a.getZ(d), Aa.normalize(), a.setXYZ(d, Aa.x, Aa.y, Aa.z);
    }
  }, toNonIndexed:function() {
    function a(a, g) {
      var d = a.array;
      a = a.itemSize;
      for (var b = new d.constructor(g.length * a), c, e = 0, l = 0, f = g.length; l < f; l++) {
        c = g[l] * a;
        for (var h = 0; h < a; h++) {
          b[e++] = d[c++];
        }
      }
      return new K(b, a);
    }
    if (null === this.index) {
      return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
    }
    var d = new J, b = this.index.array, c = this.attributes, e;
    for (e in c) {
      var l = c[e];
      l = a(l, b);
      d.setAttribute(e, l);
    }
    var f = this.morphAttributes;
    for (e in f) {
      var h = [], p = f[e];
      c = 0;
      for (var m = p.length; c < m; c++) {
        l = p[c], l = a(l, b), h.push(l);
      }
      d.morphAttributes[e] = h;
    }
    d.morphTargetsRelative = this.morphTargetsRelative;
    b = this.groups;
    c = 0;
    for (e = b.length; c < e; c++) {
      l = b[c], d.addGroup(l.start, l.count, l.materialIndex);
    }
    return d;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
    a.uuid = this.uuid;
    a.type = this.type;
    "" !== this.name && (a.name = this.name);
    0 < Object.keys(this.userData).length && (a.userData = this.userData);
    if (void 0 !== this.parameters) {
      var d = this.parameters;
      for (m in d) {
        void 0 !== d[m] && (a[m] = d[m]);
      }
      return a;
    }
    a.data = {attributes:{}};
    d = this.index;
    null !== d && (a.data.index = {type:d.array.constructor.name, array:Array.prototype.slice.call(d.array)});
    var b = this.attributes;
    for (m in b) {
      d = b[m];
      var c = d.toJSON();
      "" !== d.name && (c.name = d.name);
      a.data.attributes[m] = c;
    }
    b = {};
    var e = !1;
    for (m in this.morphAttributes) {
      for (var l = this.morphAttributes[m], f = [], h = 0, p = l.length; h < p; h++) {
        d = l[h], c = d.toJSON(), "" !== d.name && (c.name = d.name), f.push(c);
      }
      0 < f.length && (b[m] = f, e = !0);
    }
    e && (a.data.morphAttributes = b, a.data.morphTargetsRelative = this.morphTargetsRelative);
    var m = this.groups;
    0 < m.length && (a.data.groups = JSON.parse(JSON.stringify(m)));
    m = this.boundingSphere;
    null !== m && (a.data.boundingSphere = {center:m.center.toArray(), radius:m.radius});
    return a;
  }, clone:function() {
    return (new J).copy(this);
  }, copy:function(a) {
    var g;
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var d = a.index;
    null !== d && this.setIndex(d.clone());
    d = a.attributes;
    for (l in d) {
      this.setAttribute(l, d[l].clone());
    }
    var b = a.morphAttributes;
    for (l in b) {
      var c = [], e = b[l];
      d = 0;
      for (g = e.length; d < g; d++) {
        c.push(e[d].clone());
      }
      this.morphAttributes[l] = c;
    }
    this.morphTargetsRelative = a.morphTargetsRelative;
    var l = a.groups;
    d = 0;
    for (g = l.length; d < g; d++) {
      b = l[d], this.addGroup(b.start, b.count, b.materialIndex);
    }
    l = a.boundingBox;
    null !== l && (this.boundingBox = l.clone());
    l = a.boundingSphere;
    null !== l && (this.boundingSphere = l.clone());
    this.drawRange.start = a.drawRange.start;
    this.drawRange.count = a.drawRange.count;
    this.userData = a.userData;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var vi = new m, Jc = new u, fh = new p, pc = new e, qc = new e, rc = new e, eg = new e, fg = new e, gg = new e, Re = new e, Se = new e, Te = new e, Qc = new k, Rc = new k, Sc = new k, Md = new e, Qe = new e;
  U.prototype = Object.assign(Object.create(v.prototype), {constructor:U, isMesh:!0, setDrawMode:function(a) {
    this.drawMode = a;
  }, copy:function(a) {
    v.prototype.copy.call(this, a);
    this.drawMode = a.drawMode;
    void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());
    void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
    return this;
  }, updateMorphTargets:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      a = a.morphAttributes;
      var d = Object.keys(a);
      if (0 < d.length) {
        var b = a[d[0]];
        if (void 0 !== b) {
          for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, d = b.length; a < d; a++) {
            var c = b[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[c] = a;
          }
        }
      }
    } else {
      a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
  }, raycast:function(a, d) {
    var g = this.geometry, b = this.material, c = this.matrixWorld;
    if (void 0 !== b && (null === g.boundingSphere && g.computeBoundingSphere(), fh.copy(g.boundingSphere), fh.applyMatrix4(c), !1 !== a.ray.intersectsSphere(fh) && (vi.getInverse(c), Jc.copy(a.ray).applyMatrix4(vi), null === g.boundingBox || !1 !== Jc.intersectsBox(g.boundingBox)))) {
      if (0 !== this.drawMode) {
        console.warn("THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().");
      } else {
        if (g.isBufferGeometry) {
          var e = g.index;
          c = g.attributes.position;
          var l = g.morphAttributes.position, f = g.morphTargetsRelative, h = g.attributes.uv, p = g.attributes.uv2, t = g.groups, m = g.drawRange, n, q;
          if (null !== e) {
            if (Array.isArray(b)) {
              var u = 0;
              for (n = t.length; u < n; u++) {
                var r = t[u];
                var v = b[r.materialIndex];
                var w = Math.max(r.start, m.start);
                for (q = g = Math.min(r.start + r.count, m.start + m.count); w < q; w += 3) {
                  g = e.getX(w);
                  var y = e.getX(w + 1);
                  var x = e.getX(w + 2);
                  if (g = ha(this, v, a, Jc, c, l, f, h, p, g, y, x)) {
                    g.faceIndex = Math.floor(w / 3), g.face.materialIndex = r.materialIndex, d.push(g);
                  }
                }
              }
            } else {
              for (w = Math.max(0, m.start), g = Math.min(e.count, m.start + m.count), u = w, n = g; u < n; u += 3) {
                if (g = e.getX(u), y = e.getX(u + 1), x = e.getX(u + 2), g = ha(this, b, a, Jc, c, l, f, h, p, g, y, x)) {
                  g.faceIndex = Math.floor(u / 3), d.push(g);
                }
              }
            }
          } else {
            if (void 0 !== c) {
              if (Array.isArray(b)) {
                for (u = 0, n = t.length; u < n; u++) {
                  for (r = t[u], v = b[r.materialIndex], w = Math.max(r.start, m.start), q = g = Math.min(r.start + r.count, m.start + m.count); w < q; w += 3) {
                    if (g = w, y = w + 1, x = w + 2, g = ha(this, v, a, Jc, c, l, f, h, p, g, y, x)) {
                      g.faceIndex = Math.floor(w / 3), g.face.materialIndex = r.materialIndex, d.push(g);
                    }
                  }
                }
              } else {
                for (w = Math.max(0, m.start), g = Math.min(c.count, m.start + m.count), u = w, n = g; u < n; u += 3) {
                  if (g = u, y = u + 1, x = u + 2, g = ha(this, b, a, Jc, c, l, f, h, p, g, y, x)) {
                    g.faceIndex = Math.floor(u / 3), d.push(g);
                  }
                }
              }
            }
          }
        } else {
          if (g.isGeometry) {
            for (c = Array.isArray(b), l = g.vertices, f = g.faces, g = g.faceVertexUvs[0], 0 < g.length && (e = g), m = 0, u = f.length; m < u; m++) {
              if (n = f[m], g = c ? b[n.materialIndex] : b, void 0 !== g && (h = l[n.a], p = l[n.b], t = l[n.c], g = ea(this, g, a, Jc, h, p, t, Md))) {
                e && e[m] && (r = e[m], Qc.copy(r[0]), Rc.copy(r[1]), Sc.copy(r[2]), g.uv = A.getUV(Md, h, p, t, Qc, Rc, Sc, new k)), g.face = n, g.faceIndex = m, d.push(g);
              }
            }
          }
        }
      }
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  var Yi = 0, Bb = new m, gh = new v, Pf = new e;
  V.prototype = Object.assign(Object.create(c.prototype), {constructor:V, isGeometry:!0, applyMatrix:function(a) {
    for (var g = (new f).getNormalMatrix(a), d = 0, b = this.vertices.length; d < b; d++) {
      this.vertices[d].applyMatrix4(a);
    }
    d = 0;
    for (b = this.faces.length; d < b; d++) {
      a = this.faces[d];
      a.normal.applyMatrix3(g).normalize();
      for (var c = 0, e = a.vertexNormals.length; c < e; c++) {
        a.vertexNormals[c].applyMatrix3(g).normalize();
      }
    }
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
    return this;
  }, rotateX:function(a) {
    Bb.makeRotationX(a);
    this.applyMatrix(Bb);
    return this;
  }, rotateY:function(a) {
    Bb.makeRotationY(a);
    this.applyMatrix(Bb);
    return this;
  }, rotateZ:function(a) {
    Bb.makeRotationZ(a);
    this.applyMatrix(Bb);
    return this;
  }, translate:function(a, d, b) {
    Bb.makeTranslation(a, d, b);
    this.applyMatrix(Bb);
    return this;
  }, scale:function(a, d, b) {
    Bb.makeScale(a, d, b);
    this.applyMatrix(Bb);
    return this;
  }, lookAt:function(a) {
    gh.lookAt(a);
    gh.updateMatrix();
    this.applyMatrix(gh.matrix);
    return this;
  }, fromBufferGeometry:function(a) {
    function g(a, g, b, c) {
      var l = void 0 === h ? [] : [d.colors[a].clone(), d.colors[g].clone(), d.colors[b].clone()], t = void 0 === f ? [] : [(new e).fromArray(f, 3 * a), (new e).fromArray(f, 3 * g), (new e).fromArray(f, 3 * b)];
      c = new E(a, g, b, t, l, c);
      d.faces.push(c);
      void 0 !== p && d.faceVertexUvs[0].push([(new k).fromArray(p, 2 * a), (new k).fromArray(p, 2 * g), (new k).fromArray(p, 2 * b)]);
      void 0 !== m && d.faceVertexUvs[1].push([(new k).fromArray(m, 2 * a), (new k).fromArray(m, 2 * g), (new k).fromArray(m, 2 * b)]);
    }
    var d = this, b = null !== a.index ? a.index.array : void 0, c = a.attributes;
    if (void 0 === c.position) {
      return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."), this;
    }
    var l = c.position.array, f = void 0 !== c.normal ? c.normal.array : void 0, h = void 0 !== c.color ? c.color.array : void 0, p = void 0 !== c.uv ? c.uv.array : void 0, m = void 0 !== c.uv2 ? c.uv2.array : void 0;
    void 0 !== m && (this.faceVertexUvs[1] = []);
    for (c = 0; c < l.length; c += 3) {
      d.vertices.push((new e).fromArray(l, c)), void 0 !== h && d.colors.push((new B).fromArray(h, c));
    }
    var n = a.groups;
    if (0 < n.length) {
      for (c = 0; c < n.length; c++) {
        l = n[c];
        var q = l.start, u = q;
        for (q += l.count; u < q; u += 3) {
          void 0 !== b ? g(b[u], b[u + 1], b[u + 2], l.materialIndex) : g(u, u + 1, u + 2, l.materialIndex);
        }
      }
    } else {
      if (void 0 !== b) {
        for (c = 0; c < b.length; c += 3) {
          g(b[c], b[c + 1], b[c + 2]);
        }
      } else {
        for (c = 0; c < l.length / 3; c += 3) {
          g(c, c + 1, c + 2);
        }
      }
    }
    this.computeFaceNormals();
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    return this;
  }, center:function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(Pf).negate();
    this.translate(Pf.x, Pf.y, Pf.z);
    return this;
  }, normalize:function() {
    this.computeBoundingSphere();
    var a = this.boundingSphere.center, d = this.boundingSphere.radius;
    d = 0 === d ? 1 : 1 / d;
    var b = new m;
    b.set(d, 0, 0, -d * a.x, 0, d, 0, -d * a.y, 0, 0, d, -d * a.z, 0, 0, 0, 1);
    this.applyMatrix(b);
    return this;
  }, computeFaceNormals:function() {
    for (var a = new e, d = new e, b = 0, c = this.faces.length; b < c; b++) {
      var l = this.faces[b], f = this.vertices[l.a], h = this.vertices[l.b];
      a.subVectors(this.vertices[l.c], h);
      d.subVectors(f, h);
      a.cross(d);
      a.normalize();
      l.normal.copy(a);
    }
  }, computeVertexNormals:function(a) {
    void 0 === a && (a = !0);
    var g;
    var d = Array(this.vertices.length);
    var b = 0;
    for (g = this.vertices.length; b < g; b++) {
      d[b] = new e;
    }
    if (a) {
      var c = new e, l = new e;
      a = 0;
      for (b = this.faces.length; a < b; a++) {
        g = this.faces[a];
        var f = this.vertices[g.a];
        var h = this.vertices[g.b];
        var p = this.vertices[g.c];
        c.subVectors(p, h);
        l.subVectors(f, h);
        c.cross(l);
        d[g.a].add(c);
        d[g.b].add(c);
        d[g.c].add(c);
      }
    } else {
      for (this.computeFaceNormals(), a = 0, b = this.faces.length; a < b; a++) {
        g = this.faces[a], d[g.a].add(g.normal), d[g.b].add(g.normal), d[g.c].add(g.normal);
      }
    }
    b = 0;
    for (g = this.vertices.length; b < g; b++) {
      d[b].normalize();
    }
    a = 0;
    for (b = this.faces.length; a < b; a++) {
      g = this.faces[a], f = g.vertexNormals, 3 === f.length ? (f[0].copy(d[g.a]), f[1].copy(d[g.b]), f[2].copy(d[g.c])) : (f[0] = d[g.a].clone(), f[1] = d[g.b].clone(), f[2] = d[g.c].clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeFlatVertexNormals:function() {
    var a;
    this.computeFaceNormals();
    var d = 0;
    for (a = this.faces.length; d < a; d++) {
      var b = this.faces[d];
      var c = b.vertexNormals;
      3 === c.length ? (c[0].copy(b.normal), c[1].copy(b.normal), c[2].copy(b.normal)) : (c[0] = b.normal.clone(), c[1] = b.normal.clone(), c[2] = b.normal.clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeMorphNormals:function() {
    var a, d;
    var b = 0;
    for (d = this.faces.length; b < d; b++) {
      var c = this.faces[b];
      c.__originalFaceNormal ? c.__originalFaceNormal.copy(c.normal) : c.__originalFaceNormal = c.normal.clone();
      c.__originalVertexNormals || (c.__originalVertexNormals = []);
      var l = 0;
      for (a = c.vertexNormals.length; l < a; l++) {
        c.__originalVertexNormals[l] ? c.__originalVertexNormals[l].copy(c.vertexNormals[l]) : c.__originalVertexNormals[l] = c.vertexNormals[l].clone();
      }
    }
    var f = new V;
    f.faces = this.faces;
    l = 0;
    for (a = this.morphTargets.length; l < a; l++) {
      if (!this.morphNormals[l]) {
        this.morphNormals[l] = {};
        this.morphNormals[l].faceNormals = [];
        this.morphNormals[l].vertexNormals = [];
        c = this.morphNormals[l].faceNormals;
        var h = this.morphNormals[l].vertexNormals;
        b = 0;
        for (d = this.faces.length; b < d; b++) {
          var p = new e;
          var m = {a:new e, b:new e, c:new e};
          c.push(p);
          h.push(m);
        }
      }
      h = this.morphNormals[l];
      f.vertices = this.morphTargets[l].vertices;
      f.computeFaceNormals();
      f.computeVertexNormals();
      b = 0;
      for (d = this.faces.length; b < d; b++) {
        c = this.faces[b], p = h.faceNormals[b], m = h.vertexNormals[b], p.copy(c.normal), m.a.copy(c.vertexNormals[0]), m.b.copy(c.vertexNormals[1]), m.c.copy(c.vertexNormals[2]);
      }
    }
    b = 0;
    for (d = this.faces.length; b < d; b++) {
      c = this.faces[b], c.normal = c.__originalFaceNormal, c.vertexNormals = c.__originalVertexNormals;
    }
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new x);
    this.boundingBox.setFromPoints(this.vertices);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new p);
    this.boundingSphere.setFromPoints(this.vertices);
  }, merge:function(a, d, b) {
    if (a && a.isGeometry) {
      var g, c = this.vertices.length, e = this.vertices, l = a.vertices, h = this.faces, p = a.faces, m = this.colors, n = a.colors;
      void 0 === b && (b = 0);
      void 0 !== d && (g = (new f).getNormalMatrix(d));
      for (var t = 0, k = l.length; t < k; t++) {
        var q = l[t].clone();
        void 0 !== d && q.applyMatrix4(d);
        e.push(q);
      }
      t = 0;
      for (k = n.length; t < k; t++) {
        m.push(n[t].clone());
      }
      t = 0;
      for (k = p.length; t < k; t++) {
        l = p[t];
        var u = l.vertexNormals;
        n = l.vertexColors;
        m = new E(l.a + c, l.b + c, l.c + c);
        m.normal.copy(l.normal);
        void 0 !== g && m.normal.applyMatrix3(g).normalize();
        d = 0;
        for (e = u.length; d < e; d++) {
          q = u[d].clone(), void 0 !== g && q.applyMatrix3(g).normalize(), m.vertexNormals.push(q);
        }
        m.color.copy(l.color);
        d = 0;
        for (e = n.length; d < e; d++) {
          q = n[d], m.vertexColors.push(q.clone());
        }
        m.materialIndex = l.materialIndex + b;
        h.push(m);
      }
      t = 0;
      for (k = a.faceVertexUvs.length; t < k; t++) {
        for (b = a.faceVertexUvs[t], void 0 === this.faceVertexUvs[t] && (this.faceVertexUvs[t] = []), d = 0, e = b.length; d < e; d++) {
          g = b[d];
          c = [];
          h = 0;
          for (p = g.length; h < p; h++) {
            c.push(g[h].clone());
          }
          this.faceVertexUvs[t].push(c);
        }
      }
    } else {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
    }
  }, mergeMesh:function(a) {
    a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
  }, mergeVertices:function() {
    var a = {}, d = [], b = [], c = Math.pow(10, 4), e;
    var l = 0;
    for (e = this.vertices.length; l < e; l++) {
      var f = this.vertices[l];
      f = Math.round(f.x * c) + "_" + Math.round(f.y * c) + "_" + Math.round(f.z * c);
      void 0 === a[f] ? (a[f] = l, d.push(this.vertices[l]), b[l] = d.length - 1) : b[l] = b[a[f]];
    }
    a = [];
    l = 0;
    for (e = this.faces.length; l < e; l++) {
      for (c = this.faces[l], c.a = b[c.a], c.b = b[c.b], c.c = b[c.c], c = [c.a, c.b, c.c], f = 0; 3 > f; f++) {
        if (c[f] === c[(f + 1) % 3]) {
          a.push(l);
          break;
        }
      }
    }
    for (l = a.length - 1; 0 <= l; l--) {
      for (c = a[l], this.faces.splice(c, 1), b = 0, e = this.faceVertexUvs.length; b < e; b++) {
        this.faceVertexUvs[b].splice(c, 1);
      }
    }
    l = this.vertices.length - d.length;
    this.vertices = d;
    return l;
  }, setFromPoints:function(a) {
    this.vertices = [];
    for (var g = 0, d = a.length; g < d; g++) {
      var b = a[g];
      this.vertices.push(new e(b.x, b.y, b.z || 0));
    }
    return this;
  }, sortFacesByMaterialIndex:function() {
    for (var a = this.faces, d = a.length, b = 0; b < d; b++) {
      a[b]._id = b;
    }
    a.sort(function(a, g) {
      return a.materialIndex - g.materialIndex;
    });
    var c = this.faceVertexUvs[0], e = this.faceVertexUvs[1], l, f;
    c && c.length === d && (l = []);
    e && e.length === d && (f = []);
    for (b = 0; b < d; b++) {
      var h = a[b]._id;
      l && l.push(c[h]);
      f && f.push(e[h]);
    }
    l && (this.faceVertexUvs[0] = l);
    f && (this.faceVertexUvs[1] = f);
  }, toJSON:function() {
    function a(a, g, d) {
      return d ? a | 1 << g : a & ~(1 << g);
    }
    function d(a) {
      var g = a.x.toString() + a.y.toString() + a.z.toString();
      if (void 0 !== m[g]) {
        return m[g];
      }
      m[g] = p.length / 3;
      p.push(a.x, a.y, a.z);
      return m[g];
    }
    function b(a) {
      var g = a.r.toString() + a.g.toString() + a.b.toString();
      if (void 0 !== k[g]) {
        return k[g];
      }
      k[g] = n.length;
      n.push(a.getHex());
      return k[g];
    }
    function c(a) {
      var g = a.x.toString() + a.y.toString();
      if (void 0 !== u[g]) {
        return u[g];
      }
      u[g] = q.length / 2;
      q.push(a.x, a.y);
      return u[g];
    }
    var e = {metadata:{version:4.5, type:"Geometry", generator:"Geometry.toJSON"}};
    e.uuid = this.uuid;
    e.type = this.type;
    "" !== this.name && (e.name = this.name);
    if (void 0 !== this.parameters) {
      var l = this.parameters, f;
      for (f in l) {
        void 0 !== l[f] && (e[f] = l[f]);
      }
      return e;
    }
    l = [];
    for (f = 0; f < this.vertices.length; f++) {
      var h = this.vertices[f];
      l.push(h.x, h.y, h.z);
    }
    h = [];
    var p = [], m = {}, n = [], k = {}, q = [], u = {};
    for (f = 0; f < this.faces.length; f++) {
      var r = this.faces[f], v = void 0 !== this.faceVertexUvs[0][f], w = 0 < r.normal.length(), y = 0 < r.vertexNormals.length, x = 1 !== r.color.r || 1 !== r.color.g || 1 !== r.color.b, z = 0 < r.vertexColors.length, A = 0;
      A = a(A, 0, 0);
      A = a(A, 1, !0);
      A = a(A, 2, !1);
      A = a(A, 3, v);
      A = a(A, 4, w);
      A = a(A, 5, y);
      A = a(A, 6, x);
      A = a(A, 7, z);
      h.push(A);
      h.push(r.a, r.b, r.c);
      h.push(r.materialIndex);
      v && (v = this.faceVertexUvs[0][f], h.push(c(v[0]), c(v[1]), c(v[2])));
      w && h.push(d(r.normal));
      y && (w = r.vertexNormals, h.push(d(w[0]), d(w[1]), d(w[2])));
      x && h.push(b(r.color));
      z && (r = r.vertexColors, h.push(b(r[0]), b(r[1]), b(r[2])));
    }
    e.data = {};
    e.data.vertices = l;
    e.data.normals = p;
    0 < n.length && (e.data.colors = n);
    0 < q.length && (e.data.uvs = [q]);
    e.data.faces = h;
    return e;
  }, clone:function() {
    return (new V).copy(this);
  }, copy:function(a) {
    var g, d, b;
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var c = a.vertices;
    var e = 0;
    for (g = c.length; e < g; e++) {
      this.vertices.push(c[e].clone());
    }
    c = a.colors;
    e = 0;
    for (g = c.length; e < g; e++) {
      this.colors.push(c[e].clone());
    }
    c = a.faces;
    e = 0;
    for (g = c.length; e < g; e++) {
      this.faces.push(c[e].clone());
    }
    e = 0;
    for (g = a.faceVertexUvs.length; e < g; e++) {
      var l = a.faceVertexUvs[e];
      void 0 === this.faceVertexUvs[e] && (this.faceVertexUvs[e] = []);
      c = 0;
      for (d = l.length; c < d; c++) {
        var f = l[c], h = [];
        var p = 0;
        for (b = f.length; p < b; p++) {
          h.push(f[p].clone());
        }
        this.faceVertexUvs[e].push(h);
      }
    }
    p = a.morphTargets;
    e = 0;
    for (g = p.length; e < g; e++) {
      b = {};
      b.name = p[e].name;
      if (void 0 !== p[e].vertices) {
        for (b.vertices = [], c = 0, d = p[e].vertices.length; c < d; c++) {
          b.vertices.push(p[e].vertices[c].clone());
        }
      }
      if (void 0 !== p[e].normals) {
        for (b.normals = [], c = 0, d = p[e].normals.length; c < d; c++) {
          b.normals.push(p[e].normals[c].clone());
        }
      }
      this.morphTargets.push(b);
    }
    p = a.morphNormals;
    e = 0;
    for (g = p.length; e < g; e++) {
      b = {};
      if (void 0 !== p[e].vertexNormals) {
        for (b.vertexNormals = [], c = 0, d = p[e].vertexNormals.length; c < d; c++) {
          l = p[e].vertexNormals[c], f = {}, f.a = l.a.clone(), f.b = l.b.clone(), f.c = l.c.clone(), b.vertexNormals.push(f);
        }
      }
      if (void 0 !== p[e].faceNormals) {
        for (b.faceNormals = [], c = 0, d = p[e].faceNormals.length; c < d; c++) {
          b.faceNormals.push(p[e].faceNormals[c].clone());
        }
      }
      this.morphNormals.push(b);
    }
    c = a.skinWeights;
    e = 0;
    for (g = c.length; e < g; e++) {
      this.skinWeights.push(c[e].clone());
    }
    c = a.skinIndices;
    e = 0;
    for (g = c.length; e < g; e++) {
      this.skinIndices.push(c[e].clone());
    }
    c = a.lineDistances;
    e = 0;
    for (g = c.length; e < g; e++) {
      this.lineDistances.push(c[e]);
    }
    e = a.boundingBox;
    null !== e && (this.boundingBox = e.clone());
    e = a.boundingSphere;
    null !== e && (this.boundingSphere = e.clone());
    this.elementsNeedUpdate = a.elementsNeedUpdate;
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var hh = function(a) {
    function g(g, d, b, c, e, l) {
      a.call(this);
      this.type = "BoxGeometry";
      this.parameters = {width:g, height:d, depth:b, widthSegments:c, heightSegments:e, depthSegments:l};
      this.fromBufferGeometry(new Nd(g, d, b, c, e, l));
      this.mergeVertices();
    }
    a && (g.__proto__ = a);
    g.prototype = Object.create(a && a.prototype);
    return g.prototype.constructor = g;
  }(V), Nd = function(a) {
    function g(g, d, b, c, l, f) {
      function h(a, g, d, b, c, l, f, h, r, v, w) {
        var y = l / r, x = f / v, z = l / 2, A = f / 2, G = h / 2;
        f = r + 1;
        var D = v + 1, B = l = 0, C, X, F = new e;
        for (X = 0; X < D; X++) {
          var E = X * x - A;
          for (C = 0; C < f; C++) {
            F[a] = (C * y - z) * b, F[g] = E * c, F[d] = G, n.push(F.x, F.y, F.z), F[a] = 0, F[g] = 0, F[d] = 0 < h ? 1 : -1, t.push(F.x, F.y, F.z), k.push(C / r), k.push(1 - X / v), l += 1;
          }
        }
        for (X = 0; X < v; X++) {
          for (C = 0; C < r; C++) {
            a = q + C + f * (X + 1), g = q + (C + 1) + f * (X + 1), d = q + (C + 1) + f * X, m.push(q + C + f * X, a, d), m.push(a, g, d), B += 6;
          }
        }
        p.addGroup(u, B, w);
        u += B;
        q += l;
      }
      a.call(this);
      this.type = "BoxBufferGeometry";
      this.parameters = {width:g, height:d, depth:b, widthSegments:c, heightSegments:l, depthSegments:f};
      var p = this;
      g = g || 1;
      d = d || 1;
      b = b || 1;
      c = Math.floor(c) || 1;
      l = Math.floor(l) || 1;
      f = Math.floor(f) || 1;
      var m = [], n = [], t = [], k = [], q = 0, u = 0;
      h("z", "y", "x", -1, -1, b, d, g, f, l, 0);
      h("z", "y", "x", 1, -1, b, d, -g, f, l, 1);
      h("x", "z", "y", 1, 1, g, b, d, c, f, 2);
      h("x", "z", "y", 1, -1, g, b, -d, c, f, 3);
      h("x", "y", "z", 1, -1, g, d, b, c, l, 4);
      h("x", "y", "z", -1, -1, g, d, -b, c, l, 5);
      this.setIndex(m);
      this.setAttribute("position", new N(n, 3));
      this.setAttribute("normal", new N(t, 3));
      this.setAttribute("uv", new N(k, 2));
    }
    a && (g.__proto__ = a);
    g.prototype = Object.create(a && a.prototype);
    return g.prototype.constructor = g;
  }(J), Tj = {clone:la, merge:ba};
  ja.prototype = Object.create(H.prototype);
  ja.prototype.constructor = ja;
  ja.prototype.isShaderMaterial = !0;
  ja.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.fragmentShader = a.fragmentShader;
    this.vertexShader = a.vertexShader;
    this.uniforms = la(a.uniforms);
    this.defines = Object.assign({}, a.defines);
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.lights = a.lights;
    this.clipping = a.clipping;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    this.extensions = a.extensions;
    return this;
  };
  ja.prototype.toJSON = function(a) {
    var g = H.prototype.toJSON.call(this, a);
    g.uniforms = {};
    for (var d in this.uniforms) {
      var b = this.uniforms[d].value;
      g.uniforms[d] = b && b.isTexture ? {type:"t", value:b.toJSON(a).uuid} : b && b.isColor ? {type:"c", value:b.getHex()} : b && b.isVector2 ? {type:"v2", value:b.toArray()} : b && b.isVector3 ? {type:"v3", value:b.toArray()} : b && b.isVector4 ? {type:"v4", value:b.toArray()} : b && b.isMatrix3 ? {type:"m3", value:b.toArray()} : b && b.isMatrix4 ? {type:"m4", value:b.toArray()} : {value:b};
    }
    0 < Object.keys(this.defines).length && (g.defines = this.defines);
    g.vertexShader = this.vertexShader;
    g.fragmentShader = this.fragmentShader;
    a = {};
    for (var c in this.extensions) {
      !0 === this.extensions[c] && (a[c] = !0);
    }
    0 < Object.keys(a).length && (g.extensions = a);
    return g;
  };
  pa.prototype = Object.assign(Object.create(v.prototype), {constructor:pa, isCamera:!0, copy:function(a, d) {
    v.prototype.copy.call(this, a, d);
    this.matrixWorldInverse.copy(a.matrixWorldInverse);
    this.projectionMatrix.copy(a.projectionMatrix);
    this.projectionMatrixInverse.copy(a.projectionMatrixInverse);
    return this;
  }, getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new e);
    this.updateMatrixWorld(!0);
    var g = this.matrixWorld.elements;
    return a.set(-g[8], -g[9], -g[10]).normalize();
  }, updateMatrixWorld:function(a) {
    v.prototype.updateMatrixWorld.call(this, a);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  oa.prototype = Object.assign(Object.create(pa.prototype), {constructor:oa, isPerspectiveCamera:!0, copy:function(a, d) {
    pa.prototype.copy.call(this, a, d);
    this.fov = a.fov;
    this.zoom = a.zoom;
    this.near = a.near;
    this.far = a.far;
    this.focus = a.focus;
    this.aspect = a.aspect;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    this.filmGauge = a.filmGauge;
    this.filmOffset = a.filmOffset;
    return this;
  }, setFocalLength:function(a) {
    a = .5 * this.getFilmHeight() / a;
    this.fov = 2 * ka.RAD2DEG * Math.atan(a);
    this.updateProjectionMatrix();
  }, getFocalLength:function() {
    var a = Math.tan(.5 * ka.DEG2RAD * this.fov);
    return .5 * this.getFilmHeight() / a;
  }, getEffectiveFOV:function() {
    return 2 * ka.RAD2DEG * Math.atan(Math.tan(.5 * ka.DEG2RAD * this.fov) / this.zoom);
  }, getFilmWidth:function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }, getFilmHeight:function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }, setViewOffset:function(a, d, b, c, e, l) {
    this.aspect = a / d;
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = d;
    this.view.offsetX = b;
    this.view.offsetY = c;
    this.view.width = e;
    this.view.height = l;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = this.near, d = a * Math.tan(.5 * ka.DEG2RAD * this.fov) / this.zoom, b = 2 * d, c = this.aspect * b, e = -.5 * c, l = this.view;
    if (null !== this.view && this.view.enabled) {
      var f = l.fullWidth, h = l.fullHeight;
      e += l.offsetX * c / f;
      d -= l.offsetY * b / h;
      c *= l.width / f;
      b *= l.height / h;
    }
    l = this.filmOffset;
    0 !== l && (e += a * l / this.getFilmWidth());
    this.projectionMatrix.makePerspective(e, e + c, d, d - b, a, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = v.prototype.toJSON.call(this, a);
    a.object.fov = this.fov;
    a.object.zoom = this.zoom;
    a.object.near = this.near;
    a.object.far = this.far;
    a.object.focus = this.focus;
    a.object.aspect = this.aspect;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    a.object.filmGauge = this.filmGauge;
    a.object.filmOffset = this.filmOffset;
    return a;
  }});
  ma.prototype = Object.create(v.prototype);
  ma.prototype.constructor = ma;
  ua.prototype = Object.create(q.prototype);
  ua.prototype.constructor = ua;
  ua.prototype.isWebGLRenderTargetCube = !0;
  ua.prototype.fromEquirectangularTexture = function(a, d) {
    this.texture.type = d.type;
    this.texture.format = d.format;
    this.texture.encoding = d.encoding;
    var g = new w, b = new ja({type:"CubemapFromEquirect", uniforms:la({tEquirect:{value:null}}), vertexShader:"varying vec3 vWorldDirection;\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", fragmentShader:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}", 
    side:1, blending:0});
    b.uniforms.tEquirect.value = d;
    d = new U(new Nd(5, 5, 5), b);
    g.add(d);
    b = new ma(1, 10, 1);
    b.renderTarget = this;
    b.renderTarget.texture.name = "CubeCameraTexture";
    b.update(a, g);
    d.geometry.dispose();
    d.material.dispose();
    return this;
  };
  Da.prototype = Object.create(h.prototype);
  Da.prototype.constructor = Da;
  Da.prototype.isDataTexture = !0;
  var Jd = new p, Qf = new e;
  Object.assign(Pa.prototype, {set:function(a, d, b, c, e, l) {
    var g = this.planes;
    g[0].copy(a);
    g[1].copy(d);
    g[2].copy(b);
    g[3].copy(c);
    g[4].copy(e);
    g[5].copy(l);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    for (var g = this.planes, d = 0; 6 > d; d++) {
      g[d].copy(a.planes[d]);
    }
    return this;
  }, setFromMatrix:function(a) {
    var g = this.planes, d = a.elements;
    a = d[0];
    var b = d[1], c = d[2], e = d[3], l = d[4], f = d[5], h = d[6], p = d[7], m = d[8], n = d[9], k = d[10], q = d[11], u = d[12], r = d[13], v = d[14];
    d = d[15];
    g[0].setComponents(e - a, p - l, q - m, d - u).normalize();
    g[1].setComponents(e + a, p + l, q + m, d + u).normalize();
    g[2].setComponents(e + b, p + f, q + n, d + r).normalize();
    g[3].setComponents(e - b, p - f, q - n, d - r).normalize();
    g[4].setComponents(e - c, p - h, q - k, d - v).normalize();
    g[5].setComponents(e + c, p + h, q + k, d + v).normalize();
    return this;
  }, intersectsObject:function(a) {
    var g = a.geometry;
    null === g.boundingSphere && g.computeBoundingSphere();
    Jd.copy(g.boundingSphere).applyMatrix4(a.matrixWorld);
    return this.intersectsSphere(Jd);
  }, intersectsSprite:function(a) {
    Jd.center.set(0, 0, 0);
    Jd.radius = .7071067811865476;
    Jd.applyMatrix4(a.matrixWorld);
    return this.intersectsSphere(Jd);
  }, intersectsSphere:function(a) {
    var g = this.planes, d = a.center;
    a = -a.radius;
    for (var b = 0; 6 > b; b++) {
      if (g[b].distanceToPoint(d) < a) {
        return !1;
      }
    }
    return !0;
  }, intersectsBox:function(a) {
    for (var g = this.planes, d = 0; 6 > d; d++) {
      var b = g[d];
      Qf.x = 0 < b.normal.x ? a.max.x : a.min.x;
      Qf.y = 0 < b.normal.y ? a.max.y : a.min.y;
      Qf.z = 0 < b.normal.z ? a.max.z : a.min.z;
      if (0 > b.distanceToPoint(Qf)) {
        return !1;
      }
    }
    return !0;
  }, containsPoint:function(a) {
    for (var g = this.planes, d = 0; 6 > d; d++) {
      if (0 > g[d].distanceToPoint(a)) {
        return !1;
      }
    }
    return !0;
  }});
  var ia = {alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif", alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif", aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif", 
  aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex:"vec3 transformed = vec3( position );", beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif", 
  bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif", 
  clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif", 
  clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif", clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif", 
  color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}", 
  cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif", 
  defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif", displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif", 
  displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif", emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif", emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif", 
  encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}", 
  envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif", 
  envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif", envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif", 
  envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif", envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif", 
  envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif", 
  fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif", fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif", 
  gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif", lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif", 
  lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif", 
  lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif", 
  lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)", 
  lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif", 
  lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}", 
  lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif", 
  lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif", 
  lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif", 
  logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif", logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif", 
  map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif", map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif", map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif", 
  map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif", metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", 
  morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif", morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif", 
  morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif", 
  normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;", 
  normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif", 
  normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif", 
  clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif", clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif", clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif", 
  packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}", 
  premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif", 
  roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif", 
  shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif", 
  shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif", 
  shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}", 
  skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif", 
  skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif", 
  specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}", 
  uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif", uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif", 
  uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif", worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif", background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}", cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}", depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}", 
  depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}", 
  distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}", 
  distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}", 
  equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}", 
  meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}", 
  meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}", 
  normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}", 
  points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}", 
  shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}", shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"}, 
  da = {common:{diffuse:{value:new B(15658734)}, opacity:{value:1}, map:{value:null}, uvTransform:{value:new f}, alphaMap:{value:null}}, specularmap:{specularMap:{value:null}}, envmap:{envMap:{value:null}, flipEnvMap:{value:-1}, reflectivity:{value:1}, refractionRatio:{value:.98}, maxMipLevel:{value:0}}, aomap:{aoMap:{value:null}, aoMapIntensity:{value:1}}, lightmap:{lightMap:{value:null}, lightMapIntensity:{value:1}}, emissivemap:{emissiveMap:{value:null}}, bumpmap:{bumpMap:{value:null}, bumpScale:{value:1}}, 
  normalmap:{normalMap:{value:null}, normalScale:{value:new k(1, 1)}}, displacementmap:{displacementMap:{value:null}, displacementScale:{value:1}, displacementBias:{value:0}}, roughnessmap:{roughnessMap:{value:null}}, metalnessmap:{metalnessMap:{value:null}}, gradientmap:{gradientMap:{value:null}}, fog:{fogDensity:{value:2.5E-4}, fogNear:{value:1}, fogFar:{value:2E3}, fogColor:{value:new B(16777215)}}, lights:{ambientLightColor:{value:[]}, lightProbe:{value:[]}, directionalLights:{value:[], properties:{direction:{}, 
  color:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, directionalShadowMap:{value:[]}, directionalShadowMatrix:{value:[]}, spotLights:{value:[], properties:{color:{}, position:{}, direction:{}, distance:{}, coneCos:{}, penumbraCos:{}, decay:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, spotShadowMap:{value:[]}, spotShadowMatrix:{value:[]}, pointLights:{value:[], properties:{color:{}, position:{}, decay:{}, distance:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, 
  shadowMapSize:{}, shadowCameraNear:{}, shadowCameraFar:{}}}, pointShadowMap:{value:[]}, pointShadowMatrix:{value:[]}, hemisphereLights:{value:[], properties:{direction:{}, skyColor:{}, groundColor:{}}}, rectAreaLights:{value:[], properties:{color:{}, position:{}, width:{}, height:{}}}}, points:{diffuse:{value:new B(15658734)}, opacity:{value:1}, size:{value:1}, scale:{value:1}, map:{value:null}, alphaMap:{value:null}, uvTransform:{value:new f}}, sprite:{diffuse:{value:new B(15658734)}, opacity:{value:1}, 
  center:{value:new k(.5, .5)}, rotation:{value:0}, map:{value:null}, alphaMap:{value:null}, uvTransform:{value:new f}}}, qb = {basic:{uniforms:ba([da.common, da.specularmap, da.envmap, da.aomap, da.lightmap, da.fog]), vertexShader:ia.meshbasic_vert, fragmentShader:ia.meshbasic_frag}, lambert:{uniforms:ba([da.common, da.specularmap, da.envmap, da.aomap, da.lightmap, da.emissivemap, da.fog, da.lights, {emissive:{value:new B(0)}}]), vertexShader:ia.meshlambert_vert, fragmentShader:ia.meshlambert_frag}, 
  phong:{uniforms:ba([da.common, da.specularmap, da.envmap, da.aomap, da.lightmap, da.emissivemap, da.bumpmap, da.normalmap, da.displacementmap, da.gradientmap, da.fog, da.lights, {emissive:{value:new B(0)}, specular:{value:new B(1118481)}, shininess:{value:30}}]), vertexShader:ia.meshphong_vert, fragmentShader:ia.meshphong_frag}, standard:{uniforms:ba([da.common, da.envmap, da.aomap, da.lightmap, da.emissivemap, da.bumpmap, da.normalmap, da.displacementmap, da.roughnessmap, da.metalnessmap, da.fog, 
  da.lights, {emissive:{value:new B(0)}, roughness:{value:.5}, metalness:{value:.5}, envMapIntensity:{value:1}}]), vertexShader:ia.meshphysical_vert, fragmentShader:ia.meshphysical_frag}, matcap:{uniforms:ba([da.common, da.bumpmap, da.normalmap, da.displacementmap, da.fog, {matcap:{value:null}}]), vertexShader:ia.meshmatcap_vert, fragmentShader:ia.meshmatcap_frag}, points:{uniforms:ba([da.points, da.fog]), vertexShader:ia.points_vert, fragmentShader:ia.points_frag}, dashed:{uniforms:ba([da.common, 
  da.fog, {scale:{value:1}, dashSize:{value:1}, totalSize:{value:2}}]), vertexShader:ia.linedashed_vert, fragmentShader:ia.linedashed_frag}, depth:{uniforms:ba([da.common, da.displacementmap]), vertexShader:ia.depth_vert, fragmentShader:ia.depth_frag}, normal:{uniforms:ba([da.common, da.bumpmap, da.normalmap, da.displacementmap, {opacity:{value:1}}]), vertexShader:ia.normal_vert, fragmentShader:ia.normal_frag}, sprite:{uniforms:ba([da.sprite, da.fog]), vertexShader:ia.sprite_vert, fragmentShader:ia.sprite_frag}, 
  background:{uniforms:{uvTransform:{value:new f}, t2D:{value:null}}, vertexShader:ia.background_vert, fragmentShader:ia.background_frag}, cube:{uniforms:{tCube:{value:null}, tFlip:{value:-1}, opacity:{value:1}}, vertexShader:ia.cube_vert, fragmentShader:ia.cube_frag}, equirect:{uniforms:{tEquirect:{value:null}}, vertexShader:ia.equirect_vert, fragmentShader:ia.equirect_frag}, distanceRGBA:{uniforms:ba([da.common, da.displacementmap, {referencePosition:{value:new e}, nearDistance:{value:1}, farDistance:{value:1E3}}]), 
  vertexShader:ia.distanceRGBA_vert, fragmentShader:ia.distanceRGBA_frag}, shadow:{uniforms:ba([da.lights, da.fog, {color:{value:new B(0)}, opacity:{value:1}}]), vertexShader:ia.shadow_vert, fragmentShader:ia.shadow_frag}};
  qb.physical = {uniforms:ba([qb.standard.uniforms, {transparency:{value:0}, clearcoat:{value:0}, clearcoatRoughness:{value:0}, sheen:{value:new B(0)}, clearcoatNormalScale:{value:new k(1, 1)}, clearcoatNormalMap:{value:null}}]), vertexShader:ia.meshphysical_vert, fragmentShader:ia.meshphysical_frag};
  fb.prototype = Object.create(V.prototype);
  fb.prototype.constructor = fb;
  Ka.prototype = Object.create(J.prototype);
  Ka.prototype.constructor = Ka;
  Sa.prototype = Object.create(h.prototype);
  Sa.prototype.constructor = Sa;
  Sa.prototype.isCubeTexture = !0;
  Object.defineProperty(Sa.prototype, "images", {get:function() {
    return this.image;
  }, set:function(a) {
    this.image = a;
  }});
  Wa.prototype = Object.create(h.prototype);
  Wa.prototype.constructor = Wa;
  Wa.prototype.isDataTexture2DArray = !0;
  Fb.prototype = Object.create(h.prototype);
  Fb.prototype.constructor = Fb;
  Fb.prototype.isDataTexture3D = !0;
  var wh = new h, Zi = new Wa, $i = new Fb, xh = new Sa, rh = [], sh = [], vh = new Float32Array(16), uh = new Float32Array(9), th = new Float32Array(4);
  yh.prototype.updateCache = function(a) {
    var g = this.cache;
    a instanceof Float32Array && g.length !== a.length && (this.cache = new Float32Array(a.length));
    Ma(g, a);
  };
  zh.prototype.setValue = function(a, d, b) {
    for (var g = this.seq, c = 0, e = g.length; c !== e; ++c) {
      var l = g[c];
      l.setValue(a, d[l.id], b);
    }
  };
  var mg = /([\w\d_]+)(\])?(\[|\.)?/g;
  cc.prototype.setValue = function(a, d, b, c) {
    d = this.map[d];
    void 0 !== d && d.setValue(a, b, c);
  };
  cc.prototype.setOptional = function(a, d, b) {
    d = d[b];
    void 0 !== d && this.setValue(a, b, d);
  };
  cc.upload = function(a, d, b, c) {
    for (var g = 0, e = d.length; g !== e; ++g) {
      var l = d[g], f = b[l.id];
      !1 !== f.needsUpdate && l.setValue(a, f.value, c);
    }
  };
  cc.seqWithValue = function(a, d) {
    for (var g = [], b = 0, c = a.length; b !== c; ++b) {
      var e = a[b];
      e.id in d && g.push(e);
    }
    return g;
  };
  var pj = 0, og = /^[ \t]*#include +<([\w\d./]+)>/gm, Hh = /#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, yj = 0;
  dc.prototype = Object.create(H.prototype);
  dc.prototype.constructor = dc;
  dc.prototype.isMeshDepthMaterial = !0;
  dc.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.depthPacking = a.depthPacking;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    return this;
  };
  ec.prototype = Object.create(H.prototype);
  ec.prototype.constructor = ec;
  ec.prototype.isMeshDistanceMaterial = !0;
  ec.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.referencePosition.copy(a.referencePosition);
    this.nearDistance = a.nearDistance;
    this.farDistance = a.farDistance;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    return this;
  };
  pg.prototype = Object.assign(Object.create(q.prototype), {constructor:pg, isWebGLMultiviewRenderTarget:!0, copy:function(a) {
    q.prototype.copy.call(this, a);
    this.numViews = a.numViews;
    return this;
  }, setNumViews:function(a) {
    this.numViews !== a && (this.numViews = a, this.dispose());
    return this;
  }});
  Wc.prototype = Object.assign(Object.create(v.prototype), {constructor:Wc, isGroup:!0});
  Ud.prototype = Object.assign(Object.create(oa.prototype), {constructor:Ud, isArrayCamera:!0});
  var Nh = new e, Oh = new e;
  Object.assign(qg.prototype, c.prototype);
  Object.assign(Ph.prototype, c.prototype);
  Object.assign(Ze.prototype, {isFogExp2:!0, clone:function() {
    return new Ze(this.color, this.density);
  }, toJSON:function() {
    return {type:"FogExp2", color:this.color.getHex(), density:this.density};
  }});
  Object.assign($e.prototype, {isFog:!0, clone:function() {
    return new $e(this.color, this.near, this.far);
  }, toJSON:function() {
    return {type:"Fog", color:this.color.getHex(), near:this.near, far:this.far};
  }});
  Object.defineProperty(Kb.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(Kb.prototype, {isInterleavedBuffer:!0, onUploadCallback:function() {
  }, setUsage:function(a) {
    this.usage = a;
    return this;
  }, copy:function(a) {
    this.array = new a.array.constructor(a.array);
    this.count = a.count;
    this.stride = a.stride;
    this.usage = a.usage;
    return this;
  }, copyAt:function(a, d, b) {
    a *= this.stride;
    b *= d.stride;
    for (var g = 0, c = this.stride; g < c; g++) {
      this.array[a + g] = d.array[b + g];
    }
    return this;
  }, set:function(a, d) {
    void 0 === d && (d = 0);
    this.array.set(a, d);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }});
  Object.defineProperties(Vd.prototype, {count:{get:function() {
    return this.data.count;
  }}, array:{get:function() {
    return this.data.array;
  }}});
  Object.assign(Vd.prototype, {isInterleavedBufferAttribute:!0, setX:function(a, d) {
    this.data.array[a * this.data.stride + this.offset] = d;
    return this;
  }, setY:function(a, d) {
    this.data.array[a * this.data.stride + this.offset + 1] = d;
    return this;
  }, setZ:function(a, d) {
    this.data.array[a * this.data.stride + this.offset + 2] = d;
    return this;
  }, setW:function(a, d) {
    this.data.array[a * this.data.stride + this.offset + 3] = d;
    return this;
  }, getX:function(a) {
    return this.data.array[a * this.data.stride + this.offset];
  }, getY:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 1];
  }, getZ:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 2];
  }, getW:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 3];
  }, setXY:function(a, d, b) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = d;
    this.data.array[a + 1] = b;
    return this;
  }, setXYZ:function(a, d, b, c) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = d;
    this.data.array[a + 1] = b;
    this.data.array[a + 2] = c;
    return this;
  }, setXYZW:function(a, d, b, c, e) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = d;
    this.data.array[a + 1] = b;
    this.data.array[a + 2] = c;
    this.data.array[a + 3] = e;
    return this;
  }});
  fc.prototype = Object.create(H.prototype);
  fc.prototype.constructor = fc;
  fc.prototype.isSpriteMaterial = !0;
  fc.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.rotation = a.rotation;
    this.sizeAttenuation = a.sizeAttenuation;
    return this;
  };
  var Xc, Le = new e, Kd = new e, Ld = new e, Yc = new k, Xd = new k, Rh = new m, Rf = new e, Me = new e, Sf = new e, wi = new k, ih = new k, xi = new k;
  Wd.prototype = Object.assign(Object.create(v.prototype), {constructor:Wd, isSprite:!0, raycast:function(a, d) {
    null === a.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
    Kd.setFromMatrixScale(this.matrixWorld);
    Rh.copy(a.camera.matrixWorld);
    this.modelViewMatrix.multiplyMatrices(a.camera.matrixWorldInverse, this.matrixWorld);
    Ld.setFromMatrixPosition(this.modelViewMatrix);
    a.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && Kd.multiplyScalar(-Ld.z);
    var g = this.material.rotation;
    if (0 !== g) {
      var b = Math.cos(g);
      var c = Math.sin(g);
    }
    g = this.center;
    af(Rf.set(-.5, -.5, 0), Ld, g, Kd, c, b);
    af(Me.set(.5, -.5, 0), Ld, g, Kd, c, b);
    af(Sf.set(.5, .5, 0), Ld, g, Kd, c, b);
    wi.set(0, 0);
    ih.set(1, 0);
    xi.set(1, 1);
    var e = a.ray.intersectTriangle(Rf, Me, Sf, !1, Le);
    if (null === e && (af(Me.set(-.5, .5, 0), Ld, g, Kd, c, b), ih.set(0, 1), e = a.ray.intersectTriangle(Rf, Sf, Me, !1, Le), null === e)) {
      return;
    }
    c = a.ray.origin.distanceTo(Le);
    c < a.near || c > a.far || d.push({distance:c, point:Le.clone(), uv:A.getUV(Le, Rf, Me, Sf, wi, ih, xi, new k), face:null, object:this});
  }, clone:function() {
    return (new this.constructor(this.material)).copy(this);
  }, copy:function(a) {
    v.prototype.copy.call(this, a);
    void 0 !== a.center && this.center.copy(a.center);
    return this;
  }});
  var Tf = new e, yi = new e;
  Yd.prototype = Object.assign(Object.create(v.prototype), {constructor:Yd, isLOD:!0, copy:function(a) {
    v.prototype.copy.call(this, a, !1);
    for (var g = a.levels, d = 0, b = g.length; d < b; d++) {
      var c = g[d];
      this.addLevel(c.object.clone(), c.distance);
    }
    this.autoUpdate = a.autoUpdate;
    return this;
  }, addLevel:function(a, d) {
    void 0 === d && (d = 0);
    d = Math.abs(d);
    for (var g = this.levels, b = 0; b < g.length && !(d < g[b].distance); b++) {
    }
    g.splice(b, 0, {distance:d, object:a});
    this.add(a);
    return this;
  }, getObjectForDistance:function(a) {
    var g = this.levels;
    if (0 < g.length) {
      for (var d = 1, b = g.length; d < b && !(a < g[d].distance); d++) {
      }
      return g[d - 1].object;
    }
    return null;
  }, raycast:function(a, d) {
    if (0 < this.levels.length) {
      Tf.setFromMatrixPosition(this.matrixWorld);
      var g = a.ray.origin.distanceTo(Tf);
      this.getObjectForDistance(g).raycast(a, d);
    }
  }, update:function(a) {
    var g = this.levels;
    if (1 < g.length) {
      Tf.setFromMatrixPosition(a.matrixWorld);
      yi.setFromMatrixPosition(this.matrixWorld);
      a = Tf.distanceTo(yi);
      g[0].object.visible = !0;
      for (var d = 1, b = g.length; d < b; d++) {
        if (a >= g[d].distance) {
          g[d - 1].object.visible = !1, g[d].object.visible = !0;
        } else {
          break;
        }
      }
      for (; d < b; d++) {
        g[d].object.visible = !1;
      }
    }
  }, toJSON:function(a) {
    a = v.prototype.toJSON.call(this, a);
    a.object.levels = [];
    for (var g = this.levels, d = 0, b = g.length; d < b; d++) {
      var c = g[d];
      a.object.levels.push({object:c.object.uuid, distance:c.distance});
    }
    return a;
  }});
  Zd.prototype = Object.assign(Object.create(U.prototype), {constructor:Zd, isSkinnedMesh:!0, bind:function(a, d) {
    this.skeleton = a;
    void 0 === d && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), d = this.matrixWorld);
    this.bindMatrix.copy(d);
    this.bindMatrixInverse.getInverse(d);
  }, pose:function() {
    this.skeleton.pose();
  }, normalizeSkinWeights:function() {
    for (var a = new r, d = this.geometry.attributes.skinWeight, b = 0, c = d.count; b < c; b++) {
      a.x = d.getX(b);
      a.y = d.getY(b);
      a.z = d.getZ(b);
      a.w = d.getW(b);
      var e = 1 / a.manhattanLength();
      Infinity !== e ? a.multiplyScalar(e) : a.set(1, 0, 0, 0);
      d.setXYZW(b, a.x, a.y, a.z, a.w);
    }
  }, updateMatrixWorld:function(a) {
    U.prototype.updateMatrixWorld.call(this, a);
    "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  var zi = new m, Uj = new m;
  Object.assign(bf.prototype, {calculateInverses:function() {
    this.boneInverses = [];
    for (var a = 0, d = this.bones.length; a < d; a++) {
      var b = new m;
      this.bones[a] && b.getInverse(this.bones[a].matrixWorld);
      this.boneInverses.push(b);
    }
  }, pose:function() {
    var a, d;
    var b = 0;
    for (d = this.bones.length; b < d; b++) {
      (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
    }
    b = 0;
    for (d = this.bones.length; b < d; b++) {
      if (a = this.bones[b]) {
        a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
      }
    }
  }, update:function() {
    for (var a = this.bones, d = this.boneInverses, b = this.boneMatrices, c = this.boneTexture, e = 0, l = a.length; e < l; e++) {
      zi.multiplyMatrices(a[e] ? a[e].matrixWorld : Uj, d[e]), zi.toArray(b, 16 * e);
    }
    void 0 !== c && (c.needsUpdate = !0);
  }, clone:function() {
    return new bf(this.bones, this.boneInverses);
  }, getBoneByName:function(a) {
    for (var d = 0, g = this.bones.length; d < g; d++) {
      var b = this.bones[d];
      if (b.name === a) {
        return b;
      }
    }
  }});
  sg.prototype = Object.assign(Object.create(v.prototype), {constructor:sg, isBone:!0});
  cf.prototype = Object.assign(Object.create(U.prototype), {constructor:cf, isInstancedMesh:!0, raycast:function() {
  }, setMatrixAt:function(a, d) {
    d.toArray(this.instanceMatrix.array, 16 * a);
  }, updateMorphTargets:function() {
  }});
  ta.prototype = Object.create(H.prototype);
  ta.prototype.constructor = ta;
  ta.prototype.isLineBasicMaterial = !0;
  ta.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.linewidth = a.linewidth;
    this.linecap = a.linecap;
    this.linejoin = a.linejoin;
    return this;
  };
  var Ai = new e, Bi = new e, Ci = new m, Uf = new u, Ne = new p;
  Ga.prototype = Object.assign(Object.create(v.prototype), {constructor:Ga, isLine:!0, computeLineDistances:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      if (null === a.index) {
        for (var d = a.attributes.position, b = [0], c = 1, e = d.count; c < e; c++) {
          Ai.fromBufferAttribute(d, c - 1), Bi.fromBufferAttribute(d, c), b[c] = b[c - 1], b[c] += Ai.distanceTo(Bi);
        }
        a.setAttribute("lineDistance", new N(b, 1));
      } else {
        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else {
      if (a.isGeometry) {
        for (d = a.vertices, b = a.lineDistances, b[0] = 0, c = 1, e = d.length; c < e; c++) {
          b[c] = b[c - 1], b[c] += d[c - 1].distanceTo(d[c]);
        }
      }
    }
    return this;
  }, raycast:function(a, d) {
    var g = a.linePrecision, b = this.geometry, c = this.matrixWorld;
    null === b.boundingSphere && b.computeBoundingSphere();
    Ne.copy(b.boundingSphere);
    Ne.applyMatrix4(c);
    Ne.radius += g;
    if (!1 !== a.ray.intersectsSphere(Ne)) {
      Ci.getInverse(c);
      Uf.copy(a.ray).applyMatrix4(Ci);
      g /= (this.scale.x + this.scale.y + this.scale.z) / 3;
      g *= g;
      var l = new e, f = new e;
      c = new e;
      var h = new e, p = this && this.isLineSegments ? 2 : 1;
      if (b.isBufferGeometry) {
        var m = b.index, n = b.attributes.position.array;
        if (null !== m) {
          m = m.array;
          b = 0;
          for (var k = m.length - 1; b < k; b += p) {
            var q = m[b + 1];
            l.fromArray(n, 3 * m[b]);
            f.fromArray(n, 3 * q);
            q = Uf.distanceSqToSegment(l, f, h, c);
            q > g || (h.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(h), q < a.near || q > a.far || d.push({distance:q, point:c.clone().applyMatrix4(this.matrixWorld), index:b, face:null, faceIndex:null, object:this}));
          }
        } else {
          for (b = 0, k = n.length / 3 - 1; b < k; b += p) {
            l.fromArray(n, 3 * b), f.fromArray(n, 3 * b + 3), q = Uf.distanceSqToSegment(l, f, h, c), q > g || (h.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(h), q < a.near || q > a.far || d.push({distance:q, point:c.clone().applyMatrix4(this.matrixWorld), index:b, face:null, faceIndex:null, object:this}));
          }
        }
      } else {
        if (b.isGeometry) {
          for (l = b.vertices, f = l.length, b = 0; b < f - 1; b += p) {
            q = Uf.distanceSqToSegment(l[b], l[b + 1], h, c), q > g || (h.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(h), q < a.near || q > a.far || d.push({distance:q, point:c.clone().applyMatrix4(this.matrixWorld), index:b, face:null, faceIndex:null, object:this}));
          }
        }
      }
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  var Vf = new e, Wf = new e;
  ra.prototype = Object.assign(Object.create(Ga.prototype), {constructor:ra, isLineSegments:!0, computeLineDistances:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      if (null === a.index) {
        for (var d = a.attributes.position, b = [], c = 0, e = d.count; c < e; c += 2) {
          Vf.fromBufferAttribute(d, c), Wf.fromBufferAttribute(d, c + 1), b[c] = 0 === c ? 0 : b[c - 1], b[c + 1] = b[c] + Vf.distanceTo(Wf);
        }
        a.setAttribute("lineDistance", new N(b, 1));
      } else {
        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else {
      if (a.isGeometry) {
        for (d = a.vertices, b = a.lineDistances, c = 0, e = d.length; c < e; c += 2) {
          Vf.copy(d[c]), Wf.copy(d[c + 1]), b[c] = 0 === c ? 0 : b[c - 1], b[c + 1] = b[c] + Vf.distanceTo(Wf);
        }
      }
    }
    return this;
  }});
  df.prototype = Object.assign(Object.create(Ga.prototype), {constructor:df, isLineLoop:!0});
  gb.prototype = Object.create(H.prototype);
  gb.prototype.constructor = gb;
  gb.prototype.isPointsMaterial = !0;
  gb.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.size = a.size;
    this.sizeAttenuation = a.sizeAttenuation;
    this.morphTargets = a.morphTargets;
    return this;
  };
  var Di = new m, ug = new u, Oe = new p, Xf = new e;
  Zc.prototype = Object.assign(Object.create(v.prototype), {constructor:Zc, isPoints:!0, raycast:function(a, d) {
    var g = this.geometry, b = this.matrixWorld, c = a.params.Points.threshold;
    null === g.boundingSphere && g.computeBoundingSphere();
    Oe.copy(g.boundingSphere);
    Oe.applyMatrix4(b);
    Oe.radius += c;
    if (!1 !== a.ray.intersectsSphere(Oe)) {
      if (Di.getInverse(b), ug.copy(a.ray).applyMatrix4(Di), c /= (this.scale.x + this.scale.y + this.scale.z) / 3, c *= c, g.isBufferGeometry) {
        var e = g.index;
        g = g.attributes.position.array;
        if (null !== e) {
          var l = e.array;
          e = 0;
          for (var f = l.length; e < f; e++) {
            var h = l[e];
            Xf.fromArray(g, 3 * h);
            tg(Xf, h, c, b, a, d, this);
          }
        } else {
          for (e = 0, l = g.length / 3; e < l; e++) {
            Xf.fromArray(g, 3 * e), tg(Xf, e, c, b, a, d, this);
          }
        }
      } else {
        for (g = g.vertices, e = 0, l = g.length; e < l; e++) {
          tg(g[e], e, c, b, a, d, this);
        }
      }
    }
  }, updateMorphTargets:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      a = a.morphAttributes;
      var d = Object.keys(a);
      if (0 < d.length) {
        var b = a[d[0]];
        if (void 0 !== b) {
          for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, d = b.length; a < d; a++) {
            var c = b[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[c] = a;
          }
        }
      }
    } else {
      a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  vg.prototype = Object.assign(Object.create(h.prototype), {constructor:vg, isVideoTexture:!0, update:function() {
    var a = this.image;
    a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }});
  $c.prototype = Object.create(h.prototype);
  $c.prototype.constructor = $c;
  $c.prototype.isCompressedTexture = !0;
  $d.prototype = Object.create(h.prototype);
  $d.prototype.constructor = $d;
  $d.prototype.isCanvasTexture = !0;
  ae.prototype = Object.create(h.prototype);
  ae.prototype.constructor = ae;
  ae.prototype.isDepthTexture = !0;
  ad.prototype = Object.create(J.prototype);
  ad.prototype.constructor = ad;
  be.prototype = Object.create(V.prototype);
  be.prototype.constructor = be;
  bd.prototype = Object.create(J.prototype);
  bd.prototype.constructor = bd;
  ce.prototype = Object.create(V.prototype);
  ce.prototype.constructor = ce;
  Ta.prototype = Object.create(J.prototype);
  Ta.prototype.constructor = Ta;
  de.prototype = Object.create(V.prototype);
  de.prototype.constructor = de;
  cd.prototype = Object.create(Ta.prototype);
  cd.prototype.constructor = cd;
  ee.prototype = Object.create(V.prototype);
  ee.prototype.constructor = ee;
  tc.prototype = Object.create(Ta.prototype);
  tc.prototype.constructor = tc;
  fe.prototype = Object.create(V.prototype);
  fe.prototype.constructor = fe;
  dd.prototype = Object.create(Ta.prototype);
  dd.prototype.constructor = dd;
  ge.prototype = Object.create(V.prototype);
  ge.prototype.constructor = ge;
  ed.prototype = Object.create(Ta.prototype);
  ed.prototype.constructor = ed;
  he.prototype = Object.create(V.prototype);
  he.prototype.constructor = he;
  uc.prototype = Object.create(J.prototype);
  uc.prototype.constructor = uc;
  uc.prototype.toJSON = function() {
    var a = J.prototype.toJSON.call(this);
    a.path = this.parameters.path.toJSON();
    return a;
  };
  ie.prototype = Object.create(V.prototype);
  ie.prototype.constructor = ie;
  fd.prototype = Object.create(J.prototype);
  fd.prototype.constructor = fd;
  je.prototype = Object.create(V.prototype);
  je.prototype.constructor = je;
  gd.prototype = Object.create(J.prototype);
  gd.prototype.constructor = gd;
  var Vj = {triangulate:function(a, d, b) {
    b = b || 2;
    var g = d && d.length, c = g ? d[0] * b : a.length, e = Sh(a, 0, c, b, !0), l = [];
    if (!e || e.next === e.prev) {
      return l;
    }
    var f;
    if (g) {
      var h = b;
      g = [];
      var p;
      var m = 0;
      for (p = d.length; m < p; m++) {
        var n = d[m] * h;
        var k = m < p - 1 ? d[m + 1] * h : a.length;
        n = Sh(a, n, k, h, !1);
        n === n.next && (n.steiner = !0);
        g.push(Gj(n));
      }
      g.sort(Ej);
      for (m = 0; m < g.length; m++) {
        d = g[m];
        h = e;
        if (h = Fj(d, h)) {
          d = Vh(h, d), le(d, d.next);
        }
        e = le(e, e.next);
      }
    }
    if (a.length > 80 * b) {
      var q = f = a[0];
      var u = g = a[1];
      for (h = b; h < c; h += b) {
        m = a[h], d = a[h + 1], m < q && (q = m), d < u && (u = d), m > f && (f = m), d > g && (g = d);
      }
      f = Math.max(f - q, g - u);
      f = 0 !== f ? 1 / f : 0;
    }
    me(e, l, b, q, u, f);
    return l;
  }}, Lb = {area:function(a) {
    for (var d = a.length, g = 0, b = d - 1, c = 0; c < d; b = c++) {
      g += a[b].x * a[c].y - a[c].x * a[b].y;
    }
    return .5 * g;
  }, isClockWise:function(a) {
    return 0 > Lb.area(a);
  }, triangulateShape:function(a, d) {
    var g = [], b = [], c = [];
    Wh(a);
    Xh(g, a);
    var e = a.length;
    d.forEach(Wh);
    for (a = 0; a < d.length; a++) {
      b.push(e), e += d[a].length, Xh(g, d[a]);
    }
    d = Vj.triangulate(g, b);
    for (a = 0; a < d.length; a += 3) {
      c.push(d.slice(a, a + 3));
    }
    return c;
  }};
  wc.prototype = Object.create(V.prototype);
  wc.prototype.constructor = wc;
  wc.prototype.toJSON = function() {
    var a = V.prototype.toJSON.call(this);
    return Yh(this.parameters.shapes, this.parameters.options, a);
  };
  ub.prototype = Object.create(J.prototype);
  ub.prototype.constructor = ub;
  ub.prototype.toJSON = function() {
    var a = J.prototype.toJSON.call(this);
    return Yh(this.parameters.shapes, this.parameters.options, a);
  };
  var Hj = {generateTopUV:function(a, d, b, c, e) {
    a = d[3 * c];
    c = d[3 * c + 1];
    var g = d[3 * e];
    e = d[3 * e + 1];
    return [new k(d[3 * b], d[3 * b + 1]), new k(a, c), new k(g, e)];
  }, generateSideWallUV:function(a, d, b, c, e, l) {
    a = d[3 * b];
    var g = d[3 * b + 1];
    b = d[3 * b + 2];
    var f = d[3 * c], h = d[3 * c + 1];
    c = d[3 * c + 2];
    var p = d[3 * e], m = d[3 * e + 1];
    e = d[3 * e + 2];
    var n = d[3 * l], q = d[3 * l + 1];
    d = d[3 * l + 2];
    return .01 > Math.abs(g - h) ? [new k(a, 1 - b), new k(f, 1 - c), new k(p, 1 - e), new k(n, 1 - d)] : [new k(g, 1 - b), new k(h, 1 - c), new k(m, 1 - e), new k(q, 1 - d)];
  }};
  oe.prototype = Object.create(V.prototype);
  oe.prototype.constructor = oe;
  id.prototype = Object.create(ub.prototype);
  id.prototype.constructor = id;
  pe.prototype = Object.create(V.prototype);
  pe.prototype.constructor = pe;
  gc.prototype = Object.create(J.prototype);
  gc.prototype.constructor = gc;
  qe.prototype = Object.create(V.prototype);
  qe.prototype.constructor = qe;
  jd.prototype = Object.create(J.prototype);
  jd.prototype.constructor = jd;
  re.prototype = Object.create(V.prototype);
  re.prototype.constructor = re;
  kd.prototype = Object.create(J.prototype);
  kd.prototype.constructor = kd;
  xc.prototype = Object.create(V.prototype);
  xc.prototype.constructor = xc;
  xc.prototype.toJSON = function() {
    var a = V.prototype.toJSON.call(this);
    return Zh(this.parameters.shapes, a);
  };
  yc.prototype = Object.create(J.prototype);
  yc.prototype.constructor = yc;
  yc.prototype.toJSON = function() {
    var a = J.prototype.toJSON.call(this);
    return Zh(this.parameters.shapes, a);
  };
  ld.prototype = Object.create(J.prototype);
  ld.prototype.constructor = ld;
  zc.prototype = Object.create(V.prototype);
  zc.prototype.constructor = zc;
  Mb.prototype = Object.create(J.prototype);
  Mb.prototype.constructor = Mb;
  se.prototype = Object.create(zc.prototype);
  se.prototype.constructor = se;
  te.prototype = Object.create(Mb.prototype);
  te.prototype.constructor = te;
  ue.prototype = Object.create(V.prototype);
  ue.prototype.constructor = ue;
  md.prototype = Object.create(J.prototype);
  md.prototype.constructor = md;
  var Ra = Object.freeze({__proto__:null, WireframeGeometry:ad, ParametricGeometry:be, ParametricBufferGeometry:bd, TetrahedronGeometry:de, TetrahedronBufferGeometry:cd, OctahedronGeometry:ee, OctahedronBufferGeometry:tc, IcosahedronGeometry:fe, IcosahedronBufferGeometry:dd, DodecahedronGeometry:ge, DodecahedronBufferGeometry:ed, PolyhedronGeometry:ce, PolyhedronBufferGeometry:Ta, TubeGeometry:he, TubeBufferGeometry:uc, TorusKnotGeometry:ie, TorusKnotBufferGeometry:fd, TorusGeometry:je, TorusBufferGeometry:gd, 
  TextGeometry:oe, TextBufferGeometry:id, SphereGeometry:pe, SphereBufferGeometry:gc, RingGeometry:qe, RingBufferGeometry:jd, PlaneGeometry:fb, PlaneBufferGeometry:Ka, LatheGeometry:re, LatheBufferGeometry:kd, ShapeGeometry:xc, ShapeBufferGeometry:yc, ExtrudeGeometry:wc, ExtrudeBufferGeometry:ub, EdgesGeometry:ld, ConeGeometry:se, ConeBufferGeometry:te, CylinderGeometry:zc, CylinderBufferGeometry:Mb, CircleGeometry:ue, CircleBufferGeometry:md, BoxGeometry:hh, BoxBufferGeometry:Nd});
  Ac.prototype = Object.create(H.prototype);
  Ac.prototype.constructor = Ac;
  Ac.prototype.isShadowMaterial = !0;
  Ac.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    return this;
  };
  nd.prototype = Object.create(ja.prototype);
  nd.prototype.constructor = nd;
  nd.prototype.isRawShaderMaterial = !0;
  vb.prototype = Object.create(H.prototype);
  vb.prototype.constructor = vb;
  vb.prototype.isMeshStandardMaterial = !0;
  vb.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.defines = {STANDARD:""};
    this.color.copy(a.color);
    this.roughness = a.roughness;
    this.metalness = a.metalness;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.roughnessMap = a.roughnessMap;
    this.metalnessMap = a.metalnessMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.envMapIntensity = a.envMapIntensity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Bc.prototype = Object.create(vb.prototype);
  Bc.prototype.constructor = Bc;
  Bc.prototype.isMeshPhysicalMaterial = !0;
  Bc.prototype.copy = function(a) {
    vb.prototype.copy.call(this, a);
    this.defines = {STANDARD:"", PHYSICAL:""};
    this.reflectivity = a.reflectivity;
    this.clearcoat = a.clearcoat;
    this.clearcoatRoughness = a.clearcoatRoughness;
    this.sheen = a.sheen ? (this.sheen || new B).copy(a.sheen) : null;
    this.clearcoatNormalMap = a.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(a.clearcoatNormalScale);
    this.transparency = a.transparency;
    return this;
  };
  hb.prototype = Object.create(H.prototype);
  hb.prototype.constructor = hb;
  hb.prototype.isMeshPhongMaterial = !0;
  hb.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.specular.copy(a.specular);
    this.shininess = a.shininess;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Cc.prototype = Object.create(hb.prototype);
  Cc.prototype.constructor = Cc;
  Cc.prototype.isMeshToonMaterial = !0;
  Cc.prototype.copy = function(a) {
    hb.prototype.copy.call(this, a);
    this.gradientMap = a.gradientMap;
    return this;
  };
  Dc.prototype = Object.create(H.prototype);
  Dc.prototype.constructor = Dc;
  Dc.prototype.isMeshNormalMaterial = !0;
  Dc.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Ec.prototype = Object.create(H.prototype);
  Ec.prototype.constructor = Ec;
  Ec.prototype.isMeshLambertMaterial = !0;
  Ec.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Fc.prototype = Object.create(H.prototype);
  Fc.prototype.constructor = Fc;
  Fc.prototype.isMeshMatcapMaterial = !0;
  Fc.prototype.copy = function(a) {
    H.prototype.copy.call(this, a);
    this.defines = {MATCAP:""};
    this.color.copy(a.color);
    this.matcap = a.matcap;
    this.map = a.map;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.alphaMap = a.alphaMap;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Gc.prototype = Object.create(ta.prototype);
  Gc.prototype.constructor = Gc;
  Gc.prototype.isLineDashedMaterial = !0;
  Gc.prototype.copy = function(a) {
    ta.prototype.copy.call(this, a);
    this.scale = a.scale;
    this.dashSize = a.dashSize;
    this.gapSize = a.gapSize;
    return this;
  };
  var Wj = Object.freeze({__proto__:null, ShadowMaterial:Ac, SpriteMaterial:fc, RawShaderMaterial:nd, ShaderMaterial:ja, PointsMaterial:gb, MeshPhysicalMaterial:Bc, MeshStandardMaterial:vb, MeshPhongMaterial:hb, MeshToonMaterial:Cc, MeshNormalMaterial:Dc, MeshLambertMaterial:Ec, MeshDepthMaterial:dc, MeshDistanceMaterial:ec, MeshBasicMaterial:Q, MeshMatcapMaterial:Fc, LineDashedMaterial:Gc, LineBasicMaterial:ta, Material:H}), ya = {arraySlice:function(a, d, b) {
    return ya.isTypedArray(a) ? new a.constructor(a.subarray(d, void 0 !== b ? b : a.length)) : a.slice(d, b);
  }, convertArray:function(a, d, b) {
    return !a || !b && a.constructor === d ? a : "number" === typeof d.BYTES_PER_ELEMENT ? new d(a) : Array.prototype.slice.call(a);
  }, isTypedArray:function(a) {
    return ArrayBuffer.isView(a) && !(a instanceof DataView);
  }, getKeyframeOrder:function(a) {
    for (var d = a.length, g = Array(d), b = 0; b !== d; ++b) {
      g[b] = b;
    }
    g.sort(function(d, g) {
      return a[d] - a[g];
    });
    return g;
  }, sortedArray:function(a, d, b) {
    for (var g = a.length, c = new a.constructor(g), e = 0, l = 0; l !== g; ++e) {
      for (var f = b[e] * d, h = 0; h !== d; ++h) {
        c[l++] = a[f + h];
      }
    }
    return c;
  }, flattenJSON:function(a, d, b, c) {
    for (var g = 1, e = a[0]; void 0 !== e && void 0 === e[c];) {
      e = a[g++];
    }
    if (void 0 !== e) {
      var l = e[c];
      if (void 0 !== l) {
        if (Array.isArray(l)) {
          do {
            l = e[c], void 0 !== l && (d.push(e.time), b.push.apply(b, l)), e = a[g++];
          } while (void 0 !== e);
        } else {
          if (void 0 !== l.toArray) {
            do {
              l = e[c], void 0 !== l && (d.push(e.time), l.toArray(b, b.length)), e = a[g++];
            } while (void 0 !== e);
          } else {
            do {
              l = e[c], void 0 !== l && (d.push(e.time), b.push(l)), e = a[g++];
            } while (void 0 !== e);
          }
        }
      }
    }
  }, subclip:function(a, d, b, c, e) {
    e = e || 30;
    a = a.clone();
    a.name = d;
    var g = [];
    for (d = 0; d < a.tracks.length; ++d) {
      for (var l = a.tracks[d], f = l.getValueSize(), h = [], p = [], m = 0; m < l.times.length; ++m) {
        var n = l.times[m] * e;
        if (!(n < b || n >= c)) {
          for (h.push(l.times[m]), n = 0; n < f; ++n) {
            p.push(l.values[m * f + n]);
          }
        }
      }
      0 !== h.length && (l.times = ya.convertArray(h, l.times.constructor), l.values = ya.convertArray(p, l.values.constructor), g.push(l));
    }
    a.tracks = g;
    b = Infinity;
    for (d = 0; d < a.tracks.length; ++d) {
      b > a.tracks[d].times[0] && (b = a.tracks[d].times[0]);
    }
    for (d = 0; d < a.tracks.length; ++d) {
      a.tracks[d].shift(-1 * b);
    }
    a.resetDuration();
    return a;
  }};
  Object.assign($a.prototype, {evaluate:function(a) {
    var d = this.parameterPositions, g = this._cachedIndex, b = d[g], c = d[g - 1];
    a: {
      b: {
        c: {
          d: {
            if (!(a < b)) {
              for (var e = g + 2;;) {
                if (void 0 === b) {
                  if (a < c) {
                    break d;
                  }
                  this._cachedIndex = g = d.length;
                  return this.afterEnd_(g - 1, a, c);
                }
                if (g === e) {
                  break;
                }
                c = b;
                b = d[++g];
                if (a < b) {
                  break b;
                }
              }
              b = d.length;
              break c;
            }
          }
          if (a >= c) {
            break a;
          } else {
            e = d[1];
            a < e && (g = 2, c = e);
            for (e = g - 2;;) {
              if (void 0 === c) {
                return this._cachedIndex = 0, this.beforeStart_(0, a, b);
              }
              if (g === e) {
                break;
              }
              b = c;
              c = d[--g - 1];
              if (a >= c) {
                break b;
              }
            }
            b = g;
            g = 0;
          }
        }
        for (; g < b;) {
          c = g + b >>> 1, a < d[c] ? b = c : g = c + 1;
        }
        b = d[g];
        c = d[g - 1];
        if (void 0 === c) {
          return this._cachedIndex = 0, this.beforeStart_(0, a, b);
        }
        if (void 0 === b) {
          return this._cachedIndex = g = d.length, this.afterEnd_(g - 1, c, a);
        }
      }
      this._cachedIndex = g;
      this.intervalChanged_(g, c, b);
    }
    return this.interpolate_(g, c, a, b);
  }, settings:null, DefaultSettings_:{}, getSettings_:function() {
    return this.settings || this.DefaultSettings_;
  }, copySampleValue_:function(a) {
    var d = this.resultBuffer, g = this.sampleValues, b = this.valueSize;
    a *= b;
    for (var c = 0; c !== b; ++c) {
      d[c] = g[a + c];
    }
    return d;
  }, interpolate_:function() {
    throw Error("call to abstract method");
  }, intervalChanged_:function() {
  }});
  Object.assign($a.prototype, {beforeStart_:$a.prototype.copySampleValue_, afterEnd_:$a.prototype.copySampleValue_});
  ef.prototype = Object.assign(Object.create($a.prototype), {constructor:ef, DefaultSettings_:{endingStart:2400, endingEnd:2400}, intervalChanged_:function(a, d, b) {
    var g = this.parameterPositions, c = a - 2, e = a + 1, l = g[c], f = g[e];
    if (void 0 === l) {
      switch(this.getSettings_().endingStart) {
        case 2401:
          c = a;
          l = 2 * d - b;
          break;
        case 2402:
          c = g.length - 2;
          l = d + g[c] - g[c + 1];
          break;
        default:
          c = a, l = b;
      }
    }
    if (void 0 === f) {
      switch(this.getSettings_().endingEnd) {
        case 2401:
          e = a;
          f = 2 * b - d;
          break;
        case 2402:
          e = 1;
          f = b + g[1] - g[0];
          break;
        default:
          e = a - 1, f = d;
      }
    }
    a = .5 * (b - d);
    g = this.valueSize;
    this._weightPrev = a / (d - l);
    this._weightNext = a / (f - b);
    this._offsetPrev = c * g;
    this._offsetNext = e * g;
  }, interpolate_:function(a, d, b, c) {
    var g = this.resultBuffer, e = this.sampleValues, l = this.valueSize;
    a *= l;
    var f = a - l, h = this._offsetPrev, p = this._offsetNext, m = this._weightPrev, n = this._weightNext, k = (b - d) / (c - d);
    b = k * k;
    c = b * k;
    d = -m * c + 2 * m * b - m * k;
    m = (1 + m) * c + (-1.5 - 2 * m) * b + (-.5 + m) * k + 1;
    k = (-1 - n) * c + (1.5 + n) * b + .5 * k;
    n = n * c - n * b;
    for (b = 0; b !== l; ++b) {
      g[b] = d * e[h + b] + m * e[f + b] + k * e[a + b] + n * e[p + b];
    }
    return g;
  }});
  ve.prototype = Object.assign(Object.create($a.prototype), {constructor:ve, interpolate_:function(a, d, b, c) {
    var g = this.resultBuffer, e = this.sampleValues, l = this.valueSize;
    a *= l;
    var f = a - l;
    d = (b - d) / (c - d);
    b = 1 - d;
    for (c = 0; c !== l; ++c) {
      g[c] = e[f + c] * b + e[a + c] * d;
    }
    return g;
  }});
  ff.prototype = Object.assign(Object.create($a.prototype), {constructor:ff, interpolate_:function(a) {
    return this.copySampleValue_(a - 1);
  }});
  Object.assign(Ia, {toJSON:function(a) {
    var d = a.constructor;
    if (void 0 !== d.toJSON) {
      d = d.toJSON(a);
    } else {
      d = {name:a.name, times:ya.convertArray(a.times, Array), values:ya.convertArray(a.values, Array)};
      var g = a.getInterpolation();
      g !== a.DefaultInterpolation && (d.interpolation = g);
    }
    d.type = a.ValueTypeName;
    return d;
  }});
  Object.assign(Ia.prototype, {constructor:Ia, TimeBufferType:Float32Array, ValueBufferType:Float32Array, DefaultInterpolation:2301, InterpolantFactoryMethodDiscrete:function(a) {
    return new ff(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodLinear:function(a) {
    return new ve(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:function(a) {
    return new ef(this.times, this.values, this.getValueSize(), a);
  }, setInterpolation:function(a) {
    switch(a) {
      case 2300:
        var d = this.InterpolantFactoryMethodDiscrete;
        break;
      case 2301:
        d = this.InterpolantFactoryMethodLinear;
        break;
      case 2302:
        d = this.InterpolantFactoryMethodSmooth;
    }
    if (void 0 === d) {
      d = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (void 0 === this.createInterpolant) {
        if (a !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw Error(d);
        }
      }
      console.warn("THREE.KeyframeTrack:", d);
      return this;
    }
    this.createInterpolant = d;
    return this;
  }, getInterpolation:function() {
    switch(this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return 2300;
      case this.InterpolantFactoryMethodLinear:
        return 2301;
      case this.InterpolantFactoryMethodSmooth:
        return 2302;
    }
  }, getValueSize:function() {
    return this.values.length / this.times.length;
  }, shift:function(a) {
    if (0 !== a) {
      for (var d = this.times, g = 0, b = d.length; g !== b; ++g) {
        d[g] += a;
      }
    }
    return this;
  }, scale:function(a) {
    if (1 !== a) {
      for (var d = this.times, g = 0, b = d.length; g !== b; ++g) {
        d[g] *= a;
      }
    }
    return this;
  }, trim:function(a, d) {
    for (var g = this.times, b = g.length, c = 0, e = b - 1; c !== b && g[c] < a;) {
      ++c;
    }
    for (; -1 !== e && g[e] > d;) {
      --e;
    }
    ++e;
    if (0 !== c || e !== b) {
      c >= e && (e = Math.max(e, 1), c = e - 1), a = this.getValueSize(), this.times = ya.arraySlice(g, c, e), this.values = ya.arraySlice(this.values, c * a, e * a);
    }
    return this;
  }, validate:function() {
    var a = !0, d = this.getValueSize();
    0 !== d - Math.floor(d) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);
    var b = this.times;
    d = this.values;
    var c = b.length;
    0 === c && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);
    for (var e = null, l = 0; l !== c; l++) {
      var f = b[l];
      if ("number" === typeof f && isNaN(f)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, l, f);
        a = !1;
        break;
      }
      if (null !== e && e > f) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, l, f, e);
        a = !1;
        break;
      }
      e = f;
    }
    if (void 0 !== d && ya.isTypedArray(d)) {
      for (l = 0, b = d.length; l !== b; ++l) {
        if (c = d[l], isNaN(c)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, l, c);
          a = !1;
          break;
        }
      }
    }
    return a;
  }, optimize:function() {
    for (var a = this.times, d = this.values, b = this.getValueSize(), c = 2302 === this.getInterpolation(), e = 1, l = a.length - 1, f = 1; f < l; ++f) {
      var h = !1, p = a[f];
      if (p !== a[f + 1] && (1 !== f || p !== p[0])) {
        if (c) {
          h = !0;
        } else {
          var m = f * b, n = m - b, k = m + b;
          for (p = 0; p !== b; ++p) {
            var q = d[m + p];
            if (q !== d[n + p] || q !== d[k + p]) {
              h = !0;
              break;
            }
          }
        }
      }
      if (h) {
        if (f !== e) {
          for (a[e] = a[f], h = f * b, m = e * b, p = 0; p !== b; ++p) {
            d[m + p] = d[h + p];
          }
        }
        ++e;
      }
    }
    if (0 < l) {
      a[e] = a[l];
      h = l * b;
      m = e * b;
      for (p = 0; p !== b; ++p) {
        d[m + p] = d[h + p];
      }
      ++e;
    }
    e !== a.length && (this.times = ya.arraySlice(a, 0, e), this.values = ya.arraySlice(d, 0, e * b));
    return this;
  }, clone:function() {
    var a = ya.arraySlice(this.times, 0), d = ya.arraySlice(this.values, 0);
    a = new this.constructor(this.name, a, d);
    a.createInterpolant = this.createInterpolant;
    return a;
  }});
  gf.prototype = Object.assign(Object.create(Ia.prototype), {constructor:gf, ValueTypeName:"bool", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  hf.prototype = Object.assign(Object.create(Ia.prototype), {constructor:hf, ValueTypeName:"color"});
  od.prototype = Object.assign(Object.create(Ia.prototype), {constructor:od, ValueTypeName:"number"});
  jf.prototype = Object.assign(Object.create($a.prototype), {constructor:jf, interpolate_:function(a, d, c, e) {
    var g = this.resultBuffer, l = this.sampleValues, f = this.valueSize;
    a *= f;
    d = (c - d) / (e - d);
    for (c = a + f; a !== c; a += 4) {
      b.slerpFlat(g, 0, l, a - f, l, a, d);
    }
    return g;
  }});
  we.prototype = Object.assign(Object.create(Ia.prototype), {constructor:we, ValueTypeName:"quaternion", DefaultInterpolation:2301, InterpolantFactoryMethodLinear:function(a) {
    return new jf(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:void 0});
  kf.prototype = Object.assign(Object.create(Ia.prototype), {constructor:kf, ValueTypeName:"string", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  pd.prototype = Object.assign(Object.create(Ia.prototype), {constructor:pd, ValueTypeName:"vector"});
  Object.assign(db, {parse:function(a) {
    for (var d = [], g = a.tracks, b = 1 / (a.fps || 1), c = 0, e = g.length; c !== e; ++c) {
      d.push(Jj(g[c]).scale(b));
    }
    return new db(a.name, a.duration, d);
  }, toJSON:function(a) {
    var d = [], g = a.tracks;
    a = {name:a.name, duration:a.duration, tracks:d, uuid:a.uuid};
    for (var b = 0, c = g.length; b !== c; ++b) {
      d.push(Ia.toJSON(g[b]));
    }
    return a;
  }, CreateFromMorphTargetSequence:function(a, d, b, c) {
    for (var g = d.length, e = [], l = 0; l < g; l++) {
      var f = [], h = [];
      f.push((l + g - 1) % g, l, (l + 1) % g);
      h.push(0, 1, 0);
      var p = ya.getKeyframeOrder(f);
      f = ya.sortedArray(f, 1, p);
      h = ya.sortedArray(h, 1, p);
      c || 0 !== f[0] || (f.push(g), h.push(h[0]));
      e.push((new od(".morphTargetInfluences[" + d[l].name + "]", f, h)).scale(1 / b));
    }
    return new db(a, -1, e);
  }, findByName:function(a, d) {
    var g = a;
    Array.isArray(a) || (g = a.geometry && a.geometry.animations || a.animations);
    for (a = 0; a < g.length; a++) {
      if (g[a].name === d) {
        return g[a];
      }
    }
    return null;
  }, CreateClipsFromMorphTargetSequences:function(a, d, b) {
    for (var g = {}, c = /^([\w-]*?)([\d]+)$/, e = 0, l = a.length; e < l; e++) {
      var f = a[e], h = f.name.match(c);
      if (h && 1 < h.length) {
        var p = h[1];
        (h = g[p]) || (g[p] = h = []);
        h.push(f);
      }
    }
    a = [];
    for (p in g) {
      a.push(db.CreateFromMorphTargetSequence(p, g[p], d, b));
    }
    return a;
  }, parseAnimation:function(a, d) {
    if (!a) {
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    }
    var g = function(a, d, g, b, c) {
      if (0 !== g.length) {
        var e = [], l = [];
        ya.flattenJSON(g, e, l, b);
        0 !== e.length && c.push(new a(d, e, l));
      }
    }, b = [], c = a.name || "default", e = a.length || -1, l = a.fps || 30;
    a = a.hierarchy || [];
    for (var f = 0; f < a.length; f++) {
      var h = a[f].keys;
      if (h && 0 !== h.length) {
        if (h[0].morphTargets) {
          e = {};
          for (var p = 0; p < h.length; p++) {
            if (h[p].morphTargets) {
              for (var m = 0; m < h[p].morphTargets.length; m++) {
                e[h[p].morphTargets[m]] = -1;
              }
            }
          }
          for (var n in e) {
            var k = [], q = [];
            for (m = 0; m !== h[p].morphTargets.length; ++m) {
              var u = h[p];
              k.push(u.time);
              q.push(u.morphTarget === n ? 1 : 0);
            }
            b.push(new od(".morphTargetInfluence[" + n + "]", k, q));
          }
          e = e.length * (l || 1);
        } else {
          p = ".bones[" + d[f].name + "]", g(pd, p + ".position", h, "pos", b), g(we, p + ".quaternion", h, "rot", b), g(pd, p + ".scale", h, "scl", b);
        }
      }
    }
    return 0 === b.length ? null : new db(c, e, b);
  }});
  Object.assign(db.prototype, {resetDuration:function() {
    for (var a = 0, d = 0, b = this.tracks.length; d !== b; ++d) {
      var c = this.tracks[d];
      a = Math.max(a, c.times[c.times.length - 1]);
    }
    this.duration = a;
    return this;
  }, trim:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].trim(0, this.duration);
    }
    return this;
  }, validate:function() {
    for (var a = !0, d = 0; d < this.tracks.length; d++) {
      a = a && this.tracks[d].validate();
    }
    return a;
  }, optimize:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].optimize();
    }
    return this;
  }, clone:function() {
    for (var a = [], d = 0; d < this.tracks.length; d++) {
      a.push(this.tracks[d].clone());
    }
    return new db(this.name, this.duration, a);
  }});
  var Kc = {enabled:!1, files:{}, add:function(a, d) {
    !1 !== this.enabled && (this.files[a] = d);
  }, get:function(a) {
    if (!1 !== this.enabled) {
      return this.files[a];
    }
  }, remove:function(a) {
    delete this.files[a];
  }, clear:function() {
    this.files = {};
  }}, $h = new yg;
  Object.assign(sa.prototype, {load:function() {
  }, parse:function() {
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }, setResourcePath:function(a) {
    this.resourcePath = a;
    return this;
  }});
  var pb = {};
  eb.prototype = Object.assign(Object.create(sa.prototype), {constructor:eb, load:function(a, d, b, c) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var g = this, e = Kc.get(a);
    if (void 0 !== e) {
      return g.manager.itemStart(a), setTimeout(function() {
        d && d(e);
        g.manager.itemEnd(a);
      }, 0), e;
    }
    if (void 0 !== pb[a]) {
      pb[a].push({onLoad:d, onProgress:b, onError:c});
    } else {
      var l = a.match(/^data:(.*?)(;base64)?,(.*)$/);
      if (l) {
        b = l[1];
        var f = !!l[2];
        l = l[3];
        l = decodeURIComponent(l);
        f && (l = atob(l));
        try {
          var h = (this.responseType || "").toLowerCase();
          switch(h) {
            case "arraybuffer":
            case "blob":
              var p = new Uint8Array(l.length);
              for (f = 0; f < l.length; f++) {
                p[f] = l.charCodeAt(f);
              }
              var m = "blob" === h ? new Blob([p.buffer], {type:b}) : p.buffer;
              break;
            case "document":
              m = (new DOMParser).parseFromString(l, b);
              break;
            case "json":
              m = JSON.parse(l);
              break;
            default:
              m = l;
          }
          setTimeout(function() {
            d && d(m);
            g.manager.itemEnd(a);
          }, 0);
        } catch (Xi) {
          setTimeout(function() {
            c && c(Xi);
            g.manager.itemError(a);
            g.manager.itemEnd(a);
          }, 0);
        }
      } else {
        pb[a] = [];
        pb[a].push({onLoad:d, onProgress:b, onError:c});
        var n = new XMLHttpRequest;
        n.open("GET", a, !0);
        n.addEventListener("load", function(d) {
          var b = this.response, c = pb[a];
          delete pb[a];
          if (200 === this.status || 0 === this.status) {
            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
            Kc.add(a, b);
            for (var e = 0, l = c.length; e < l; e++) {
              var f = c[e];
              if (f.onLoad) {
                f.onLoad(b);
              }
            }
          } else {
            e = 0;
            for (l = c.length; e < l; e++) {
              if (f = c[e], f.onError) {
                f.onError(d);
              }
            }
            g.manager.itemError(a);
          }
          g.manager.itemEnd(a);
        }, !1);
        n.addEventListener("progress", function(d) {
          for (var g = pb[a], b = 0, c = g.length; b < c; b++) {
            var e = g[b];
            if (e.onProgress) {
              e.onProgress(d);
            }
          }
        }, !1);
        n.addEventListener("error", function(d) {
          var b = pb[a];
          delete pb[a];
          for (var c = 0, e = b.length; c < e; c++) {
            var l = b[c];
            if (l.onError) {
              l.onError(d);
            }
          }
          g.manager.itemError(a);
          g.manager.itemEnd(a);
        }, !1);
        n.addEventListener("abort", function(d) {
          var b = pb[a];
          delete pb[a];
          for (var c = 0, e = b.length; c < e; c++) {
            var l = b[c];
            if (l.onError) {
              l.onError(d);
            }
          }
          g.manager.itemError(a);
          g.manager.itemEnd(a);
        }, !1);
        void 0 !== this.responseType && (n.responseType = this.responseType);
        void 0 !== this.withCredentials && (n.withCredentials = this.withCredentials);
        n.overrideMimeType && n.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
        for (f in this.requestHeader) {
          n.setRequestHeader(f, this.requestHeader[f]);
        }
        n.send(null);
      }
      g.manager.itemStart(a);
      return n;
    }
  }, setResponseType:function(a) {
    this.responseType = a;
    return this;
  }, setWithCredentials:function(a) {
    this.withCredentials = a;
    return this;
  }, setMimeType:function(a) {
    this.mimeType = a;
    return this;
  }, setRequestHeader:function(a) {
    this.requestHeader = a;
    return this;
  }});
  zg.prototype = Object.assign(Object.create(sa.prototype), {constructor:zg, load:function(a, d, b, c) {
    var g = this, e = new eb(g.manager);
    e.setPath(g.path);
    e.load(a, function(a) {
      d(g.parse(JSON.parse(a)));
    }, b, c);
  }, parse:function(a) {
    for (var d = [], g = 0; g < a.length; g++) {
      var b = db.parse(a[g]);
      d.push(b);
    }
    return d;
  }});
  Ag.prototype = Object.assign(Object.create(sa.prototype), {constructor:Ag, load:function(a, d, b, c) {
    function g(g) {
      h.load(a[g], function(a) {
        a = e.parse(a, !0);
        l[g] = {width:a.width, height:a.height, format:a.format, mipmaps:a.mipmaps};
        p += 1;
        6 === p && (1 === a.mipmapCount && (f.minFilter = 1006), f.format = a.format, f.needsUpdate = !0, d && d(f));
      }, b, c);
    }
    var e = this, l = [], f = new $c;
    f.image = l;
    var h = new eb(this.manager);
    h.setPath(this.path);
    h.setResponseType("arraybuffer");
    if (Array.isArray(a)) {
      for (var p = 0, m = 0, n = a.length; m < n; ++m) {
        g(m);
      }
    } else {
      h.load(a, function(a) {
        a = e.parse(a, !0);
        if (a.isCubemap) {
          for (var g = a.mipmaps.length / a.mipmapCount, b = 0; b < g; b++) {
            l[b] = {mipmaps:[]};
            for (var c = 0; c < a.mipmapCount; c++) {
              l[b].mipmaps.push(a.mipmaps[b * a.mipmapCount + c]), l[b].format = a.format, l[b].width = a.width, l[b].height = a.height;
            }
          }
        } else {
          f.image.width = a.width, f.image.height = a.height, f.mipmaps = a.mipmaps;
        }
        1 === a.mipmapCount && (f.minFilter = 1006);
        f.format = a.format;
        f.needsUpdate = !0;
        d && d(f);
      }, b, c);
    }
    return f;
  }});
  lf.prototype = Object.assign(Object.create(sa.prototype), {constructor:lf, load:function(a, d, b, c) {
    var g = this, e = new Da, l = new eb(this.manager);
    l.setResponseType("arraybuffer");
    l.setPath(this.path);
    l.load(a, function(a) {
      if (a = g.parse(a)) {
        void 0 !== a.image ? e.image = a.image : void 0 !== a.data && (e.image.width = a.width, e.image.height = a.height, e.image.data = a.data), e.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, e.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, e.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, e.minFilter = void 0 !== a.minFilter ? a.minFilter : 1006, e.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (e.format = a.format), void 0 !== a.type && (e.type = a.type), 
        void 0 !== a.mipmaps && (e.mipmaps = a.mipmaps, e.minFilter = 1008), 1 === a.mipmapCount && (e.minFilter = 1006), e.needsUpdate = !0, d && d(e, a);
      }
    }, b, c);
    return e;
  }});
  qd.prototype = Object.assign(Object.create(sa.prototype), {constructor:qd, load:function(a, d, b, c) {
    function g() {
      h.removeEventListener("load", g, !1);
      h.removeEventListener("error", e, !1);
      Kc.add(a, this);
      d && d(this);
      l.manager.itemEnd(a);
    }
    function e(d) {
      h.removeEventListener("load", g, !1);
      h.removeEventListener("error", e, !1);
      c && c(d);
      l.manager.itemError(a);
      l.manager.itemEnd(a);
    }
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var l = this, f = Kc.get(a);
    if (void 0 !== f) {
      return l.manager.itemStart(a), setTimeout(function() {
        d && d(f);
        l.manager.itemEnd(a);
      }, 0), f;
    }
    var h = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    h.addEventListener("load", g, !1);
    h.addEventListener("error", e, !1);
    "data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (h.crossOrigin = this.crossOrigin);
    l.manager.itemStart(a);
    h.src = a;
    return h;
  }});
  mf.prototype = Object.assign(Object.create(sa.prototype), {constructor:mf, load:function(a, d, b, c) {
    function g(g) {
      l.load(a[g], function(a) {
        e.images[g] = a;
        f++;
        6 === f && (e.needsUpdate = !0, d && d(e));
      }, void 0, c);
    }
    var e = new Sa, l = new qd(this.manager);
    l.setCrossOrigin(this.crossOrigin);
    l.setPath(this.path);
    var f = 0;
    for (b = 0; b < a.length; ++b) {
      g(b);
    }
    return e;
  }});
  nf.prototype = Object.assign(Object.create(sa.prototype), {constructor:nf, load:function(a, d, b, c) {
    var g = new h, e = new qd(this.manager);
    e.setCrossOrigin(this.crossOrigin);
    e.setPath(this.path);
    e.load(a, function(b) {
      g.image = b;
      b = 0 < a.search(/\.jpe?g($|\?)/i) || 0 === a.search(/^data:image\/jpeg/);
      g.format = b ? 1022 : 1023;
      g.needsUpdate = !0;
      void 0 !== d && d(g);
    }, b, c);
    return g;
  }});
  Object.assign(ca.prototype, {getPoint:function() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }, getPointAt:function(a, d) {
    a = this.getUtoTmapping(a);
    return this.getPoint(a, d);
  }, getPoints:function(a) {
    void 0 === a && (a = 5);
    for (var d = [], g = 0; g <= a; g++) {
      d.push(this.getPoint(g / a));
    }
    return d;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 5);
    for (var d = [], g = 0; g <= a; g++) {
      d.push(this.getPointAt(g / a));
    }
    return d;
  }, getLength:function() {
    var a = this.getLengths();
    return a[a.length - 1];
  }, getLengths:function(a) {
    void 0 === a && (a = this.arcLengthDivisions);
    if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = !1;
    var d = [], g = this.getPoint(0), b, c = 0;
    d.push(0);
    for (b = 1; b <= a; b++) {
      var e = this.getPoint(b / a);
      c += e.distanceTo(g);
      d.push(c);
      g = e;
    }
    return this.cacheArcLengths = d;
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.getLengths();
  }, getUtoTmapping:function(a, d) {
    var g = this.getLengths(), b = g.length;
    d = d ? d : a * g[b - 1];
    for (var c = 0, e = b - 1, l; c <= e;) {
      if (a = Math.floor(c + (e - c) / 2), l = g[a] - d, 0 > l) {
        c = a + 1;
      } else {
        if (0 < l) {
          e = a - 1;
        } else {
          e = a;
          break;
        }
      }
    }
    a = e;
    if (g[a] === d) {
      return a / (b - 1);
    }
    c = g[a];
    return (a + (d - c) / (g[a + 1] - c)) / (b - 1);
  }, getTangent:function(a) {
    var d = a - 1E-4;
    a += 1E-4;
    0 > d && (d = 0);
    1 < a && (a = 1);
    d = this.getPoint(d);
    return this.getPoint(a).clone().sub(d).normalize();
  }, getTangentAt:function(a) {
    a = this.getUtoTmapping(a);
    return this.getTangent(a);
  }, computeFrenetFrames:function(a, d) {
    var g = new e, b = [], c = [], l = [], f = new e, h = new m, p;
    for (p = 0; p <= a; p++) {
      var n = p / a;
      b[p] = this.getTangentAt(n);
      b[p].normalize();
    }
    c[0] = new e;
    l[0] = new e;
    p = Number.MAX_VALUE;
    n = Math.abs(b[0].x);
    var k = Math.abs(b[0].y), q = Math.abs(b[0].z);
    n <= p && (p = n, g.set(1, 0, 0));
    k <= p && (p = k, g.set(0, 1, 0));
    q <= p && g.set(0, 0, 1);
    f.crossVectors(b[0], g).normalize();
    c[0].crossVectors(b[0], f);
    l[0].crossVectors(b[0], c[0]);
    for (p = 1; p <= a; p++) {
      c[p] = c[p - 1].clone(), l[p] = l[p - 1].clone(), f.crossVectors(b[p - 1], b[p]), f.length() > Number.EPSILON && (f.normalize(), g = Math.acos(ka.clamp(b[p - 1].dot(b[p]), -1, 1)), c[p].applyMatrix4(h.makeRotationAxis(f, g))), l[p].crossVectors(b[p], c[p]);
    }
    if (!0 === d) {
      for (g = Math.acos(ka.clamp(c[0].dot(c[a]), -1, 1)), g /= a, 0 < b[0].dot(f.crossVectors(c[0], c[a])) && (g = -g), p = 1; p <= a; p++) {
        c[p].applyMatrix4(h.makeRotationAxis(b[p], g * p)), l[p].crossVectors(b[p], c[p]);
      }
    }
    return {tangents:b, normals:c, binormals:l};
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"Curve", generator:"Curve.toJSON"}};
    a.arcLengthDivisions = this.arcLengthDivisions;
    a.type = this.type;
    return a;
  }, fromJSON:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }});
  ab.prototype = Object.create(ca.prototype);
  ab.prototype.constructor = ab;
  ab.prototype.isEllipseCurve = !0;
  ab.prototype.getPoint = function(a, d) {
    d = d || new k;
    for (var g = 2 * Math.PI, b = this.aEndAngle - this.aStartAngle, c = Math.abs(b) < Number.EPSILON; 0 > b;) {
      b += g;
    }
    for (; b > g;) {
      b -= g;
    }
    b < Number.EPSILON && (b = c ? 0 : g);
    !0 !== this.aClockwise || c || (b = b === g ? -g : b - g);
    g = this.aStartAngle + a * b;
    a = this.aX + this.xRadius * Math.cos(g);
    var e = this.aY + this.yRadius * Math.sin(g);
    0 !== this.aRotation && (g = Math.cos(this.aRotation), b = Math.sin(this.aRotation), c = a - this.aX, e -= this.aY, a = c * g - e * b + this.aX, e = c * b + e * g + this.aY);
    return d.set(a, e);
  };
  ab.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  ab.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.aX = this.aX;
    a.aY = this.aY;
    a.xRadius = this.xRadius;
    a.yRadius = this.yRadius;
    a.aStartAngle = this.aStartAngle;
    a.aEndAngle = this.aEndAngle;
    a.aClockwise = this.aClockwise;
    a.aRotation = this.aRotation;
    return a;
  };
  ab.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  rd.prototype = Object.create(ab.prototype);
  rd.prototype.constructor = rd;
  rd.prototype.isArcCurve = !0;
  var Yf = new e, jh = new Bg, kh = new Bg, lh = new Bg;
  Na.prototype = Object.create(ca.prototype);
  Na.prototype.constructor = Na;
  Na.prototype.isCatmullRomCurve3 = !0;
  Na.prototype.getPoint = function(a, d) {
    d = d || new e;
    var g = this.points, b = g.length;
    a *= b - (this.closed ? 0 : 1);
    var c = Math.floor(a);
    a -= c;
    this.closed ? c += 0 < c ? 0 : (Math.floor(Math.abs(c) / b) + 1) * b : 0 === a && c === b - 1 && (c = b - 2, a = 1);
    if (this.closed || 0 < c) {
      var l = g[(c - 1) % b];
    } else {
      Yf.subVectors(g[0], g[1]).add(g[0]), l = Yf;
    }
    var f = g[c % b];
    var h = g[(c + 1) % b];
    this.closed || c + 2 < b ? g = g[(c + 2) % b] : (Yf.subVectors(g[b - 1], g[b - 2]).add(g[b - 1]), g = Yf);
    if ("centripetal" === this.curveType || "chordal" === this.curveType) {
      var p = "chordal" === this.curveType ? .5 : .25;
      b = Math.pow(l.distanceToSquared(f), p);
      c = Math.pow(f.distanceToSquared(h), p);
      p = Math.pow(h.distanceToSquared(g), p);
      1E-4 > c && (c = 1);
      1E-4 > b && (b = c);
      1E-4 > p && (p = c);
      jh.initNonuniformCatmullRom(l.x, f.x, h.x, g.x, b, c, p);
      kh.initNonuniformCatmullRom(l.y, f.y, h.y, g.y, b, c, p);
      lh.initNonuniformCatmullRom(l.z, f.z, h.z, g.z, b, c, p);
    } else {
      "catmullrom" === this.curveType && (jh.initCatmullRom(l.x, f.x, h.x, g.x, this.tension), kh.initCatmullRom(l.y, f.y, h.y, g.y, this.tension), lh.initCatmullRom(l.z, f.z, h.z, g.z, this.tension));
    }
    d.set(jh.calc(a), kh.calc(a), lh.calc(a));
    return d;
  };
  Na.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.points = [];
    for (var d = 0, g = a.points.length; d < g; d++) {
      this.points.push(a.points[d].clone());
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  Na.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.points = [];
    for (var d = 0, b = this.points.length; d < b; d++) {
      a.points.push(this.points[d].toArray());
    }
    a.closed = this.closed;
    a.curveType = this.curveType;
    a.tension = this.tension;
    return a;
  };
  Na.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var d = 0, g = a.points.length; d < g; d++) {
      var b = a.points[d];
      this.points.push((new e).fromArray(b));
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  ib.prototype = Object.create(ca.prototype);
  ib.prototype.constructor = ib;
  ib.prototype.isCubicBezierCurve = !0;
  ib.prototype.getPoint = function(a, d) {
    d = d || new k;
    var g = this.v0, b = this.v1, c = this.v2, e = this.v3;
    d.set(ye(a, g.x, b.x, c.x, e.x), ye(a, g.y, b.y, c.y, e.y));
    return d;
  };
  ib.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  ib.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  ib.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  wb.prototype = Object.create(ca.prototype);
  wb.prototype.constructor = wb;
  wb.prototype.isCubicBezierCurve3 = !0;
  wb.prototype.getPoint = function(a, d) {
    d = d || new e;
    var g = this.v0, b = this.v1, c = this.v2, l = this.v3;
    d.set(ye(a, g.x, b.x, c.x, l.x), ye(a, g.y, b.y, c.y, l.y), ye(a, g.z, b.z, c.z, l.z));
    return d;
  };
  wb.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  wb.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  wb.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  Ua.prototype = Object.create(ca.prototype);
  Ua.prototype.constructor = Ua;
  Ua.prototype.isLineCurve = !0;
  Ua.prototype.getPoint = function(a, d) {
    d = d || new k;
    1 === a ? d.copy(this.v2) : (d.copy(this.v2).sub(this.v1), d.multiplyScalar(a).add(this.v1));
    return d;
  };
  Ua.prototype.getPointAt = function(a, d) {
    return this.getPoint(a, d);
  };
  Ua.prototype.getTangent = function() {
    return this.v2.clone().sub(this.v1).normalize();
  };
  Ua.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  Ua.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  Ua.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  jb.prototype = Object.create(ca.prototype);
  jb.prototype.constructor = jb;
  jb.prototype.isLineCurve3 = !0;
  jb.prototype.getPoint = function(a, d) {
    d = d || new e;
    1 === a ? d.copy(this.v2) : (d.copy(this.v2).sub(this.v1), d.multiplyScalar(a).add(this.v1));
    return d;
  };
  jb.prototype.getPointAt = function(a, d) {
    return this.getPoint(a, d);
  };
  jb.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  jb.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  jb.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  kb.prototype = Object.create(ca.prototype);
  kb.prototype.constructor = kb;
  kb.prototype.isQuadraticBezierCurve = !0;
  kb.prototype.getPoint = function(a, d) {
    d = d || new k;
    var g = this.v0, b = this.v1, c = this.v2;
    d.set(xe(a, g.x, b.x, c.x), xe(a, g.y, b.y, c.y));
    return d;
  };
  kb.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  kb.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  kb.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  xb.prototype = Object.create(ca.prototype);
  xb.prototype.constructor = xb;
  xb.prototype.isQuadraticBezierCurve3 = !0;
  xb.prototype.getPoint = function(a, d) {
    d = d || new e;
    var g = this.v0, b = this.v1, c = this.v2;
    d.set(xe(a, g.x, b.x, c.x), xe(a, g.y, b.y, c.y), xe(a, g.z, b.z, c.z));
    return d;
  };
  xb.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  xb.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  xb.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  lb.prototype = Object.create(ca.prototype);
  lb.prototype.constructor = lb;
  lb.prototype.isSplineCurve = !0;
  lb.prototype.getPoint = function(a, d) {
    d = d || new k;
    var g = this.points, b = (g.length - 1) * a;
    a = Math.floor(b);
    b -= a;
    var c = g[0 === a ? a : a - 1], e = g[a], l = g[a > g.length - 2 ? g.length - 1 : a + 1];
    g = g[a > g.length - 3 ? g.length - 1 : a + 2];
    d.set(ai(b, c.x, e.x, l.x, g.x), ai(b, c.y, e.y, l.y, g.y));
    return d;
  };
  lb.prototype.copy = function(a) {
    ca.prototype.copy.call(this, a);
    this.points = [];
    for (var d = 0, g = a.points.length; d < g; d++) {
      this.points.push(a.points[d].clone());
    }
    return this;
  };
  lb.prototype.toJSON = function() {
    var a = ca.prototype.toJSON.call(this);
    a.points = [];
    for (var d = 0, b = this.points.length; d < b; d++) {
      a.points.push(this.points[d].toArray());
    }
    return a;
  };
  lb.prototype.fromJSON = function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var d = 0, g = a.points.length; d < g; d++) {
      var b = a.points[d];
      this.points.push((new k).fromArray(b));
    }
    return this;
  };
  var mh = Object.freeze({__proto__:null, ArcCurve:rd, CatmullRomCurve3:Na, CubicBezierCurve:ib, CubicBezierCurve3:wb, EllipseCurve:ab, LineCurve:Ua, LineCurve3:jb, QuadraticBezierCurve:kb, QuadraticBezierCurve3:xb, SplineCurve:lb});
  Nb.prototype = Object.assign(Object.create(ca.prototype), {constructor:Nb, add:function(a) {
    this.curves.push(a);
  }, closePath:function() {
    var a = this.curves[0].getPoint(0), d = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(d) || this.curves.push(new Ua(d, a));
  }, getPoint:function(a) {
    var d = a * this.getLength(), g = this.getCurveLengths();
    for (a = 0; a < g.length;) {
      if (g[a] >= d) {
        return d = g[a] - d, a = this.curves[a], g = a.getLength(), a.getPointAt(0 === g ? 0 : 1 - d / g);
      }
      a++;
    }
    return null;
  }, getLength:function() {
    var a = this.getCurveLengths();
    return a[a.length - 1];
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.cacheLengths = null;
    this.getCurveLengths();
  }, getCurveLengths:function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    for (var a = [], d = 0, b = 0, c = this.curves.length; b < c; b++) {
      d += this.curves[b].getLength(), a.push(d);
    }
    return this.cacheLengths = a;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 40);
    for (var d = [], g = 0; g <= a; g++) {
      d.push(this.getPoint(g / a));
    }
    this.autoClose && d.push(d[0]);
    return d;
  }, getPoints:function(a) {
    a = a || 12;
    for (var d = [], g, b = 0, c = this.curves; b < c.length; b++) {
      var e = c[b];
      e = e.getPoints(e && e.isEllipseCurve ? 2 * a : e && (e.isLineCurve || e.isLineCurve3) ? 1 : e && e.isSplineCurve ? a * e.points.length : a);
      for (var l = 0; l < e.length; l++) {
        var f = e[l];
        g && g.equals(f) || (d.push(f), g = f);
      }
    }
    this.autoClose && 1 < d.length && !d[d.length - 1].equals(d[0]) && d.push(d[0]);
    return d;
  }, copy:function(a) {
    ca.prototype.copy.call(this, a);
    this.curves = [];
    for (var d = 0, g = a.curves.length; d < g; d++) {
      this.curves.push(a.curves[d].clone());
    }
    this.autoClose = a.autoClose;
    return this;
  }, toJSON:function() {
    var a = ca.prototype.toJSON.call(this);
    a.autoClose = this.autoClose;
    a.curves = [];
    for (var d = 0, b = this.curves.length; d < b; d++) {
      a.curves.push(this.curves[d].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    ca.prototype.fromJSON.call(this, a);
    this.autoClose = a.autoClose;
    this.curves = [];
    for (var d = 0, g = a.curves.length; d < g; d++) {
      var b = a.curves[d];
      this.curves.push((new mh[b.type]).fromJSON(b));
    }
    return this;
  }});
  mb.prototype = Object.assign(Object.create(Nb.prototype), {constructor:mb, setFromPoints:function(a) {
    this.moveTo(a[0].x, a[0].y);
    for (var d = 1, g = a.length; d < g; d++) {
      this.lineTo(a[d].x, a[d].y);
    }
    return this;
  }, moveTo:function(a, d) {
    this.currentPoint.set(a, d);
    return this;
  }, lineTo:function(a, d) {
    var g = new Ua(this.currentPoint.clone(), new k(a, d));
    this.curves.push(g);
    this.currentPoint.set(a, d);
    return this;
  }, quadraticCurveTo:function(a, d, b, c) {
    a = new kb(this.currentPoint.clone(), new k(a, d), new k(b, c));
    this.curves.push(a);
    this.currentPoint.set(b, c);
    return this;
  }, bezierCurveTo:function(a, d, b, c, e, l) {
    a = new ib(this.currentPoint.clone(), new k(a, d), new k(b, c), new k(e, l));
    this.curves.push(a);
    this.currentPoint.set(e, l);
    return this;
  }, splineThru:function(a) {
    var d = [this.currentPoint.clone()].concat(a);
    d = new lb(d);
    this.curves.push(d);
    this.currentPoint.copy(a[a.length - 1]);
    return this;
  }, arc:function(a, d, b, c, e, l) {
    this.absarc(a + this.currentPoint.x, d + this.currentPoint.y, b, c, e, l);
    return this;
  }, absarc:function(a, d, b, c, e, l) {
    this.absellipse(a, d, b, b, c, e, l);
    return this;
  }, ellipse:function(a, d, b, c, e, l, f, h) {
    this.absellipse(a + this.currentPoint.x, d + this.currentPoint.y, b, c, e, l, f, h);
    return this;
  }, absellipse:function(a, d, b, c, e, l, f, h) {
    a = new ab(a, d, b, c, e, l, f, h);
    0 < this.curves.length && (d = a.getPoint(0), d.equals(this.currentPoint) || this.lineTo(d.x, d.y));
    this.curves.push(a);
    a = a.getPoint(1);
    this.currentPoint.copy(a);
    return this;
  }, copy:function(a) {
    Nb.prototype.copy.call(this, a);
    this.currentPoint.copy(a.currentPoint);
    return this;
  }, toJSON:function() {
    var a = Nb.prototype.toJSON.call(this);
    a.currentPoint = this.currentPoint.toArray();
    return a;
  }, fromJSON:function(a) {
    Nb.prototype.fromJSON.call(this, a);
    this.currentPoint.fromArray(a.currentPoint);
    return this;
  }});
  hc.prototype = Object.assign(Object.create(mb.prototype), {constructor:hc, getPointsHoles:function(a) {
    for (var d = [], g = 0, b = this.holes.length; g < b; g++) {
      d[g] = this.holes[g].getPoints(a);
    }
    return d;
  }, extractPoints:function(a) {
    return {shape:this.getPoints(a), holes:this.getPointsHoles(a)};
  }, copy:function(a) {
    mb.prototype.copy.call(this, a);
    this.holes = [];
    for (var d = 0, g = a.holes.length; d < g; d++) {
      this.holes.push(a.holes[d].clone());
    }
    return this;
  }, toJSON:function() {
    var a = mb.prototype.toJSON.call(this);
    a.uuid = this.uuid;
    a.holes = [];
    for (var d = 0, b = this.holes.length; d < b; d++) {
      a.holes.push(this.holes[d].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    mb.prototype.fromJSON.call(this, a);
    this.uuid = a.uuid;
    this.holes = [];
    for (var d = 0, g = a.holes.length; d < g; d++) {
      var b = a.holes[d];
      this.holes.push((new mb).fromJSON(b));
    }
    return this;
  }});
  qa.prototype = Object.assign(Object.create(v.prototype), {constructor:qa, isLight:!0, copy:function(a) {
    v.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.intensity = a.intensity;
    return this;
  }, toJSON:function(a) {
    a = v.prototype.toJSON.call(this, a);
    a.object.color = this.color.getHex();
    a.object.intensity = this.intensity;
    void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());
    void 0 !== this.distance && (a.object.distance = this.distance);
    void 0 !== this.angle && (a.object.angle = this.angle);
    void 0 !== this.decay && (a.object.decay = this.decay);
    void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);
    void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());
    return a;
  }});
  of.prototype = Object.assign(Object.create(qa.prototype), {constructor:of, isHemisphereLight:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.groundColor.copy(a.groundColor);
    return this;
  }});
  Object.assign(yb.prototype, {_projScreenMatrix:new m, _lightPositionWorld:new e, _lookTarget:new e, getViewportCount:function() {
    return this._viewportCount;
  }, getFrustum:function() {
    return this._frustum;
  }, updateMatrices:function(a) {
    var d = this.camera, g = this.matrix, b = this._projScreenMatrix, c = this._lookTarget, e = this._lightPositionWorld;
    e.setFromMatrixPosition(a.matrixWorld);
    d.position.copy(e);
    c.setFromMatrixPosition(a.target.matrixWorld);
    d.lookAt(c);
    d.updateMatrixWorld();
    b.multiplyMatrices(d.projectionMatrix, d.matrixWorldInverse);
    this._frustum.setFromMatrix(b);
    g.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);
    g.multiply(d.projectionMatrix);
    g.multiply(d.matrixWorldInverse);
  }, getViewport:function(a) {
    return this._viewports[a];
  }, getFrameExtents:function() {
    return this._frameExtents;
  }, copy:function(a) {
    this.camera = a.camera.clone();
    this.bias = a.bias;
    this.radius = a.radius;
    this.mapSize.copy(a.mapSize);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var a = {};
    0 !== this.bias && (a.bias = this.bias);
    1 !== this.radius && (a.radius = this.radius);
    if (512 !== this.mapSize.x || 512 !== this.mapSize.y) {
      a.mapSize = this.mapSize.toArray();
    }
    a.camera = this.camera.toJSON(!1).object;
    delete a.camera.matrix;
    return a;
  }});
  pf.prototype = Object.assign(Object.create(yb.prototype), {constructor:pf, isSpotLightShadow:!0, updateMatrices:function(a) {
    var d = this.camera, g = 2 * ka.RAD2DEG * a.angle, b = this.mapSize.width / this.mapSize.height, c = a.distance || d.far;
    if (g !== d.fov || b !== d.aspect || c !== d.far) {
      d.fov = g, d.aspect = b, d.far = c, d.updateProjectionMatrix();
    }
    yb.prototype.updateMatrices.call(this, a);
  }});
  qf.prototype = Object.assign(Object.create(qa.prototype), {constructor:qf, isSpotLight:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.angle = a.angle;
    this.penumbra = a.penumbra;
    this.decay = a.decay;
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  Cg.prototype = Object.assign(Object.create(yb.prototype), {constructor:Cg, isPointLightShadow:!0, updateMatrices:function(a, d) {
    void 0 === d && (d = 0);
    var g = this.camera, b = this.matrix, c = this._lightPositionWorld, e = this._lookTarget, l = this._projScreenMatrix;
    c.setFromMatrixPosition(a.matrixWorld);
    g.position.copy(c);
    e.copy(g.position);
    e.add(this._cubeDirections[d]);
    g.up.copy(this._cubeUps[d]);
    g.lookAt(e);
    g.updateMatrixWorld();
    b.makeTranslation(-c.x, -c.y, -c.z);
    l.multiplyMatrices(g.projectionMatrix, g.matrixWorldInverse);
    this._frustum.setFromMatrix(l);
  }});
  rf.prototype = Object.assign(Object.create(qa.prototype), {constructor:rf, isPointLight:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.decay = a.decay;
    this.shadow = a.shadow.clone();
    return this;
  }});
  ze.prototype = Object.assign(Object.create(pa.prototype), {constructor:ze, isOrthographicCamera:!0, copy:function(a, d) {
    pa.prototype.copy.call(this, a, d);
    this.left = a.left;
    this.right = a.right;
    this.top = a.top;
    this.bottom = a.bottom;
    this.near = a.near;
    this.far = a.far;
    this.zoom = a.zoom;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    return this;
  }, setViewOffset:function(a, d, b, c, e, l) {
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = d;
    this.view.offsetX = b;
    this.view.offsetY = c;
    this.view.width = e;
    this.view.height = l;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = (this.right - this.left) / (2 * this.zoom), d = (this.top - this.bottom) / (2 * this.zoom), b = (this.right + this.left) / 2, c = (this.top + this.bottom) / 2, e = b - a;
    b += a;
    a = c + d;
    d = c - d;
    if (null !== this.view && this.view.enabled) {
      b = this.zoom / (this.view.width / this.view.fullWidth);
      d = this.zoom / (this.view.height / this.view.fullHeight);
      var l = (this.right - this.left) / this.view.width;
      c = (this.top - this.bottom) / this.view.height;
      e += this.view.offsetX / b * l;
      b = e + this.view.width / b * l;
      a -= this.view.offsetY / d * c;
      d = a - this.view.height / d * c;
    }
    this.projectionMatrix.makeOrthographic(e, b, a, d, this.near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = v.prototype.toJSON.call(this, a);
    a.object.zoom = this.zoom;
    a.object.left = this.left;
    a.object.right = this.right;
    a.object.top = this.top;
    a.object.bottom = this.bottom;
    a.object.near = this.near;
    a.object.far = this.far;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    return a;
  }});
  sf.prototype = Object.assign(Object.create(yb.prototype), {constructor:sf, isDirectionalLightShadow:!0, updateMatrices:function(a) {
    yb.prototype.updateMatrices.call(this, a);
  }});
  tf.prototype = Object.assign(Object.create(qa.prototype), {constructor:tf, isDirectionalLight:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  uf.prototype = Object.assign(Object.create(qa.prototype), {constructor:uf, isAmbientLight:!0});
  vf.prototype = Object.assign(Object.create(qa.prototype), {constructor:vf, isRectAreaLight:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.width = a.width;
    this.height = a.height;
    return this;
  }, toJSON:function(a) {
    a = qa.prototype.toJSON.call(this, a);
    a.object.width = this.width;
    a.object.height = this.height;
    return a;
  }});
  wf.prototype = Object.assign(Object.create(sa.prototype), {constructor:wf, load:function(a, d, b, c) {
    var g = this, e = new eb(g.manager);
    e.setPath(g.path);
    e.load(a, function(a) {
      d(g.parse(JSON.parse(a)));
    }, b, c);
  }, parse:function(a) {
    function d(a) {
      void 0 === b[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
      return b[a];
    }
    var b = this.textures, g = new Wj[a.type];
    void 0 !== a.uuid && (g.uuid = a.uuid);
    void 0 !== a.name && (g.name = a.name);
    void 0 !== a.color && g.color.setHex(a.color);
    void 0 !== a.roughness && (g.roughness = a.roughness);
    void 0 !== a.metalness && (g.metalness = a.metalness);
    void 0 !== a.sheen && (g.sheen = (new B).setHex(a.sheen));
    void 0 !== a.emissive && g.emissive.setHex(a.emissive);
    void 0 !== a.specular && g.specular.setHex(a.specular);
    void 0 !== a.shininess && (g.shininess = a.shininess);
    void 0 !== a.clearcoat && (g.clearcoat = a.clearcoat);
    void 0 !== a.clearcoatRoughness && (g.clearcoatRoughness = a.clearcoatRoughness);
    void 0 !== a.vertexColors && (g.vertexColors = a.vertexColors);
    void 0 !== a.fog && (g.fog = a.fog);
    void 0 !== a.flatShading && (g.flatShading = a.flatShading);
    void 0 !== a.blending && (g.blending = a.blending);
    void 0 !== a.combine && (g.combine = a.combine);
    void 0 !== a.side && (g.side = a.side);
    void 0 !== a.opacity && (g.opacity = a.opacity);
    void 0 !== a.transparent && (g.transparent = a.transparent);
    void 0 !== a.alphaTest && (g.alphaTest = a.alphaTest);
    void 0 !== a.depthTest && (g.depthTest = a.depthTest);
    void 0 !== a.depthWrite && (g.depthWrite = a.depthWrite);
    void 0 !== a.colorWrite && (g.colorWrite = a.colorWrite);
    void 0 !== a.stencilWrite && (g.stencilWrite = a.stencilWrite);
    void 0 !== a.stencilWriteMask && (g.stencilWriteMask = a.stencilWriteMask);
    void 0 !== a.stencilFunc && (g.stencilFunc = a.stencilFunc);
    void 0 !== a.stencilRef && (g.stencilRef = a.stencilRef);
    void 0 !== a.stencilFuncMask && (g.stencilFuncMask = a.stencilFuncMask);
    void 0 !== a.stencilFail && (g.stencilFail = a.stencilFail);
    void 0 !== a.stencilZFail && (g.stencilZFail = a.stencilZFail);
    void 0 !== a.stencilZPass && (g.stencilZPass = a.stencilZPass);
    void 0 !== a.wireframe && (g.wireframe = a.wireframe);
    void 0 !== a.wireframeLinewidth && (g.wireframeLinewidth = a.wireframeLinewidth);
    void 0 !== a.wireframeLinecap && (g.wireframeLinecap = a.wireframeLinecap);
    void 0 !== a.wireframeLinejoin && (g.wireframeLinejoin = a.wireframeLinejoin);
    void 0 !== a.rotation && (g.rotation = a.rotation);
    1 !== a.linewidth && (g.linewidth = a.linewidth);
    void 0 !== a.dashSize && (g.dashSize = a.dashSize);
    void 0 !== a.gapSize && (g.gapSize = a.gapSize);
    void 0 !== a.scale && (g.scale = a.scale);
    void 0 !== a.polygonOffset && (g.polygonOffset = a.polygonOffset);
    void 0 !== a.polygonOffsetFactor && (g.polygonOffsetFactor = a.polygonOffsetFactor);
    void 0 !== a.polygonOffsetUnits && (g.polygonOffsetUnits = a.polygonOffsetUnits);
    void 0 !== a.skinning && (g.skinning = a.skinning);
    void 0 !== a.morphTargets && (g.morphTargets = a.morphTargets);
    void 0 !== a.morphNormals && (g.morphNormals = a.morphNormals);
    void 0 !== a.dithering && (g.dithering = a.dithering);
    void 0 !== a.visible && (g.visible = a.visible);
    void 0 !== a.toneMapped && (g.toneMapped = a.toneMapped);
    void 0 !== a.userData && (g.userData = a.userData);
    if (void 0 !== a.uniforms) {
      for (var c in a.uniforms) {
        var l = a.uniforms[c];
        g.uniforms[c] = {};
        switch(l.type) {
          case "t":
            g.uniforms[c].value = d(l.value);
            break;
          case "c":
            g.uniforms[c].value = (new B).setHex(l.value);
            break;
          case "v2":
            g.uniforms[c].value = (new k).fromArray(l.value);
            break;
          case "v3":
            g.uniforms[c].value = (new e).fromArray(l.value);
            break;
          case "v4":
            g.uniforms[c].value = (new r).fromArray(l.value);
            break;
          case "m3":
            g.uniforms[c].value = (new f).fromArray(l.value);
          case "m4":
            g.uniforms[c].value = (new m).fromArray(l.value);
            break;
          default:
            g.uniforms[c].value = l.value;
        }
      }
    }
    void 0 !== a.defines && (g.defines = a.defines);
    void 0 !== a.vertexShader && (g.vertexShader = a.vertexShader);
    void 0 !== a.fragmentShader && (g.fragmentShader = a.fragmentShader);
    if (void 0 !== a.extensions) {
      for (var h in a.extensions) {
        g.extensions[h] = a.extensions[h];
      }
    }
    void 0 !== a.shading && (g.flatShading = 1 === a.shading);
    void 0 !== a.size && (g.size = a.size);
    void 0 !== a.sizeAttenuation && (g.sizeAttenuation = a.sizeAttenuation);
    void 0 !== a.map && (g.map = d(a.map));
    void 0 !== a.matcap && (g.matcap = d(a.matcap));
    void 0 !== a.alphaMap && (g.alphaMap = d(a.alphaMap), g.transparent = !0);
    void 0 !== a.bumpMap && (g.bumpMap = d(a.bumpMap));
    void 0 !== a.bumpScale && (g.bumpScale = a.bumpScale);
    void 0 !== a.normalMap && (g.normalMap = d(a.normalMap));
    void 0 !== a.normalMapType && (g.normalMapType = a.normalMapType);
    void 0 !== a.normalScale && (c = a.normalScale, !1 === Array.isArray(c) && (c = [c, c]), g.normalScale = (new k).fromArray(c));
    void 0 !== a.displacementMap && (g.displacementMap = d(a.displacementMap));
    void 0 !== a.displacementScale && (g.displacementScale = a.displacementScale);
    void 0 !== a.displacementBias && (g.displacementBias = a.displacementBias);
    void 0 !== a.roughnessMap && (g.roughnessMap = d(a.roughnessMap));
    void 0 !== a.metalnessMap && (g.metalnessMap = d(a.metalnessMap));
    void 0 !== a.emissiveMap && (g.emissiveMap = d(a.emissiveMap));
    void 0 !== a.emissiveIntensity && (g.emissiveIntensity = a.emissiveIntensity);
    void 0 !== a.specularMap && (g.specularMap = d(a.specularMap));
    void 0 !== a.envMap && (g.envMap = d(a.envMap));
    void 0 !== a.envMapIntensity && (g.envMapIntensity = a.envMapIntensity);
    void 0 !== a.reflectivity && (g.reflectivity = a.reflectivity);
    void 0 !== a.refractionRatio && (g.refractionRatio = a.refractionRatio);
    void 0 !== a.lightMap && (g.lightMap = d(a.lightMap));
    void 0 !== a.lightMapIntensity && (g.lightMapIntensity = a.lightMapIntensity);
    void 0 !== a.aoMap && (g.aoMap = d(a.aoMap));
    void 0 !== a.aoMapIntensity && (g.aoMapIntensity = a.aoMapIntensity);
    void 0 !== a.gradientMap && (g.gradientMap = d(a.gradientMap));
    void 0 !== a.clearcoatNormalMap && (g.clearcoatNormalMap = d(a.clearcoatNormalMap));
    void 0 !== a.clearcoatNormalScale && (g.clearcoatNormalScale = (new k).fromArray(a.clearcoatNormalScale));
    return g;
  }, setTextures:function(a) {
    this.textures = a;
    return this;
  }});
  var nh = {decodeText:function(a) {
    if ("undefined" !== typeof TextDecoder) {
      return (new TextDecoder).decode(a);
    }
    for (var d = "", b = 0, g = a.length; b < g; b++) {
      d += String.fromCharCode(a[b]);
    }
    try {
      return decodeURIComponent(escape(d));
    } catch (fa) {
      return d;
    }
  }, extractUrlBase:function(a) {
    var d = a.lastIndexOf("/");
    return -1 === d ? "./" : a.substr(0, d + 1);
  }};
  xf.prototype = Object.assign(Object.create(J.prototype), {constructor:xf, isInstancedBufferGeometry:!0, copy:function(a) {
    J.prototype.copy.call(this, a);
    this.maxInstancedCount = a.maxInstancedCount;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var a = J.prototype.toJSON.call(this);
    a.maxInstancedCount = this.maxInstancedCount;
    a.isInstancedBufferGeometry = !0;
    return a;
  }});
  yf.prototype = Object.assign(Object.create(K.prototype), {constructor:yf, isInstancedBufferAttribute:!0, copy:function(a) {
    K.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }, toJSON:function() {
    var a = K.prototype.toJSON.call(this);
    a.meshPerAttribute = this.meshPerAttribute;
    a.isInstancedBufferAttribute = !0;
    return a;
  }});
  zf.prototype = Object.assign(Object.create(sa.prototype), {constructor:zf, load:function(a, d, b, c) {
    var g = this, e = new eb(g.manager);
    e.setPath(g.path);
    e.load(a, function(a) {
      d(g.parse(JSON.parse(a)));
    }, b, c);
  }, parse:function(a) {
    var d = a.isInstancedBufferGeometry ? new xf : new J, b = a.data.index;
    if (void 0 !== b) {
      var g = new oh[b.type](b.array);
      d.setIndex(new K(g, 1));
    }
    b = a.data.attributes;
    for (var c in b) {
      var l = b[c];
      g = new oh[l.type](l.array);
      g = new (l.isInstancedBufferAttribute ? yf : K)(g, l.itemSize, l.normalized);
      void 0 !== l.name && (g.name = l.name);
      d.setAttribute(c, g);
    }
    var f = a.data.morphAttributes;
    if (f) {
      for (c in f) {
        var h = f[c], m = [];
        b = 0;
        for (var n = h.length; b < n; b++) {
          l = h[b], g = new oh[l.type](l.array), g = new K(g, l.itemSize, l.normalized), void 0 !== l.name && (g.name = l.name), m.push(g);
        }
        d.morphAttributes[c] = m;
      }
    }
    a.data.morphTargetsRelative && (d.morphTargetsRelative = !0);
    c = a.data.groups || a.data.drawcalls || a.data.offsets;
    if (void 0 !== c) {
      for (b = 0, l = c.length; b !== l; ++b) {
        g = c[b], d.addGroup(g.start, g.count, g.materialIndex);
      }
    }
    b = a.data.boundingSphere;
    void 0 !== b && (c = new e, void 0 !== b.center && c.fromArray(b.center), d.boundingSphere = new p(c, b.radius));
    a.name && (d.name = a.name);
    a.userData && (d.userData = a.userData);
    return d;
  }});
  var oh = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:"undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array};
  Af.prototype = Object.assign(Object.create(sa.prototype), {constructor:Af, load:function(a, d, b, c) {
    var g = this, e = "" === this.path ? nh.extractUrlBase(a) : this.path;
    this.resourcePath = this.resourcePath || e;
    e = new eb(g.manager);
    e.setPath(this.path);
    e.load(a, function(b) {
      var e = null;
      try {
        e = JSON.parse(b);
      } catch (Wb) {
        void 0 !== c && c(Wb);
        console.error("THREE:ObjectLoader: Can't parse " + a + ".", Wb.message);
        return;
      }
      b = e.metadata;
      void 0 === b || void 0 === b.type || "geometry" === b.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a) : g.parse(e, d);
    }, b, c);
  }, parse:function(a, d) {
    var b = this.parseShape(a.shapes);
    b = this.parseGeometries(a.geometries, b);
    var g = this.parseImages(a.images, function() {
      void 0 !== d && d(c);
    });
    g = this.parseTextures(a.textures, g);
    g = this.parseMaterials(a.materials, g);
    var c = this.parseObject(a.object, b, g);
    a.animations && (c.animations = this.parseAnimations(a.animations));
    void 0 !== a.images && 0 !== a.images.length || void 0 === d || d(c);
    return c;
  }, parseShape:function(a) {
    var d = {};
    if (void 0 !== a) {
      for (var b = 0, g = a.length; b < g; b++) {
        var c = (new hc).fromJSON(a[b]);
        d[c.uuid] = c;
      }
    }
    return d;
  }, parseGeometries:function(a, d) {
    var b = {};
    if (void 0 !== a) {
      for (var g = new zf, c = 0, e = a.length; c < e; c++) {
        var l = a[c];
        switch(l.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            var f = new Ra[l.type](l.width, l.height, l.widthSegments, l.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            f = new Ra[l.type](l.width, l.height, l.depth, l.widthSegments, l.heightSegments, l.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            f = new Ra[l.type](l.radius, l.segments, l.thetaStart, l.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            f = new Ra[l.type](l.radiusTop, l.radiusBottom, l.height, l.radialSegments, l.heightSegments, l.openEnded, l.thetaStart, l.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            f = new Ra[l.type](l.radius, l.height, l.radialSegments, l.heightSegments, l.openEnded, l.thetaStart, l.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            f = new Ra[l.type](l.radius, l.widthSegments, l.heightSegments, l.phiStart, l.phiLength, l.thetaStart, l.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            f = new Ra[l.type](l.radius, l.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            f = new Ra[l.type](l.innerRadius, l.outerRadius, l.thetaSegments, l.phiSegments, l.thetaStart, l.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            f = new Ra[l.type](l.radius, l.tube, l.radialSegments, l.tubularSegments, l.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            f = new Ra[l.type](l.radius, l.tube, l.tubularSegments, l.radialSegments, l.p, l.q);
            break;
          case "TubeGeometry":
          case "TubeBufferGeometry":
            f = new Ra[l.type]((new mh[l.path.type]).fromJSON(l.path), l.tubularSegments, l.radius, l.radialSegments, l.closed);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            f = new Ra[l.type](l.points, l.segments, l.phiStart, l.phiLength);
            break;
          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            f = new Ra[l.type](l.vertices, l.indices, l.radius, l.details);
            break;
          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            f = [];
            for (var h = 0, p = l.shapes.length; h < p; h++) {
              var m = d[l.shapes[h]];
              f.push(m);
            }
            f = new Ra[l.type](f, l.curveSegments);
            break;
          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            f = [];
            h = 0;
            for (p = l.shapes.length; h < p; h++) {
              m = d[l.shapes[h]], f.push(m);
            }
            h = l.options.extrudePath;
            void 0 !== h && (l.options.extrudePath = (new mh[h.type]).fromJSON(h));
            f = new Ra[l.type](f, l.options);
            break;
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            f = g.parse(l);
            break;
          case "Geometry":
            "THREE" in window && "LegacyJSONLoader" in THREE ? f = (new THREE.LegacyJSONLoader).parse(l, this.resourcePath).geometry : console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + l.type + '"');
            continue;
        }
        f.uuid = l.uuid;
        void 0 !== l.name && (f.name = l.name);
        !0 === f.isBufferGeometry && void 0 !== l.userData && (f.userData = l.userData);
        b[l.uuid] = f;
      }
    }
    return b;
  }, parseMaterials:function(a, d) {
    var b = {}, g = {};
    if (void 0 !== a) {
      var c = new wf;
      c.setTextures(d);
      d = 0;
      for (var e = a.length; d < e; d++) {
        var l = a[d];
        if ("MultiMaterial" === l.type) {
          for (var f = [], h = 0; h < l.materials.length; h++) {
            var p = l.materials[h];
            void 0 === b[p.uuid] && (b[p.uuid] = c.parse(p));
            f.push(b[p.uuid]);
          }
          g[l.uuid] = f;
        } else {
          void 0 === b[l.uuid] && (b[l.uuid] = c.parse(l)), g[l.uuid] = b[l.uuid];
        }
      }
    }
    return g;
  }, parseAnimations:function(a) {
    for (var d = [], b = 0; b < a.length; b++) {
      var g = a[b], c = db.parse(g);
      void 0 !== g.uuid && (c.uuid = g.uuid);
      d.push(c);
    }
    return d;
  }, parseImages:function(a, d) {
    function b(a) {
      g.manager.itemStart(a);
      return e.load(a, function() {
        g.manager.itemEnd(a);
      }, void 0, function() {
        g.manager.itemError(a);
        g.manager.itemEnd(a);
      });
    }
    var g = this, c = {};
    if (void 0 !== a && 0 < a.length) {
      d = new yg(d);
      var e = new qd(d);
      e.setCrossOrigin(this.crossOrigin);
      d = 0;
      for (var l = a.length; d < l; d++) {
        var f = a[d], h = f.url;
        if (Array.isArray(h)) {
          c[f.uuid] = [];
          for (var p = 0, m = h.length; p < m; p++) {
            var n = h[p];
            n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n) ? n : g.resourcePath + n;
            c[f.uuid].push(b(n));
          }
        } else {
          n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f.url) ? f.url : g.resourcePath + f.url, c[f.uuid] = b(n);
        }
      }
    }
    return c;
  }, parseTextures:function(a, d) {
    function b(a, d) {
      if ("number" === typeof a) {
        return a;
      }
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);
      return d[a];
    }
    var g = {};
    if (void 0 !== a) {
      for (var c = 0, e = a.length; c < e; c++) {
        var l = a[c];
        void 0 === l.image && console.warn('THREE.ObjectLoader: No "image" specified for', l.uuid);
        void 0 === d[l.image] && console.warn("THREE.ObjectLoader: Undefined image", l.image);
        var f = Array.isArray(d[l.image]) ? new Sa(d[l.image]) : new h(d[l.image]);
        f.needsUpdate = !0;
        f.uuid = l.uuid;
        void 0 !== l.name && (f.name = l.name);
        void 0 !== l.mapping && (f.mapping = b(l.mapping, Xj));
        void 0 !== l.offset && f.offset.fromArray(l.offset);
        void 0 !== l.repeat && f.repeat.fromArray(l.repeat);
        void 0 !== l.center && f.center.fromArray(l.center);
        void 0 !== l.rotation && (f.rotation = l.rotation);
        void 0 !== l.wrap && (f.wrapS = b(l.wrap[0], Ei), f.wrapT = b(l.wrap[1], Ei));
        void 0 !== l.format && (f.format = l.format);
        void 0 !== l.type && (f.type = l.type);
        void 0 !== l.encoding && (f.encoding = l.encoding);
        void 0 !== l.minFilter && (f.minFilter = b(l.minFilter, Fi));
        void 0 !== l.magFilter && (f.magFilter = b(l.magFilter, Fi));
        void 0 !== l.anisotropy && (f.anisotropy = l.anisotropy);
        void 0 !== l.flipY && (f.flipY = l.flipY);
        void 0 !== l.premultiplyAlpha && (f.premultiplyAlpha = l.premultiplyAlpha);
        void 0 !== l.unpackAlignment && (f.unpackAlignment = l.unpackAlignment);
        g[l.uuid] = f;
      }
    }
    return g;
  }, parseObject:function(a, d, b) {
    function g(a) {
      void 0 === d[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
      return d[a];
    }
    function c(a) {
      if (void 0 !== a) {
        if (Array.isArray(a)) {
          for (var d = [], g = 0, c = a.length; g < c; g++) {
            var l = a[g];
            void 0 === b[l] && console.warn("THREE.ObjectLoader: Undefined material", l);
            d.push(b[l]);
          }
          return d;
        }
        void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined material", a);
        return b[a];
      }
    }
    switch(a.type) {
      case "Scene":
        var l = new w;
        void 0 !== a.background && Number.isInteger(a.background) && (l.background = new B(a.background));
        void 0 !== a.fog && ("Fog" === a.fog.type ? l.fog = new $e(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (l.fog = new Ze(a.fog.color, a.fog.density)));
        break;
      case "PerspectiveCamera":
        l = new oa(a.fov, a.aspect, a.near, a.far);
        void 0 !== a.focus && (l.focus = a.focus);
        void 0 !== a.zoom && (l.zoom = a.zoom);
        void 0 !== a.filmGauge && (l.filmGauge = a.filmGauge);
        void 0 !== a.filmOffset && (l.filmOffset = a.filmOffset);
        void 0 !== a.view && (l.view = Object.assign({}, a.view));
        break;
      case "OrthographicCamera":
        l = new ze(a.left, a.right, a.top, a.bottom, a.near, a.far);
        void 0 !== a.zoom && (l.zoom = a.zoom);
        void 0 !== a.view && (l.view = Object.assign({}, a.view));
        break;
      case "AmbientLight":
        l = new uf(a.color, a.intensity);
        break;
      case "DirectionalLight":
        l = new tf(a.color, a.intensity);
        break;
      case "PointLight":
        l = new rf(a.color, a.intensity, a.distance, a.decay);
        break;
      case "RectAreaLight":
        l = new vf(a.color, a.intensity, a.width, a.height);
        break;
      case "SpotLight":
        l = new qf(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
        break;
      case "HemisphereLight":
        l = new of(a.color, a.groundColor, a.intensity);
        break;
      case "SkinnedMesh":
        console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
      case "Mesh":
        l = g(a.geometry);
        var e = c(a.material);
        l = l.bones && 0 < l.bones.length ? new Zd(l, e) : new U(l, e);
        break;
      case "InstancedMesh":
        l = g(a.geometry);
        e = c(a.material);
        var f = a.instanceMatrix;
        l = new cf(l, e, a.count);
        l.instanceMatrix = new K(new Float32Array(f.array), 16);
        break;
      case "LOD":
        l = new Yd;
        break;
      case "Line":
        l = new Ga(g(a.geometry), c(a.material), a.mode);
        break;
      case "LineLoop":
        l = new df(g(a.geometry), c(a.material));
        break;
      case "LineSegments":
        l = new ra(g(a.geometry), c(a.material));
        break;
      case "PointCloud":
      case "Points":
        l = new Zc(g(a.geometry), c(a.material));
        break;
      case "Sprite":
        l = new Wd(c(a.material));
        break;
      case "Group":
        l = new Wc;
        break;
      default:
        l = new v;
    }
    l.uuid = a.uuid;
    void 0 !== a.name && (l.name = a.name);
    void 0 !== a.matrix ? (l.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (l.matrixAutoUpdate = a.matrixAutoUpdate), l.matrixAutoUpdate && l.matrix.decompose(l.position, l.quaternion, l.scale)) : (void 0 !== a.position && l.position.fromArray(a.position), void 0 !== a.rotation && l.rotation.fromArray(a.rotation), void 0 !== a.quaternion && l.quaternion.fromArray(a.quaternion), void 0 !== a.scale && l.scale.fromArray(a.scale));
    void 0 !== a.castShadow && (l.castShadow = a.castShadow);
    void 0 !== a.receiveShadow && (l.receiveShadow = a.receiveShadow);
    a.shadow && (void 0 !== a.shadow.bias && (l.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (l.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && l.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (l.shadow.camera = this.parseObject(a.shadow.camera)));
    void 0 !== a.visible && (l.visible = a.visible);
    void 0 !== a.frustumCulled && (l.frustumCulled = a.frustumCulled);
    void 0 !== a.renderOrder && (l.renderOrder = a.renderOrder);
    void 0 !== a.userData && (l.userData = a.userData);
    void 0 !== a.layers && (l.layers.mask = a.layers);
    void 0 !== a.drawMode && l.setDrawMode(a.drawMode);
    if (void 0 !== a.children) {
      for (f = a.children, e = 0; e < f.length; e++) {
        l.add(this.parseObject(f[e], d, b));
      }
    }
    if ("LOD" === a.type) {
      for (a = a.levels, f = 0; f < a.length; f++) {
        e = a[f];
        var h = l.getObjectByProperty("uuid", e.object);
        void 0 !== h && l.addLevel(h, e.distance);
      }
    }
    return l;
  }});
  var Xj = {UVMapping:300, CubeReflectionMapping:301, CubeRefractionMapping:302, EquirectangularReflectionMapping:303, EquirectangularRefractionMapping:304, SphericalReflectionMapping:305, CubeUVReflectionMapping:306, CubeUVRefractionMapping:307}, Ei = {RepeatWrapping:1E3, ClampToEdgeWrapping:1001, MirroredRepeatWrapping:1002}, Fi = {NearestFilter:1003, NearestMipmapNearestFilter:1004, NearestMipmapLinearFilter:1005, LinearFilter:1006, LinearMipmapNearestFilter:1007, LinearMipmapLinearFilter:1008};
  Dg.prototype = Object.assign(Object.create(sa.prototype), {constructor:Dg, setOptions:function(a) {
    this.options = a;
    return this;
  }, load:function(a, d, b, c) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var g = this, l = Kc.get(a);
    if (void 0 !== l) {
      return g.manager.itemStart(a), setTimeout(function() {
        d && d(l);
        g.manager.itemEnd(a);
      }, 0), l;
    }
    fetch(a).then(function(a) {
      return a.blob();
    }).then(function(a) {
      return void 0 === g.options ? createImageBitmap(a) : createImageBitmap(a, g.options);
    }).then(function(b) {
      Kc.add(a, b);
      d && d(b);
      g.manager.itemEnd(a);
    }).catch(function(d) {
      c && c(d);
      g.manager.itemError(a);
      g.manager.itemEnd(a);
    });
    g.manager.itemStart(a);
  }});
  Object.assign(Eg.prototype, {moveTo:function(a, d) {
    this.currentPath = new mb;
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(a, d);
    return this;
  }, lineTo:function(a, d) {
    this.currentPath.lineTo(a, d);
    return this;
  }, quadraticCurveTo:function(a, d, b, c) {
    this.currentPath.quadraticCurveTo(a, d, b, c);
    return this;
  }, bezierCurveTo:function(a, d, b, c, l, e) {
    this.currentPath.bezierCurveTo(a, d, b, c, l, e);
    return this;
  }, splineThru:function(a) {
    this.currentPath.splineThru(a);
    return this;
  }, toShapes:function(a, d) {
    function b(a) {
      for (var d = [], b = 0, g = a.length; b < g; b++) {
        var c = a[b], l = new hc;
        l.curves = c.curves;
        d.push(l);
      }
      return d;
    }
    function g(a, d) {
      for (var b = d.length, g = !1, c = b - 1, l = 0; l < b; c = l++) {
        var e = d[c], f = d[l], h = f.x - e.x, p = f.y - e.y;
        if (Math.abs(p) > Number.EPSILON) {
          if (0 > p && (e = d[l], h = -h, f = d[c], p = -p), !(a.y < e.y || a.y > f.y)) {
            if (a.y === e.y) {
              if (a.x === e.x) {
                return !0;
              }
            } else {
              c = p * (a.x - e.x) - h * (a.y - e.y);
              if (0 === c) {
                return !0;
              }
              0 > c || (g = !g);
            }
          }
        } else {
          if (a.y === e.y && (f.x <= a.x && a.x <= e.x || e.x <= a.x && a.x <= f.x)) {
            return !0;
          }
        }
      }
      return g;
    }
    var c = Lb.isClockWise, l = this.subPaths;
    if (0 === l.length) {
      return [];
    }
    if (!0 === d) {
      return b(l);
    }
    d = [];
    if (1 === l.length) {
      var e = l[0];
      var f = new hc;
      f.curves = e.curves;
      d.push(f);
      return d;
    }
    var h = !c(l[0].getPoints());
    h = a ? !h : h;
    f = [];
    var p = [], m = [], n = 0;
    p[n] = void 0;
    m[n] = [];
    for (var k = 0, q = l.length; k < q; k++) {
      e = l[k];
      var u = e.getPoints();
      var r = c(u);
      (r = a ? !r : r) ? (!h && p[n] && n++, p[n] = {s:new hc, p:u}, p[n].s.curves = e.curves, h && n++, m[n] = []) : m[n].push({h:e, p:u[0]});
    }
    if (!p[0]) {
      return b(l);
    }
    if (1 < p.length) {
      k = !1;
      a = [];
      c = 0;
      for (l = p.length; c < l; c++) {
        f[c] = [];
      }
      c = 0;
      for (l = p.length; c < l; c++) {
        for (e = m[c], r = 0; r < e.length; r++) {
          h = e[r];
          n = !0;
          for (u = 0; u < p.length; u++) {
            g(h.p, p[u].p) && (c !== u && a.push({froms:c, tos:u, hole:r}), n ? (n = !1, f[u].push(h)) : k = !0);
          }
          n && f[c].push(h);
        }
      }
      0 < a.length && (k || (m = f));
    }
    k = 0;
    for (c = p.length; k < c; k++) {
      for (f = p[k].s, d.push(f), a = m[k], l = 0, e = a.length; l < e; l++) {
        f.holes.push(a[l].h);
      }
    }
    return d;
  }});
  Object.assign(Fg.prototype, {isFont:!0, generateShapes:function(a, d) {
    void 0 === d && (d = 100);
    var b = [], g = d;
    d = this.data;
    var c = Array.from ? Array.from(a) : String(a).split("");
    g /= d.resolution;
    var l = (d.boundingBox.yMax - d.boundingBox.yMin + d.underlineThickness) * g;
    a = [];
    for (var e = 0, f = 0, h = 0; h < c.length; h++) {
      var p = c[h];
      if ("\n" === p) {
        e = 0, f -= l;
      } else {
        var m = p;
        p = g;
        var n = e, k = f, q = d, u = q.glyphs[m] || q.glyphs["?"];
        if (u) {
          m = new Eg;
          if (u.o) {
            q = u._cachedOutline || (u._cachedOutline = u.o.split(" "));
            for (var r = 0, v = q.length; r < v;) {
              switch(q[r++]) {
                case "m":
                  var w = q[r++] * p + n;
                  var t = q[r++] * p + k;
                  m.moveTo(w, t);
                  break;
                case "l":
                  w = q[r++] * p + n;
                  t = q[r++] * p + k;
                  m.lineTo(w, t);
                  break;
                case "q":
                  var y = q[r++] * p + n;
                  var x = q[r++] * p + k;
                  var z = q[r++] * p + n;
                  var A = q[r++] * p + k;
                  m.quadraticCurveTo(z, A, y, x);
                  break;
                case "b":
                  y = q[r++] * p + n, x = q[r++] * p + k, z = q[r++] * p + n, A = q[r++] * p + k, w = q[r++] * p + n, t = q[r++] * p + k, m.bezierCurveTo(z, A, w, t, y, x);
              }
            }
          }
          p = {offsetX:u.ha * p, path:m};
        } else {
          console.error('THREE.Font: character "' + m + '" does not exists in font family ' + q.familyName + "."), p = void 0;
        }
        e += p.offsetX;
        a.push(p.path);
      }
    }
    d = 0;
    for (c = a.length; d < c; d++) {
      Array.prototype.push.apply(b, a[d].toShapes());
    }
    return b;
  }});
  Gg.prototype = Object.assign(Object.create(sa.prototype), {constructor:Gg, load:function(a, d, b, c) {
    var g = this, l = new eb(this.manager);
    l.setPath(this.path);
    l.load(a, function(a) {
      try {
        var b = JSON.parse(a);
      } catch (Wb) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), b = JSON.parse(a.substring(65, a.length - 2));
      }
      a = g.parse(b);
      d && d(a);
    }, b, c);
  }, parse:function(a) {
    return new Fg(a);
  }});
  var Zf, Lg = {getContext:function() {
    void 0 === Zf && (Zf = new (window.AudioContext || window.webkitAudioContext));
    return Zf;
  }, setContext:function(a) {
    Zf = a;
  }};
  Bf.prototype = Object.assign(Object.create(sa.prototype), {constructor:Bf, load:function(a, d, b, c) {
    var g = new eb(this.manager);
    g.setResponseType("arraybuffer");
    g.setPath(this.path);
    g.load(a, function(a) {
      a = a.slice(0);
      Lg.getContext().decodeAudioData(a, function(a) {
        d(a);
      });
    }, b, c);
  }});
  Object.assign(Cf.prototype, {isSphericalHarmonics3:!0, set:function(a) {
    for (var d = 0; 9 > d; d++) {
      this.coefficients[d].copy(a[d]);
    }
    return this;
  }, zero:function() {
    for (var a = 0; 9 > a; a++) {
      this.coefficients[a].set(0, 0, 0);
    }
    return this;
  }, getAt:function(a, d) {
    var b = a.x, g = a.y;
    a = a.z;
    var c = this.coefficients;
    d.copy(c[0]).multiplyScalar(.282095);
    d.addScale(c[1], .488603 * g);
    d.addScale(c[2], .488603 * a);
    d.addScale(c[3], .488603 * b);
    d.addScale(c[4], 1.092548 * b * g);
    d.addScale(c[5], 1.092548 * g * a);
    d.addScale(c[6], .315392 * (3 * a * a - 1));
    d.addScale(c[7], 1.092548 * b * a);
    d.addScale(c[8], .546274 * (b * b - g * g));
    return d;
  }, getIrradianceAt:function(a, d) {
    var b = a.x, g = a.y;
    a = a.z;
    var c = this.coefficients;
    d.copy(c[0]).multiplyScalar(.886227);
    d.addScale(c[1], 1.023328 * g);
    d.addScale(c[2], 1.023328 * a);
    d.addScale(c[3], 1.023328 * b);
    d.addScale(c[4], .858086 * b * g);
    d.addScale(c[5], .858086 * g * a);
    d.addScale(c[6], .743125 * a * a - .247708);
    d.addScale(c[7], .858086 * b * a);
    d.addScale(c[8], .429043 * (b * b - g * g));
    return d;
  }, add:function(a) {
    for (var d = 0; 9 > d; d++) {
      this.coefficients[d].add(a.coefficients[d]);
    }
    return this;
  }, scale:function(a) {
    for (var d = 0; 9 > d; d++) {
      this.coefficients[d].multiplyScalar(a);
    }
    return this;
  }, lerp:function(a, d) {
    for (var b = 0; 9 > b; b++) {
      this.coefficients[b].lerp(a.coefficients[b], d);
    }
    return this;
  }, equals:function(a) {
    for (var d = 0; 9 > d; d++) {
      if (!this.coefficients[d].equals(a.coefficients[d])) {
        return !1;
      }
    }
    return !0;
  }, copy:function(a) {
    return this.set(a.coefficients);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, fromArray:function(a, d) {
    void 0 === d && (d = 0);
    for (var b = this.coefficients, g = 0; 9 > g; g++) {
      b[g].fromArray(a, d + 3 * g);
    }
    return this;
  }, toArray:function(a, d) {
    void 0 === a && (a = []);
    void 0 === d && (d = 0);
    for (var b = this.coefficients, g = 0; 9 > g; g++) {
      b[g].toArray(a, d + 3 * g);
    }
    return a;
  }});
  Object.assign(Cf, {getBasisAt:function(a, d) {
    var b = a.x, g = a.y;
    a = a.z;
    d[0] = .282095;
    d[1] = .488603 * g;
    d[2] = .488603 * a;
    d[3] = .488603 * b;
    d[4] = 1.092548 * b * g;
    d[5] = 1.092548 * g * a;
    d[6] = .315392 * (3 * a * a - 1);
    d[7] = 1.092548 * b * a;
    d[8] = .546274 * (b * b - g * g);
  }});
  nb.prototype = Object.assign(Object.create(qa.prototype), {constructor:nb, isLightProbe:!0, copy:function(a) {
    qa.prototype.copy.call(this, a);
    this.sh.copy(a.sh);
    this.intensity = a.intensity;
    return this;
  }, toJSON:function(a) {
    return qa.prototype.toJSON.call(this, a);
  }});
  Hg.prototype = Object.assign(Object.create(nb.prototype), {constructor:Hg, isHemisphereLightProbe:!0, copy:function(a) {
    nb.prototype.copy.call(this, a);
    return this;
  }, toJSON:function(a) {
    return nb.prototype.toJSON.call(this, a);
  }});
  Ig.prototype = Object.assign(Object.create(nb.prototype), {constructor:Ig, isAmbientLightProbe:!0, copy:function(a) {
    nb.prototype.copy.call(this, a);
    return this;
  }, toJSON:function(a) {
    return nb.prototype.toJSON.call(this, a);
  }});
  var Gi = new m, Hi = new m;
  Object.assign(bi.prototype, {update:function(a) {
    var d = this._cache;
    if (d.focus !== a.focus || d.fov !== a.fov || d.aspect !== a.aspect * this.aspect || d.near !== a.near || d.far !== a.far || d.zoom !== a.zoom || d.eyeSep !== this.eyeSep) {
      d.focus = a.focus;
      d.fov = a.fov;
      d.aspect = a.aspect * this.aspect;
      d.near = a.near;
      d.far = a.far;
      d.zoom = a.zoom;
      d.eyeSep = this.eyeSep;
      var b = a.projectionMatrix.clone(), g = d.eyeSep / 2, c = g * d.near / d.focus, l = d.near * Math.tan(ka.DEG2RAD * d.fov * .5) / d.zoom;
      Hi.elements[12] = -g;
      Gi.elements[12] = g;
      g = -l * d.aspect + c;
      var e = l * d.aspect + c;
      b.elements[0] = 2 * d.near / (e - g);
      b.elements[8] = (e + g) / (e - g);
      this.cameraL.projectionMatrix.copy(b);
      g = -l * d.aspect - c;
      e = l * d.aspect - c;
      b.elements[0] = 2 * d.near / (e - g);
      b.elements[8] = (e + g) / (e - g);
      this.cameraR.projectionMatrix.copy(b);
    }
    this.cameraL.matrixWorld.copy(a.matrixWorld).multiply(Hi);
    this.cameraR.matrixWorld.copy(a.matrixWorld).multiply(Gi);
  }});
  Object.assign(Jg.prototype, {start:function() {
    this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
    this.elapsedTime = 0;
    this.running = !0;
  }, stop:function() {
    this.getElapsedTime();
    this.autoStart = this.running = !1;
  }, getElapsedTime:function() {
    this.getDelta();
    return this.elapsedTime;
  }, getDelta:function() {
    var a = 0;
    if (this.autoStart && !this.running) {
      return this.start(), 0;
    }
    if (this.running) {
      var d = ("undefined" === typeof performance ? Date : performance).now();
      a = (d - this.oldTime) / 1E3;
      this.oldTime = d;
      this.elapsedTime += a;
    }
    return a;
  }});
  var Lc = new e, Ii = new b, Yj = new e, Mc = new e;
  Kg.prototype = Object.assign(Object.create(v.prototype), {constructor:Kg, getInput:function() {
    return this.gain;
  }, removeFilter:function() {
    null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
    return this;
  }, getFilter:function() {
    return this.filter;
  }, setFilter:function(a) {
    null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
    this.filter = a;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }, getMasterVolume:function() {
    return this.gain.gain.value;
  }, setMasterVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }, updateMatrixWorld:function(a) {
    v.prototype.updateMatrixWorld.call(this, a);
    a = this.context.listener;
    var d = this.up;
    this.timeDelta = this._clock.getDelta();
    this.matrixWorld.decompose(Lc, Ii, Yj);
    Mc.set(0, 0, -1).applyQuaternion(Ii);
    if (a.positionX) {
      var b = this.context.currentTime + this.timeDelta;
      a.positionX.linearRampToValueAtTime(Lc.x, b);
      a.positionY.linearRampToValueAtTime(Lc.y, b);
      a.positionZ.linearRampToValueAtTime(Lc.z, b);
      a.forwardX.linearRampToValueAtTime(Mc.x, b);
      a.forwardY.linearRampToValueAtTime(Mc.y, b);
      a.forwardZ.linearRampToValueAtTime(Mc.z, b);
      a.upX.linearRampToValueAtTime(d.x, b);
      a.upY.linearRampToValueAtTime(d.y, b);
      a.upZ.linearRampToValueAtTime(d.z, b);
    } else {
      a.setPosition(Lc.x, Lc.y, Lc.z), a.setOrientation(Mc.x, Mc.y, Mc.z, d.x, d.y, d.z);
    }
  }});
  sd.prototype = Object.assign(Object.create(v.prototype), {constructor:sd, getOutput:function() {
    return this.gain;
  }, setNodeSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "audioNode";
    this.source = a;
    this.connect();
    return this;
  }, setMediaElementSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(a);
    this.connect();
    return this;
  }, setMediaStreamSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "mediaStreamNode";
    this.source = this.context.createMediaStreamSource(a);
    this.connect();
    return this;
  }, setBuffer:function(a) {
    this.buffer = a;
    this.sourceType = "buffer";
    this.autoplay && this.play();
    return this;
  }, play:function(a) {
    void 0 === a && (a = 0);
    if (!0 === this.isPlaying) {
      console.warn("THREE.Audio: Audio is already playing.");
    } else {
      if (!1 === this.hasPlaybackControl) {
        console.warn("THREE.Audio: this Audio has no playback control.");
      } else {
        return this._startedAt = this.context.currentTime + a, a = this.context.createBufferSource(), a.buffer = this.buffer, a.loop = this.loop, a.loopStart = this.loopStart, a.loopEnd = this.loopEnd, a.onended = this.onEnded.bind(this), a.start(this._startedAt, this._pausedAt + this.offset, this.duration), this.isPlaying = !0, this.source = a, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
      }
    }
  }, pause:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return !0 === this.isPlaying && (this._pausedAt = (this.context.currentTime - this._startedAt) * this.playbackRate, this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
    }
  }, stop:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this._pausedAt = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
    }
  }, connect:function() {
    if (0 < this.filters.length) {
      this.source.connect(this.filters[0]);
      for (var a = 1, d = this.filters.length; a < d; a++) {
        this.filters[a - 1].connect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    return this;
  }, disconnect:function() {
    if (0 < this.filters.length) {
      this.source.disconnect(this.filters[0]);
      for (var a = 1, d = this.filters.length; a < d; a++) {
        this.filters[a - 1].disconnect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    return this;
  }, getFilters:function() {
    return this.filters;
  }, setFilters:function(a) {
    a || (a = []);
    !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
    return this;
  }, setDetune:function(a) {
    this.detune = a;
    if (void 0 !== this.source.detune) {
      return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
  }, getDetune:function() {
    return this.detune;
  }, getFilter:function() {
    return this.getFilters()[0];
  }, setFilter:function(a) {
    return this.setFilters(a ? [a] : []);
  }, setPlaybackRate:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
  }, getPlaybackRate:function() {
    return this.playbackRate;
  }, onEnded:function() {
    this.isPlaying = !1;
  }, getLoop:function() {
    return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }, setLoop:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
    }
  }, setLoopStart:function(a) {
    this.loopStart = a;
    return this;
  }, setLoopEnd:function(a) {
    this.loopEnd = a;
    return this;
  }, getVolume:function() {
    return this.gain.gain.value;
  }, setVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }});
  var Nc = new e, Ji = new b, Zj = new e, Oc = new e;
  Mg.prototype = Object.assign(Object.create(sd.prototype), {constructor:Mg, getOutput:function() {
    return this.panner;
  }, getRefDistance:function() {
    return this.panner.refDistance;
  }, setRefDistance:function(a) {
    this.panner.refDistance = a;
    return this;
  }, getRolloffFactor:function() {
    return this.panner.rolloffFactor;
  }, setRolloffFactor:function(a) {
    this.panner.rolloffFactor = a;
    return this;
  }, getDistanceModel:function() {
    return this.panner.distanceModel;
  }, setDistanceModel:function(a) {
    this.panner.distanceModel = a;
    return this;
  }, getMaxDistance:function() {
    return this.panner.maxDistance;
  }, setMaxDistance:function(a) {
    this.panner.maxDistance = a;
    return this;
  }, setDirectionalCone:function(a, d, b) {
    this.panner.coneInnerAngle = a;
    this.panner.coneOuterAngle = d;
    this.panner.coneOuterGain = b;
    return this;
  }, updateMatrixWorld:function(a) {
    v.prototype.updateMatrixWorld.call(this, a);
    if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
      if (this.matrixWorld.decompose(Nc, Ji, Zj), Oc.set(0, 0, 1).applyQuaternion(Ji), a = this.panner, a.positionX) {
        var d = this.context.currentTime + this.listener.timeDelta;
        a.positionX.linearRampToValueAtTime(Nc.x, d);
        a.positionY.linearRampToValueAtTime(Nc.y, d);
        a.positionZ.linearRampToValueAtTime(Nc.z, d);
        a.orientationX.linearRampToValueAtTime(Oc.x, d);
        a.orientationY.linearRampToValueAtTime(Oc.y, d);
        a.orientationZ.linearRampToValueAtTime(Oc.z, d);
      } else {
        a.setPosition(Nc.x, Nc.y, Nc.z), a.setOrientation(Oc.x, Oc.y, Oc.z);
      }
    }
  }});
  Object.assign(Ng.prototype, {getFrequencyData:function() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }, getAverageFrequency:function() {
    for (var a = 0, d = this.getFrequencyData(), b = 0; b < d.length; b++) {
      a += d[b];
    }
    return a / d.length;
  }});
  Object.assign(Og.prototype, {accumulate:function(a, d) {
    var b = this.buffer, g = this.valueSize;
    a = a * g + g;
    var c = this.cumulativeWeight;
    if (0 === c) {
      for (c = 0; c !== g; ++c) {
        b[a + c] = b[c];
      }
      c = d;
    } else {
      c += d, this._mixBufferRegion(b, a, 0, d / c, g);
    }
    this.cumulativeWeight = c;
  }, apply:function(a) {
    var d = this.valueSize, b = this.buffer;
    a = a * d + d;
    var g = this.cumulativeWeight, c = this.binding;
    this.cumulativeWeight = 0;
    1 > g && this._mixBufferRegion(b, a, 3 * d, 1 - g, d);
    g = d;
    for (var l = d + d; g !== l; ++g) {
      if (b[g] !== b[g + d]) {
        c.setValue(b, a);
        break;
      }
    }
  }, saveOriginalState:function() {
    var a = this.buffer, d = this.valueSize, b = 3 * d;
    this.binding.getValue(a, b);
    for (var c = d; c !== b; ++c) {
      a[c] = a[b + c % d];
    }
    this.cumulativeWeight = 0;
  }, restoreOriginalState:function() {
    this.binding.setValue(this.buffer, 3 * this.valueSize);
  }, _select:function(a, d, b, c, l) {
    if (.5 <= c) {
      for (c = 0; c !== l; ++c) {
        a[d + c] = a[b + c];
      }
    }
  }, _slerp:function(a, d, c, l) {
    b.slerpFlat(a, d, a, d, a, c, l);
  }, _lerp:function(a, d, b, c, l) {
    for (var g = 1 - c, e = 0; e !== l; ++e) {
      var f = d + e;
      a[f] = a[f] * g + a[b + e] * c;
    }
  }});
  var ak = /[\[\]\.:\/]/g, bk = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]", ck = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]"), dk = /(WCOD+)?/.source.replace("WCOD", bk), ek = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), fk = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), gk = new RegExp("^" + ck + dk + ek + fk + "$"), hk = ["material", "materials", "bones"];
  Object.assign(ci.prototype, {getValue:function(a, d) {
    this.bind();
    var b = this._bindings[this._targetGroup.nCachedObjects_];
    void 0 !== b && b.getValue(a, d);
  }, setValue:function(a, d) {
    for (var b = this._bindings, g = this._targetGroup.nCachedObjects_, c = b.length; g !== c; ++g) {
      b[g].setValue(a, d);
    }
  }, bind:function() {
    for (var a = this._bindings, d = this._targetGroup.nCachedObjects_, b = a.length; d !== b; ++d) {
      a[d].bind();
    }
  }, unbind:function() {
    for (var a = this._bindings, d = this._targetGroup.nCachedObjects_, b = a.length; d !== b; ++d) {
      a[d].unbind();
    }
  }});
  Object.assign(Oa, {Composite:ci, create:function(a, d, b) {
    return a && a.isAnimationObjectGroup ? new Oa.Composite(a, d, b) : new Oa(a, d, b);
  }, sanitizeNodeName:function(a) {
    return a.replace(/\s/g, "_").replace(ak, "");
  }, parseTrackName:function(a) {
    var d = gk.exec(a);
    if (!d) {
      throw Error("PropertyBinding: Cannot parse trackName: " + a);
    }
    d = {nodeName:d[2], objectName:d[3], objectIndex:d[4], propertyName:d[5], propertyIndex:d[6]};
    var b = d.nodeName && d.nodeName.lastIndexOf(".");
    if (void 0 !== b && -1 !== b) {
      var g = d.nodeName.substring(b + 1);
      -1 !== hk.indexOf(g) && (d.nodeName = d.nodeName.substring(0, b), d.objectName = g);
    }
    if (null === d.propertyName || 0 === d.propertyName.length) {
      throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);
    }
    return d;
  }, findNode:function(a, d) {
    if (!d || "" === d || "root" === d || "." === d || -1 === d || d === a.name || d === a.uuid) {
      return a;
    }
    if (a.skeleton) {
      var b = a.skeleton.getBoneByName(d);
      if (void 0 !== b) {
        return b;
      }
    }
    if (a.children) {
      var g = function(a) {
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          if (c.name === d || c.uuid === d || (c = g(c.children))) {
            return c;
          }
        }
        return null;
      };
      if (a = g(a.children)) {
        return a;
      }
    }
    return null;
  }});
  Object.assign(Oa.prototype, {_getValue_unavailable:function() {
  }, _setValue_unavailable:function() {
  }, BindingType:{Direct:0, EntireArray:1, ArrayElement:2, HasFromToArray:3}, Versioning:{None:0, NeedsUpdate:1, MatrixWorldNeedsUpdate:2}, GetterByBindingType:[function(a, d) {
    a[d] = this.node[this.propertyName];
  }, function(a, d) {
    for (var b = this.resolvedProperty, g = 0, c = b.length; g !== c; ++g) {
      a[d++] = b[g];
    }
  }, function(a, d) {
    a[d] = this.resolvedProperty[this.propertyIndex];
  }, function(a, d) {
    this.resolvedProperty.toArray(a, d);
  }], SetterByBindingTypeAndVersioning:[[function(a, d) {
    this.targetObject[this.propertyName] = a[d];
  }, function(a, d) {
    this.targetObject[this.propertyName] = a[d];
    this.targetObject.needsUpdate = !0;
  }, function(a, d) {
    this.targetObject[this.propertyName] = a[d];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, d) {
    for (var b = this.resolvedProperty, g = 0, c = b.length; g !== c; ++g) {
      b[g] = a[d++];
    }
  }, function(a, d) {
    for (var b = this.resolvedProperty, g = 0, c = b.length; g !== c; ++g) {
      b[g] = a[d++];
    }
    this.targetObject.needsUpdate = !0;
  }, function(a, d) {
    for (var b = this.resolvedProperty, g = 0, c = b.length; g !== c; ++g) {
      b[g] = a[d++];
    }
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, d) {
    this.resolvedProperty[this.propertyIndex] = a[d];
  }, function(a, d) {
    this.resolvedProperty[this.propertyIndex] = a[d];
    this.targetObject.needsUpdate = !0;
  }, function(a, d) {
    this.resolvedProperty[this.propertyIndex] = a[d];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, d) {
    this.resolvedProperty.fromArray(a, d);
  }, function(a, d) {
    this.resolvedProperty.fromArray(a, d);
    this.targetObject.needsUpdate = !0;
  }, function(a, d) {
    this.resolvedProperty.fromArray(a, d);
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }]], getValue:function(a, d) {
    this.bind();
    this.getValue(a, d);
  }, setValue:function(a, d) {
    this.bind();
    this.setValue(a, d);
  }, bind:function() {
    var a = this.node, d = this.parsedPath, b = d.objectName, c = d.propertyName, l = d.propertyIndex;
    a || (this.node = a = Oa.findNode(this.rootNode, d.nodeName) || this.rootNode);
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (a) {
      if (b) {
        var e = d.objectIndex;
        switch(b) {
          case "materials":
            if (!a.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!a.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            a = a.material.materials;
            break;
          case "bones":
            if (!a.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            a = a.skeleton.bones;
            for (b = 0; b < a.length; b++) {
              if (a[b].name === e) {
                e = b;
                break;
              }
            }
            break;
          default:
            if (void 0 === a[b]) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            a = a[b];
        }
        if (void 0 !== e) {
          if (void 0 === a[e]) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);
            return;
          }
          a = a[e];
        }
      }
      e = a[c];
      if (void 0 === e) {
        console.error("THREE.PropertyBinding: Trying to update property for track: " + d.nodeName + "." + c + " but it wasn't found.", a);
      } else {
        d = this.Versioning.None;
        this.targetObject = a;
        void 0 !== a.needsUpdate ? d = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (d = this.Versioning.MatrixWorldNeedsUpdate);
        b = this.BindingType.Direct;
        if (void 0 !== l) {
          if ("morphTargetInfluences" === c) {
            if (!a.geometry) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              return;
            }
            if (a.geometry.isBufferGeometry) {
              if (!a.geometry.morphAttributes) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                return;
              }
              for (b = 0; b < this.node.geometry.morphAttributes.position.length; b++) {
                if (a.geometry.morphAttributes.position[b].name === l) {
                  l = b;
                  break;
                }
              }
            } else {
              if (!a.geometry.morphTargets) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                return;
              }
              for (b = 0; b < this.node.geometry.morphTargets.length; b++) {
                if (a.geometry.morphTargets[b].name === l) {
                  l = b;
                  break;
                }
              }
            }
          }
          b = this.BindingType.ArrayElement;
          this.resolvedProperty = e;
          this.propertyIndex = l;
        } else {
          void 0 !== e.fromArray && void 0 !== e.toArray ? (b = this.BindingType.HasFromToArray, this.resolvedProperty = e) : Array.isArray(e) ? (b = this.BindingType.EntireArray, this.resolvedProperty = e) : this.propertyName = c;
        }
        this.getValue = this.GetterByBindingType[b];
        this.setValue = this.SetterByBindingTypeAndVersioning[b][d];
      }
    } else {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
    }
  }, unbind:function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }});
  Object.assign(Oa.prototype, {_getValue_unbound:Oa.prototype.getValue, _setValue_unbound:Oa.prototype.setValue});
  Object.assign(di.prototype, {isAnimationObjectGroup:!0, add:function() {
    for (var a = this._objects, d = a.length, b = this.nCachedObjects_, c = this._indicesByUUID, l = this._paths, e = this._parsedPaths, f = this._bindings, h = f.length, p = void 0, m = 0, n = arguments.length; m !== n; ++m) {
      var k = arguments[m], q = k.uuid, u = c[q];
      if (void 0 === u) {
        u = d++;
        c[q] = u;
        a.push(k);
        q = 0;
        for (var r = h; q !== r; ++q) {
          f[q].push(new Oa(k, l[q], e[q]));
        }
      } else {
        if (u < b) {
          p = a[u];
          var v = --b;
          r = a[v];
          c[r.uuid] = u;
          a[u] = r;
          c[q] = v;
          a[v] = k;
          q = 0;
          for (r = h; q !== r; ++q) {
            var w = f[q], y = w[u];
            w[u] = w[v];
            void 0 === y && (y = new Oa(k, l[q], e[q]));
            w[v] = y;
          }
        } else {
          a[u] !== p && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
    }
    this.nCachedObjects_ = b;
  }, remove:function() {
    for (var a = this._objects, d = this.nCachedObjects_, b = this._indicesByUUID, c = this._bindings, l = c.length, e = 0, f = arguments.length; e !== f; ++e) {
      var h = arguments[e], p = h.uuid, m = b[p];
      if (void 0 !== m && m >= d) {
        var n = d++, k = a[n];
        b[k.uuid] = m;
        a[m] = k;
        b[p] = n;
        a[n] = h;
        h = 0;
        for (p = l; h !== p; ++h) {
          k = c[h];
          var q = k[m];
          k[m] = k[n];
          k[n] = q;
        }
      }
    }
    this.nCachedObjects_ = d;
  }, uncache:function() {
    for (var a = this._objects, d = a.length, b = this.nCachedObjects_, c = this._indicesByUUID, l = this._bindings, e = l.length, f = 0, h = arguments.length; f !== h; ++f) {
      var p = arguments[f].uuid, m = c[p];
      if (void 0 !== m) {
        if (delete c[p], m < b) {
          p = --b;
          var n = a[p], k = --d, q = a[k];
          c[n.uuid] = m;
          a[m] = n;
          c[q.uuid] = p;
          a[p] = q;
          a.pop();
          n = 0;
          for (q = e; n !== q; ++n) {
            var u = l[n], r = u[k];
            u[m] = u[p];
            u[p] = r;
            u.pop();
          }
        } else {
          for (k = --d, q = a[k], c[q.uuid] = m, a[m] = q, a.pop(), n = 0, q = e; n !== q; ++n) {
            u = l[n], u[m] = u[k], u.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = b;
  }, subscribe_:function(a, d) {
    var b = this._bindingsIndicesByPath, g = b[a], c = this._bindings;
    if (void 0 !== g) {
      return c[g];
    }
    var l = this._paths, e = this._parsedPaths, f = this._objects, h = this.nCachedObjects_, p = Array(f.length);
    g = c.length;
    b[a] = g;
    l.push(a);
    e.push(d);
    c.push(p);
    b = h;
    for (g = f.length; b !== g; ++b) {
      p[b] = new Oa(f[b], a, d);
    }
    return p;
  }, unsubscribe_:function(a) {
    var d = this._bindingsIndicesByPath, b = d[a];
    if (void 0 !== b) {
      var g = this._paths, c = this._parsedPaths, l = this._bindings, e = l.length - 1, f = l[e];
      d[a[e]] = b;
      l[b] = f;
      l.pop();
      c[b] = c[e];
      c.pop();
      g[b] = g[e];
      g.pop();
    }
  }});
  Object.assign(ei.prototype, {play:function() {
    this._mixer._activateAction(this);
    return this;
  }, stop:function() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }, reset:function() {
    this.paused = !1;
    this.enabled = !0;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }, isRunning:function() {
    return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
  }, isScheduled:function() {
    return this._mixer._isActiveAction(this);
  }, startAt:function(a) {
    this._startTime = a;
    return this;
  }, setLoop:function(a, d) {
    this.loop = a;
    this.repetitions = d;
    return this;
  }, setEffectiveWeight:function(a) {
    this.weight = a;
    this._effectiveWeight = this.enabled ? a : 0;
    return this.stopFading();
  }, getEffectiveWeight:function() {
    return this._effectiveWeight;
  }, fadeIn:function(a) {
    return this._scheduleFading(a, 0, 1);
  }, fadeOut:function(a) {
    return this._scheduleFading(a, 1, 0);
  }, crossFadeFrom:function(a, d, b) {
    a.fadeOut(d);
    this.fadeIn(d);
    if (b) {
      b = this._clip.duration;
      var g = a._clip.duration, c = b / g;
      a.warp(1, g / b, d);
      this.warp(c, 1, d);
    }
    return this;
  }, crossFadeTo:function(a, d, b) {
    return a.crossFadeFrom(this, d, b);
  }, stopFading:function() {
    var a = this._weightInterpolant;
    null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, setEffectiveTimeScale:function(a) {
    this.timeScale = a;
    this._effectiveTimeScale = this.paused ? 0 : a;
    return this.stopWarping();
  }, getEffectiveTimeScale:function() {
    return this._effectiveTimeScale;
  }, setDuration:function(a) {
    this.timeScale = this._clip.duration / a;
    return this.stopWarping();
  }, syncWith:function(a) {
    this.time = a.time;
    this.timeScale = a.timeScale;
    return this.stopWarping();
  }, halt:function(a) {
    return this.warp(this._effectiveTimeScale, 0, a);
  }, warp:function(a, d, b) {
    var g = this._mixer, c = g.time, l = this._timeScaleInterpolant, e = this.timeScale;
    null === l && (this._timeScaleInterpolant = l = g._lendControlInterpolant());
    g = l.parameterPositions;
    l = l.sampleValues;
    g[0] = c;
    g[1] = c + b;
    l[0] = a / e;
    l[1] = d / e;
    return this;
  }, stopWarping:function() {
    var a = this._timeScaleInterpolant;
    null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, getMixer:function() {
    return this._mixer;
  }, getClip:function() {
    return this._clip;
  }, getRoot:function() {
    return this._localRoot || this._mixer._root;
  }, _update:function(a, d, b, c) {
    if (this.enabled) {
      var g = this._startTime;
      if (null !== g) {
        d = (a - g) * b;
        if (0 > d || 0 === b) {
          return;
        }
        this._startTime = null;
        d *= b;
      }
      d *= this._updateTimeScale(a);
      b = this._updateTime(d);
      a = this._updateWeight(a);
      if (0 < a) {
        d = this._interpolants;
        g = this._propertyBindings;
        for (var l = 0, e = d.length; l !== e; ++l) {
          d[l].evaluate(b), g[l].accumulate(c, a);
        }
      }
    } else {
      this._updateWeight(a);
    }
  }, _updateWeight:function(a) {
    var d = 0;
    if (this.enabled) {
      d = this.weight;
      var b = this._weightInterpolant;
      if (null !== b) {
        var g = b.evaluate(a)[0];
        d *= g;
        a > b.parameterPositions[1] && (this.stopFading(), 0 === g && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = d;
  }, _updateTimeScale:function(a) {
    var d = 0;
    if (!this.paused) {
      d = this.timeScale;
      var b = this._timeScaleInterpolant;
      if (null !== b) {
        var g = b.evaluate(a)[0];
        d *= g;
        a > b.parameterPositions[1] && (this.stopWarping(), 0 === d ? this.paused = !0 : this.timeScale = d);
      }
    }
    return this._effectiveTimeScale = d;
  }, _updateTime:function(a) {
    var d = this.time + a, b = this._clip.duration, g = this.loop, c = this._loopCount, l = 2202 === g;
    if (0 === a) {
      return -1 === c ? d : l && 1 === (c & 1) ? b - d : d;
    }
    if (2200 === g) {
      a: {
        if (-1 === c && (this._loopCount = 0, this._setEndings(!0, !0, !1)), d >= b) {
          d = b;
        } else {
          if (0 > d) {
            d = 0;
          } else {
            this.time = d;
            break a;
          }
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;
        this.time = d;
        this._mixer.dispatchEvent({type:"finished", action:this, direction:0 > a ? -1 : 1});
      }
    } else {
      -1 === c && (0 <= a ? (c = 0, this._setEndings(!0, 0 === this.repetitions, l)) : this._setEndings(0 === this.repetitions, !0, l));
      if (d >= b || 0 > d) {
        g = Math.floor(d / b);
        d -= b * g;
        c += Math.abs(g);
        var e = this.repetitions - c;
        0 >= e ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = d = 0 < a ? b : 0, this._mixer.dispatchEvent({type:"finished", action:this, direction:0 < a ? 1 : -1})) : (1 === e ? (a = 0 > a, this._setEndings(a, !a, l)) : this._setEndings(!1, !1, l), this._loopCount = c, this.time = d, this._mixer.dispatchEvent({type:"loop", action:this, loopDelta:g}));
      } else {
        this.time = d;
      }
      if (l && 1 === (c & 1)) {
        return b - d;
      }
    }
    return d;
  }, _setEndings:function(a, d, b) {
    var g = this._interpolantSettings;
    b ? (g.endingStart = 2401, g.endingEnd = 2401) : (g.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, g.endingEnd = d ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
  }, _scheduleFading:function(a, d, b) {
    var g = this._mixer, c = g.time, l = this._weightInterpolant;
    null === l && (this._weightInterpolant = l = g._lendControlInterpolant());
    g = l.parameterPositions;
    l = l.sampleValues;
    g[0] = c;
    l[0] = d;
    g[1] = c + a;
    l[1] = b;
    return this;
  }});
  Pg.prototype = Object.assign(Object.create(c.prototype), {constructor:Pg, _bindAction:function(a, d) {
    var b = a._localRoot || this._root, g = a._clip.tracks, c = g.length, l = a._propertyBindings;
    a = a._interpolants;
    var e = b.uuid, f = this._bindingsByRootAndName, h = f[e];
    void 0 === h && (h = {}, f[e] = h);
    for (f = 0; f !== c; ++f) {
      var p = g[f], m = p.name, n = h[m];
      if (void 0 === n) {
        n = l[f];
        if (void 0 !== n) {
          null === n._cacheIndex && (++n.referenceCount, this._addInactiveBinding(n, e, m));
          continue;
        }
        n = new Og(Oa.create(b, m, d && d._propertyBindings[f].binding.parsedPath), p.ValueTypeName, p.getValueSize());
        ++n.referenceCount;
        this._addInactiveBinding(n, e, m);
      }
      l[f] = n;
      a[f].resultBuffer = n.buffer;
    }
  }, _activateAction:function(a) {
    if (!this._isActiveAction(a)) {
      if (null === a._cacheIndex) {
        var d = (a._localRoot || this._root).uuid, b = a._clip.uuid, g = this._actionsByClip[b];
        this._bindAction(a, g && g.knownActions[0]);
        this._addInactiveAction(a, b, d);
      }
      d = a._propertyBindings;
      b = 0;
      for (g = d.length; b !== g; ++b) {
        var c = d[b];
        0 === c.useCount++ && (this._lendBinding(c), c.saveOriginalState());
      }
      this._lendAction(a);
    }
  }, _deactivateAction:function(a) {
    if (this._isActiveAction(a)) {
      for (var d = a._propertyBindings, b = 0, g = d.length; b !== g; ++b) {
        var c = d[b];
        0 === --c.useCount && (c.restoreOriginalState(), this._takeBackBinding(c));
      }
      this._takeBackAction(a);
    }
  }, _initMemoryManager:function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    var a = this;
    this.stats = {actions:{get total() {
      return a._actions.length;
    }, get inUse() {
      return a._nActiveActions;
    }}, bindings:{get total() {
      return a._bindings.length;
    }, get inUse() {
      return a._nActiveBindings;
    }}, controlInterpolants:{get total() {
      return a._controlInterpolants.length;
    }, get inUse() {
      return a._nActiveControlInterpolants;
    }}};
  }, _isActiveAction:function(a) {
    a = a._cacheIndex;
    return null !== a && a < this._nActiveActions;
  }, _addInactiveAction:function(a, d, b) {
    var g = this._actions, c = this._actionsByClip, l = c[d];
    void 0 === l ? (l = {knownActions:[a], actionByRoot:{}}, a._byClipCacheIndex = 0, c[d] = l) : (d = l.knownActions, a._byClipCacheIndex = d.length, d.push(a));
    a._cacheIndex = g.length;
    g.push(a);
    l.actionByRoot[b] = a;
  }, _removeInactiveAction:function(a) {
    var d = this._actions, b = d[d.length - 1], g = a._cacheIndex;
    b._cacheIndex = g;
    d[g] = b;
    d.pop();
    a._cacheIndex = null;
    d = a._clip.uuid;
    b = this._actionsByClip;
    g = b[d];
    var c = g.knownActions, l = c[c.length - 1], e = a._byClipCacheIndex;
    l._byClipCacheIndex = e;
    c[e] = l;
    c.pop();
    a._byClipCacheIndex = null;
    delete g.actionByRoot[(a._localRoot || this._root).uuid];
    0 === c.length && delete b[d];
    this._removeInactiveBindingsForAction(a);
  }, _removeInactiveBindingsForAction:function(a) {
    a = a._propertyBindings;
    for (var d = 0, b = a.length; d !== b; ++d) {
      var g = a[d];
      0 === --g.referenceCount && this._removeInactiveBinding(g);
    }
  }, _lendAction:function(a) {
    var d = this._actions, b = a._cacheIndex, g = this._nActiveActions++, c = d[g];
    a._cacheIndex = g;
    d[g] = a;
    c._cacheIndex = b;
    d[b] = c;
  }, _takeBackAction:function(a) {
    var d = this._actions, b = a._cacheIndex, g = --this._nActiveActions, c = d[g];
    a._cacheIndex = g;
    d[g] = a;
    c._cacheIndex = b;
    d[b] = c;
  }, _addInactiveBinding:function(a, d, b) {
    var g = this._bindingsByRootAndName, c = g[d], l = this._bindings;
    void 0 === c && (c = {}, g[d] = c);
    c[b] = a;
    a._cacheIndex = l.length;
    l.push(a);
  }, _removeInactiveBinding:function(a) {
    var d = this._bindings, b = a.binding, g = b.rootNode.uuid;
    b = b.path;
    var c = this._bindingsByRootAndName, l = c[g], e = d[d.length - 1];
    a = a._cacheIndex;
    e._cacheIndex = a;
    d[a] = e;
    d.pop();
    delete l[b];
    0 === Object.keys(l).length && delete c[g];
  }, _lendBinding:function(a) {
    var d = this._bindings, b = a._cacheIndex, g = this._nActiveBindings++, c = d[g];
    a._cacheIndex = g;
    d[g] = a;
    c._cacheIndex = b;
    d[b] = c;
  }, _takeBackBinding:function(a) {
    var d = this._bindings, b = a._cacheIndex, g = --this._nActiveBindings, c = d[g];
    a._cacheIndex = g;
    d[g] = a;
    c._cacheIndex = b;
    d[b] = c;
  }, _lendControlInterpolant:function() {
    var a = this._controlInterpolants, d = this._nActiveControlInterpolants++, b = a[d];
    void 0 === b && (b = new ve(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), b.__cacheIndex = d, a[d] = b);
    return b;
  }, _takeBackControlInterpolant:function(a) {
    var d = this._controlInterpolants, b = a.__cacheIndex, g = --this._nActiveControlInterpolants, c = d[g];
    a.__cacheIndex = g;
    d[g] = a;
    c.__cacheIndex = b;
    d[b] = c;
  }, _controlInterpolantsResultBuffer:new Float32Array(1), clipAction:function(a, d) {
    var b = d || this._root, g = b.uuid;
    b = "string" === typeof a ? db.findByName(b, a) : a;
    a = null !== b ? b.uuid : a;
    var c = this._actionsByClip[a], l = null;
    if (void 0 !== c) {
      l = c.actionByRoot[g];
      if (void 0 !== l) {
        return l;
      }
      l = c.knownActions[0];
      null === b && (b = l._clip);
    }
    if (null === b) {
      return null;
    }
    d = new ei(this, b, d);
    this._bindAction(d, l);
    this._addInactiveAction(d, a, g);
    return d;
  }, existingAction:function(a, d) {
    var b = d || this._root;
    d = b.uuid;
    b = "string" === typeof a ? db.findByName(b, a) : a;
    a = this._actionsByClip[b ? b.uuid : a];
    return void 0 !== a ? a.actionByRoot[d] || null : null;
  }, stopAllAction:function() {
    for (var a = this._actions, d = this._nActiveActions, b = this._bindings, c = this._nActiveBindings, l = this._nActiveBindings = this._nActiveActions = 0; l !== d; ++l) {
      a[l].reset();
    }
    for (l = 0; l !== c; ++l) {
      b[l].useCount = 0;
    }
    return this;
  }, update:function(a) {
    a *= this.timeScale;
    for (var d = this._actions, b = this._nActiveActions, c = this.time += a, g = Math.sign(a), l = this._accuIndex ^= 1, e = 0; e !== b; ++e) {
      d[e]._update(c, a, g, l);
    }
    a = this._bindings;
    d = this._nActiveBindings;
    for (e = 0; e !== d; ++e) {
      a[e].apply(l);
    }
    return this;
  }, setTime:function(a) {
    for (var d = this.time = 0; d < this._actions.length; d++) {
      this._actions[d].time = 0;
    }
    return this.update(a);
  }, getRoot:function() {
    return this._root;
  }, uncacheClip:function(a) {
    var d = this._actions;
    a = a.uuid;
    var b = this._actionsByClip, c = b[a];
    if (void 0 !== c) {
      c = c.knownActions;
      for (var g = 0, l = c.length; g !== l; ++g) {
        var e = c[g];
        this._deactivateAction(e);
        var f = e._cacheIndex, h = d[d.length - 1];
        e._cacheIndex = null;
        e._byClipCacheIndex = null;
        h._cacheIndex = f;
        d[f] = h;
        d.pop();
        this._removeInactiveBindingsForAction(e);
      }
      delete b[a];
    }
  }, uncacheRoot:function(a) {
    a = a.uuid;
    var d = this._actionsByClip;
    for (c in d) {
      var b = d[c].actionByRoot[a];
      void 0 !== b && (this._deactivateAction(b), this._removeInactiveAction(b));
    }
    var c = this._bindingsByRootAndName[a];
    if (void 0 !== c) {
      for (var g in c) {
        a = c[g], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    }
  }, uncacheAction:function(a, d) {
    a = this.existingAction(a, d);
    null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
  }});
  Df.prototype.clone = function() {
    return new Df(void 0 === this.value.clone ? this.value : this.value.clone());
  };
  Qg.prototype = Object.assign(Object.create(Kb.prototype), {constructor:Qg, isInstancedInterleavedBuffer:!0, copy:function(a) {
    Kb.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  Object.assign(fi.prototype, {linePrecision:1, set:function(a, d) {
    this.ray.set(a, d);
  }, setFromCamera:function(a, d) {
    d && d.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(d.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(d).sub(this.ray.origin).normalize(), this.camera = d) : d && d.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (d.near + d.far) / (d.near - d.far)).unproject(d), this.ray.direction.set(0, 0, -1).transformDirection(d.matrixWorld), this.camera = d) : console.error("THREE.Raycaster: Unsupported camera type.");
  }, intersectObject:function(a, d, b) {
    b = b || [];
    Rg(a, this, b, d);
    b.sort(gi);
    return b;
  }, intersectObjects:function(a, d, b) {
    b = b || [];
    if (!1 === Array.isArray(a)) {
      return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), b;
    }
    for (var c = 0, g = a.length; c < g; c++) {
      Rg(a[c], this, b, d);
    }
    b.sort(gi);
    return b;
  }});
  Object.assign(hi.prototype, {set:function(a, d, b) {
    this.radius = a;
    this.phi = d;
    this.theta = b;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.phi = a.phi;
    this.theta = a.theta;
    return this;
  }, makeSafe:function() {
    this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, d, b) {
    this.radius = Math.sqrt(a * a + d * d + b * b);
    0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, b), this.phi = Math.acos(ka.clamp(d / this.radius, -1, 1)));
    return this;
  }});
  Object.assign(ii.prototype, {set:function(a, d, b) {
    this.radius = a;
    this.theta = d;
    this.y = b;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.theta = a.theta;
    this.y = a.y;
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, d, b) {
    this.radius = Math.sqrt(a * a + b * b);
    this.theta = Math.atan2(a, b);
    this.y = d;
    return this;
  }});
  var Ki = new k;
  Object.assign(Sg.prototype, {set:function(a, d) {
    this.min.copy(a);
    this.max.copy(d);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var d = 0, b = a.length; d < b; d++) {
      this.expandByPoint(a[d]);
    }
    return this;
  }, setFromCenterAndSize:function(a, d) {
    d = Ki.copy(d).multiplyScalar(.5);
    this.min.copy(a).sub(d);
    this.max.copy(a).add(d);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
  }, getParameter:function(a, d) {
    void 0 === d && (console.warn("THREE.Box2: .getParameter() target is now required"), d = new k);
    return d.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
  }, clampPoint:function(a, d) {
    void 0 === d && (console.warn("THREE.Box2: .clampPoint() target is now required"), d = new k);
    return d.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function(a) {
    return Ki.copy(a).clamp(this.min, this.max).sub(a).length();
  }, intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  var Li = new e, $f = new e;
  Object.assign(Tg.prototype, {set:function(a, d) {
    this.start.copy(a);
    this.end.copy(d);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.start.copy(a.start);
    this.end.copy(a.end);
    return this;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new e);
    return a.addVectors(this.start, this.end).multiplyScalar(.5);
  }, delta:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new e);
    return a.subVectors(this.end, this.start);
  }, distanceSq:function() {
    return this.start.distanceToSquared(this.end);
  }, distance:function() {
    return this.start.distanceTo(this.end);
  }, at:function(a, d) {
    void 0 === d && (console.warn("THREE.Line3: .at() target is now required"), d = new e);
    return this.delta(d).multiplyScalar(a).add(this.start);
  }, closestPointToPointParameter:function(a, d) {
    Li.subVectors(a, this.start);
    $f.subVectors(this.end, this.start);
    a = $f.dot($f);
    a = $f.dot(Li) / a;
    d && (a = ka.clamp(a, 0, 1));
    return a;
  }, closestPointToPoint:function(a, d, b) {
    a = this.closestPointToPointParameter(a, d);
    void 0 === b && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), b = new e);
    return this.delta(b).multiplyScalar(a).add(this.start);
  }, applyMatrix4:function(a) {
    this.start.applyMatrix4(a);
    this.end.applyMatrix4(a);
    return this;
  }, equals:function(a) {
    return a.start.equals(this.start) && a.end.equals(this.end);
  }});
  Ae.prototype = Object.create(v.prototype);
  Ae.prototype.constructor = Ae;
  Ae.prototype.isImmediateRenderObject = !0;
  var Cb = new e, Vb = new e, ph = new f, ik = ["a", "b", "c"];
  Be.prototype = Object.create(ra.prototype);
  Be.prototype.constructor = Be;
  Be.prototype.update = function() {
    this.object.updateMatrixWorld(!0);
    ph.getNormalMatrix(this.object.matrixWorld);
    var a = this.object.matrixWorld, d = this.geometry.attributes.position, b = this.object.geometry;
    if (b && b.isGeometry) {
      for (var c = b.vertices, l = b.faces, e = b = 0, f = l.length; e < f; e++) {
        for (var h = l[e], p = 0, m = h.vertexNormals.length; p < m; p++) {
          var n = h.vertexNormals[p];
          Cb.copy(c[h[ik[p]]]).applyMatrix4(a);
          Vb.copy(n).applyMatrix3(ph).normalize().multiplyScalar(this.size).add(Cb);
          d.setXYZ(b, Cb.x, Cb.y, Cb.z);
          b += 1;
          d.setXYZ(b, Vb.x, Vb.y, Vb.z);
          b += 1;
        }
      }
    } else {
      if (b && b.isBufferGeometry) {
        for (c = b.attributes.position, l = b.attributes.normal, p = b = 0, m = c.count; p < m; p++) {
          Cb.set(c.getX(p), c.getY(p), c.getZ(p)).applyMatrix4(a), Vb.set(l.getX(p), l.getY(p), l.getZ(p)), Vb.applyMatrix3(ph).normalize().multiplyScalar(this.size).add(Cb), d.setXYZ(b, Cb.x, Cb.y, Cb.z), b += 1, d.setXYZ(b, Vb.x, Vb.y, Vb.z), b += 1;
        }
      }
    }
    d.needsUpdate = !0;
  };
  var Mi = new e;
  td.prototype = Object.create(v.prototype);
  td.prototype.constructor = td;
  td.prototype.dispose = function() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  };
  td.prototype.update = function() {
    this.light.updateMatrixWorld();
    var a = this.light.distance ? this.light.distance : 1E3, d = a * Math.tan(this.light.angle);
    this.cone.scale.set(d, d, a);
    Mi.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(Mi);
    void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  };
  var nc = new e, ag = new m, qh = new m;
  ud.prototype = Object.create(ra.prototype);
  ud.prototype.constructor = ud;
  ud.prototype.updateMatrixWorld = function(a) {
    var d = this.bones, b = this.geometry, c = b.getAttribute("position");
    qh.getInverse(this.root.matrixWorld);
    for (var g = 0, l = 0; g < d.length; g++) {
      var e = d[g];
      e.parent && e.parent.isBone && (ag.multiplyMatrices(qh, e.matrixWorld), nc.setFromMatrixPosition(ag), c.setXYZ(l, nc.x, nc.y, nc.z), ag.multiplyMatrices(qh, e.parent.matrixWorld), nc.setFromMatrixPosition(ag), c.setXYZ(l + 1, nc.x, nc.y, nc.z), l += 2);
    }
    b.getAttribute("position").needsUpdate = !0;
    v.prototype.updateMatrixWorld.call(this, a);
  };
  vd.prototype = Object.create(U.prototype);
  vd.prototype.constructor = vd;
  vd.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
  };
  vd.prototype.update = function() {
    void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  };
  wd.prototype = Object.create(Ga.prototype);
  wd.prototype.constructor = wd;
  wd.prototype.update = function() {
    this.scale.set(.5 * this.light.width, .5 * this.light.height, 1);
    if (void 0 !== this.color) {
      this.material.color.set(this.color), this.children[0].material.color.set(this.color);
    } else {
      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      var a = this.material.color, d = Math.max(a.r, a.g, a.b);
      1 < d && a.multiplyScalar(1 / d);
      this.children[0].material.color.copy(this.material.color);
    }
  };
  wd.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  var jk = new e, Ni = new B, Oi = new B;
  xd.prototype = Object.create(v.prototype);
  xd.prototype.constructor = xd;
  xd.prototype.dispose = function() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  xd.prototype.update = function() {
    var a = this.children[0];
    if (void 0 !== this.color) {
      this.material.color.set(this.color);
    } else {
      var d = a.geometry.getAttribute("color");
      Ni.copy(this.light.color);
      Oi.copy(this.light.groundColor);
      for (var b = 0, c = d.count; b < c; b++) {
        var l = b < c / 2 ? Ni : Oi;
        d.setXYZ(b, l.r, l.g, l.b);
      }
      d.needsUpdate = !0;
    }
    a.lookAt(jk.setFromMatrixPosition(this.light.matrixWorld).negate());
  };
  yd.prototype = Object.create(U.prototype);
  yd.prototype.constructor = yd;
  yd.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
  };
  yd.prototype.onBeforeRender = function() {
    this.position.copy(this.lightProbe.position);
    this.scale.set(1, 1, 1).multiplyScalar(this.size);
    this.material.uniforms.intensity.value = this.lightProbe.intensity;
  };
  Ef.prototype = Object.assign(Object.create(ra.prototype), {constructor:Ef, copy:function(a) {
    ra.prototype.copy.call(this, a);
    this.geometry.copy(a.geometry);
    this.material.copy(a.material);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  Ff.prototype = Object.create(ra.prototype);
  Ff.prototype.constructor = Ff;
  zd.prototype = Object.create(Ga.prototype);
  zd.prototype.constructor = zd;
  zd.prototype.update = function() {
    function a(a, d, c, g) {
      c = (d - a) / c;
      u.setXYZ(p, 0, 0, 0);
      m++;
      for (n = a; n < d; n += c) {
        k = p + m, u.setXYZ(k, Math.sin(n) * b, 0, Math.cos(n) * b), u.setXYZ(k + 1, Math.sin(Math.min(n + c, d)) * b, 0, Math.cos(Math.min(n + c, d)) * b), u.setXYZ(k + 2, 0, 0, 0), m += 3;
      }
      q.addGroup(p, m, g);
      p += m;
      m = 0;
    }
    var d = this.audio, b = this.range, c = this.divisionsInnerAngle, l = this.divisionsOuterAngle, e = ka.degToRad(d.panner.coneInnerAngle);
    d = ka.degToRad(d.panner.coneOuterAngle);
    var f = e / 2, h = d / 2, p = 0, m = 0, n, k, q = this.geometry, u = q.attributes.position;
    q.clearGroups();
    a(-h, -f, l, 0);
    a(-f, f, c, 1);
    a(f, h, l, 0);
    u.needsUpdate = !0;
    e === d && (this.material[0].visible = !1);
  };
  zd.prototype.dispose = function() {
    this.geometry.dispose();
    this.material[0].dispose();
    this.material[1].dispose();
  };
  var Pe = new e, bg = new e, Pi = new f;
  Ce.prototype = Object.create(ra.prototype);
  Ce.prototype.constructor = Ce;
  Ce.prototype.update = function() {
    this.object.updateMatrixWorld(!0);
    Pi.getNormalMatrix(this.object.matrixWorld);
    var a = this.object.matrixWorld, d = this.geometry.attributes.position, b = this.object.geometry, c = b.vertices;
    b = b.faces;
    for (var l = 0, e = 0, f = b.length; e < f; e++) {
      var h = b[e], p = h.normal;
      Pe.copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(a);
      bg.copy(p).applyMatrix3(Pi).normalize().multiplyScalar(this.size).add(Pe);
      d.setXYZ(l, Pe.x, Pe.y, Pe.z);
      l += 1;
      d.setXYZ(l, bg.x, bg.y, bg.z);
      l += 1;
    }
    d.needsUpdate = !0;
  };
  var Qi = new e, cg = new e, Ri = new e;
  Ad.prototype = Object.create(v.prototype);
  Ad.prototype.constructor = Ad;
  Ad.prototype.dispose = function() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  };
  Ad.prototype.update = function() {
    Qi.setFromMatrixPosition(this.light.matrixWorld);
    cg.setFromMatrixPosition(this.light.target.matrixWorld);
    Ri.subVectors(cg, Qi);
    this.lightPlane.lookAt(cg);
    void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));
    this.targetLine.lookAt(cg);
    this.targetLine.scale.z = Ri.length();
  };
  var Gf = new e, va = new pa;
  De.prototype = Object.create(ra.prototype);
  De.prototype.constructor = De;
  De.prototype.update = function() {
    var a = this.geometry, d = this.pointMap;
    va.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    xa("c", d, a, va, 0, 0, -1);
    xa("t", d, a, va, 0, 0, 1);
    xa("n1", d, a, va, -1, -1, -1);
    xa("n2", d, a, va, 1, -1, -1);
    xa("n3", d, a, va, -1, 1, -1);
    xa("n4", d, a, va, 1, 1, -1);
    xa("f1", d, a, va, -1, -1, 1);
    xa("f2", d, a, va, 1, -1, 1);
    xa("f3", d, a, va, -1, 1, 1);
    xa("f4", d, a, va, 1, 1, 1);
    xa("u1", d, a, va, .7, 1.1, -1);
    xa("u2", d, a, va, -.7, 1.1, -1);
    xa("u3", d, a, va, 0, 2, -1);
    xa("cf1", d, a, va, -1, 0, 1);
    xa("cf2", d, a, va, 1, 0, 1);
    xa("cf3", d, a, va, 0, -1, 1);
    xa("cf4", d, a, va, 0, 1, 1);
    xa("cn1", d, a, va, -1, 0, -1);
    xa("cn2", d, a, va, 1, 0, -1);
    xa("cn3", d, a, va, 0, -1, -1);
    xa("cn4", d, a, va, 0, 1, -1);
    a.getAttribute("position").needsUpdate = !0;
  };
  var dg = new x;
  Ob.prototype = Object.create(ra.prototype);
  Ob.prototype.constructor = Ob;
  Ob.prototype.update = function(a) {
    void 0 !== a && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    void 0 !== this.object && dg.setFromObject(this.object);
    if (!dg.isEmpty()) {
      a = dg.min;
      var d = dg.max, b = this.geometry.attributes.position, c = b.array;
      c[0] = d.x;
      c[1] = d.y;
      c[2] = d.z;
      c[3] = a.x;
      c[4] = d.y;
      c[5] = d.z;
      c[6] = a.x;
      c[7] = a.y;
      c[8] = d.z;
      c[9] = d.x;
      c[10] = a.y;
      c[11] = d.z;
      c[12] = d.x;
      c[13] = d.y;
      c[14] = a.z;
      c[15] = a.x;
      c[16] = d.y;
      c[17] = a.z;
      c[18] = a.x;
      c[19] = a.y;
      c[20] = a.z;
      c[21] = d.x;
      c[22] = a.y;
      c[23] = a.z;
      b.needsUpdate = !0;
      this.geometry.computeBoundingSphere();
    }
  };
  Ob.prototype.setFromObject = function(a) {
    this.object = a;
    this.update();
    return this;
  };
  Ob.prototype.copy = function(a) {
    ra.prototype.copy.call(this, a);
    this.object = a.object;
    return this;
  };
  Ob.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  Ee.prototype = Object.create(ra.prototype);
  Ee.prototype.constructor = Ee;
  Ee.prototype.updateMatrixWorld = function(a) {
    var d = this.box;
    d.isEmpty() || (d.getCenter(this.position), d.getSize(this.scale), this.scale.multiplyScalar(.5), v.prototype.updateMatrixWorld.call(this, a));
  };
  Fe.prototype = Object.create(Ga.prototype);
  Fe.prototype.constructor = Fe;
  Fe.prototype.updateMatrixWorld = function(a) {
    var d = -this.plane.constant;
    1E-8 > Math.abs(d) && (d = 1E-8);
    this.scale.set(.5 * this.size, .5 * this.size, d);
    this.children[0].material.side = 0 > d ? 1 : 0;
    this.lookAt(this.plane.normal);
    v.prototype.updateMatrixWorld.call(this, a);
  };
  var Si = new e, Hf, Ug;
  Pb.prototype = Object.create(v.prototype);
  Pb.prototype.constructor = Pb;
  Pb.prototype.setDirection = function(a) {
    .99999 < a.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > a.y ? this.quaternion.set(1, 0, 0, 0) : (Si.set(a.z, 0, -a.x).normalize(), this.quaternion.setFromAxisAngle(Si, Math.acos(a.y)));
  };
  Pb.prototype.setLength = function(a, d, b) {
    void 0 === d && (d = .2 * a);
    void 0 === b && (b = .2 * d);
    this.line.scale.set(1, Math.max(1E-4, a - d), 1);
    this.line.updateMatrix();
    this.cone.scale.set(b, d, b);
    this.cone.position.y = a;
    this.cone.updateMatrix();
  };
  Pb.prototype.setColor = function(a) {
    this.line.material.color.set(a);
    this.cone.material.color.set(a);
  };
  Pb.prototype.copy = function(a) {
    v.prototype.copy.call(this, a, !1);
    this.line.copy(a.line);
    this.cone.copy(a.cone);
    return this;
  };
  Pb.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  Ge.prototype = Object.create(ra.prototype);
  Ge.prototype.constructor = Ge;
  ca.create = function(a, d) {
    console.log("THREE.Curve.create() has been deprecated");
    a.prototype = Object.create(ca.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = d;
    return a;
  };
  Object.assign(Nb.prototype, {createPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getPoints(a);
    return this.createGeometry(a);
  }, createSpacedPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getSpacedPoints(a);
    return this.createGeometry(a);
  }, createGeometry:function(a) {
    console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    for (var d = new V, b = 0, c = a.length; b < c; b++) {
      var g = a[b];
      d.vertices.push(new e(g.x, g.y, g.z || 0));
    }
    return d;
  }});
  Object.assign(mb.prototype, {fromPoints:function(a) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(a);
  }});
  ki.prototype = Object.create(Na.prototype);
  li.prototype = Object.create(Na.prototype);
  Vg.prototype = Object.create(Na.prototype);
  Object.assign(Vg.prototype, {initFromArray:function() {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  }, getControlPointsArray:function() {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  }, reparametrizeByArcLength:function() {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }});
  Ef.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  ud.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Object.assign(sa.prototype, {extractUrlBase:function(a) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return nh.extractUrlBase(a);
  }});
  sa.Handlers = {add:function() {
    console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
  }, get:function() {
    console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
  }};
  Object.assign(Af.prototype, {setTexturePath:function(a) {
    console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
    return this.setResourcePath(a);
  }});
  Object.assign(Sg.prototype, {center:function(a) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, size:function(a) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Object.assign(x.prototype, {center:function(a) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }, size:function(a) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Tg.prototype.center = function(a) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  };
  Object.assign(ka, {random16:function() {
    console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  }, nearestPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return ka.floorPowerOfTwo(a);
  }, nextPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
    return ka.ceilPowerOfTwo(a);
  }});
  Object.assign(f.prototype, {flattenToArrayOffset:function(a, d) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, d);
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  }, applyToBuffer:function(a) {
    console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  }});
  Object.assign(m.prototype, {extractPosition:function(a) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a);
  }, flattenToArrayOffset:function(a, d) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, d);
  }, getPosition:function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return (new e).setFromMatrixColumn(this, 3);
  }, setRotationFromQuaternion:function(a) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a);
  }, multiplyToArray:function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector4:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  }, rotateAxis:function(a) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    a.transformDirection(this);
  }, crossVector:function(a) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, translate:function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  }, rotateX:function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  }, rotateY:function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  }, rotateZ:function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  }, rotateByAxis:function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  }, applyToBuffer:function(a) {
    console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  }, makeFrustum:function(a, d, b, c, l, e) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a, d, c, b, l, e);
  }});
  y.prototype.isIntersectionLine = function(a) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(a);
  };
  b.prototype.multiplyVector3 = function(a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  };
  Object.assign(u.prototype, {isIntersectionBox:function(a) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionPlane:function(a) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }});
  Object.assign(A.prototype, {area:function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  }, barycoordFromPoint:function(a, d) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(a, d);
  }, midpoint:function(a) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(a);
  }, normal:function(a) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(a);
  }, plane:function(a) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(a);
  }});
  Object.assign(A, {barycoordFromPoint:function(a, d, b, c, l) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return A.getBarycoord(a, d, b, c, l);
  }, normal:function(a, d, b, c) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return A.getNormal(a, d, b, c);
  }});
  Object.assign(hc.prototype, {extractAllPoints:function(a) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(a);
  }, extrude:function(a) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new wc(this, a);
  }, makeGeometry:function(a) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new xc(this, a);
  }});
  Object.assign(k.prototype, {fromAttribute:function(a, d, b) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, d, b);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(e.prototype, {setEulerFromRotationMatrix:function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  }, setEulerFromQuaternion:function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  }, getPositionFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(a);
  }, getScaleFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(a);
  }, getColumnFromMatrix:function(a, d) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(d, a);
  }, applyProjection:function(a) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(a);
  }, fromAttribute:function(a, d, b) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, d, b);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(r.prototype, {fromAttribute:function(a, d, b) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, d, b);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(V.prototype, {computeTangents:function() {
    console.error("THREE.Geometry: .computeTangents() has been removed.");
  }, computeLineDistances:function() {
    console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
  }});
  Object.assign(v.prototype, {getChildByName:function(a) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(a);
  }, renderDepth:function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  }, translate:function(a, d) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(d, a);
  }, getWorldRotation:function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  }});
  Object.defineProperties(v.prototype, {eulerOrder:{get:function() {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order;
  }, set:function(a) {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    this.rotation.order = a;
  }}, useQuaternion:{get:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }, set:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }}});
  Object.defineProperties(Yd.prototype, {objects:{get:function() {
    console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels;
  }}});
  Object.defineProperty(bf.prototype, "useVertexTexture", {get:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }, set:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }});
  Zd.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  Object.defineProperty(ca.prototype, "__arcLengthDivisions", {get:function() {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    return this.arcLengthDivisions;
  }, set:function(a) {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions = a;
  }});
  oa.prototype.setLens = function(a, d) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    void 0 !== d && (this.filmGauge = d);
    this.setFocalLength(a);
  };
  Object.defineProperties(qa.prototype, {onlyShadow:{set:function() {
    console.warn("THREE.Light: .onlyShadow has been removed.");
  }}, shadowCameraFov:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
    this.shadow.camera.fov = a;
  }}, shadowCameraLeft:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
    this.shadow.camera.left = a;
  }}, shadowCameraRight:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
    this.shadow.camera.right = a;
  }}, shadowCameraTop:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
    this.shadow.camera.top = a;
  }}, shadowCameraBottom:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom = a;
  }}, shadowCameraNear:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
    this.shadow.camera.near = a;
  }}, shadowCameraFar:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
    this.shadow.camera.far = a;
  }}, shadowCameraVisible:{set:function() {
    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
  }}, shadowBias:{set:function(a) {
    console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias = a;
  }}, shadowDarkness:{set:function() {
    console.warn("THREE.Light: .shadowDarkness has been removed.");
  }}, shadowMapWidth:{set:function(a) {
    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
    this.shadow.mapSize.width = a;
  }}, shadowMapHeight:{set:function(a) {
    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
    this.shadow.mapSize.height = a;
  }}});
  Object.defineProperties(K.prototype, {length:{get:function() {
    console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length;
  }}, dynamic:{get:function() {
    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
    return 35048 === this.usage;
  }, set:function() {
    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
    this.setUsage(35048);
  }}});
  Object.assign(K.prototype, {setDynamic:function(a) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(!0 === a ? 35048 : 35044);
    return this;
  }, copyIndicesArray:function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  }, setArray:function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }});
  Object.assign(J.prototype, {addIndex:function(a) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(a);
  }, addAttribute:function(a, d, b) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    return d && d.isBufferAttribute || d && d.isInterleavedBufferAttribute ? "index" === a ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(d), this) : this.setAttribute(a, d) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(a, new K(d, b)));
  }, addDrawCall:function(a, d, b) {
    void 0 !== b && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(a, d);
  }, clearDrawCalls:function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  }, computeTangents:function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  }, computeOffsets:function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  }, removeAttribute:function(a) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(a);
  }});
  Object.defineProperties(J.prototype, {drawcalls:{get:function() {
    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
    return this.groups;
  }}, offsets:{get:function() {
    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
    return this.groups;
  }}});
  Object.defineProperties(Kb.prototype, {dynamic:{get:function() {
    console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
    return 35048 === this.usage;
  }, set:function(a) {
    console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
    this.setUsage(a);
  }}});
  Object.assign(Kb.prototype, {setDynamic:function(a) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(!0 === a ? 35048 : 35044);
    return this;
  }, setArray:function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }});
  Object.assign(ub.prototype, {getArrays:function() {
    console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
  }, addShapeList:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
  }, addShape:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
  }});
  Object.defineProperties(Df.prototype, {dynamic:{set:function() {
    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
  }}, onUpdate:{value:function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
  }}});
  Object.defineProperties(H.prototype, {wrapAround:{get:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }}, overdraw:{get:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }}, wrapRGB:{get:function() {
    console.warn("THREE.Material: .wrapRGB has been removed.");
    return new B;
  }}, shading:{get:function() {
    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
  }, set:function(a) {
    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
    this.flatShading = 1 === a;
  }}, stencilMask:{get:function() {
    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
    return this.stencilFuncMask;
  }, set:function(a) {
    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
    this.stencilFuncMask = a;
  }}});
  Object.defineProperties(hb.prototype, {metal:{get:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return !1;
  }, set:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
  }}});
  Object.defineProperties(ja.prototype, {derivatives:{get:function() {
    console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    return this.extensions.derivatives;
  }, set:function(a) {
    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    this.extensions.derivatives = a;
  }}});
  Object.assign(rg.prototype, {clearTarget:function(a, d, b, c) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(a);
    this.clear(d, b, c);
  }, animate:function(a) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(a);
  }, getCurrentRenderTarget:function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  }, getMaxAnisotropy:function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  }, getPrecision:function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  }, resetGLState:function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  }, supportsFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  }, supportsHalfFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  }, supportsStandardDerivatives:function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  }, supportsCompressedTextureS3TC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  }, supportsCompressedTexturePVRTC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  }, supportsBlendMinMax:function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  }, supportsVertexTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  }, supportsInstancedArrays:function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  }, enableScissorTest:function(a) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(a);
  }, initMaterial:function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  }, addPrePlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  }, addPostPlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  }, updateShadowMap:function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  }, setFaceCulling:function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  }, allocTextureUnit:function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
  }, setTexture:function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
  }, setTexture2D:function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
  }, setTextureCube:function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
  }, getActiveMipMapLevel:function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
  }});
  Object.defineProperties(rg.prototype, {shadowMapEnabled:{get:function() {
    return this.shadowMap.enabled;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
    this.shadowMap.enabled = a;
  }}, shadowMapType:{get:function() {
    return this.shadowMap.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
    this.shadowMap.type = a;
  }}, shadowMapCullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }}, context:{get:function() {
    console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
    return this.getContext();
  }}});
  Object.defineProperties(Kh.prototype, {cullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }}, renderReverseSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }}, renderSingleSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }}});
  Object.defineProperties(ua.prototype, {activeCubeFace:{set:function() {
    console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().");
  }}, activeMipMapLevel:{set:function() {
    console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().");
  }}});
  Object.defineProperties(q.prototype, {wrapS:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    return this.texture.wrapS;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS = a;
  }}, wrapT:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    return this.texture.wrapT;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    this.texture.wrapT = a;
  }}, magFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    return this.texture.magFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    this.texture.magFilter = a;
  }}, minFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    return this.texture.minFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    this.texture.minFilter = a;
  }}, anisotropy:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    return this.texture.anisotropy;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    this.texture.anisotropy = a;
  }}, offset:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    return this.texture.offset;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    this.texture.offset = a;
  }}, repeat:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    return this.texture.repeat;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    this.texture.repeat = a;
  }}, format:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    this.texture.format = a;
  }}, type:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    return this.texture.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    this.texture.type = a;
  }}, generateMipmaps:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    return this.texture.generateMipmaps;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    this.texture.generateMipmaps = a;
  }}});
  Object.defineProperties(qg.prototype, {standing:{set:function() {
    console.warn("THREE.WebVRManager: .standing has been removed.");
  }}, userHeight:{set:function() {
    console.warn("THREE.WebVRManager: .userHeight has been removed.");
  }}});
  Object.defineProperties(sd.prototype, {load:{value:function(a) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var d = this;
    (new Bf).load(a, function(a) {
      d.setBuffer(a);
    });
    return this;
  }}, startTime:{set:function() {
    console.warn("THREE.Audio: .startTime is now .play( delay ).");
  }}});
  Ng.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  ma.prototype.updateCubeMap = function(a, d) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(a, d);
  };
  ic.crossOrigin = void 0;
  ic.loadTexture = function(a, d, b, c) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var g = new nf;
    g.setCrossOrigin(this.crossOrigin);
    a = g.load(a, b, void 0, c);
    d && (a.mapping = d);
    return a;
  };
  ic.loadTextureCube = function(a, d, b, c) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var g = new mf;
    g.setCrossOrigin(this.crossOrigin);
    a = g.load(a, b, void 0, c);
    d && (a.mapping = d);
    return a;
  };
  ic.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  ic.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {detail:{revision:"111dev"}}));
  a.ACESFilmicToneMapping = 5;
  a.AddEquation = 100;
  a.AddOperation = 2;
  a.AdditiveBlending = 2;
  a.AlphaFormat = 1021;
  a.AlwaysDepth = 1;
  a.AlwaysStencilFunc = 519;
  a.AmbientLight = uf;
  a.AmbientLightProbe = Ig;
  a.AnimationClip = db;
  a.AnimationLoader = zg;
  a.AnimationMixer = Pg;
  a.AnimationObjectGroup = di;
  a.AnimationUtils = ya;
  a.ArcCurve = rd;
  a.ArrayCamera = Ud;
  a.ArrowHelper = Pb;
  a.Audio = sd;
  a.AudioAnalyser = Ng;
  a.AudioContext = Lg;
  a.AudioListener = Kg;
  a.AudioLoader = Bf;
  a.AxesHelper = Ge;
  a.AxisHelper = function(a) {
    console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
    return new Ge(a);
  };
  a.BackSide = 1;
  a.BasicDepthPacking = 3200;
  a.BasicShadowMap = 0;
  a.BinaryTextureLoader = function(a) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new lf(a);
  };
  a.Bone = sg;
  a.BooleanKeyframeTrack = gf;
  a.BoundingBoxHelper = function(a, d) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new Ob(a, d);
  };
  a.Box2 = Sg;
  a.Box3 = x;
  a.Box3Helper = Ee;
  a.BoxBufferGeometry = Nd;
  a.BoxGeometry = hh;
  a.BoxHelper = Ob;
  a.BufferAttribute = K;
  a.BufferGeometry = J;
  a.BufferGeometryLoader = zf;
  a.ByteType = 1010;
  a.Cache = Kc;
  a.Camera = pa;
  a.CameraHelper = De;
  a.CanvasRenderer = function() {
    console.error("THREE.CanvasRenderer has been removed");
  };
  a.CanvasTexture = $d;
  a.CatmullRomCurve3 = Na;
  a.CineonToneMapping = 4;
  a.CircleBufferGeometry = md;
  a.CircleGeometry = ue;
  a.ClampToEdgeWrapping = 1001;
  a.Clock = Jg;
  a.ClosedSplineCurve3 = ki;
  a.Color = B;
  a.ColorKeyframeTrack = hf;
  a.CompressedTexture = $c;
  a.CompressedTextureLoader = Ag;
  a.ConeBufferGeometry = te;
  a.ConeGeometry = se;
  a.CubeCamera = ma;
  a.CubeGeometry = hh;
  a.CubeReflectionMapping = 301;
  a.CubeRefractionMapping = 302;
  a.CubeTexture = Sa;
  a.CubeTextureLoader = mf;
  a.CubeUVReflectionMapping = 306;
  a.CubeUVRefractionMapping = 307;
  a.CubicBezierCurve = ib;
  a.CubicBezierCurve3 = wb;
  a.CubicInterpolant = ef;
  a.CullFaceBack = 1;
  a.CullFaceFront = 2;
  a.CullFaceFrontBack = 3;
  a.CullFaceNone = 0;
  a.Curve = ca;
  a.CurvePath = Nb;
  a.CustomBlending = 5;
  a.CylinderBufferGeometry = Mb;
  a.CylinderGeometry = zc;
  a.Cylindrical = ii;
  a.DataTexture = Da;
  a.DataTexture2DArray = Wa;
  a.DataTexture3D = Fb;
  a.DataTextureLoader = lf;
  a.DecrementStencilOp = 7683;
  a.DecrementWrapStencilOp = 34056;
  a.DefaultLoadingManager = $h;
  a.DepthFormat = 1026;
  a.DepthStencilFormat = 1027;
  a.DepthTexture = ae;
  a.DirectionalLight = tf;
  a.DirectionalLightHelper = Ad;
  a.DirectionalLightShadow = sf;
  a.DiscreteInterpolant = ff;
  a.DodecahedronBufferGeometry = ed;
  a.DodecahedronGeometry = ge;
  a.DoubleSide = 2;
  a.DstAlphaFactor = 206;
  a.DstColorFactor = 208;
  a.DynamicBufferAttribute = function(a, d) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
    return (new K(a, d)).setDynamic(!0);
  };
  a.DynamicCopyUsage = 35050;
  a.DynamicDrawUsage = 35048;
  a.DynamicReadUsage = 35049;
  a.EdgesGeometry = ld;
  a.EdgesHelper = function(a, d) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new ra(new ld(a.geometry), new ta({color:void 0 !== d ? d : 16777215}));
  };
  a.EllipseCurve = ab;
  a.EqualDepth = 4;
  a.EqualStencilFunc = 514;
  a.EquirectangularReflectionMapping = 303;
  a.EquirectangularRefractionMapping = 304;
  a.Euler = d;
  a.EventDispatcher = c;
  a.ExtrudeBufferGeometry = ub;
  a.ExtrudeGeometry = wc;
  a.Face3 = E;
  a.Face4 = function(a, d, b, c, l, e, f) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new E(a, d, b, l, e, f);
  };
  a.FaceColors = 1;
  a.FaceNormalsHelper = Ce;
  a.FileLoader = eb;
  a.FlatShading = 1;
  a.Float32Attribute = function(a, d) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new N(a, d);
  };
  a.Float32BufferAttribute = N;
  a.Float64Attribute = function(a, d) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new S(a, d);
  };
  a.Float64BufferAttribute = S;
  a.FloatType = 1015;
  a.Fog = $e;
  a.FogExp2 = Ze;
  a.Font = Fg;
  a.FontLoader = Gg;
  a.FrontFaceDirectionCCW = 1;
  a.FrontFaceDirectionCW = 0;
  a.FrontSide = 0;
  a.Frustum = Pa;
  a.GammaEncoding = 3007;
  a.Geometry = V;
  a.GeometryUtils = {merge:function(a, d, b) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    if (d.isMesh) {
      d.matrixAutoUpdate && d.updateMatrix();
      var c = d.matrix;
      d = d.geometry;
    }
    a.merge(d, c, b);
  }, center:function(a) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return a.center();
  }};
  a.GreaterDepth = 6;
  a.GreaterEqualDepth = 5;
  a.GreaterEqualStencilFunc = 518;
  a.GreaterStencilFunc = 516;
  a.GridHelper = Ef;
  a.Group = Wc;
  a.HalfFloatType = 1016;
  a.HemisphereLight = of;
  a.HemisphereLightHelper = xd;
  a.HemisphereLightProbe = Hg;
  a.IcosahedronBufferGeometry = dd;
  a.IcosahedronGeometry = fe;
  a.ImageBitmapLoader = Dg;
  a.ImageLoader = qd;
  a.ImageUtils = ic;
  a.ImmediateRenderObject = Ae;
  a.IncrementStencilOp = 7682;
  a.IncrementWrapStencilOp = 34055;
  a.InstancedBufferAttribute = yf;
  a.InstancedBufferGeometry = xf;
  a.InstancedInterleavedBuffer = Qg;
  a.InstancedMesh = cf;
  a.Int16Attribute = function(a, d) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new P(a, d);
  };
  a.Int16BufferAttribute = P;
  a.Int32Attribute = function(a, d) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new R(a, d);
  };
  a.Int32BufferAttribute = R;
  a.Int8Attribute = function(a, d) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new M(a, d);
  };
  a.Int8BufferAttribute = M;
  a.IntType = 1013;
  a.InterleavedBuffer = Kb;
  a.InterleavedBufferAttribute = Vd;
  a.Interpolant = $a;
  a.InterpolateDiscrete = 2300;
  a.InterpolateLinear = 2301;
  a.InterpolateSmooth = 2302;
  a.InvertStencilOp = 5386;
  a.JSONLoader = function() {
    console.error("THREE.JSONLoader has been removed.");
  };
  a.KeepStencilOp = 7680;
  a.KeyframeTrack = Ia;
  a.LOD = Yd;
  a.LatheBufferGeometry = kd;
  a.LatheGeometry = re;
  a.Layers = l;
  a.LensFlare = function() {
    console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
  };
  a.LessDepth = 2;
  a.LessEqualDepth = 3;
  a.LessEqualStencilFunc = 515;
  a.LessStencilFunc = 513;
  a.Light = qa;
  a.LightProbe = nb;
  a.LightProbeHelper = yd;
  a.LightShadow = yb;
  a.Line = Ga;
  a.Line3 = Tg;
  a.LineBasicMaterial = ta;
  a.LineCurve = Ua;
  a.LineCurve3 = jb;
  a.LineDashedMaterial = Gc;
  a.LineLoop = df;
  a.LinePieces = 1;
  a.LineSegments = ra;
  a.LineStrip = 0;
  a.LinearEncoding = 3E3;
  a.LinearFilter = 1006;
  a.LinearInterpolant = ve;
  a.LinearMipMapLinearFilter = 1008;
  a.LinearMipMapNearestFilter = 1007;
  a.LinearMipmapLinearFilter = 1008;
  a.LinearMipmapNearestFilter = 1007;
  a.LinearToneMapping = 1;
  a.Loader = sa;
  a.LoaderUtils = nh;
  a.LoadingManager = yg;
  a.LogLuvEncoding = 3003;
  a.LoopOnce = 2200;
  a.LoopPingPong = 2202;
  a.LoopRepeat = 2201;
  a.LuminanceAlphaFormat = 1025;
  a.LuminanceFormat = 1024;
  a.MOUSE = {LEFT:0, MIDDLE:1, RIGHT:2, ROTATE:0, DOLLY:1, PAN:2};
  a.Material = H;
  a.MaterialLoader = wf;
  a.Math = ka;
  a.Matrix3 = f;
  a.Matrix4 = m;
  a.MaxEquation = 104;
  a.Mesh = U;
  a.MeshBasicMaterial = Q;
  a.MeshDepthMaterial = dc;
  a.MeshDistanceMaterial = ec;
  a.MeshFaceMaterial = function(a) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a;
  };
  a.MeshLambertMaterial = Ec;
  a.MeshMatcapMaterial = Fc;
  a.MeshNormalMaterial = Dc;
  a.MeshPhongMaterial = hb;
  a.MeshPhysicalMaterial = Bc;
  a.MeshStandardMaterial = vb;
  a.MeshToonMaterial = Cc;
  a.MinEquation = 103;
  a.MirroredRepeatWrapping = 1002;
  a.MixOperation = 1;
  a.MultiMaterial = function(a) {
    void 0 === a && (a = []);
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    a.isMultiMaterial = !0;
    a.materials = a;
    a.clone = function() {
      return a.slice();
    };
    return a;
  };
  a.MultiplyBlending = 4;
  a.MultiplyOperation = 0;
  a.NearestFilter = 1003;
  a.NearestMipMapLinearFilter = 1005;
  a.NearestMipMapNearestFilter = 1004;
  a.NearestMipmapLinearFilter = 1005;
  a.NearestMipmapNearestFilter = 1004;
  a.NeverDepth = 0;
  a.NeverStencilFunc = 512;
  a.NoBlending = 0;
  a.NoColors = 0;
  a.NoToneMapping = 0;
  a.NormalBlending = 1;
  a.NotEqualDepth = 7;
  a.NotEqualStencilFunc = 517;
  a.NumberKeyframeTrack = od;
  a.Object3D = v;
  a.ObjectLoader = Af;
  a.ObjectSpaceNormalMap = 1;
  a.OctahedronBufferGeometry = tc;
  a.OctahedronGeometry = ee;
  a.OneFactor = 201;
  a.OneMinusDstAlphaFactor = 207;
  a.OneMinusDstColorFactor = 209;
  a.OneMinusSrcAlphaFactor = 205;
  a.OneMinusSrcColorFactor = 203;
  a.OrthographicCamera = ze;
  a.PCFShadowMap = 1;
  a.PCFSoftShadowMap = 2;
  a.ParametricBufferGeometry = bd;
  a.ParametricGeometry = be;
  a.Particle = function(a) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new Wd(a);
  };
  a.ParticleBasicMaterial = function(a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new gb(a);
  };
  a.ParticleSystem = function(a, d) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new Zc(a, d);
  };
  a.ParticleSystemMaterial = function(a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new gb(a);
  };
  a.Path = mb;
  a.PerspectiveCamera = oa;
  a.Plane = y;
  a.PlaneBufferGeometry = Ka;
  a.PlaneGeometry = fb;
  a.PlaneHelper = Fe;
  a.PointCloud = function(a, d) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new Zc(a, d);
  };
  a.PointCloudMaterial = function(a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new gb(a);
  };
  a.PointLight = rf;
  a.PointLightHelper = vd;
  a.Points = Zc;
  a.PointsMaterial = gb;
  a.PolarGridHelper = Ff;
  a.PolyhedronBufferGeometry = Ta;
  a.PolyhedronGeometry = ce;
  a.PositionalAudio = Mg;
  a.PositionalAudioHelper = zd;
  a.PropertyBinding = Oa;
  a.PropertyMixer = Og;
  a.QuadraticBezierCurve = kb;
  a.QuadraticBezierCurve3 = xb;
  a.Quaternion = b;
  a.QuaternionKeyframeTrack = we;
  a.QuaternionLinearInterpolant = jf;
  a.REVISION = "111dev";
  a.RGBADepthPacking = 3201;
  a.RGBAFormat = 1023;
  a.RGBA_ASTC_10x10_Format = 37819;
  a.RGBA_ASTC_10x5_Format = 37816;
  a.RGBA_ASTC_10x6_Format = 37817;
  a.RGBA_ASTC_10x8_Format = 37818;
  a.RGBA_ASTC_12x10_Format = 37820;
  a.RGBA_ASTC_12x12_Format = 37821;
  a.RGBA_ASTC_4x4_Format = 37808;
  a.RGBA_ASTC_5x4_Format = 37809;
  a.RGBA_ASTC_5x5_Format = 37810;
  a.RGBA_ASTC_6x5_Format = 37811;
  a.RGBA_ASTC_6x6_Format = 37812;
  a.RGBA_ASTC_8x5_Format = 37813;
  a.RGBA_ASTC_8x6_Format = 37814;
  a.RGBA_ASTC_8x8_Format = 37815;
  a.RGBA_PVRTC_2BPPV1_Format = 35843;
  a.RGBA_PVRTC_4BPPV1_Format = 35842;
  a.RGBA_S3TC_DXT1_Format = 33777;
  a.RGBA_S3TC_DXT3_Format = 33778;
  a.RGBA_S3TC_DXT5_Format = 33779;
  a.RGBDEncoding = 3006;
  a.RGBEEncoding = 3002;
  a.RGBEFormat = 1023;
  a.RGBFormat = 1022;
  a.RGBM16Encoding = 3005;
  a.RGBM7Encoding = 3004;
  a.RGB_ETC1_Format = 36196;
  a.RGB_PVRTC_2BPPV1_Format = 35841;
  a.RGB_PVRTC_4BPPV1_Format = 35840;
  a.RGB_S3TC_DXT1_Format = 33776;
  a.RawShaderMaterial = nd;
  a.Ray = u;
  a.Raycaster = fi;
  a.RectAreaLight = vf;
  a.RectAreaLightHelper = wd;
  a.RedFormat = 1028;
  a.ReinhardToneMapping = 2;
  a.RepeatWrapping = 1E3;
  a.ReplaceStencilOp = 7681;
  a.ReverseSubtractEquation = 102;
  a.RingBufferGeometry = jd;
  a.RingGeometry = qe;
  a.Scene = w;
  a.SceneUtils = {createMultiMaterialObject:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }, detach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }, attach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }};
  a.ShaderChunk = ia;
  a.ShaderLib = qb;
  a.ShaderMaterial = ja;
  a.ShadowMaterial = Ac;
  a.Shape = hc;
  a.ShapeBufferGeometry = yc;
  a.ShapeGeometry = xc;
  a.ShapePath = Eg;
  a.ShapeUtils = Lb;
  a.ShortType = 1011;
  a.Skeleton = bf;
  a.SkeletonHelper = ud;
  a.SkinnedMesh = Zd;
  a.SmoothShading = 2;
  a.Sphere = p;
  a.SphereBufferGeometry = gc;
  a.SphereGeometry = pe;
  a.Spherical = hi;
  a.SphericalHarmonics3 = Cf;
  a.SphericalReflectionMapping = 305;
  a.Spline = Vg;
  a.SplineCurve = lb;
  a.SplineCurve3 = li;
  a.SpotLight = qf;
  a.SpotLightHelper = td;
  a.SpotLightShadow = pf;
  a.Sprite = Wd;
  a.SpriteMaterial = fc;
  a.SrcAlphaFactor = 204;
  a.SrcAlphaSaturateFactor = 210;
  a.SrcColorFactor = 202;
  a.StaticCopyUsage = 35046;
  a.StaticDrawUsage = 35044;
  a.StaticReadUsage = 35045;
  a.StereoCamera = bi;
  a.StreamCopyUsage = 35042;
  a.StreamDrawUsage = 35040;
  a.StreamReadUsage = 35041;
  a.StringKeyframeTrack = kf;
  a.SubtractEquation = 101;
  a.SubtractiveBlending = 3;
  a.TOUCH = {ROTATE:0, PAN:1, DOLLY_PAN:2, DOLLY_ROTATE:3};
  a.TangentSpaceNormalMap = 0;
  a.TetrahedronBufferGeometry = cd;
  a.TetrahedronGeometry = de;
  a.TextBufferGeometry = id;
  a.TextGeometry = oe;
  a.Texture = h;
  a.TextureLoader = nf;
  a.TorusBufferGeometry = gd;
  a.TorusGeometry = je;
  a.TorusKnotBufferGeometry = fd;
  a.TorusKnotGeometry = ie;
  a.Triangle = A;
  a.TriangleFanDrawMode = 2;
  a.TriangleStripDrawMode = 1;
  a.TrianglesDrawMode = 0;
  a.TubeBufferGeometry = uc;
  a.TubeGeometry = he;
  a.UVMapping = 300;
  a.Uint16Attribute = function(a, d) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new T(a, d);
  };
  a.Uint16BufferAttribute = T;
  a.Uint32Attribute = function(a, d) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new aa(a, d);
  };
  a.Uint32BufferAttribute = aa;
  a.Uint8Attribute = function(a, d) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new L(a, d);
  };
  a.Uint8BufferAttribute = L;
  a.Uint8ClampedAttribute = function(a, d) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new I(a, d);
  };
  a.Uint8ClampedBufferAttribute = I;
  a.Uncharted2ToneMapping = 3;
  a.Uniform = Df;
  a.UniformsLib = da;
  a.UniformsUtils = Tj;
  a.UnsignedByteType = 1009;
  a.UnsignedInt248Type = 1020;
  a.UnsignedIntType = 1014;
  a.UnsignedShort4444Type = 1017;
  a.UnsignedShort5551Type = 1018;
  a.UnsignedShort565Type = 1019;
  a.UnsignedShortType = 1012;
  a.VSMShadowMap = 3;
  a.Vector2 = k;
  a.Vector3 = e;
  a.Vector4 = r;
  a.VectorKeyframeTrack = pd;
  a.Vertex = function(a, d, b) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new e(a, d, b);
  };
  a.VertexColors = 2;
  a.VertexNormalsHelper = Be;
  a.VideoTexture = vg;
  a.WebGLMultisampleRenderTarget = n;
  a.WebGLRenderTarget = q;
  a.WebGLRenderTargetCube = ua;
  a.WebGLRenderer = rg;
  a.WebGLUtils = Lh;
  a.WireframeGeometry = ad;
  a.WireframeHelper = function(a, d) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new ra(new ad(a.geometry), new ta({color:void 0 !== d ? d : 16777215}));
  };
  a.WrapAroundEnding = 2402;
  a.XHRLoader = function(a) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new eb(a);
  };
  a.ZeroCurvatureEnding = 2400;
  a.ZeroFactor = 200;
  a.ZeroSlopeEnding = 2401;
  a.ZeroStencilOp = 0;
  a.sRGBEncoding = 3001;
  Object.defineProperty(a, "__esModule", {value:!0});
});
(function() {
  function a() {
    this.tolerance = -1;
    this.faces = [];
    this.newFaces = [];
    this.assigned = new e;
    this.unassigned = new e;
    this.vertices = [];
  }
  function c() {
    this.normal = new THREE.Vector3;
    this.midpoint = new THREE.Vector3;
    this.constant = this.area = 0;
    this.outside = null;
    this.mark = 0;
    this.edge = null;
  }
  function k(a, b) {
    this.vertex = a;
    this.twin = this.next = this.prev = null;
    this.face = b;
  }
  function b(a) {
    this.point = a;
    this.face = this.next = this.prev = null;
  }
  function e() {
    this.tail = this.head = null;
  }
  Object.assign(a.prototype, {setFromPoints:function(a) {
    !0 !== Array.isArray(a) && console.error("THREE.QuickHull: Points parameter is not an array.");
    4 > a.length && console.error("THREE.QuickHull: The algorithm needs at least four points.");
    this.makeEmpty();
    for (var c = 0, e = a.length; c < e; c++) {
      this.vertices.push(new b(a[c]));
    }
    this.compute();
    return this;
  }, setFromObject:function(a) {
    var b = [];
    a.updateMatrixWorld(!0);
    a.traverse(function(a) {
      var c;
      var e = a.geometry;
      if (void 0 !== e) {
        if (e.isGeometry) {
          var f = e.vertices;
          e = 0;
          for (c = f.length; e < c; e++) {
            var d = f[e].clone();
            d.applyMatrix4(a.matrixWorld);
            b.push(d);
          }
        } else {
          if (e.isBufferGeometry && (f = e.attributes.position, void 0 !== f)) {
            for (e = 0, c = f.count; e < c; e++) {
              d = new THREE.Vector3, d.fromBufferAttribute(f, e).applyMatrix4(a.matrixWorld), b.push(d);
            }
          }
        }
      }
    });
    return this.setFromPoints(b);
  }, makeEmpty:function() {
    this.faces = [];
    this.vertices = [];
    return this;
  }, addVertexToFace:function(a, b) {
    a.face = b;
    null === b.outside ? this.assigned.append(a) : this.assigned.insertBefore(b.outside, a);
    b.outside = a;
    return this;
  }, removeVertexFromFace:function(a, b) {
    a === b.outside && (b.outside = null !== a.next && a.next.face === b ? a.next : null);
    this.assigned.remove(a);
    return this;
  }, removeAllVerticesFromFace:function(a) {
    if (null !== a.outside) {
      for (var b = a.outside, c = a.outside; null !== c.next && c.next.face === a;) {
        c = c.next;
      }
      this.assigned.removeSubList(b, c);
      b.prev = c.next = null;
      a.outside = null;
      return b;
    }
  }, deleteFaceVertices:function(a, b) {
    a = this.removeAllVerticesFromFace(a);
    if (void 0 !== a) {
      if (void 0 === b) {
        this.unassigned.appendChain(a);
      } else {
        do {
          var c = a.next;
          b.distanceToPoint(a.point) > this.tolerance ? this.addVertexToFace(a, b) : this.unassigned.append(a);
          a = c;
        } while (null !== a);
      }
    }
    return this;
  }, resolveUnassignedPoints:function(a) {
    if (!1 === this.unassigned.isEmpty()) {
      var b = this.unassigned.first();
      do {
        for (var c = b.next, e = this.tolerance, f = null, m = 0; m < a.length; m++) {
          var d = a[m];
          if (0 === d.mark) {
            var l = d.distanceToPoint(b.point);
            l > e && (e = l, f = d);
            if (e > 1E3 * this.tolerance) {
              break;
            }
          }
        }
        null !== f && this.addVertexToFace(b, f);
        b = c;
      } while (null !== b);
    }
    return this;
  }, computeExtremes:function() {
    var a = new THREE.Vector3, b = new THREE.Vector3, c = [], e = [], n, m, d;
    for (n = 0; 3 > n; n++) {
      c[n] = e[n] = this.vertices[0];
    }
    a.copy(this.vertices[0].point);
    b.copy(this.vertices[0].point);
    n = 0;
    for (m = this.vertices.length; n < m; n++) {
      var l = this.vertices[n], k = l.point;
      for (d = 0; 3 > d; d++) {
        k.getComponent(d) < a.getComponent(d) && (a.setComponent(d, k.getComponent(d)), c[d] = l);
      }
      for (d = 0; 3 > d; d++) {
        k.getComponent(d) > b.getComponent(d) && (b.setComponent(d, k.getComponent(d)), e[d] = l);
      }
    }
    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(a.x), Math.abs(b.x)) + Math.max(Math.abs(a.y), Math.abs(b.y)) + Math.max(Math.abs(a.z), Math.abs(b.z)));
    return {min:c, max:e};
  }, computeInitialHull:function() {
    var a, b, e;
    return function() {
      void 0 === a && (a = new THREE.Line3, b = new THREE.Plane, e = new THREE.Vector3);
      var f = this.vertices, h = this.computeExtremes(), m = h.min, d = h.max, l, k, r = 0;
      for (h = k = 0; 3 > h; h++) {
        var x = d[h].point.getComponent(h) - m[h].point.getComponent(h);
        x > r && (r = x, k = h);
      }
      m = m[k];
      d = d[k];
      r = 0;
      a.set(m.point, d.point);
      h = 0;
      for (l = this.vertices.length; h < l; h++) {
        var z = f[h];
        if (z !== m && z !== d && (a.closestPointToPoint(z.point, !0, e), x = e.distanceToSquared(z.point), x > r)) {
          r = x;
          var p = z;
        }
      }
      r = -1;
      b.setFromCoplanarPoints(m.point, d.point, p.point);
      h = 0;
      for (l = this.vertices.length; h < l; h++) {
        if (z = f[h], z !== m && z !== d && z !== p && (x = Math.abs(b.distanceToPoint(z.point)), x > r)) {
          r = x;
          var u = z;
        }
      }
      x = [];
      if (0 > b.distanceToPoint(u.point)) {
        for (x.push(c.create(m, d, p), c.create(u, d, m), c.create(u, p, d), c.create(u, m, p)), h = 0; 3 > h; h++) {
          k = (h + 1) % 3, x[h + 1].getEdge(2).setTwin(x[0].getEdge(k)), x[h + 1].getEdge(1).setTwin(x[k + 1].getEdge(0));
        }
      } else {
        for (x.push(c.create(m, p, d), c.create(u, m, d), c.create(u, d, p), c.create(u, p, m)), h = 0; 3 > h; h++) {
          k = (h + 1) % 3, x[h + 1].getEdge(2).setTwin(x[0].getEdge((3 - h) % 3)), x[h + 1].getEdge(0).setTwin(x[k + 1].getEdge(1));
        }
      }
      for (h = 0; 4 > h; h++) {
        this.faces.push(x[h]);
      }
      h = 0;
      for (l = f.length; h < l; h++) {
        if (z = f[h], z !== m && z !== d && z !== p && z !== u) {
          r = this.tolerance;
          var y = null;
          for (k = 0; 4 > k; k++) {
            x = this.faces[k].distanceToPoint(z.point), x > r && (r = x, y = this.faces[k]);
          }
          null !== y && this.addVertexToFace(z, y);
        }
      }
      return this;
    };
  }(), reindexFaces:function() {
    for (var a = [], b = 0; b < this.faces.length; b++) {
      var c = this.faces[b];
      0 === c.mark && a.push(c);
    }
    this.faces = a;
    return this;
  }, nextVertexToAdd:function() {
    if (!1 === this.assigned.isEmpty()) {
      var a = 0, b = this.assigned.first().face, c = b.outside;
      do {
        var e = b.distanceToPoint(c.point);
        if (e > a) {
          a = e;
          var n = c;
        }
        c = c.next;
      } while (null !== c && c.face === b);
      return n;
    }
  }, computeHorizon:function(a, b, c, e) {
    this.deleteFaceVertices(c);
    c.mark = 1;
    c = null === b ? b = c.getEdge(0) : b.next;
    do {
      var f = c.twin, h = f.face;
      0 === h.mark && (h.distanceToPoint(a) > this.tolerance ? this.computeHorizon(a, f, h, e) : e.push(c));
      c = c.next;
    } while (c !== b);
    return this;
  }, addAdjoiningFace:function(a, b) {
    a = c.create(a, b.tail(), b.head());
    this.faces.push(a);
    a.getEdge(-1).setTwin(b.twin);
    return a.getEdge(0);
  }, addNewFaces:function(a, b) {
    this.newFaces = [];
    for (var c = null, e = null, f = 0; f < b.length; f++) {
      var h = this.addAdjoiningFace(a, b[f]);
      null === c ? c = h : h.next.setTwin(e);
      this.newFaces.push(h.face);
      e = h;
    }
    c.next.setTwin(e);
    return this;
  }, addVertexToHull:function(a) {
    var b = [];
    this.unassigned.clear();
    this.removeVertexFromFace(a, a.face);
    this.computeHorizon(a.point, null, a.face, b);
    this.addNewFaces(a, b);
    this.resolveUnassignedPoints(this.newFaces);
    return this;
  }, cleanup:function() {
    this.assigned.clear();
    this.unassigned.clear();
    this.newFaces = [];
    return this;
  }, compute:function() {
    var a;
    for (this.computeInitialHull(); void 0 !== (a = this.nextVertexToAdd());) {
      this.addVertexToHull(a);
    }
    this.reindexFaces();
    this.cleanup();
    return this;
  }});
  Object.assign(c, {create:function(a, b, e) {
    var f = new c;
    a = new k(a, f);
    b = new k(b, f);
    e = new k(e, f);
    a.next = e.prev = b;
    b.next = a.prev = e;
    e.next = b.prev = a;
    f.edge = a;
    return f.compute();
  }});
  Object.assign(c.prototype, {getEdge:function(a) {
    for (var b = this.edge; 0 < a;) {
      b = b.next, a--;
    }
    for (; 0 > a;) {
      b = b.prev, a++;
    }
    return b;
  }, compute:function() {
    var a;
    return function() {
      void 0 === a && (a = new THREE.Triangle);
      var b = this.edge.tail(), c = this.edge.head(), e = this.edge.next.head();
      a.set(b.point, c.point, e.point);
      a.getNormal(this.normal);
      a.getMidpoint(this.midpoint);
      this.area = a.getArea();
      this.constant = this.normal.dot(this.midpoint);
      return this;
    };
  }(), distanceToPoint:function(a) {
    return this.normal.dot(a) - this.constant;
  }});
  Object.assign(k.prototype, {head:function() {
    return this.vertex;
  }, tail:function() {
    return this.prev ? this.prev.vertex : null;
  }, length:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceTo(a.point) : -1;
  }, lengthSquared:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceToSquared(a.point) : -1;
  }, setTwin:function(a) {
    this.twin = a;
    a.twin = this;
    return this;
  }});
  Object.assign(e.prototype, {first:function() {
    return this.head;
  }, last:function() {
    return this.tail;
  }, clear:function() {
    this.head = this.tail = null;
    return this;
  }, insertBefore:function(a, b) {
    b.prev = a.prev;
    b.next = a;
    null === b.prev ? this.head = b : b.prev.next = b;
    a.prev = b;
    return this;
  }, insertAfter:function(a, b) {
    b.prev = a;
    b.next = a.next;
    null === b.next ? this.tail = b : b.next.prev = b;
    a.next = b;
    return this;
  }, append:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    a.prev = this.tail;
    a.next = null;
    this.tail = a;
    return this;
  }, appendChain:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    for (a.prev = this.tail; null !== a.next;) {
      a = a.next;
    }
    this.tail = a;
    return this;
  }, remove:function(a) {
    null === a.prev ? this.head = a.next : a.prev.next = a.next;
    null === a.next ? this.tail = a.prev : a.next.prev = a.prev;
    return this;
  }, removeSubList:function(a, b) {
    null === a.prev ? this.head = b.next : a.prev.next = b.next;
    null === b.next ? this.tail = a.prev : b.next.prev = a.prev;
    return this;
  }, isEmpty:function() {
    return null === this.head;
  }});
  THREE.QuickHull = a;
})();
var SimplexNoise = function(a) {
  void 0 == a && (a = Math);
  this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];
  this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, 
  -1, 0]];
  this.p = [];
  for (var c = 0; 256 > c; c++) {
    this.p[c] = Math.floor(256 * a.random());
  }
  this.perm = [];
  for (c = 0; 512 > c; c++) {
    this.perm[c] = this.p[c & 255];
  }
  this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 
  0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];
};
SimplexNoise.prototype.dot = function(a, c, k) {
  return a[0] * c + a[1] * k;
};
SimplexNoise.prototype.dot3 = function(a, c, k, b) {
  return a[0] * c + a[1] * k + a[2] * b;
};
SimplexNoise.prototype.dot4 = function(a, c, k, b, e) {
  return a[0] * c + a[1] * k + a[2] * b + a[3] * e;
};
SimplexNoise.prototype.noise = function(a, c) {
  var k = .5 * (a + c) * (Math.sqrt(3) - 1), b = Math.floor(a + k), e = Math.floor(c + k);
  k = (3 - Math.sqrt(3)) / 6;
  var f = (b + e) * k;
  a -= b - f;
  var h = c - (e - f);
  if (a > h) {
    var r = 1;
    var q = 0;
  } else {
    r = 0, q = 1;
  }
  f = a - r + k;
  var n = h - q + k;
  c = a - 1 + 2 * k;
  k = h - 1 + 2 * k;
  var m = b & 255, d = e & 255;
  b = this.perm[m + this.perm[d]] % 12;
  e = this.perm[m + r + this.perm[d + q]] % 12;
  r = this.perm[m + 1 + this.perm[d + 1]] % 12;
  q = .5 - a * a - h * h;
  0 > q ? a = 0 : (q *= q, a = q * q * this.dot(this.grad3[b], a, h));
  h = .5 - f * f - n * n;
  0 > h ? f = 0 : (h *= h, f = h * h * this.dot(this.grad3[e], f, n));
  n = .5 - c * c - k * k;
  0 > n ? c = 0 : (n *= n, c = n * n * this.dot(this.grad3[r], c, k));
  return 70 * (a + f + c);
};
SimplexNoise.prototype.noise3d = function(a, c, k) {
  var b = 1 / 3 * (a + c + k), e = Math.floor(a + b), f = Math.floor(c + b), h = Math.floor(k + b);
  b = 1 / 6;
  var r = (e + f + h) * b;
  var q = a - (e - r);
  var n = c - (f - r);
  var m = k - (h - r), d, l;
  if (q >= n) {
    if (n >= m) {
      var v = 1;
      var w = d = 0;
      var x = l = 1;
      var z = 0;
    } else {
      q >= m ? (v = 1, w = d = 0) : (d = v = 0, w = 1), l = 1, x = 0, z = 1;
    }
  } else {
    n < m ? (d = v = 0, w = 1, l = 0, z = x = 1) : q < m ? (v = 0, d = 1, l = w = 0, z = x = 1) : (v = 0, d = 1, w = 0, x = l = 1, z = 0);
  }
  var p = q - v + b, u = n - d + b, y = m - w + b;
  r = q - l + 2 * b;
  a = n - x + 2 * b;
  var A = m - z + 2 * b;
  k = q - 1 + 3 * b;
  c = n - 1 + 3 * b;
  b = m - 1 + 3 * b;
  e &= 255;
  var B = f & 255, D = h & 255;
  f = this.perm[e + this.perm[B + this.perm[D]]] % 12;
  h = this.perm[e + v + this.perm[B + d + this.perm[D + w]]] % 12;
  l = this.perm[e + l + this.perm[B + x + this.perm[D + z]]] % 12;
  e = this.perm[e + 1 + this.perm[B + 1 + this.perm[D + 1]]] % 12;
  x = .6 - q * q - n * n - m * m;
  0 > x ? q = 0 : (x *= x, q = x * x * this.dot3(this.grad3[f], q, n, m));
  n = .6 - p * p - u * u - y * y;
  0 > n ? n = 0 : (n *= n, n = n * n * this.dot3(this.grad3[h], p, u, y));
  p = .6 - r * r - a * a - A * A;
  0 > p ? r = 0 : (p *= p, r = p * p * this.dot3(this.grad3[l], r, a, A));
  a = .6 - k * k - c * c - b * b;
  0 > a ? k = 0 : (a *= a, k = a * a * this.dot3(this.grad3[e], k, c, b));
  return 32 * (q + n + r + k);
};
SimplexNoise.prototype.noise4d = function(a, c, k, b) {
  var e = this.grad4, f = this.simplex, h = this.perm, r = (5 - Math.sqrt(5)) / 20;
  var q = (Math.sqrt(5) - 1) / 4 * (a + c + k + b);
  var n = Math.floor(a + q), m = Math.floor(c + q), d = Math.floor(k + q), l = Math.floor(b + q);
  q = (n + m + d + l) * r;
  a -= n - q;
  var v = c - (m - q);
  var w = k - (d - q);
  var x = b - (l - q);
  b = (a > v ? 32 : 0) + (a > w ? 16 : 0) + (v > w ? 8 : 0) + (a > x ? 4 : 0) + (v > x ? 2 : 0) + (w > x ? 1 : 0);
  var z = 3 <= f[b][0] ? 1 : 0;
  var p = 3 <= f[b][1] ? 1 : 0;
  var u = 3 <= f[b][2] ? 1 : 0;
  var y = 3 <= f[b][3] ? 1 : 0;
  var A = 2 <= f[b][0] ? 1 : 0;
  var B = 2 <= f[b][1] ? 1 : 0;
  var D = 2 <= f[b][2] ? 1 : 0;
  var F = 2 <= f[b][3] ? 1 : 0;
  var C = 1 <= f[b][0] ? 1 : 0;
  var E = 1 <= f[b][1] ? 1 : 0;
  var H = 1 <= f[b][2] ? 1 : 0;
  var Q = 1 <= f[b][3] ? 1 : 0;
  var K = a - z + r, M = v - p + r, L = w - u + r, I = x - y + r, P = a - A + 2 * r, T = v - B + 2 * r, R = w - D + 2 * r, aa = x - F + 2 * r;
  q = a - C + 3 * r;
  c = v - E + 3 * r;
  var N = w - H + 3 * r, S = x - Q + 3 * r;
  f = a - 1 + 4 * r;
  b = v - 1 + 4 * r;
  k = w - 1 + 4 * r;
  r = x - 1 + 4 * r;
  n &= 255;
  m &= 255;
  var O = d & 255;
  l &= 255;
  d = h[n + h[m + h[O + h[l]]]] % 32;
  z = h[n + z + h[m + p + h[O + u + h[l + y]]]] % 32;
  A = h[n + A + h[m + B + h[O + D + h[l + F]]]] % 32;
  C = h[n + C + h[m + E + h[O + H + h[l + Q]]]] % 32;
  h = h[n + 1 + h[m + 1 + h[O + 1 + h[l + 1]]]] % 32;
  l = .6 - a * a - v * v - w * w - x * x;
  0 > l ? a = 0 : (l *= l, a = l * l * this.dot4(e[d], a, v, w, x));
  v = .6 - K * K - M * M - L * L - I * I;
  0 > v ? v = 0 : (v *= v, v = v * v * this.dot4(e[z], K, M, L, I));
  w = .6 - P * P - T * T - R * R - aa * aa;
  0 > w ? w = 0 : (w *= w, w = w * w * this.dot4(e[A], P, T, R, aa));
  P = .6 - q * q - c * c - N * N - S * S;
  0 > P ? q = 0 : (P *= P, q = P * P * this.dot4(e[C], q, c, N, S));
  c = .6 - f * f - b * b - k * k - r * r;
  0 > c ? e = 0 : (c *= c, e = c * c * this.dot4(e[h], f, b, k, r));
  return 27 * (a + v + w + q + e);
};
THREE.AfterimageShader = {uniforms:{damp:{value:.96}, tOld:{value:null}, tNew:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float damp;\nuniform sampler2D tOld;\nuniform sampler2D tNew;\nvarying vec2 vUv;\nvec4 when_gt( vec4 x, float y ) {\n\treturn max( sign( x - y ), 0.0 );\n}\nvoid main() {\n\tvec4 texelOld = texture2D( tOld, vUv );\n\tvec4 texelNew = texture2D( tNew, vUv );\n\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\tgl_FragColor = max(texelNew, texelOld);\n}"};
THREE.CopyShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tgl_FragColor = opacity * texel;\n}"};
THREE.BokehShader = {defines:{DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tColor:{value:null}, tDepth:{value:null}, focus:{value:1}, aspect:{value:1}, aperture:{value:.025}, maxblur:{value:1}, nearClip:{value:1}, farClip:{value:1E3}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\nuniform sampler2D tColor;\nuniform sampler2D tDepth;\nuniform float maxblur;\nuniform float aperture;\nuniform float nearClip;\nuniform float farClip;\nuniform float focus;\nuniform float aspect;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\n\t#else\n\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\n\t#endif\n}\nvoid main() {\n\tvec2 aspectcorrect = vec2( 1.0, aspect );\n\tfloat viewZ = getViewZ( getDepth( vUv ) );\n\tfloat factor = ( focus + viewZ );\n\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\n\tvec2 dofblur9 = dofblur * 0.9;\n\tvec2 dofblur7 = dofblur * 0.7;\n\tvec2 dofblur4 = dofblur * 0.4;\n\tvec4 col = vec4( 0.0 );\n\tcol += texture2D( tColor, vUv.xy );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\n\tgl_FragColor = col / 41.0;\n\tgl_FragColor.a = 1.0;\n}"};
THREE.SAOShader = {defines:{NUM_SAMPLES:7, NUM_RINGS:4, NORMAL_TEXTURE:0, DIFFUSE_TEXTURE:0, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{value:null}, tDiffuse:{value:null}, tNormal:{value:null}, size:{value:new THREE.Vector2(512, 512)}, cameraNear:{value:1}, cameraFar:{value:100}, cameraProjectionMatrix:{value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{value:new THREE.Matrix4}, scale:{value:1}, intensity:{value:.1}, bias:{value:.5}, minResolution:{value:0}, kernelRadius:{value:100}, 
randomSeed:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\n#if DIFFUSE_TEXTURE == 1\nuniform sampler2D tDiffuse;\n#endif\nuniform sampler2D tDepth;\n#if NORMAL_TEXTURE == 1\nuniform sampler2D tNormal;\n#endif\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float scale;\nuniform float intensity;\nuniform float bias;\nuniform float kernelRadius;\nuniform float minResolution;\nuniform vec2 size;\nuniform float randomSeed;\n// RGBA depth\n#include <packing>\nvec4 getDefaultColor( const in vec2 screenPosition ) {\n\t#if DIFFUSE_TEXTURE == 1\n\treturn texture2D( tDiffuse, vUv );\n\t#else\n\treturn vec4( 1.0 );\n\t#endif\n}\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\n\t#if NORMAL_TEXTURE == 1\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n\t#else\n\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\n\t#endif\n}\nfloat scaleDividedByCameraFar;\nfloat minResolutionMultipliedByCameraFar;\nfloat getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\n\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\n\tfloat viewDistance = length( viewDelta );\n\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\n\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\n}\n// moving costly divides into consts\nconst float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\nconst float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\nfloat getAmbientOcclusion( const in vec3 centerViewPosition ) {\n\t// precompute some variables require in getOcclusion.\n\tscaleDividedByCameraFar = scale / cameraFar;\n\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\n\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\n\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\n\tfloat angle = rand( vUv + randomSeed ) * PI2;\n\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\n\tvec2 radiusStep = radius;\n\tfloat occlusionSum = 0.0;\n\tfloat weightSum = 0.0;\n\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\n\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\n\t\tradius += radiusStep;\n\t\tangle += ANGLE_STEP;\n\t\tfloat sampleDepth = getDepth( sampleUv );\n\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tfloat sampleViewZ = getViewZ( sampleDepth );\n\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\n\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\n\t\tweightSum += 1.0;\n\t}\n\tif( weightSum == 0.0 ) discard;\n\treturn occlusionSum * ( intensity / weightSum );\n}\nvoid main() {\n\tfloat centerDepth = getDepth( vUv );\n\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = getViewZ( centerDepth );\n\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\n\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\n\tgl_FragColor = getDefaultColor( vUv );\n\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\n}"};
THREE.DepthLimitedBlurShader = {defines:{KERNEL_RADIUS:4, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDiffuse:{value:null}, size:{value:new THREE.Vector2(512, 512)}, sampleUvOffsets:{value:[new THREE.Vector2(0, 0)]}, sampleWeights:{value:[1]}, tDepth:{value:null}, cameraNear:{value:10}, cameraFar:{value:1E3}, depthCutoff:{value:10}}, vertexShader:"#include <common>\nuniform vec2 size;\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nvoid main() {\n\tvUv = uv;\n\tvInvSize = 1.0 / size;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"#include <common>\n#include <packing>\nuniform sampler2D tDiffuse;\nuniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform float depthCutoff;\nuniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\nuniform float sampleWeights[ KERNEL_RADIUS + 1 ];\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tif( depth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = -getViewZ( depth );\n\tbool rBreak = false, lBreak = false;\n\tfloat weightSum = sampleWeights[0];\n\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\n\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\n\t\tfloat sampleWeight = sampleWeights[i];\n\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\n\t\tvec2 sampleUv = vUv + sampleUvOffset;\n\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\n\t\tif( ! rBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t\tsampleUv = vUv - sampleUvOffset;\n\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\n\t\tif( ! lBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t}\n\tgl_FragColor = diffuseSum / weightSum;\n}"};
THREE.BlurShaderUtils = {createSampleWeights:function(a, c) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(Math.exp(-(b * b) / (2 * c * c)) / (Math.sqrt(2 * Math.PI) * c));
  }
  return k;
}, createSampleOffsets:function(a, c) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(c.clone().multiplyScalar(b));
  }
  return k;
}, configure:function(a, c, k, b) {
  a.defines.KERNEL_RADIUS = c;
  a.uniforms.sampleUvOffsets.value = THREE.BlurShaderUtils.createSampleOffsets(c, b);
  a.uniforms.sampleWeights.value = THREE.BlurShaderUtils.createSampleWeights(c, k);
  a.needsUpdate = !0;
}};
THREE.UnpackDepthRGBAShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n#include <packing>\nvoid main() {\n\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\n\tgl_FragColor = vec4( vec3( depth ), opacity );\n}"};
THREE.ConvolutionShader = {defines:{KERNEL_SIZE_FLOAT:"25.0", KERNEL_SIZE_INT:"25"}, uniforms:{tDiffuse:{value:null}, uImageIncrement:{value:new THREE.Vector2(.001953125, 0)}, cKernel:{value:[]}}, vertexShader:"uniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\n\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float cKernel[ KERNEL_SIZE_INT ];\nuniform sampler2D tDiffuse;\nuniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 imageCoord = vUv;\n\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\timageCoord += uImageIncrement;\n\t}\n\tgl_FragColor = sum;\n}", 
buildKernel:function(a) {
  var c, k, b = 2 * Math.ceil(3 * a) + 1;
  25 < b && (b = 25);
  var e = .5 * (b - 1);
  var f = Array(b);
  for (c = k = 0; c < b; ++c) {
    var h = c - e;
    f[c] = Math.exp(-(h * h) / (2 * a * a));
    k += f[c];
  }
  for (c = 0; c < b; ++c) {
    f[c] /= k;
  }
  return f;
}};
THREE.LuminosityHighPassShader = {shaderID:"luminosityHighPass", uniforms:{tDiffuse:{value:null}, luminosityThreshold:{value:1}, smoothWidth:{value:1}, defaultColor:{value:new THREE.Color(0)}, defaultOpacity:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec3 defaultColor;\nuniform float defaultOpacity;\nuniform float luminosityThreshold;\nuniform float smoothWidth;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\tfloat v = dot( texel.xyz, luma );\n\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\tgl_FragColor = mix( outputColor, texel, alpha );\n}"};
THREE.FXAAShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2(1 / 1024, 1 / 512)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:'precision highp float;\n\nuniform sampler2D tDiffuse;\n\nuniform vec2 resolution;\n\nvarying vec2 vUv;\n\n// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n//----------------------------------------------------------------------------------\n// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\n// SDK Version: v3.00\n// Email:       gameworks@nvidia.com\n// Site:        http://developer.nvidia.com/\n//\n// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  * Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n//  * Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n//  * Neither the name of NVIDIA CORPORATION nor the names of its\n//    contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS\'\' AND ANY\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//----------------------------------------------------------------------------------\n\n#define FXAA_PC 1\n#define FXAA_GLSL_100 1\n#define FXAA_QUALITY_PRESET 12\n\n#define FXAA_GREEN_AS_LUMA 1\n\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_PC_CONSOLE\n    //\n    // The console algorithm for PC is included\n    // for developers targeting really low spec machines.\n    // Likely better to just run FXAA_PC, and use a really low preset.\n    //\n    #define FXAA_PC_CONSOLE 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_120\n    #define FXAA_GLSL_120 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_130\n    #define FXAA_GLSL_130 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_3\n    #define FXAA_HLSL_3 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_4\n    #define FXAA_HLSL_4 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_5\n    #define FXAA_HLSL_5 0\n#endif\n/*==========================================================================*/\n#ifndef FXAA_GREEN_AS_LUMA\n    //\n    // For those using non-linear color,\n    // and either not able to get luma in alpha, or not wanting to,\n    // this enables FXAA to run using green as a proxy for luma.\n    // So with this enabled, no need to pack luma in alpha.\n    //\n    // This will turn off AA on anything which lacks some amount of green.\n    // Pure red and blue or combination of only R and B, will get no AA.\n    //\n    // Might want to lower the settings for both,\n    //    fxaaConsoleEdgeThresholdMin\n    //    fxaaQualityEdgeThresholdMin\n    // In order to insure AA does not get turned off on colors\n    // which contain a minor amount of green.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_GREEN_AS_LUMA 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_EARLY_EXIT\n    //\n    // Controls algorithm\'s early exit path.\n    // On PS3 turning this ON adds 2 cycles to the shader.\n    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\n    // Turning this off on console will result in a more blurry image.\n    // So this defaults to on.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_EARLY_EXIT 1\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_DISCARD\n    //\n    // Only valid for PC OpenGL currently.\n    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n    //\n    // 1 = Use discard on pixels which don\'t need AA.\n    //     For APIs which enable concurrent TEX+ROP from same surface.\n    // 0 = Return unchanged color on pixels which don\'t need AA.\n    //\n    #define FXAA_DISCARD 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_FAST_PIXEL_OFFSET\n    //\n    // Used for GLSL 120 only.\n    //\n    // 1 = GL API supports fast pixel offsets\n    // 0 = do not use fast pixel offsets\n    //\n    #ifdef GL_EXT_gpu_shader4\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifndef FXAA_FAST_PIXEL_OFFSET\n        #define FXAA_FAST_PIXEL_OFFSET 0\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GATHER4_ALPHA\n    //\n    // 1 = API supports gather4 on alpha channel.\n    // 0 = API does not support gather4 on alpha channel.\n    //\n    #if (FXAA_HLSL_5 == 1)\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifndef FXAA_GATHER4_ALPHA\n        #define FXAA_GATHER4_ALPHA 0\n    #endif\n#endif\n\n\n/*============================================================================\n                        FXAA QUALITY - TUNING KNOBS\n------------------------------------------------------------------------------\nNOTE the other tuning knobs are now in the shader function inputs!\n============================================================================*/\n#ifndef FXAA_QUALITY_PRESET\n    //\n    // Choose the quality preset.\n    // This needs to be compiled into the shader as it effects code.\n    // Best option to include multiple presets is to\n    // in each shader define the preset, then include this file.\n    //\n    // OPTIONS\n    // -----------------------------------------------------------------------\n    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n    // 39       - no dither, very expensive\n    //\n    // NOTES\n    // -----------------------------------------------------------------------\n    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n    // 13 = about same speed as FXAA 3.9 and better than 12\n    // 23 = closest to FXAA 3.9 visually and performance wise\n    //  _ = the lowest digit is directly related to performance\n    // _  = the highest digit is directly related to style\n    //\n    #define FXAA_QUALITY_PRESET 12\n#endif\n\n\n/*============================================================================\n\n                           FXAA QUALITY - PRESETS\n\n============================================================================*/\n\n/*============================================================================\n                     FXAA QUALITY - MEDIUM DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 10)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 3.0\n    #define FXAA_QUALITY_P2 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 11)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 3.0\n    #define FXAA_QUALITY_P3 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 12)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 4.0\n    #define FXAA_QUALITY_P4 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 13)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 4.0\n    #define FXAA_QUALITY_P5 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 14)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 4.0\n    #define FXAA_QUALITY_P6 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 15)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 12.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - LOW DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 20)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 2.0\n    #define FXAA_QUALITY_P2 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 21)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 22)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 23)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 24)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 3.0\n    #define FXAA_QUALITY_P6 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 25)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 26)\n    #define FXAA_QUALITY_PS 9\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 4.0\n    #define FXAA_QUALITY_P8 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 27)\n    #define FXAA_QUALITY_PS 10\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 4.0\n    #define FXAA_QUALITY_P9 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 28)\n    #define FXAA_QUALITY_PS 11\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 4.0\n    #define FXAA_QUALITY_P10 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 29)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - EXTREME QUALITY\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 39)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.0\n    #define FXAA_QUALITY_P2 1.0\n    #define FXAA_QUALITY_P3 1.0\n    #define FXAA_QUALITY_P4 1.0\n    #define FXAA_QUALITY_P5 1.5\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n\n\n/*============================================================================\n\n                                API PORTING\n\n============================================================================*/\n#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n    #define FxaaBool bool\n    #define FxaaDiscard discard\n    #define FxaaFloat float\n    #define FxaaFloat2 vec2\n    #define FxaaFloat3 vec3\n    #define FxaaFloat4 vec4\n    #define FxaaHalf float\n    #define FxaaHalf2 vec2\n    #define FxaaHalf3 vec3\n    #define FxaaHalf4 vec4\n    #define FxaaInt2 ivec2\n    #define FxaaSat(x) clamp(x, 0.0, 1.0)\n    #define FxaaTex sampler2D\n#else\n    #define FxaaBool bool\n    #define FxaaDiscard clip(-1)\n    #define FxaaFloat float\n    #define FxaaFloat2 float2\n    #define FxaaFloat3 float3\n    #define FxaaFloat4 float4\n    #define FxaaHalf half\n    #define FxaaHalf2 half2\n    #define FxaaHalf3 half3\n    #define FxaaHalf4 half4\n    #define FxaaSat(x) saturate(x)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_100 == 1)\n  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_120 == 1)\n    // Requires,\n    //  #version 120\n    // And at least,\n    //  #extension GL_EXT_gpu_shader4 : enable\n    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n    #if (FXAA_FAST_PIXEL_OFFSET == 1)\n        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n    #else\n        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n    #endif\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_130 == 1)\n    // Requires "#version 130" or better\n    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_3 == 1)\n    #define FxaaInt2 float2\n    #define FxaaTex sampler2D\n    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_4 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_5 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n#endif\n\n\n/*============================================================================\n                   GREEN AS LUMA OPTION SUPPORT FUNCTION\n============================================================================*/\n#if (FXAA_GREEN_AS_LUMA == 0)\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n#else\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n#endif\n\n\n\n\n/*============================================================================\n\n                             FXAA3 QUALITY - PC\n\n============================================================================*/\n#if (FXAA_PC == 1)\n/*--------------------------------------------------------------------------*/\nFxaaFloat4 FxaaPixelShader(\n    //\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy} = center of pixel\n    FxaaFloat2 pos,\n    //\n    // Used only for FXAA Console, and not used on the 360 version.\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy_} = upper left of pixel\n    // {_zw} = lower right of pixel\n    FxaaFloat4 fxaaConsolePosPos,\n    //\n    // Input color texture.\n    // {rgb_} = color in linear or perceptual color space\n    // if (FXAA_GREEN_AS_LUMA == 0)\n    //     {__a} = luma in perceptual color space (not linear)\n    FxaaTex tex,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 2nd sampler.\n    // This sampler needs to have an exponent bias of -1.\n    FxaaTex fxaaConsole360TexExpBiasNegOne,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 3nd sampler.\n    // This sampler needs to have an exponent bias of -2.\n    FxaaTex fxaaConsole360TexExpBiasNegTwo,\n    //\n    // Only used on FXAA Quality.\n    // This must be from a constant/uniform.\n    // {x_} = 1.0/screenWidthInPixels\n    // {_y} = 1.0/screenHeightInPixels\n    FxaaFloat2 fxaaQualityRcpFrame,\n    //\n    // Only used on FXAA Console.\n    // This must be from a constant/uniform.\n    // This effects sub-pixel AA quality and inversely sharpness.\n    //   Where N ranges between,\n    //     N = 0.50 (default)\n    //     N = 0.33 (sharper)\n    // {x__} = -N/screenWidthInPixels\n    // {_y_} = -N/screenHeightInPixels\n    // {_z_} =  N/screenWidthInPixels\n    // {__w} =  N/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt,\n    //\n    // Only used on FXAA Console.\n    // Not used on 360, but used on PS3 and PC.\n    // This must be from a constant/uniform.\n    // {x__} = -2.0/screenWidthInPixels\n    // {_y_} = -2.0/screenHeightInPixels\n    // {_z_} =  2.0/screenWidthInPixels\n    // {__w} =  2.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\n    //\n    // Only used on FXAA Console.\n    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n    // This must be from a constant/uniform.\n    // {x__} =  8.0/screenWidthInPixels\n    // {_y_} =  8.0/screenHeightInPixels\n    // {_z_} = -4.0/screenWidthInPixels\n    // {__w} = -4.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_SUBPIX define.\n    // It is here now to allow easier tuning.\n    // Choose the amount of sub-pixel aliasing removal.\n    // This can effect sharpness.\n    //   1.00 - upper limit (softer)\n    //   0.75 - default amount of filtering\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n    //   0.25 - almost off\n    //   0.00 - completely off\n    FxaaFloat fxaaQualitySubpix,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // The minimum amount of local contrast required to apply algorithm.\n    //   0.333 - too little (faster)\n    //   0.250 - low quality\n    //   0.166 - default\n    //   0.125 - high quality\n    //   0.063 - overkill (slower)\n    FxaaFloat fxaaQualityEdgeThreshold,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n    //   0.0625 - high quality (faster)\n    //   0.0312 - visible limit (slower)\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaQualityEdgeThresholdMin,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only three safe values here: 2 and 4 and 8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // For all other platforms can be a non-power of two.\n    //   8.0 is sharper (default!!!)\n    //   4.0 is softer\n    //   2.0 is really soft (good only for vector graphics inputs)\n    FxaaFloat fxaaConsoleEdgeSharpness,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only two safe values here: 1/4 and 1/8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // The console setting has a different mapping than the quality setting.\n    // Other platforms can use other values.\n    //   0.125 leaves less aliasing, but is softer (default!!!)\n    //   0.25 leaves more aliasing, and is sharper\n    FxaaFloat fxaaConsoleEdgeThreshold,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    // The console setting has a different mapping than the quality setting.\n    // This only applies when FXAA_EARLY_EXIT is 1.\n    // This does not apply to PS3,\n    // PS3 was simplified to avoid more shader instructions.\n    //   0.06 - faster but more aliasing in darks\n    //   0.05 - default\n    //   0.04 - slower and less aliasing in darks\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaConsoleEdgeThresholdMin,\n    //\n    // Extra constants for 360 FXAA Console only.\n    // Use zeros or anything else for other platforms.\n    // These must be in physical constant registers and NOT immediates.\n    // Immediates will result in compiler un-optimizing.\n    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n    FxaaFloat4 fxaaConsole360ConstDir\n) {\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posM;\n    posM.x = pos.x;\n    posM.y = pos.y;\n    #if (FXAA_GATHER4_ALPHA == 1)\n        #if (FXAA_DISCARD == 0)\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n            #if (FXAA_GREEN_AS_LUMA == 0)\n                #define lumaM rgbyM.w\n            #else\n                #define lumaM rgbyM.y\n            #endif\n        #endif\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n        #else\n            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n        #endif\n        #if (FXAA_DISCARD == 1)\n            #define lumaM luma4A.w\n        #endif\n        #define lumaE luma4A.z\n        #define lumaS luma4A.x\n        #define lumaSE luma4A.y\n        #define lumaNW luma4B.w\n        #define lumaN luma4B.z\n        #define lumaW luma4B.x\n    #else\n        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            #define lumaM rgbyM.w\n        #else\n            #define lumaM rgbyM.y\n        #endif\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n        #endif\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat maxSM = max(lumaS, lumaM);\n    FxaaFloat minSM = min(lumaS, lumaM);\n    FxaaFloat maxESM = max(lumaE, maxSM);\n    FxaaFloat minESM = min(lumaE, minSM);\n    FxaaFloat maxWN = max(lumaN, lumaW);\n    FxaaFloat minWN = min(lumaN, lumaW);\n    FxaaFloat rangeMax = max(maxWN, maxESM);\n    FxaaFloat rangeMin = min(minWN, minESM);\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n    FxaaFloat range = rangeMax - rangeMin;\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    FxaaBool earlyExit = range < rangeMaxClamped;\n/*--------------------------------------------------------------------------*/\n    if(earlyExit)\n        #if (FXAA_DISCARD == 1)\n            FxaaDiscard;\n        #else\n            return rgbyM;\n        #endif\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_GATHER4_ALPHA == 0)\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n        #endif\n    #else\n        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNS = lumaN + lumaS;\n    FxaaFloat lumaWE = lumaW + lumaE;\n    FxaaFloat subpixRcpRange = 1.0/range;\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n/*--------------------------------------------------------------------------*/\n    if(!horzSpan) lumaN = lumaW;\n    if(!horzSpan) lumaS = lumaE;\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat gradientN = lumaN - lumaM;\n    FxaaFloat gradientS = lumaS - lumaM;\n    FxaaFloat lumaNN = lumaN + lumaM;\n    FxaaFloat lumaSS = lumaS + lumaM;\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n    if(pairN) lengthSign = -lengthSign;\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posB;\n    posB.x = posM.x;\n    posB.y = posM.y;\n    FxaaFloat2 offNP;\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n    if(!horzSpan) posB.x += lengthSign * 0.5;\n    if( horzSpan) posB.y += lengthSign * 0.5;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posN;\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat2 posP;\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n    FxaaFloat subpixE = subpixC * subpixC;\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n/*--------------------------------------------------------------------------*/\n    if(!pairN) lumaNN = lumaSS;\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n    FxaaFloat subpixF = subpixD * subpixE;\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\n/*--------------------------------------------------------------------------*/\n    lumaEndN -= lumaNN * 0.5;\n    lumaEndP -= lumaNN * 0.5;\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n    FxaaBool doneNP = (!doneN) || (!doneP);\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n/*--------------------------------------------------------------------------*/\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 3)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 4)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 5)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 6)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n/*--------------------------------------------------------------------------*/\n                        #if (FXAA_QUALITY_PS > 7)\n                        if(doneNP) {\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                            doneN = abs(lumaEndN) >= gradientScaled;\n                            doneP = abs(lumaEndP) >= gradientScaled;\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n                            doneNP = (!doneN) || (!doneP);\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_QUALITY_PS > 8)\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 9)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 10)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 11)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 12)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n    #endif\n/*--------------------------------------------------------------------------*/\n                        }\n                        #endif\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n/*--------------------------------------------------------------------------*/\n    FxaaFloat dstN = posM.x - posN.x;\n    FxaaFloat dstP = posP.x - posM.x;\n    if(!horzSpan) dstN = posM.y - posN.y;\n    if(!horzSpan) dstP = posP.y - posM.y;\n/*--------------------------------------------------------------------------*/\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n    FxaaFloat spanLength = (dstP + dstN);\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\n/*--------------------------------------------------------------------------*/\n    FxaaBool directionN = dstN < dstP;\n    FxaaFloat dst = min(dstN, dstP);\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n    FxaaFloat subpixG = subpixF * subpixF;\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n    #if (FXAA_DISCARD == 1)\n        return FxaaTexTop(tex, posM);\n    #else\n        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n    #endif\n}\n/*==========================================================================*/\n#endif\n\nvoid main() {\n  gl_FragColor = FxaaPixelShader(\n    vUv,\n    vec4(0.0),\n    tDiffuse,\n    tDiffuse,\n    tDiffuse,\n    resolution,\n    vec4(0.0),\n    vec4(0.0),\n    vec4(0.0),\n    0.75,\n    0.166,\n    0.0833,\n    0.0,\n    0.0,\n    0.0,\n    vec4(0.0)\n  );\n\n  // TODO avoid querying texture twice for same texel\n  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\n}'};
THREE.SSAOShader = {defines:{PERSPECTIVE_CAMERA:1, KERNEL_SIZE:32}, uniforms:{tDiffuse:{value:null}, tNormal:{value:null}, tDepth:{value:null}, tNoise:{value:null}, kernel:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}, resolution:{value:new THREE.Vector2}, cameraProjectionMatrix:{value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{value:new THREE.Matrix4}, kernelRadius:{value:8}, minDistance:{value:.005}, maxDistance:{value:.05}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"uniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tDepth;\nuniform sampler2D tNoise;\nuniform vec3 kernel[ KERNEL_SIZE ];\nuniform vec2 resolution;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float kernelRadius;\nuniform float minDistance;\nuniform float maxDistance;\nvarying vec2 vUv;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\treturn texture2D( tDepth, screenPosition ).x;\n}\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec2 screenPosition ) {\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tfloat viewZ = getViewZ( depth );\n\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\n\tvec3 viewNormal = getViewNormal( vUv );\n vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\n\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;\n\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\n\tvec3 bitangent = cross( viewNormal, tangent );\n\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\n float occlusion = 0.0;\n for ( int i = 0; i < KERNEL_SIZE; i ++ ) {\n\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];\n\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );\n\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );\n\t\tsamplePointNDC /= samplePointNDC.w;\n\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;\n\t\tfloat realDepth = getLinearDepth( samplePointUv );\n\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );\n\t\tfloat delta = sampleDepth - realDepth;\n\t\tif ( delta > minDistance && delta < maxDistance ) {\n\t\t\tocclusion += 1.0;\n\t\t}\n\t}\n\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\n\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\n}"};
THREE.SSAODepthShader = {defines:{PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nvarying vec2 vUv;\n#include <packing>\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nvoid main() {\n\tfloat depth = getLinearDepth( vUv );\n\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\n}"};
THREE.SSAOBlurShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 texelSize = ( 1.0 / resolution );\n\tfloat result = 0.0;\n\tfor ( int i = - 2; i <= 2; i ++ ) {\n\t\tfor ( int j = - 2; j <= 2; j ++ ) {\n\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\n\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\n\t\t}\n\t}\n\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\n}"};
THREE.FilmShader = {uniforms:{tDiffuse:{value:null}, time:{value:0}, nIntensity:{value:.5}, sIntensity:{value:.05}, sCount:{value:4096}, grayscale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform float time;\nuniform bool grayscale;\nuniform float nIntensity;\nuniform float sIntensity;\nuniform float sCount;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\n\tfloat dx = rand( vUv + time );\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\n\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\n\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\n\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\n\tif( grayscale ) {\n\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n\t}\n\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\n}"};
THREE.DotScreenShader = {uniforms:{tDiffuse:{value:null}, tSize:{value:new THREE.Vector2(256, 256)}, center:{value:new THREE.Vector2(.5, .5)}, angle:{value:1.57}, scale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec2 center;\nuniform float angle;\nuniform float scale;\nuniform vec2 tSize;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nfloat pattern() {\n\tfloat s = sin( angle ), c = cos( angle );\n\tvec2 tex = vUv * tSize - center;\n\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n}\nvoid main() {\n\tvec4 color = texture2D( tDiffuse, vUv );\n\tfloat average = ( color.r + color.g + color.b ) / 3.0;\n\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n}"};
THREE.LuminosityShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tfloat l = linearToRelativeLuminance( texel.rgb );\n\tgl_FragColor = vec4( l, l, l, texel.w );\n}"};
THREE.SobelOperatorShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\n\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\n\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\n\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\n\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\n\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\n\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\n\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\n\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\n\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\n\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\n\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\n\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \n\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \n\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \n\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \n\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \n\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \n\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\n\tgl_FragColor = vec4( vec3( G ), 1 );\n}"};
THREE.ColorifyShader = {uniforms:{tDiffuse:{value:null}, color:{value:new THREE.Color(16777215)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\tfloat v = dot( texel.xyz, luma );\n\tgl_FragColor = vec4( v * color, texel.w );\n}"};
THREE.ToneMapShader = {uniforms:{tDiffuse:{value:null}, averageLuminance:{value:1}, luminanceMap:{value:null}, maxLuminance:{value:16}, minLuminance:{value:.01}, middleGrey:{value:.6}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nuniform float middleGrey;\nuniform float minLuminance;\nuniform float maxLuminance;\n#ifdef ADAPTED_LUMINANCE\n\tuniform sampler2D luminanceMap;\n#else\n\tuniform float averageLuminance;\n#endif\nvec3 ToneMap( vec3 vColor ) {\n\t#ifdef ADAPTED_LUMINANCE\n\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\n\t#else\n\t\tfloat fLumAvg = averageLuminance;\n\t#endif\n\tfloat fLumPixel = linearToRelativeLuminance( vColor );\n\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\n\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\n\treturn fLumCompressed * vColor;\n}\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\n}"};
THREE.TechnicolorShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\n\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\n\tgl_FragColor = newTex;\n}"};
THREE.HueSaturationShader = {uniforms:{tDiffuse:{value:null}, hue:{value:0}, saturation:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform float hue;\nuniform float saturation;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( tDiffuse, vUv );\n\tfloat angle = hue * 3.14159265;\n\tfloat s = sin(angle), c = cos(angle);\n\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n\tfloat len = length(gl_FragColor.rgb);\n\tgl_FragColor.rgb = vec3(\n\t\tdot(gl_FragColor.rgb, weights.xyz),\n\t\tdot(gl_FragColor.rgb, weights.zxy),\n\t\tdot(gl_FragColor.rgb, weights.yzx)\n\t);\n\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\n\tif (saturation > 0.0) {\n\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n\t} else {\n\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\n\t}\n}"};
THREE.EffectComposer = function(a, c) {
  this.renderer = a;
  if (void 0 === c) {
    c = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1};
    var k = a.getSize(new THREE.Vector2);
    this._pixelRatio = a.getPixelRatio();
    this._width = k.width;
    this._height = k.height;
    c = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, c);
    c.texture.name = "EffectComposer.rt1";
  } else {
    this._pixelRatio = 1, this._width = c.width, this._height = c.height;
  }
  this.renderTarget1 = c;
  this.renderTarget2 = c.clone();
  this.renderTarget2.texture.name = "EffectComposer.rt2";
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
  this.renderToScreen = !0;
  this.passes = [];
  void 0 === THREE.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader");
  void 0 === THREE.ShaderPass && console.error("THREE.EffectComposer relies on THREE.ShaderPass");
  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
  this.clock = new THREE.Clock;
};
Object.assign(THREE.EffectComposer.prototype, {swapBuffers:function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
}, addPass:function(a) {
  this.passes.push(a);
  a.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
}, insertPass:function(a, c) {
  this.passes.splice(c, 0, a);
}, isLastEnabledPass:function(a) {
  for (a += 1; a < this.passes.length; a++) {
    if (this.passes[a].enabled) {
      return !1;
    }
  }
  return !0;
}, render:function(a) {
  void 0 === a && (a = this.clock.getDelta());
  var c = this.renderer.getRenderTarget(), k = !1, b, e = this.passes.length;
  for (b = 0; b < e; b++) {
    var f = this.passes[b];
    if (!1 !== f.enabled) {
      f.renderToScreen = this.renderToScreen && this.isLastEnabledPass(b);
      f.render(this.renderer, this.writeBuffer, this.readBuffer, a, k);
      if (f.needsSwap) {
        if (k) {
          var h = this.renderer.getContext(), r = this.renderer.state.buffers.stencil;
          r.setFunc(h.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, a);
          r.setFunc(h.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      void 0 !== THREE.MaskPass && (f instanceof THREE.MaskPass ? k = !0 : f instanceof THREE.ClearMaskPass && (k = !1));
    }
  }
  this.renderer.setRenderTarget(c);
}, reset:function(a) {
  void 0 === a && (a = this.renderer.getSize(new THREE.Vector2), this._pixelRatio = this.renderer.getPixelRatio(), this._width = a.width, this._height = a.height, a = this.renderTarget1.clone(), a.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio));
  this.renderTarget1.dispose();
  this.renderTarget2.dispose();
  this.renderTarget1 = a;
  this.renderTarget2 = a.clone();
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
}, setSize:function(a, c) {
  this._width = a;
  this._height = c;
  a = this._width * this._pixelRatio;
  c = this._height * this._pixelRatio;
  this.renderTarget1.setSize(a, c);
  this.renderTarget2.setSize(a, c);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, c);
  }
}, setPixelRatio:function(a) {
  this._pixelRatio = a;
  this.setSize(this._width, this._height);
}});
THREE.Pass = function() {
  this.needsSwap = this.enabled = !0;
  this.renderToScreen = this.clear = !1;
};
Object.assign(THREE.Pass.prototype, {setSize:function() {
}, render:function() {
  console.error("THREE.Pass: .render() must be implemented in derived pass.");
}});
THREE.Pass.FullScreenQuad = function() {
  var a = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1), c = new THREE.PlaneBufferGeometry(2, 2), k = function(a) {
    this._mesh = new THREE.Mesh(c, a);
  };
  Object.defineProperty(k.prototype, "material", {get:function() {
    return this._mesh.material;
  }, set:function(a) {
    this._mesh.material = a;
  }});
  Object.assign(k.prototype, {render:function(b) {
    b.render(this._mesh, a);
  }});
  return k;
}();
THREE.RenderPass = function(a, c, k, b, e) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = c;
  this.overrideMaterial = k;
  this.clearColor = b;
  this.clearAlpha = void 0 !== e ? e : 0;
  this.clear = !0;
  this.needsSwap = this.clearDepth = !1;
};
THREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.RenderPass, render:function(a, c, k) {
  c = a.autoClear;
  a.autoClear = !1;
  this.scene.overrideMaterial = this.overrideMaterial;
  if (this.clearColor) {
    var b = a.getClearColor().getHex();
    var e = a.getClearAlpha();
    a.setClearColor(this.clearColor, this.clearAlpha);
  }
  this.clearDepth && a.clearDepth();
  a.setRenderTarget(this.renderToScreen ? null : k);
  this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);
  a.render(this.scene, this.camera);
  this.clearColor && a.setClearColor(b, e);
  this.scene.overrideMaterial = null;
  a.autoClear = c;
}});
THREE.ShaderPass = function(a, c) {
  THREE.Pass.call(this);
  this.textureID = void 0 !== c ? c : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.fsQuad = new THREE.Pass.FullScreenQuad(this.material);
};
THREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.ShaderPass, render:function(a, c, k) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.fsQuad.material = this.material;
  this.renderToScreen ? a.setRenderTarget(null) : (a.setRenderTarget(c), this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil));
  this.fsQuad.render(a);
}});
THREE.MaskPass = function(a, c) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = c;
  this.clear = !0;
  this.inverse = this.needsSwap = !1;
};
THREE.MaskPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.MaskPass, render:function(a, c, k) {
  var b = a.getContext(), e = a.state;
  e.buffers.color.setMask(!1);
  e.buffers.depth.setMask(!1);
  e.buffers.color.setLocked(!0);
  e.buffers.depth.setLocked(!0);
  if (this.inverse) {
    var f = 0;
    var h = 1;
  } else {
    f = 1, h = 0;
  }
  e.buffers.stencil.setTest(!0);
  e.buffers.stencil.setOp(b.REPLACE, b.REPLACE, b.REPLACE);
  e.buffers.stencil.setFunc(b.ALWAYS, f, 4294967295);
  e.buffers.stencil.setClear(h);
  e.buffers.stencil.setLocked(!0);
  a.setRenderTarget(k);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  a.setRenderTarget(c);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  e.buffers.color.setLocked(!1);
  e.buffers.depth.setLocked(!1);
  e.buffers.stencil.setLocked(!1);
  e.buffers.stencil.setFunc(b.EQUAL, 1, 4294967295);
  e.buffers.stencil.setOp(b.KEEP, b.KEEP, b.KEEP);
  e.buffers.stencil.setLocked(!0);
}});
THREE.ClearMaskPass = function() {
  THREE.Pass.call(this);
  this.needsSwap = !1;
};
THREE.ClearMaskPass.prototype = Object.create(THREE.Pass.prototype);
Object.assign(THREE.ClearMaskPass.prototype, {render:function(a) {
  a.state.buffers.stencil.setLocked(!1);
  a.state.buffers.stencil.setTest(!1);
}});
THREE.NURBSCurve = function(a, c, k, b, e) {
  THREE.Curve.call(this);
  this.degree = a;
  this.knots = c;
  this.controlPoints = [];
  this.startKnot = b || 0;
  this.endKnot = e || this.knots.length - 1;
  for (a = 0; a < k.length; ++a) {
    c = k[a], this.controlPoints[a] = new THREE.Vector4(c.x, c.y, c.z, c.w);
  }
};
THREE.NURBSCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.NURBSCurve.prototype.constructor = THREE.NURBSCurve;
THREE.NURBSCurve.prototype.getPoint = function(a) {
  a = THREE.NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, this.knots[this.startKnot] + a * (this.knots[this.endKnot] - this.knots[this.startKnot]));
  1 != a.w && a.divideScalar(a.w);
  return new THREE.Vector3(a.x, a.y, a.z);
};
THREE.NURBSCurve.prototype.getTangent = function(a) {
  a = THREE.NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, this.knots[0] + a * (this.knots[this.knots.length - 1] - this.knots[0]), 1)[1].clone();
  a.normalize();
  return a;
};
THREE.NURBSSurface = function(a, c, k, b, e) {
  this.degree1 = a;
  this.degree2 = c;
  this.knots1 = k;
  this.knots2 = b;
  this.controlPoints = [];
  a = k.length - a - 1;
  c = b.length - c - 1;
  for (b = 0; b < a; ++b) {
    for (this.controlPoints[b] = [], k = 0; k < c; ++k) {
      var f = e[b][k];
      this.controlPoints[b][k] = new THREE.Vector4(f.x, f.y, f.z, f.w);
    }
  }
};
THREE.NURBSSurface.prototype = {constructor:THREE.NURBSSurface, getPoint:function(a, c, k) {
  THREE.NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, this.knots1[0] + a * (this.knots1[this.knots1.length - 1] - this.knots1[0]), this.knots2[0] + c * (this.knots2[this.knots2.length - 1] - this.knots2[0]), k);
}};
THREE.NURBSUtils = {findSpan:function(a, c, k) {
  var b = k.length - a - 1;
  if (c >= k[b]) {
    return b - 1;
  }
  if (c <= k[a]) {
    return a;
  }
  for (var e = Math.floor((a + b) / 2); c < k[e] || c >= k[e + 1];) {
    c < k[e] ? b = e : a = e, e = Math.floor((a + b) / 2);
  }
  return e;
}, calcBasisFunctions:function(a, c, k, b) {
  for (var e = [], f = [], h = [], r = e[0] = 1; r <= k; ++r) {
    f[r] = c - b[a + 1 - r];
    h[r] = b[a + r] - c;
    for (var q = 0, n = 0; n < r; ++n) {
      var m = h[n + 1], d = f[r - n], l = e[n] / (m + d);
      e[n] = q + m * l;
      q = d * l;
    }
    e[r] = q;
  }
  return e;
}, calcBSplinePoint:function(a, c, k, b) {
  var e = this.findSpan(a, b, c);
  c = this.calcBasisFunctions(e, b, a, c);
  b = new THREE.Vector4(0, 0, 0, 0);
  for (var f = 0; f <= a; ++f) {
    var h = k[e - a + f], r = c[f], q = h.w * r;
    b.x += h.x * q;
    b.y += h.y * q;
    b.z += h.z * q;
    b.w += h.w * r;
  }
  return b;
}, calcBasisFunctionDerivatives:function(a, c, k, b, e) {
  for (var f = [], h = 0; h <= k; ++h) {
    f[h] = 0;
  }
  var r = [];
  for (h = 0; h <= b; ++h) {
    r[h] = f.slice(0);
  }
  var q = [];
  for (h = 0; h <= k; ++h) {
    q[h] = f.slice(0);
  }
  q[0][0] = 1;
  var n = f.slice(0), m = f.slice(0);
  for (h = 1; h <= k; ++h) {
    n[h] = c - e[a + 1 - h];
    m[h] = e[a + h] - c;
    for (var d = 0, l = 0; l < h; ++l) {
      var v = m[l + 1], w = n[h - l];
      q[h][l] = v + w;
      var x = q[l][h - 1] / q[h][l];
      q[l][h] = d + v * x;
      d = w * x;
    }
    q[h][h] = d;
  }
  for (h = 0; h <= k; ++h) {
    r[0][h] = q[h][k];
  }
  for (l = 0; l <= k; ++l) {
    a = 0;
    c = 1;
    e = [];
    for (h = 0; h <= k; ++h) {
      e[h] = f.slice(0);
    }
    for (n = e[0][0] = 1; n <= b; ++n) {
      m = 0;
      d = l - n;
      v = k - n;
      l >= n && (e[c][0] = e[a][0] / q[v + 1][d], m = e[c][0] * q[d][v]);
      w = l - 1 <= v ? n - 1 : k - l;
      for (h = -1 <= d ? 1 : -d; h <= w; ++h) {
        e[c][h] = (e[a][h] - e[a][h - 1]) / q[v + 1][d + h], m += e[c][h] * q[d + h][v];
      }
      l <= v && (e[c][n] = -e[a][n - 1] / q[v + 1][l], m += e[c][n] * q[l][v]);
      r[n][l] = m;
      h = a;
      a = c;
      c = h;
    }
  }
  l = k;
  for (n = 1; n <= b; ++n) {
    for (h = 0; h <= k; ++h) {
      r[n][h] *= l;
    }
    l *= k - n;
  }
  return r;
}, calcBSplineDerivatives:function(a, c, k, b, e) {
  var f = e < a ? e : a, h = [], r = this.findSpan(a, b, c);
  c = this.calcBasisFunctionDerivatives(r, b, a, f, c);
  b = [];
  for (var q = 0; q < k.length; ++q) {
    var n = k[q].clone(), m = n.w;
    n.x *= m;
    n.y *= m;
    n.z *= m;
    b[q] = n;
  }
  for (k = 0; k <= f; ++k) {
    n = b[r - a].clone().multiplyScalar(c[k][0]);
    for (q = 1; q <= a; ++q) {
      n.add(b[r - a + q].clone().multiplyScalar(c[k][q]));
    }
    h[k] = n;
  }
  for (k = f + 1; k <= e + 1; ++k) {
    h[k] = new THREE.Vector4(0, 0, 0);
  }
  return h;
}, calcKoverI:function(a, c) {
  for (var k = 1, b = 2; b <= a; ++b) {
    k *= b;
  }
  var e = 1;
  for (b = 2; b <= c; ++b) {
    e *= b;
  }
  for (b = 2; b <= a - c; ++b) {
    e *= b;
  }
  return k / e;
}, calcRationalCurveDerivatives:function(a) {
  for (var c = a.length, k = [], b = [], e = 0; e < c; ++e) {
    var f = a[e];
    k[e] = new THREE.Vector3(f.x, f.y, f.z);
    b[e] = f.w;
  }
  a = [];
  for (f = 0; f < c; ++f) {
    var h = k[f].clone();
    for (e = 1; e <= f; ++e) {
      h.sub(a[f - e].clone().multiplyScalar(this.calcKoverI(f, e) * b[e]));
    }
    a[f] = h.divideScalar(b[0]);
  }
  return a;
}, calcNURBSDerivatives:function(a, c, k, b, e) {
  a = this.calcBSplineDerivatives(a, c, k, b, e);
  return this.calcRationalCurveDerivatives(a);
}, calcSurfacePoint:function(a, c, k, b, e, f, h, r) {
  var q = this.findSpan(a, f, k), n = this.findSpan(c, h, b);
  k = this.calcBasisFunctions(q, f, a, k);
  b = this.calcBasisFunctions(n, h, c, b);
  h = [];
  for (f = 0; f <= c; ++f) {
    h[f] = new THREE.Vector4(0, 0, 0, 0);
    for (var m = 0; m <= a; ++m) {
      var d = e[q - a + m][n - c + f].clone(), l = d.w;
      d.x *= l;
      d.y *= l;
      d.z *= l;
      h[f].add(d.multiplyScalar(k[m]));
    }
  }
  a = new THREE.Vector4(0, 0, 0, 0);
  for (f = 0; f <= c; ++f) {
    a.add(h[f].multiplyScalar(b[f]));
  }
  a.divideScalar(a.w);
  r.set(a.x, a.y, a.z);
}};
THREE.Lensflare = function() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.type = "Lensflare";
  this.frustumCulled = !1;
  this.renderOrder = Infinity;
  var a = new THREE.Vector3, c = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  c.minFilter = THREE.NearestFilter;
  c.magFilter = THREE.NearestFilter;
  c.wrapS = THREE.ClampToEdgeWrapping;
  c.wrapT = THREE.ClampToEdgeWrapping;
  c.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, e = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nvoid main() {\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n}", depthTest:!0, depthWrite:!1, transparent:!1}), 
  f = new THREE.RawShaderMaterial({uniforms:{map:{value:c}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\n\tvUV = uv;\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nuniform sampler2D map;\nvarying vec2 vUV;\nvoid main() {\n\tgl_FragColor = texture2D( map, vUV );\n}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), h = new THREE.Mesh(b, e), r = [], q = THREE.LensflareElement.Shader, n = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:q.vertexShader, fragmentShader:q.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), m = new THREE.Mesh(b, n);
  this.addElement = function(a) {
    r.push(a);
  };
  var d = new THREE.Vector2, l = new THREE.Vector2, v = new THREE.Box2, w = new THREE.Vector4;
  this.onBeforeRender = function(q, z, p) {
    w.copy(q.getCurrentViewport());
    z = w.w / w.z;
    var u = w.z / 2, y = w.w / 2, x = 16 / w.w;
    d.set(x * z, x);
    v.min.set(w.x, w.y);
    v.max.set(w.x + (w.z - 16), w.y + (w.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(p.matrixWorldInverse);
    a.applyMatrix4(p.projectionMatrix);
    l.x = w.x + a.x * u + u - 8;
    l.y = w.y + a.y * y + y - 8;
    if (v.containsPoint(l)) {
      q.copyFramebufferToTexture(l, c);
      u = e.uniforms;
      u.scale.value = d;
      u.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, e, h, null);
      q.copyFramebufferToTexture(l, k);
      u = f.uniforms;
      u.scale.value = d;
      u.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, f, h, null);
      y = 2 * -a.x;
      for (var B = 2 * -a.y, D = 0, F = r.length; D < F; D++) {
        z = r[D], u = n.uniforms, u.color.value.copy(z.color), u.map.value = z.texture, u.screenPosition.value.x = a.x + y * z.distance, u.screenPosition.value.y = a.y + B * z.distance, x = z.size / w.w, z = w.w / w.z, u.scale.value.set(x * z, x), n.uniformsNeedUpdate = !0, q.renderBufferDirect(p, null, b, n, m, null);
      }
    }
  };
  this.dispose = function() {
    e.dispose();
    f.dispose();
    n.dispose();
    c.dispose();
    k.dispose();
    for (var a = 0, d = r.length; a < d; a++) {
      r[a].texture.dispose();
    }
  };
};
THREE.Lensflare.prototype = Object.create(THREE.Mesh.prototype);
THREE.Lensflare.prototype.constructor = THREE.Lensflare;
THREE.Lensflare.prototype.isLensflare = !0;
THREE.LensflareElement = function(a, c, k, b) {
  this.texture = a;
  this.size = c || 1;
  this.distance = k || 0;
  this.color = b || new THREE.Color(16777215);
};
THREE.LensflareElement.Shader = {uniforms:{map:{value:null}, occlusionMap:{value:null}, color:{value:null}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform sampler2D occlusionMap;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV = uv;\n\tvec2 pos = position.xy;\n\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\tvVisibility =        visibility.r / 9.0;\n\tvVisibility *= 1.0 - visibility.g / 9.0;\n\tvVisibility *=       visibility.b / 9.0;\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}", 
fragmentShader:"precision highp float;\nuniform sampler2D map;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvec4 texture = texture2D( map, vUV );\n\ttexture.a *= vVisibility;\n\tgl_FragColor = texture;\n\tgl_FragColor.rgb *= color;\n}"};
THREE.Lensflare.Geometry = function() {
  var a = new THREE.BufferGeometry, c = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);
  c = new THREE.InterleavedBuffer(c, 5);
  a.setIndex([0, 1, 2, 0, 2, 3]);
  a.setAttribute("position", new THREE.InterleavedBufferAttribute(c, 3, 0, !1));
  a.setAttribute("uv", new THREE.InterleavedBufferAttribute(c, 2, 3, !1));
  return a;
}();
THREE.TTFLoader = function(a) {
  THREE.Loader.call(this, a);
  this.reversed = !1;
};
THREE.TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {constructor:THREE.TTFLoader, load:function(a, c, k, b) {
  var e = this, f = new THREE.FileLoader(this.manager);
  f.setPath(this.path);
  f.setResponseType("arraybuffer");
  f.load(a, function(a) {
    c(e.parse(a));
  }, k, b);
}, parse:function(a) {
  function c(a) {
    var b = [], c;
    a.forEach(function(a) {
      "m" === a.type.toLowerCase() ? (c = [a], b.push(c)) : "z" !== a.type.toLowerCase() && c.push(a);
    });
    var f = [];
    b.forEach(function(a) {
      var b = {type:"m", x:a[a.length - 1].x, y:a[a.length - 1].y};
      f.push(b);
      for (var c = a.length - 1; 0 < c; c--) {
        var e = a[c];
        b = {type:e.type};
        void 0 !== e.x2 && void 0 !== e.y2 ? (b.x1 = e.x2, b.y1 = e.y2, b.x2 = e.x1, b.y2 = e.y1) : void 0 !== e.x1 && void 0 !== e.y1 && (b.x1 = e.x1, b.y1 = e.y1);
        b.x = a[c - 1].x;
        b.y = a[c - 1].y;
        f.push(b);
      }
    });
    return f;
  }
  return "undefined" === typeof opentype ? (console.warn("THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader."), null) : function(a, b) {
    for (var e = Math.round, f = {}, h = 1E5 / (72 * (a.unitsPerEm || 2048)), k = a.encoding.cmap.glyphIndexMap, q = Object.keys(k), n = 0; n < q.length; n++) {
      var m = q[n], d = a.glyphs.glyphs[k[m]];
      if (void 0 !== m) {
        var l = {ha:e(d.advanceWidth * h), x_min:e(d.xMin * h), x_max:e(d.xMax * h), o:""};
        b && (d.path.commands = c(d.path.commands));
        d.path.commands.forEach(function(a) {
          "c" === a.type.toLowerCase() && (a.type = "b");
          l.o += a.type.toLowerCase() + " ";
          void 0 !== a.x && void 0 !== a.y && (l.o += e(a.x * h) + " " + e(a.y * h) + " ");
          void 0 !== a.x1 && void 0 !== a.y1 && (l.o += e(a.x1 * h) + " " + e(a.y1 * h) + " ");
          void 0 !== a.x2 && void 0 !== a.y2 && (l.o += e(a.x2 * h) + " " + e(a.y2 * h) + " ");
        });
        f[String.fromCodePoint(d.unicode)] = l;
      }
    }
    return {glyphs:f, familyName:a.getEnglishName("fullName"), ascender:e(a.ascender * h), descender:e(a.descender * h), underlinePosition:a.tables.post.underlinePosition, underlineThickness:a.tables.post.underlineThickness, boundingBox:{xMin:a.tables.head.xMin, xMax:a.tables.head.xMax, yMin:a.tables.head.yMin, yMax:a.tables.head.yMax}, resolution:1E3, original_font_information:a.tables.name};
  }(opentype.parse(a), this.reversed);
}});
(function(a, c) {
  if ("function" === typeof define && define.amd) {
    define(["long"], c);
  } else {
    if ("function" === typeof require && "object" === typeof module && module && module.exports) {
      a = module;
      try {
        var k = require("long");
      } catch (b) {
      }
      k = c(k);
      a.exports = k;
    } else {
      (a.dcodeIO = a.dcodeIO || {}).ByteBuffer = c(a.dcodeIO.Long);
    }
  }
})(this, function(a) {
  function c(a) {
    var d = 0;
    return function() {
      return d < a.length ? a.charCodeAt(d++) : null;
    };
  }
  function k() {
    var a = [], b = [];
    return function() {
      if (0 === arguments.length) {
        return b.join("") + q.apply(String, a);
      }
      1024 < a.length + arguments.length && (b.push(q.apply(String, a)), a.length = 0);
      Array.prototype.push.apply(a, arguments);
    };
  }
  function b(a, b, c, e, f) {
    var d = 8 * f - e - 1;
    var l = (1 << d) - 1, h = l >> 1, m = -7;
    f = c ? f - 1 : 0;
    var n = c ? -1 : 1, k = a[b + f];
    f += n;
    c = k & (1 << -m) - 1;
    k >>= -m;
    for (m += d; 0 < m; c = 256 * c + a[b + f], f += n, m -= 8) {
    }
    d = c & (1 << -m) - 1;
    c >>= -m;
    for (m += e; 0 < m; d = 256 * d + a[b + f], f += n, m -= 8) {
    }
    if (0 === c) {
      c = 1 - h;
    } else {
      if (c === l) {
        return d ? NaN : Infinity * (k ? -1 : 1);
      }
      d += Math.pow(2, e);
      c -= h;
    }
    return (k ? -1 : 1) * d * Math.pow(2, c - e);
  }
  function e(a, b, c, e, f, h) {
    var d, l = 8 * h - f - 1, m = (1 << l) - 1, n = m >> 1, k = 23 === f ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    h = e ? 0 : h - 1;
    var q = e ? 1 : -1, r = 0 > b || 0 === b && 0 > 1 / b ? 1 : 0;
    b = Math.abs(b);
    for (isNaN(b) || Infinity === b ? (b = isNaN(b) ? 1 : 0, e = m) : (e = Math.floor(Math.log(b) / Math.LN2), 1 > b * (d = Math.pow(2, -e)) && (e--, d *= 2), b = 1 <= e + n ? b + k / d : b + k * Math.pow(2, 1 - n), 2 <= b * d && (e++, d /= 2), e + n >= m ? (b = 0, e = m) : 1 <= e + n ? (b = (b * d - 1) * Math.pow(2, f), e += n) : (b = b * Math.pow(2, n - 1) * Math.pow(2, f), e = 0)); 8 <= f; a[c + h] = b & 255, h += q, b /= 256, f -= 8) {
    }
    e = e << f | b;
    for (l += f; 0 < l; a[c + h] = e & 255, h += q, e /= 256, l -= 8) {
    }
    a[c + h - q] |= 128 * r;
  }
  var f = function(a, b, c) {
    "undefined" === typeof a && (a = f.DEFAULT_CAPACITY);
    "undefined" === typeof b && (b = f.DEFAULT_ENDIAN);
    "undefined" === typeof c && (c = f.DEFAULT_NOASSERT);
    if (!c) {
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity");
      }
      b = !!b;
      c = !!c;
    }
    this.buffer = 0 === a ? r : new ArrayBuffer(a);
    this.view = 0 === a ? null : new Uint8Array(this.buffer);
    this.offset = 0;
    this.markedOffset = -1;
    this.limit = a;
    this.littleEndian = b;
    this.noAssert = c;
  };
  f.VERSION = "5.0.1";
  f.LITTLE_ENDIAN = !0;
  f.BIG_ENDIAN = !1;
  f.DEFAULT_CAPACITY = 16;
  f.DEFAULT_ENDIAN = f.BIG_ENDIAN;
  f.DEFAULT_NOASSERT = !1;
  f.Long = a || null;
  var h = f.prototype;
  Object.defineProperty(h, "__isByteBuffer__", {value:!0, enumerable:!1, configurable:!1});
  var r = new ArrayBuffer(0), q = String.fromCharCode;
  f.accessor = function() {
    return Uint8Array;
  };
  f.allocate = function(a, b, c) {
    return new f(a, b, c);
  };
  f.concat = function(a, b, c, e) {
    if ("boolean" === typeof b || "string" !== typeof b) {
      e = c, c = b, b = void 0;
    }
    for (var d = 0, l = 0, h = a.length, m; l < h; ++l) {
      f.isByteBuffer(a[l]) || (a[l] = f.wrap(a[l], b)), m = a[l].limit - a[l].offset, 0 < m && (d += m);
    }
    if (0 === d) {
      return new f(0, c, e);
    }
    b = new f(d, c, e);
    for (l = 0; l < h;) {
      c = a[l++], m = c.limit - c.offset, 0 >= m || (b.view.set(c.view.subarray(c.offset, c.limit), b.offset), b.offset += m);
    }
    b.limit = b.offset;
    b.offset = 0;
    return b;
  };
  f.isByteBuffer = function(a) {
    return !0 === (a && a.__isByteBuffer__);
  };
  f.type = function() {
    return ArrayBuffer;
  };
  f.wrap = function(a, b, c, e) {
    "string" !== typeof b && (e = c, c = b, b = void 0);
    if ("string" === typeof a) {
      switch("undefined" === typeof b && (b = "utf8"), b) {
        case "base64":
          return f.fromBase64(a, c);
        case "hex":
          return f.fromHex(a, c);
        case "binary":
          return f.fromBinary(a, c);
        case "utf8":
          return f.fromUTF8(a, c);
        case "debug":
          return f.fromDebug(a, c);
        default:
          throw Error("Unsupported encoding: " + b);
      }
    }
    if (null === a || "object" !== typeof a) {
      throw TypeError("Illegal buffer");
    }
    if (f.isByteBuffer(a)) {
      return b = h.clone.call(a), b.markedOffset = -1, b;
    }
    if (a instanceof Uint8Array) {
      b = new f(0, c, e), 0 < a.length && (b.buffer = a.buffer, b.offset = a.byteOffset, b.limit = a.byteOffset + a.byteLength, b.view = new Uint8Array(a.buffer));
    } else {
      if (a instanceof ArrayBuffer) {
        b = new f(0, c, e), 0 < a.byteLength && (b.buffer = a, b.offset = 0, b.limit = a.byteLength, b.view = 0 < a.byteLength ? new Uint8Array(a) : null);
      } else {
        if ("[object Array]" === Object.prototype.toString.call(a)) {
          for (b = new f(a.length, c, e), b.limit = a.length, c = 0; c < a.length; ++c) {
            b.view[c] = a[c];
          }
        } else {
          throw TypeError("Illegal buffer");
        }
      }
    }
    return b;
  };
  h.writeBitSet = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if (!(a instanceof Array)) {
        throw TypeError("Illegal BitSet: Not an array");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var c = b, e = a.length, l = e >> 3, f = 0;
    for (b += this.writeVarint32(e, b); l--;) {
      var h = !!a[f++] & 1 | (!!a[f++] & 1) << 1 | (!!a[f++] & 1) << 2 | (!!a[f++] & 1) << 3 | (!!a[f++] & 1) << 4 | (!!a[f++] & 1) << 5 | (!!a[f++] & 1) << 6 | (!!a[f++] & 1) << 7;
      this.writeByte(h, b++);
    }
    if (f < e) {
      for (h = l = 0; f < e;) {
        h |= (!!a[f++] & 1) << l++;
      }
      this.writeByte(h, b++);
    }
    return d ? (this.offset = b, this) : b - c;
  };
  h.readBitSet = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    var b = this.readVarint32(a), c = b.value, e = c >> 3, f = 0, h = [];
    for (a += b.length; e--;) {
      b = this.readByte(a++), h[f++] = !!(b & 1), h[f++] = !!(b & 2), h[f++] = !!(b & 4), h[f++] = !!(b & 8), h[f++] = !!(b & 16), h[f++] = !!(b & 32), h[f++] = !!(b & 64), h[f++] = !!(b & 128);
    }
    if (f < c) {
      for (e = 0, b = this.readByte(a++); f < c;) {
        h[f++] = !!(b >> e++ & 1);
      }
    }
    d && (this.offset = a);
    return h;
  };
  h.readBytes = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + a > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+" + a + ") <= " + this.buffer.byteLength);
      }
    }
    b = this.slice(b, b + a);
    d && (this.offset += a);
    return b;
  };
  h.writeBytes = h.append;
  h.writeInt8 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    this.view[b - 1] = a;
    d && (this.offset += 1);
    return this;
  };
  h.writeByte = h.writeInt8;
  h.readInt8 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    128 === (a & 128) && (a = -(255 - a + 1));
    d && (this.offset += 1);
    return a;
  };
  h.readByte = h.readInt8;
  h.writeUint8 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    this.view[b - 1] = a;
    d && (this.offset += 1);
    return this;
  };
  h.writeUInt8 = h.writeUint8;
  h.readUint8 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    d && (this.offset += 1);
    return a;
  };
  h.readUInt8 = h.readUint8;
  h.writeInt16 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    d && (this.offset += 2);
    return this;
  };
  h.writeShort = h.writeInt16;
  h.readInt16 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a], b |= this.view[a + 1] << 8) : (b = this.view[a] << 8, b |= this.view[a + 1]);
    32768 === (b & 32768) && (b = -(65535 - b + 1));
    d && (this.offset += 2);
    return b;
  };
  h.readShort = h.readInt16;
  h.writeUint16 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    d && (this.offset += 2);
    return this;
  };
  h.writeUInt16 = h.writeUint16;
  h.readUint16 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a], b |= this.view[a + 1] << 8) : (b = this.view[a] << 8, b |= this.view[a + 1]);
    d && (this.offset += 2);
    return b;
  };
  h.readUInt16 = h.readUint16;
  h.writeInt32 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    d && (this.offset += 4);
    return this;
  };
  h.writeInt = h.writeInt32;
  h.readInt32 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a + 2] << 16, b |= this.view[a + 1] << 8, b |= this.view[a], b += this.view[a + 3] << 24 >>> 0) : (b = this.view[a + 1] << 16, b |= this.view[a + 2] << 8, b |= this.view[a + 3], b += this.view[a] << 24 >>> 0);
    d && (this.offset += 4);
    return b | 0;
  };
  h.readInt = h.readInt32;
  h.writeUint32 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    d && (this.offset += 4);
    return this;
  };
  h.writeUInt32 = h.writeUint32;
  h.readUint32 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a + 2] << 16, b |= this.view[a + 1] << 8, b |= this.view[a], b += this.view[a + 3] << 24 >>> 0) : (b = this.view[a + 1] << 16, b |= this.view[a + 2] << 8, b |= this.view[a + 3], b += this.view[a] << 24 >>> 0);
    d && (this.offset += 4);
    return b;
  };
  h.readUInt32 = h.readUint32;
  a && (h.writeInt64 = function(d, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof d) {
        d = a.fromNumber(d);
      } else {
        if ("string" === typeof d) {
          d = a.fromString(d);
        } else {
          if (!(d && d instanceof a)) {
            throw TypeError("Illegal value: " + d + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof d ? d = a.fromNumber(d) : "string" === typeof d && (d = a.fromString(d));
    b += 8;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 8;
    e = d.low;
    d = d.high;
    this.littleEndian ? (this.view[b + 3] = e >>> 24 & 255, this.view[b + 2] = e >>> 16 & 255, this.view[b + 1] = e >>> 8 & 255, this.view[b] = e & 255, b += 4, this.view[b + 3] = d >>> 24 & 255, this.view[b + 2] = d >>> 16 & 255, this.view[b + 1] = d >>> 8 & 255, this.view[b] = d & 255) : (this.view[b] = d >>> 24 & 255, this.view[b + 1] = d >>> 16 & 255, this.view[b + 2] = d >>> 8 & 255, this.view[b + 3] = d & 255, b += 4, this.view[b] = e >>> 24 & 255, this.view[b + 1] = e >>> 16 & 255, this.view[b + 
    2] = e >>> 8 & 255, this.view[b + 3] = e & 255);
    c && (this.offset += 8);
    return this;
  }, h.writeLong = h.writeInt64, h.readInt64 = function(d) {
    var b = "undefined" === typeof d;
    b && (d = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof d || 0 !== d % 1) {
        throw TypeError("Illegal offset: " + d + " (not an integer)");
      }
      d >>>= 0;
      if (0 > d || d + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + d + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var c = 0, e = 0;
    this.littleEndian ? (c = this.view[d + 2] << 16, c |= this.view[d + 1] << 8, c |= this.view[d], c += this.view[d + 3] << 24 >>> 0, d += 4, e = this.view[d + 2] << 16, e |= this.view[d + 1] << 8, e |= this.view[d], e += this.view[d + 3] << 24 >>> 0) : (e = this.view[d + 1] << 16, e |= this.view[d + 2] << 8, e |= this.view[d + 3], e += this.view[d] << 24 >>> 0, d += 4, c = this.view[d + 1] << 16, c |= this.view[d + 2] << 8, c |= this.view[d + 3], c += this.view[d] << 24 >>> 0);
    d = new a(c, e, !1);
    b && (this.offset += 8);
    return d;
  }, h.readLong = h.readInt64, h.writeUint64 = function(d, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof d) {
        d = a.fromNumber(d);
      } else {
        if ("string" === typeof d) {
          d = a.fromString(d);
        } else {
          if (!(d && d instanceof a)) {
            throw TypeError("Illegal value: " + d + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof d ? d = a.fromNumber(d) : "string" === typeof d && (d = a.fromString(d));
    b += 8;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 8;
    e = d.low;
    d = d.high;
    this.littleEndian ? (this.view[b + 3] = e >>> 24 & 255, this.view[b + 2] = e >>> 16 & 255, this.view[b + 1] = e >>> 8 & 255, this.view[b] = e & 255, b += 4, this.view[b + 3] = d >>> 24 & 255, this.view[b + 2] = d >>> 16 & 255, this.view[b + 1] = d >>> 8 & 255, this.view[b] = d & 255) : (this.view[b] = d >>> 24 & 255, this.view[b + 1] = d >>> 16 & 255, this.view[b + 2] = d >>> 8 & 255, this.view[b + 3] = d & 255, b += 4, this.view[b] = e >>> 24 & 255, this.view[b + 1] = e >>> 16 & 255, this.view[b + 
    2] = e >>> 8 & 255, this.view[b + 3] = e & 255);
    c && (this.offset += 8);
    return this;
  }, h.writeUInt64 = h.writeUint64, h.readUint64 = function(d) {
    var b = "undefined" === typeof d;
    b && (d = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof d || 0 !== d % 1) {
        throw TypeError("Illegal offset: " + d + " (not an integer)");
      }
      d >>>= 0;
      if (0 > d || d + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + d + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var c = 0, e = 0;
    this.littleEndian ? (c = this.view[d + 2] << 16, c |= this.view[d + 1] << 8, c |= this.view[d], c += this.view[d + 3] << 24 >>> 0, d += 4, e = this.view[d + 2] << 16, e |= this.view[d + 1] << 8, e |= this.view[d], e += this.view[d + 3] << 24 >>> 0) : (e = this.view[d + 1] << 16, e |= this.view[d + 2] << 8, e |= this.view[d + 3], e += this.view[d] << 24 >>> 0, d += 4, c = this.view[d + 1] << 16, c |= this.view[d + 2] << 8, c |= this.view[d + 3], c += this.view[d] << 24 >>> 0);
    d = new a(c, e, !0);
    b && (this.offset += 8);
    return d;
  }, h.readUInt64 = h.readUint64);
  h.writeFloat32 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    e(this.view, a, b - 4, this.littleEndian, 23, 4);
    d && (this.offset += 4);
    return this;
  };
  h.writeFloat = h.writeFloat32;
  h.readFloat32 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 23, 4);
    d && (this.offset += 4);
    return a;
  };
  h.readFloat = h.readFloat32;
  h.writeFloat64 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 8;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    e(this.view, a, b - 8, this.littleEndian, 52, 8);
    d && (this.offset += 8);
    return this;
  };
  h.writeDouble = h.writeFloat64;
  h.readFloat64 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+8) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 52, 8);
    d && (this.offset += 8);
    return a;
  };
  h.readDouble = h.readFloat64;
  f.MAX_VARINT32_BYTES = 5;
  f.calculateVarint32 = function(a) {
    a >>>= 0;
    return 128 > a ? 1 : 16384 > a ? 2 : 2097152 > a ? 3 : 268435456 > a ? 4 : 5;
  };
  f.zigZagEncode32 = function(a) {
    return ((a |= 0) << 1 ^ a >> 31) >>> 0;
  };
  f.zigZagDecode32 = function(a) {
    return a >>> 1 ^ -(a & 1) | 0;
  };
  h.writeVarint32 = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var c = f.calculateVarint32(a);
    b += c;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= c;
    for (a >>>= 0; 128 <= a;) {
      e = a & 127 | 128, this.view[b++] = e, a >>>= 7;
    }
    this.view[b++] = a;
    return d ? (this.offset = b, this) : c;
  };
  h.writeVarint32ZigZag = function(a, b) {
    return this.writeVarint32(f.zigZagEncode32(a), b);
  };
  h.readVarint32 = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = 0, c = 0;
    do {
      if (!this.noAssert && a > this.limit) {
        throw a = Error("Truncated"), a.truncated = !0, a;
      }
      var e = this.view[a++];
      5 > b && (c |= (e & 127) << 7 * b);
      ++b;
    } while (0 !== (e & 128));
    c |= 0;
    return d ? (this.offset = a, c) : {value:c, length:b};
  };
  h.readVarint32ZigZag = function(a) {
    a = this.readVarint32(a);
    "object" === typeof a ? a.value = f.zigZagDecode32(a.value) : a = f.zigZagDecode32(a);
    return a;
  };
  a && (f.MAX_VARINT64_BYTES = 10, f.calculateVarint64 = function(d) {
    "number" === typeof d ? d = a.fromNumber(d) : "string" === typeof d && (d = a.fromString(d));
    var b = d.toInt() >>> 0, c = d.shiftRightUnsigned(28).toInt() >>> 0;
    d = d.shiftRightUnsigned(56).toInt() >>> 0;
    return 0 == d ? 0 == c ? 16384 > b ? 128 > b ? 1 : 2 : 2097152 > b ? 3 : 4 : 16384 > c ? 128 > c ? 5 : 6 : 2097152 > c ? 7 : 8 : 128 > d ? 9 : 10;
  }, f.zigZagEncode64 = function(d) {
    "number" === typeof d ? d = a.fromNumber(d, !1) : "string" === typeof d ? d = a.fromString(d, !1) : !1 !== d.unsigned && (d = d.toSigned());
    return d.shiftLeft(1).xor(d.shiftRight(63)).toUnsigned();
  }, f.zigZagDecode64 = function(d) {
    "number" === typeof d ? d = a.fromNumber(d, !1) : "string" === typeof d ? d = a.fromString(d, !1) : !1 !== d.unsigned && (d = d.toSigned());
    return d.shiftRightUnsigned(1).xor(d.and(a.ONE).toSigned().negate()).toSigned();
  }, h.writeVarint64 = function(d, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof d) {
        d = a.fromNumber(d);
      } else {
        if ("string" === typeof d) {
          d = a.fromString(d);
        } else {
          if (!(d && d instanceof a)) {
            throw TypeError("Illegal value: " + d + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof d ? d = a.fromNumber(d, !1) : "string" === typeof d ? d = a.fromString(d, !1) : !1 !== d.unsigned && (d = d.toSigned());
    var e = f.calculateVarint64(d), l = d.toInt() >>> 0, h = d.shiftRightUnsigned(28).toInt() >>> 0;
    d = d.shiftRightUnsigned(56).toInt() >>> 0;
    b += e;
    var p = this.buffer.byteLength;
    b > p && this.resize((p *= 2) > b ? p : b);
    b -= e;
    switch(e) {
      case 10:
        this.view[b + 9] = d >>> 7 & 1;
      case 9:
        this.view[b + 8] = 9 !== e ? d | 128 : d & 127;
      case 8:
        this.view[b + 7] = 8 !== e ? h >>> 21 | 128 : h >>> 21 & 127;
      case 7:
        this.view[b + 6] = 7 !== e ? h >>> 14 | 128 : h >>> 14 & 127;
      case 6:
        this.view[b + 5] = 6 !== e ? h >>> 7 | 128 : h >>> 7 & 127;
      case 5:
        this.view[b + 4] = 5 !== e ? h | 128 : h & 127;
      case 4:
        this.view[b + 3] = 4 !== e ? l >>> 21 | 128 : l >>> 21 & 127;
      case 3:
        this.view[b + 2] = 3 !== e ? l >>> 14 | 128 : l >>> 14 & 127;
      case 2:
        this.view[b + 1] = 2 !== e ? l >>> 7 | 128 : l >>> 7 & 127;
      case 1:
        this.view[b] = 1 !== e ? l | 128 : l & 127;
    }
    return c ? (this.offset += e, this) : e;
  }, h.writeVarint64ZigZag = function(a, b) {
    return this.writeVarint64(f.zigZagEncode64(a), b);
  }, h.readVarint64 = function(d) {
    var b = "undefined" === typeof d;
    b && (d = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof d || 0 !== d % 1) {
        throw TypeError("Illegal offset: " + d + " (not an integer)");
      }
      d >>>= 0;
      if (0 > d || d + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + d + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var c = d, e = 0, f = 0;
    var h = this.view[d++];
    var p = h & 127;
    if (h & 128 && (h = this.view[d++], p |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], p |= (h & 127) << 14, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], p |= (h & 127) << 21, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], e = h & 127, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], e |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h) && 
    (h = this.view[d++], e |= (h & 127) << 14, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], e |= (h & 127) << 21, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], f = h & 127, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[d++], f |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h)) {
      throw Error("Buffer overrun");
    }
    p = a.fromBits(p | e << 28, e >>> 4 | f << 24, !1);
    return b ? (this.offset = d, p) : {value:p, length:d - c};
  }, h.readVarint64ZigZag = function(d) {
    (d = this.readVarint64(d)) && d.value instanceof a ? d.value = f.zigZagDecode64(d.value) : d = f.zigZagDecode64(d);
    return d;
  });
  h.writeCString = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    var e, l = a.length;
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      for (e = 0; e < l; ++e) {
        if (0 === a.charCodeAt(e)) {
          throw RangeError("Illegal str: Contains NULL-characters");
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    l = m.calculateUTF16asUTF8(c(a))[1];
    b += l + 1;
    e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= l + 1;
    m.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    this.view[b++] = 0;
    return d ? (this.offset = b, this) : l;
  };
  h.readCString = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = a, c, e = -1;
    m.decodeUTF8toUTF16(function() {
      if (0 === e) {
        return null;
      }
      if (a >= this.limit) {
        throw RangeError("Illegal range: Truncated data, " + a + " < " + this.limit);
      }
      e = this.view[a++];
      return 0 === e ? null : e;
    }.bind(this), c = k(), !0);
    return d ? (this.offset = a, c()) : {string:c(), length:a - b};
  };
  h.writeIString = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var l = m.calculateUTF16asUTF8(c(a), this.noAssert)[1];
    b += 4 + l;
    var f = this.buffer.byteLength;
    b > f && this.resize((f *= 2) > b ? f : b);
    b -= 4 + l;
    this.littleEndian ? (this.view[b + 3] = l >>> 24 & 255, this.view[b + 2] = l >>> 16 & 255, this.view[b + 1] = l >>> 8 & 255, this.view[b] = l & 255) : (this.view[b] = l >>> 24 & 255, this.view[b + 1] = l >>> 16 & 255, this.view[b + 2] = l >>> 8 & 255, this.view[b + 3] = l & 255);
    b += 4;
    m.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== e + 4 + l) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + 4 + l));
    }
    return d ? (this.offset = b, this) : b - e;
  };
  h.readIString = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = a, c = this.readUint32(a);
    c = this.readUTF8String(c, f.METRICS_BYTES, a += 4);
    a += c.length;
    return d ? (this.offset = a, c.string) : {string:c.string, length:a - b};
  };
  f.METRICS_CHARS = "c";
  f.METRICS_BYTES = "b";
  h.writeUTF8String = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var l = m.calculateUTF16asUTF8(c(a))[1];
    b += l;
    var f = this.buffer.byteLength;
    b > f && this.resize((f *= 2) > b ? f : b);
    b -= l;
    m.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    return d ? (this.offset = b, this) : b - e;
  };
  h.writeString = h.writeUTF8String;
  f.calculateUTF8Chars = function(a) {
    return m.calculateUTF16asUTF8(c(a))[0];
  };
  f.calculateUTF8Bytes = function(a) {
    return m.calculateUTF16asUTF8(c(a))[1];
  };
  f.calculateString = f.calculateUTF8Bytes;
  h.readUTF8String = function(a, b, c) {
    "number" === typeof b && (c = b, b = void 0);
    var d = "undefined" === typeof c;
    d && (c = this.offset);
    "undefined" === typeof b && (b = f.METRICS_CHARS);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = 0, l = c;
    if (b === f.METRICS_CHARS) {
      var h = k();
      m.decodeUTF8(function() {
        return e < a && c < this.limit ? this.view[c++] : null;
      }.bind(this), function(a) {
        ++e;
        m.UTF8toUTF16(a, h);
      });
      if (e !== a) {
        throw RangeError("Illegal range: Truncated data, " + e + " == " + a);
      }
      return d ? (this.offset = c, h()) : {string:h(), length:c - l};
    }
    if (b === f.METRICS_BYTES) {
      if (!this.noAssert) {
        if ("number" !== typeof c || 0 !== c % 1) {
          throw TypeError("Illegal offset: " + c + " (not an integer)");
        }
        c >>>= 0;
        if (0 > c || c + a > this.buffer.byteLength) {
          throw RangeError("Illegal offset: 0 <= " + c + " (+" + a + ") <= " + this.buffer.byteLength);
        }
      }
      var n = c + a;
      m.decodeUTF8toUTF16(function() {
        return c < n ? this.view[c++] : null;
      }.bind(this), h = k(), this.noAssert);
      if (c !== n) {
        throw RangeError("Illegal range: Truncated data, " + c + " == " + n);
      }
      return d ? (this.offset = c, h()) : {string:h(), length:c - l};
    }
    throw TypeError("Unsupported metrics: " + b);
  };
  h.readString = h.readUTF8String;
  h.writeVString = function(a, b) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var l = m.calculateUTF16asUTF8(c(a), this.noAssert)[1];
    var h = f.calculateVarint32(l);
    b += h + l;
    var p = this.buffer.byteLength;
    b > p && this.resize((p *= 2) > b ? p : b);
    b -= h + l;
    b += this.writeVarint32(l, b);
    m.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== e + l + h) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + l + h));
    }
    return d ? (this.offset = b, this) : b - e;
  };
  h.readVString = function(a) {
    var d = "undefined" === typeof a;
    d && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = a, c = this.readVarint32(a);
    c = this.readUTF8String(c.value, f.METRICS_BYTES, a += c.length);
    a += c.length;
    return d ? (this.offset = a, c.string) : {string:c.string, length:a - b};
  };
  h.append = function(a, b, c) {
    if ("number" === typeof b || "string" !== typeof b) {
      c = b, b = void 0;
    }
    var d = "undefined" === typeof c;
    d && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof f || (a = f.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    c += b;
    var e = this.buffer.byteLength;
    c > e && this.resize((e *= 2) > c ? e : c);
    c -= b;
    this.view.set(a.view.subarray(a.offset, a.limit), c);
    a.offset += b;
    d && (this.offset += b);
    return this;
  };
  h.appendTo = function(a, b) {
    a.append(this, b);
    return this;
  };
  h.assert = function(a) {
    this.noAssert = !a;
    return this;
  };
  h.capacity = function() {
    return this.buffer.byteLength;
  };
  h.clear = function() {
    this.offset = 0;
    this.limit = this.buffer.byteLength;
    this.markedOffset = -1;
    return this;
  };
  h.clone = function(a) {
    var d = new f(0, this.littleEndian, this.noAssert);
    a ? (d.buffer = new ArrayBuffer(this.buffer.byteLength), d.view = new Uint8Array(d.buffer)) : (d.buffer = this.buffer, d.view = this.view);
    d.offset = this.offset;
    d.markedOffset = this.markedOffset;
    d.limit = this.limit;
    return d;
  };
  h.compact = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (0 === a && b === this.buffer.byteLength) {
      return this;
    }
    var d = b - a;
    if (0 === d) {
      return this.buffer = r, this.view = null, 0 <= this.markedOffset && (this.markedOffset -= a), this.limit = this.offset = 0, this;
    }
    var c = new ArrayBuffer(d), e = new Uint8Array(c);
    e.set(this.view.subarray(a, b));
    this.buffer = c;
    this.view = e;
    0 <= this.markedOffset && (this.markedOffset -= a);
    this.offset = 0;
    this.limit = d;
    return this;
  };
  h.copy = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return new f(0, this.littleEndian, this.noAssert);
    }
    var d = b - a, c = new f(d, this.littleEndian, this.noAssert);
    c.offset = 0;
    c.limit = d;
    0 <= c.markedOffset && (c.markedOffset -= a);
    this.copyTo(c, 0, a, b);
    return c;
  };
  h.copyTo = function(a, b, c, e) {
    var d, l;
    if (!this.noAssert && !f.isByteBuffer(a)) {
      throw TypeError("Illegal target: Not a ByteBuffer");
    }
    b = (l = "undefined" === typeof b) ? a.offset : b | 0;
    c = (d = "undefined" === typeof c) ? this.offset : c | 0;
    e = "undefined" === typeof e ? this.limit : e | 0;
    if (0 > b || b > a.buffer.byteLength) {
      throw RangeError("Illegal target range: 0 <= " + b + " <= " + a.buffer.byteLength);
    }
    if (0 > c || e > this.buffer.byteLength) {
      throw RangeError("Illegal source range: 0 <= " + c + " <= " + this.buffer.byteLength);
    }
    var h = e - c;
    if (0 === h) {
      return a;
    }
    a.ensureCapacity(b + h);
    a.view.set(this.view.subarray(c, e), b);
    d && (this.offset += h);
    l && (a.offset += h);
    return this;
  };
  h.ensureCapacity = function(a) {
    var d = this.buffer.byteLength;
    return d < a ? this.resize((d *= 2) > a ? d : a) : this;
  };
  h.fill = function(a, b, c) {
    var d = "undefined" === typeof b;
    d && (b = this.offset);
    "string" === typeof a && 0 < a.length && (a = a.charCodeAt(0));
    "undefined" === typeof b && (b = this.offset);
    "undefined" === typeof c && (c = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      b >>>= 0;
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      c >>>= 0;
      if (0 > b || b > c || c > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + b + " <= " + c + " <= " + this.buffer.byteLength);
      }
    }
    if (b >= c) {
      return this;
    }
    for (; b < c;) {
      this.view[b++] = a;
    }
    d && (this.offset = b);
    return this;
  };
  h.flip = function() {
    this.limit = this.offset;
    this.offset = 0;
    return this;
  };
  h.mark = function(a) {
    a = "undefined" === typeof a ? this.offset : a;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+0) <= " + this.buffer.byteLength);
      }
    }
    this.markedOffset = a;
    return this;
  };
  h.order = function(a) {
    if (!this.noAssert && "boolean" !== typeof a) {
      throw TypeError("Illegal littleEndian: Not a boolean");
    }
    this.littleEndian = !!a;
    return this;
  };
  h.LE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !!a : !0;
    return this;
  };
  h.BE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !a : !1;
    return this;
  };
  h.prepend = function(a, b, c) {
    if ("number" === typeof b || "string" !== typeof b) {
      c = b, b = void 0;
    }
    var d = "undefined" === typeof c;
    d && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof f || (a = f.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    var e = b - c;
    if (0 < e) {
      var l = new ArrayBuffer(this.buffer.byteLength + e), h = new Uint8Array(l);
      h.set(this.view.subarray(c, this.buffer.byteLength), b);
      this.buffer = l;
      this.view = h;
      this.offset += e;
      0 <= this.markedOffset && (this.markedOffset += e);
      this.limit += e;
      c += e;
    } else {
      new Uint8Array(this.buffer);
    }
    this.view.set(a.view.subarray(a.offset, a.limit), c - b);
    a.offset = a.limit;
    d && (this.offset -= b);
    return this;
  };
  h.prependTo = function(a, b) {
    a.prepend(this, b);
    return this;
  };
  h.printDebug = function(a) {
    "function" !== typeof a && (a = console.log.bind(console));
    a(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(!0));
  };
  h.remaining = function() {
    return this.limit - this.offset;
  };
  h.reset = function() {
    0 <= this.markedOffset ? (this.offset = this.markedOffset, this.markedOffset = -1) : this.offset = 0;
    return this;
  };
  h.resize = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal capacity: " + a + " (not an integer)");
      }
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity: 0 <= " + a);
      }
    }
    if (this.buffer.byteLength < a) {
      a = new ArrayBuffer(a);
      var d = new Uint8Array(a);
      d.set(this.view);
      this.buffer = a;
      this.view = d;
    }
    return this;
  };
  h.reverse = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return this;
    }
    Array.prototype.reverse.call(this.view.subarray(a, b));
    return this;
  };
  h.skip = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
    }
    var d = this.offset + a;
    if (!this.noAssert && (0 > d || d > this.buffer.byteLength)) {
      throw RangeError("Illegal length: 0 <= " + this.offset + " + " + a + " <= " + this.buffer.byteLength);
    }
    this.offset = d;
    return this;
  };
  h.slice = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var d = this.clone();
    d.offset = a;
    d.limit = b;
    return d;
  };
  h.toBuffer = function(a) {
    var d = this.offset, b = this.limit;
    if (!this.noAssert) {
      if ("number" !== typeof d || 0 !== d % 1) {
        throw TypeError("Illegal offset: Not an integer");
      }
      d >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal limit: Not an integer");
      }
      b >>>= 0;
      if (0 > d || d > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + d + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (!a && 0 === d && b === this.buffer.byteLength) {
      return this.buffer;
    }
    if (d === b) {
      return r;
    }
    a = new ArrayBuffer(b - d);
    (new Uint8Array(a)).set((new Uint8Array(this.buffer)).subarray(d, b), 0);
    return a;
  };
  h.toArrayBuffer = h.toBuffer;
  h.toString = function(a, b, c) {
    if ("undefined" === typeof a) {
      return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
    }
    "number" === typeof a && (c = b = a = "utf8");
    switch(a) {
      case "utf8":
        return this.toUTF8(b, c);
      case "base64":
        return this.toBase64(b, c);
      case "hex":
        return this.toHex(b, c);
      case "binary":
        return this.toBinary(b, c);
      case "debug":
        return this.toDebug();
      case "columns":
        return this.toColumns();
      default:
        throw Error("Unsupported encoding: " + a);
    }
  };
  var n = function() {
    for (var a = {}, b = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47], c = [], e = 0, f = b.length; e < f; ++e) {
      c[b[e]] = e;
    }
    a.encode = function(a, d) {
      for (var c, e; null !== (c = a());) {
        d(b[c >> 2 & 63]), e = (c & 3) << 4, null !== (c = a()) ? (e |= c >> 4 & 15, d(b[(e | c >> 4 & 15) & 63]), e = (c & 15) << 2, null !== (c = a()) ? (d(b[(e | c >> 6 & 3) & 63]), d(b[c & 63])) : (d(b[e & 63]), d(61))) : (d(b[e & 63]), d(61), d(61));
      }
    };
    a.decode = function(a, d) {
      function b(a) {
        throw Error("Illegal character code: " + a);
      }
      for (var e, l, f; null !== (e = a());) {
        if (l = c[e], "undefined" === typeof l && b(e), null !== (e = a()) && (f = c[e], "undefined" === typeof f && b(e), d(l << 2 >>> 0 | (f & 48) >> 4), null !== (e = a()))) {
          l = c[e];
          if ("undefined" === typeof l) {
            if (61 === e) {
              break;
            } else {
              b(e);
            }
          }
          d((f & 15) << 4 >>> 0 | (l & 60) >> 2);
          if (null !== (e = a())) {
            f = c[e];
            if ("undefined" === typeof f) {
              if (61 === e) {
                break;
              } else {
                b(e);
              }
            }
            d((l & 3) << 6 >>> 0 | f);
          }
        }
      }
    };
    a.test = function(a) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(a);
    };
    return a;
  }();
  h.toBase64 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity || a > b) {
      throw RangeError("begin, end");
    }
    var d;
    n.encode(function() {
      return a < b ? this.view[a++] : null;
    }.bind(this), d = k());
    return d();
  };
  f.fromBase64 = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    var d = new f(a.length / 4 * 3, b), e = 0;
    n.decode(c(a), function(a) {
      d.view[e++] = a;
    });
    d.limit = e;
    return d;
  };
  f.btoa = function(a) {
    return f.fromBinary(a).toBase64();
  };
  f.atob = function(a) {
    return f.fromBase64(a).toBinary();
  };
  h.toBinary = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity() || a > b) {
      throw RangeError("begin, end");
    }
    if (a === b) {
      return "";
    }
    for (var d = [], c = []; a < b;) {
      d.push(this.view[a++]), 1024 <= d.length && (c.push(String.fromCharCode.apply(String, d)), d = []);
    }
    return c.join("") + String.fromCharCode.apply(String, d);
  };
  f.fromBinary = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    for (var d = 0, c = a.length, e = new f(c, b); d < c;) {
      b = a.charCodeAt(d);
      if (255 < b) {
        throw RangeError("illegal char code: " + b);
      }
      e.view[d++] = b;
    }
    e.limit = c;
    return e;
  };
  h.toDebug = function(a) {
    for (var d = -1, b = this.buffer.byteLength, c, e = "", f = "", h = ""; d < b;) {
      -1 !== d && (c = this.view[d], e = 16 > c ? e + ("0" + c.toString(16).toUpperCase()) : e + c.toString(16).toUpperCase(), a && (f += 32 < c && 127 > c ? String.fromCharCode(c) : "."));
      ++d;
      if (a && 0 < d && 0 === d % 16 && d !== b) {
        for (; 51 > e.length;) {
          e += " ";
        }
        h += e + f + "\n";
        e = f = "";
      }
      e = d === this.offset && d === this.limit ? e + (d === this.markedOffset ? "!" : "|") : d === this.offset ? e + (d === this.markedOffset ? "[" : "<") : d === this.limit ? e + (d === this.markedOffset ? "]" : ">") : e + (d === this.markedOffset ? "'" : a || 0 !== d && d !== b ? " " : "");
    }
    if (a && " " !== e) {
      for (; 51 > e.length;) {
        e += " ";
      }
      h += e + f + "\n";
    }
    return a ? h : e;
  };
  f.fromDebug = function(a, b, c) {
    var d = a.length;
    b = new f((d + 1) / 3 | 0, b, c);
    for (var e = 0, l = 0, h, m = !1, n = !1, k = !1, q = !1, r = !1; e < d;) {
      switch(h = a.charAt(e++)) {
        case "!":
          if (!c) {
            if (n || k || q) {
              r = !0;
              break;
            }
            n = k = q = !0;
          }
          b.offset = b.markedOffset = b.limit = l;
          m = !1;
          break;
        case "|":
          if (!c) {
            if (n || q) {
              r = !0;
              break;
            }
            n = q = !0;
          }
          b.offset = b.limit = l;
          m = !1;
          break;
        case "[":
          if (!c) {
            if (n || k) {
              r = !0;
              break;
            }
            n = k = !0;
          }
          b.offset = b.markedOffset = l;
          m = !1;
          break;
        case "<":
          if (!c) {
            if (n) {
              r = !0;
              break;
            }
            n = !0;
          }
          b.offset = l;
          m = !1;
          break;
        case "]":
          if (!c) {
            if (q || k) {
              r = !0;
              break;
            }
            q = k = !0;
          }
          b.limit = b.markedOffset = l;
          m = !1;
          break;
        case ">":
          if (!c) {
            if (q) {
              r = !0;
              break;
            }
            q = !0;
          }
          b.limit = l;
          m = !1;
          break;
        case "'":
          if (!c) {
            if (k) {
              r = !0;
              break;
            }
            k = !0;
          }
          b.markedOffset = l;
          m = !1;
          break;
        case " ":
          m = !1;
          break;
        default:
          if (!c && m) {
            r = !0;
          } else {
            h = parseInt(h + a.charAt(e++), 16);
            if (!c && (isNaN(h) || 0 > h || 255 < h)) {
              throw TypeError("Illegal str: Not a debug encoded string");
            }
            b.view[l++] = h;
            m = !0;
          }
      }
      if (r) {
        throw TypeError("Illegal str: Invalid symbol at " + e);
      }
    }
    if (!c) {
      if (!n || !q) {
        throw TypeError("Illegal str: Missing offset or limit");
      }
      if (l < b.buffer.byteLength) {
        throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + l + " < " + d);
      }
    }
    return b;
  };
  h.toHex = function(a, b) {
    a = "undefined" === typeof a ? this.offset : a;
    b = "undefined" === typeof b ? this.limit : b;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    for (var d = Array(b - a), c; a < b;) {
      c = this.view[a++], 16 > c ? d.push("0", c.toString(16)) : d.push(c.toString(16));
    }
    return d.join("");
  };
  f.fromHex = function(a, b, c) {
    if (!c) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if (0 !== a.length % 2) {
        throw TypeError("Illegal str: Length not a multiple of 2");
      }
    }
    var d = a.length;
    b = new f(d / 2 | 0, b);
    for (var e, l = 0, h = 0; l < d; l += 2) {
      e = parseInt(a.substring(l, l + 2), 16);
      if (!c && (!isFinite(e) || 0 > e || 255 < e)) {
        throw TypeError("Illegal str: Contains non-hex characters");
      }
      b.view[h++] = e;
    }
    b.limit = h;
    return b;
  };
  var m = function() {
    var a = {MAX_CODEPOINT:1114111, encodeUTF8:function(a, d) {
      var b = null;
      for ("number" === typeof a && (b = a, a = function() {
        return null;
      }); null !== b || null !== (b = a());) {
        128 > b ? d(b & 127) : (2048 > b ? d(b >> 6 & 31 | 192) : (65536 > b ? d(b >> 12 & 15 | 224) : (d(b >> 18 & 7 | 240), d(b >> 12 & 63 | 128)), d(b >> 6 & 63 | 128)), d(b & 63 | 128)), b = null;
      }
    }, decodeUTF8:function(a, d) {
      for (var b, c, e, f, l = function(a) {
        a = a.slice(0, a.indexOf(null));
        var d = Error(a.toString());
        d.name = "TruncatedError";
        d.bytes = a;
        throw d;
      }; null !== (b = a());) {
        if (0 === (b & 128)) {
          d(b);
        } else {
          if (192 === (b & 224)) {
            null === (c = a()) && l([b, c]), d((b & 31) << 6 | c & 63);
          } else {
            if (224 === (b & 240)) {
              null !== (c = a()) && null !== (e = a()) || l([b, c, e]), d((b & 15) << 12 | (c & 63) << 6 | e & 63);
            } else {
              if (240 === (b & 248)) {
                null !== (c = a()) && null !== (e = a()) && null !== (f = a()) || l([b, c, e, f]), d((b & 7) << 18 | (c & 63) << 12 | (e & 63) << 6 | f & 63);
              } else {
                throw RangeError("Illegal starting byte: " + b);
              }
            }
          }
        }
      }
    }, UTF16toUTF8:function(a, d) {
      for (var b, c = null; null !== (b = null !== c ? c : a());) {
        55296 <= b && 57343 >= b && null !== (c = a()) && 56320 <= c && 57343 >= c ? (d(1024 * (b - 55296) + c - 56320 + 65536), c = null) : d(b);
      }
      null !== c && d(c);
    }, UTF8toUTF16:function(a, d) {
      var b = null;
      for ("number" === typeof a && (b = a, a = function() {
        return null;
      }); null !== b || null !== (b = a());) {
        65535 >= b ? d(b) : (b -= 65536, d((b >> 10) + 55296), d(b % 1024 + 56320)), b = null;
      }
    }, encodeUTF16toUTF8:function(d, b) {
      a.UTF16toUTF8(d, function(d) {
        a.encodeUTF8(d, b);
      });
    }, decodeUTF8toUTF16:function(d, b) {
      a.decodeUTF8(d, function(d) {
        a.UTF8toUTF16(d, b);
      });
    }, calculateCodePoint:function(a) {
      return 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
    }, calculateUTF8:function(a) {
      for (var d, b = 0; null !== (d = a());) {
        b += 128 > d ? 1 : 2048 > d ? 2 : 65536 > d ? 3 : 4;
      }
      return b;
    }, calculateUTF16asUTF8:function(d) {
      var b = 0, c = 0;
      a.UTF16toUTF8(d, function(a) {
        ++b;
        c += 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
      });
      return [b, c];
    }};
    return a;
  }();
  h.toUTF8 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var d;
    try {
      m.decodeUTF8toUTF16(function() {
        return a < b ? this.view[a++] : null;
      }.bind(this), d = k());
    } catch (w) {
      if (a !== b) {
        throw RangeError("Illegal range: Truncated data, " + a + " != " + b);
      }
    }
    return d();
  };
  f.fromUTF8 = function(a, b, e) {
    if (!e && "string" !== typeof a) {
      throw TypeError("Illegal str: Not a string");
    }
    var d = new f(m.calculateUTF16asUTF8(c(a), !0)[1], b, e), l = 0;
    m.encodeUTF16toUTF8(c(a), function(a) {
      d.view[l++] = a;
    });
    d.limit = l;
    return d;
  };
  return f;
});
(function(a, c) {
  "function" === typeof define && define.amd ? define([], c) : "function" === typeof require && "object" === typeof module && module && module.exports ? module.exports = c() : (a.dcodeIO = a.dcodeIO || {}).Long = c();
})(this, function() {
  function a(a, d, b) {
    this.low = a | 0;
    this.high = d | 0;
    this.unsigned = !!b;
  }
  function c(a) {
    return !0 === (a && a.__isLong__);
  }
  function k(a, d) {
    var b;
    if (d) {
      a >>>= 0;
      if (b = 0 <= a && 256 > a) {
        if (d = q[a]) {
          return d;
        }
      }
      d = e(a, 0 > (a | 0) ? -1 : 0, !0);
      b && (q[a] = d);
    } else {
      a |= 0;
      if (b = -128 <= a && 128 > a) {
        if (d = r[a]) {
          return d;
        }
      }
      d = e(a, 0 > a ? -1 : 0, !1);
      b && (r[a] = d);
    }
    return d;
  }
  function b(a, c) {
    if (isNaN(a) || !isFinite(a)) {
      return c ? w : v;
    }
    if (c) {
      if (0 > a) {
        return w;
      }
      if (a >= m) {
        return y;
      }
    } else {
      if (a <= -d) {
        return A;
      }
      if (a + 1 >= d) {
        return u;
      }
    }
    return 0 > a ? b(-a, c).neg() : e(a % 4294967296 | 0, a / 4294967296 | 0, c);
  }
  function e(d, b, c) {
    return new a(d, b, c);
  }
  function f(a, d, c) {
    if (0 === a.length) {
      throw Error("empty string");
    }
    if ("NaN" === a || "Infinity" === a || "+Infinity" === a || "-Infinity" === a) {
      return v;
    }
    "number" === typeof d ? (c = d, d = !1) : d = !!d;
    c = c || 10;
    if (2 > c || 36 < c) {
      throw RangeError("radix");
    }
    var e;
    if (0 < (e = a.indexOf("-"))) {
      throw Error("interior hyphen");
    }
    if (0 === e) {
      return f(a.substring(1), d, c).neg();
    }
    e = b(n(c, 8));
    for (var l = v, h = 0; h < a.length; h += 8) {
      var p = Math.min(8, a.length - h), m = parseInt(a.substring(h, h + p), c);
      8 > p ? (p = b(n(c, p)), l = l.mul(p).add(b(m))) : (l = l.mul(e), l = l.add(b(m)));
    }
    l.unsigned = d;
    return l;
  }
  function h(d) {
    return d instanceof a ? d : "number" === typeof d ? b(d) : "string" === typeof d ? f(d) : e(d.low, d.high, d.unsigned);
  }
  Object.defineProperty(a.prototype, "__isLong__", {value:!0, enumerable:!1, configurable:!1});
  a.isLong = c;
  var r = {}, q = {};
  a.fromInt = k;
  a.fromNumber = b;
  a.fromBits = e;
  var n = Math.pow;
  a.fromString = f;
  a.fromValue = h;
  var m = 4294967296 * 4294967296, d = m / 2, l = k(16777216), v = k(0);
  a.ZERO = v;
  var w = k(0, !0);
  a.UZERO = w;
  var x = k(1);
  a.ONE = x;
  var z = k(1, !0);
  a.UONE = z;
  var p = k(-1);
  a.NEG_ONE = p;
  var u = e(-1, 2147483647, !1);
  a.MAX_VALUE = u;
  var y = e(-1, -1, !0);
  a.MAX_UNSIGNED_VALUE = y;
  var A = e(0, -2147483648, !1);
  a.MIN_VALUE = A;
  var B = a.prototype;
  B.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  B.toNumber = function() {
    return this.unsigned ? 4294967296 * (this.high >>> 0) + (this.low >>> 0) : 4294967296 * this.high + (this.low >>> 0);
  };
  B.toString = function(a) {
    a = a || 10;
    if (2 > a || 36 < a) {
      throw RangeError("radix");
    }
    if (this.isZero()) {
      return "0";
    }
    if (this.isNegative()) {
      if (this.eq(A)) {
        var d = b(a), c = this.div(d);
        d = c.mul(d).sub(this);
        return c.toString(a) + d.toInt().toString(a);
      }
      return "-" + this.neg().toString(a);
    }
    c = b(n(a, 6), this.unsigned);
    d = this;
    for (var e = "";;) {
      var f = d.div(c), l = (d.sub(f.mul(c)).toInt() >>> 0).toString(a);
      d = f;
      if (d.isZero()) {
        return l + e;
      }
      for (; 6 > l.length;) {
        l = "0" + l;
      }
      e = "" + l + e;
    }
  };
  B.getHighBits = function() {
    return this.high;
  };
  B.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  B.getLowBits = function() {
    return this.low;
  };
  B.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  B.getNumBitsAbs = function() {
    if (this.isNegative()) {
      return this.eq(A) ? 64 : this.neg().getNumBitsAbs();
    }
    for (var a = 0 != this.high ? this.high : this.low, d = 31; 0 < d && 0 == (a & 1 << d); d--) {
    }
    return 0 != this.high ? d + 33 : d + 1;
  };
  B.isZero = function() {
    return 0 === this.high && 0 === this.low;
  };
  B.isNegative = function() {
    return !this.unsigned && 0 > this.high;
  };
  B.isPositive = function() {
    return this.unsigned || 0 <= this.high;
  };
  B.isOdd = function() {
    return 1 === (this.low & 1);
  };
  B.isEven = function() {
    return 0 === (this.low & 1);
  };
  B.equals = function(a) {
    c(a) || (a = h(a));
    return this.unsigned !== a.unsigned && 1 === this.high >>> 31 && 1 === a.high >>> 31 ? !1 : this.high === a.high && this.low === a.low;
  };
  B.eq = B.equals;
  B.notEquals = function(a) {
    return !this.eq(a);
  };
  B.neq = B.notEquals;
  B.lessThan = function(a) {
    return 0 > this.comp(a);
  };
  B.lt = B.lessThan;
  B.lessThanOrEqual = function(a) {
    return 0 >= this.comp(a);
  };
  B.lte = B.lessThanOrEqual;
  B.greaterThan = function(a) {
    return 0 < this.comp(a);
  };
  B.gt = B.greaterThan;
  B.greaterThanOrEqual = function(a) {
    return 0 <= this.comp(a);
  };
  B.gte = B.greaterThanOrEqual;
  B.compare = function(a) {
    c(a) || (a = h(a));
    if (this.eq(a)) {
      return 0;
    }
    var d = this.isNegative(), b = a.isNegative();
    return d && !b ? -1 : !d && b ? 1 : this.unsigned ? a.high >>> 0 > this.high >>> 0 || a.high === this.high && a.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(a).isNegative() ? -1 : 1;
  };
  B.comp = B.compare;
  B.negate = function() {
    return !this.unsigned && this.eq(A) ? A : this.not().add(x);
  };
  B.neg = B.negate;
  B.add = function(a) {
    c(a) || (a = h(a));
    var d = this.high >>> 16, b = this.high & 65535, f = this.low >>> 16, l = a.high >>> 16, p = a.high & 65535, m = a.low >>> 16;
    var n = (this.low & 65535) + (a.low & 65535);
    a = (n >>> 16) + (f + m);
    f = (a >>> 16) + (b + p);
    b = (f >>> 16) + (d + l) & 65535;
    return e((a & 65535) << 16 | n & 65535, b << 16 | f & 65535, this.unsigned);
  };
  B.subtract = function(a) {
    c(a) || (a = h(a));
    return this.add(a.neg());
  };
  B.sub = B.subtract;
  B.multiply = function(a) {
    if (this.isZero()) {
      return v;
    }
    c(a) || (a = h(a));
    if (a.isZero()) {
      return v;
    }
    if (this.eq(A)) {
      return a.isOdd() ? A : v;
    }
    if (a.eq(A)) {
      return this.isOdd() ? A : v;
    }
    if (this.isNegative()) {
      return a.isNegative() ? this.neg().mul(a.neg()) : this.neg().mul(a).neg();
    }
    if (a.isNegative()) {
      return this.mul(a.neg()).neg();
    }
    if (this.lt(l) && a.lt(l)) {
      return b(this.toNumber() * a.toNumber(), this.unsigned);
    }
    var d = this.high >>> 16, f = this.high & 65535, p = this.low >>> 16, m = this.low & 65535, n = a.high >>> 16, k = a.high & 65535, q = a.low >>> 16;
    a = a.low & 65535;
    var u = m * a;
    var r = (u >>> 16) + p * a;
    var y = r >>> 16;
    r = (r & 65535) + m * q;
    y += r >>> 16;
    y += f * a;
    var w = y >>> 16;
    y = (y & 65535) + p * q;
    w += y >>> 16;
    y = (y & 65535) + m * k;
    return e((r & 65535) << 16 | u & 65535, (w + (y >>> 16) + (d * a + f * q + p * k + m * n) & 65535) << 16 | y & 65535, this.unsigned);
  };
  B.mul = B.multiply;
  B.divide = function(a) {
    c(a) || (a = h(a));
    if (a.isZero()) {
      throw Error("division by zero");
    }
    if (this.isZero()) {
      return this.unsigned ? w : v;
    }
    if (this.unsigned) {
      a.unsigned || (a = a.toUnsigned());
      if (a.gt(this)) {
        return w;
      }
      if (a.gt(this.shru(1))) {
        return z;
      }
      var d = w;
    } else {
      if (this.eq(A)) {
        if (a.eq(x) || a.eq(p)) {
          return A;
        }
        if (a.eq(A)) {
          return x;
        }
        var e = this.shr(1).div(a).shl(1);
        if (e.eq(v)) {
          return a.isNegative() ? x : p;
        }
        var f = this.sub(a.mul(e));
        return e.add(f.div(a));
      }
      if (a.eq(A)) {
        return this.unsigned ? w : v;
      }
      if (this.isNegative()) {
        return a.isNegative() ? this.neg().div(a.neg()) : this.neg().div(a).neg();
      }
      if (a.isNegative()) {
        return this.div(a.neg()).neg();
      }
      d = v;
    }
    for (f = this; f.gte(a);) {
      e = Math.max(1, Math.floor(f.toNumber() / a.toNumber()));
      var l = Math.ceil(Math.log(e) / Math.LN2);
      l = 48 >= l ? 1 : n(2, l - 48);
      for (var m = b(e), k = m.mul(a); k.isNegative() || k.gt(f);) {
        e -= l, m = b(e, this.unsigned), k = m.mul(a);
      }
      m.isZero() && (m = x);
      d = d.add(m);
      f = f.sub(k);
    }
    return d;
  };
  B.div = B.divide;
  B.modulo = function(a) {
    c(a) || (a = h(a));
    return this.sub(this.div(a).mul(a));
  };
  B.mod = B.modulo;
  B.not = function() {
    return e(~this.low, ~this.high, this.unsigned);
  };
  B.and = function(a) {
    c(a) || (a = h(a));
    return e(this.low & a.low, this.high & a.high, this.unsigned);
  };
  B.or = function(a) {
    c(a) || (a = h(a));
    return e(this.low | a.low, this.high | a.high, this.unsigned);
  };
  B.xor = function(a) {
    c(a) || (a = h(a));
    return e(this.low ^ a.low, this.high ^ a.high, this.unsigned);
  };
  B.shiftLeft = function(a) {
    c(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? e(this.low << a, this.high << a | this.low >>> 32 - a, this.unsigned) : e(0, this.low << a - 32, this.unsigned);
  };
  B.shl = B.shiftLeft;
  B.shiftRight = function(a) {
    c(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? e(this.low >>> a | this.high << 32 - a, this.high >> a, this.unsigned) : e(this.high >> a - 32, 0 <= this.high ? 0 : -1, this.unsigned);
  };
  B.shr = B.shiftRight;
  B.shiftRightUnsigned = function(a) {
    c(a) && (a = a.toInt());
    a &= 63;
    if (0 === a) {
      return this;
    }
    var d = this.high;
    return 32 > a ? e(this.low >>> a | d << 32 - a, d >>> a, this.unsigned) : 32 === a ? e(d, 0, this.unsigned) : e(d >>> a - 32, 0, this.unsigned);
  };
  B.shru = B.shiftRightUnsigned;
  B.toSigned = function() {
    return this.unsigned ? e(this.low, this.high, !1) : this;
  };
  B.toUnsigned = function() {
    return this.unsigned ? this : e(this.low, this.high, !0);
  };
  B.toBytes = function(a) {
    return a ? this.toBytesLE() : this.toBytesBE();
  };
  B.toBytesLE = function() {
    var a = this.high, d = this.low;
    return [d & 255, d >>> 8 & 255, d >>> 16 & 255, d >>> 24 & 255, a & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255];
  };
  B.toBytesBE = function() {
    var a = this.high, d = this.low;
    return [a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, a & 255, d >>> 24 & 255, d >>> 16 & 255, d >>> 8 & 255, d & 255];
  };
  return a;
});
(function(a) {
  function c(a) {
    if (!a) {
      throw Error("PSON requires ByteBuffer.js: Get it at https://github.com/dcodeIO/ByteBuffer.js");
    }
    var b = {T:{ZERO:0, MAX:239, NULL:240, TRUE:241, FALSE:242, EOBJECT:243, EARRAY:244, ESTRING:245, OBJECT:246, ARRAY:247, INTEGER:248, LONG:249, FLOAT:250, DOUBLE:251, STRING:252, STRING_ADD:253, STRING_GET:254, BINARY:255}};
    b.Encoder = function(a, b) {
      var c = new a(4);
      c.length = 4;
      var e = a.Long, f = function(a, b, d) {
        this.dict = {};
        this.next = 0;
        if (a && Array.isArray(a)) {
          for (; this.next < a.length;) {
            this.dict[a[this.next]] = this.next++;
          }
        }
        this.progressive = !!b;
        this.options = d || {};
      };
      f.prototype.encode = function(b, c) {
        var d = !1;
        c || (c = new a, d = !0);
        var e = c.littleEndian;
        try {
          return this._encodeValue(b, c.LE()), c.littleEndian = e, d ? c.flip() : c;
        } catch (v) {
          throw c.littleEndian = e, v;
        }
      };
      f.prototype._encodeValue = function(f, h, d) {
        if (null === f) {
          h.writeUint8(b.NULL);
        } else {
          switch(typeof f) {
            case "function":
              f = f.toString();
            case "string":
              0 === f.length ? h.writeUint8(b.ESTRING) : this.dict.hasOwnProperty(f) ? (h.writeUint8(b.STRING_GET), h.writeVarint32(this.dict[f])) : (h.writeUint8(b.STRING), h.writeVString(f));
              break;
            case "number":
              d = parseInt(f);
              f === d ? (d = a.zigZagEncode32(f), d <= b.MAX ? h.writeUint8(d) : (h.writeUint8(b.INTEGER), h.writeVarint32ZigZag(f))) : (c.writeFloat32(f, 0), f === c.readFloat32(0) ? (h.writeUint8(b.FLOAT), h.writeFloat32(f)) : (h.writeUint8(b.DOUBLE), h.writeFloat64(f)));
              break;
            case "boolean":
              h.writeUint8(f ? b.TRUE : b.FALSE);
              break;
            case "object":
              var l;
              if (Array.isArray(f)) {
                if (0 === f.length) {
                  h.writeUint8(b.EARRAY);
                } else {
                  for (h.writeUint8(b.ARRAY), h.writeVarint32(f.length), l = 0; l < f.length; l++) {
                    this._encodeValue(f[l], h);
                  }
                }
              } else {
                if (e && f instanceof e) {
                  h.writeUint8(b.LONG), h.writeVarint64ZigZag(f);
                } else {
                  try {
                    f = a.wrap(f), h.writeUint8(b.BINARY), h.writeVarint32(f.remaining()), h.append(f);
                  } catch (x) {
                    var m = Object.keys(f), n = 0;
                    for (l = 0; l < m.length; l++) {
                      "undefined" !== typeof f[m[l]] && n++;
                    }
                    if (0 === n) {
                      h.writeUint8(b.EOBJECT);
                    } else {
                      for (h.writeUint8(b.OBJECT), h.writeVarint32(n), d || (d = !!f._PSON_EXCL_), l = 0; l < m.length; l++) {
                        n = m[l], "undefined" !== typeof f[n] && (this.dict.hasOwnProperty(n) ? (h.writeUint8(b.STRING_GET), h.writeVarint32(this.dict[n])) : (this.progressive && !d ? (this.dict[n] = this.next++, h.writeUint8(b.STRING_ADD)) : h.writeUint8(b.STRING), h.writeVString(n)), this._encodeValue(f[n], h));
                      }
                    }
                  }
                }
              }
              break;
            case "undefined":
              h.writeUint8(b.NULL);
          }
        }
      };
      return f;
    }(a, b.T);
    b.Decoder = function(a, b) {
      var c = a.Long, e = function(a, b, c) {
        this.dict = a && Array.isArray(a) ? a : [];
        this.progressive = !!b;
        this.options = c || {};
      };
      e.prototype.decode = function(b) {
        b instanceof a || (b = a.wrap(b));
        var c = b.littleEndian;
        try {
          var e = this._decodeValue(b.LE());
          b.littleEndian = c;
          return e;
        } catch (d) {
          throw b.littleEndian = c, d;
        }
      };
      e.prototype._decodeValue = function(e) {
        var f = e.readUint8();
        if (f <= b.MAX) {
          return a.zigZagDecode32(f);
        }
        switch(f) {
          case b.NULL:
            return null;
          case b.TRUE:
            return !0;
          case b.FALSE:
            return !1;
          case b.EOBJECT:
            return {};
          case b.EARRAY:
            return [];
          case b.ESTRING:
            return "";
          case b.OBJECT:
            f = e.readVarint32();
            for (var h = {}; 0 <= --f;) {
              h[this._decodeValue(e)] = this._decodeValue(e);
            }
            return h;
          case b.ARRAY:
            f = e.readVarint32();
            for (h = []; 0 <= --f;) {
              h.push(this._decodeValue(e));
            }
            return h;
          case b.INTEGER:
            return e.readVarint32ZigZag();
          case b.LONG:
            return c ? e.readVarint64ZigZag() : e.readVarint32ZigZag();
          case b.FLOAT:
            return e.readFloat32();
          case b.DOUBLE:
            return e.readFloat64();
          case b.STRING:
            return e.readVString();
          case b.STRING_ADD:
            return e = e.readVString(), this.dict.push(e), e;
          case b.STRING_GET:
            return this.dict[e.readVarint32()];
          case b.BINARY:
            return f = e.readVarint32(), h = e.slice(e.offset, e.offset + f), e.offset += f, h;
          default:
            throw Error("Illegal type at " + e.offset + ": " + f);
        }
      };
      return e;
    }(a, b.T);
    b.Pair = function() {
      var a = function() {
      };
      a.prototype.encode = function(a) {
        return this.encoder.encode(a);
      };
      a.prototype.toArrayBuffer = function(a) {
        return this.encoder.encode(a).toArrayBuffer();
      };
      a.prototype.toBuffer = function(a) {
        return this.encoder.encode(a).toBuffer();
      };
      a.prototype.decode = function(a) {
        return this.decoder.decode(a);
      };
      return a;
    }();
    b.StaticPair = function(a, b, c) {
      var e = function(e, f) {
        a.call(this);
        this.encoder = new b(e, !1, f);
        this.decoder = new c(e, !1, f);
      };
      e.prototype = Object.create(a.prototype);
      return e;
    }(b.Pair, b.Encoder, b.Decoder);
    b.ProgressivePair = function(a, c, h) {
      var e = function(b, e) {
        a.call(this);
        this.encoder = new c(b, !0, e);
        this.decoder = new h(b, !0, e);
      };
      e.prototype = Object.create(a.prototype);
      e.prototype.exclude = function(a) {
        b.exclude(a);
      };
      e.prototype.include = function(a) {
        b.include(a);
      };
      return e;
    }(b.Pair, b.Encoder, b.Decoder);
    b.exclude = function(a) {
      "object" === typeof a && Object.defineProperty(a, "_PSON_EXCL_", {value:!0, enumerable:!1, configurable:!0});
    };
    b.include = function(a) {
      "object" === typeof a && delete a._PSON_EXCL_;
    };
    return b;
  }
  "undefined" != typeof module && module.exports ? module.exports = c(require("bytebuffer")) : "undefined" != typeof define && define.amd ? define("PSON", ["ByteBuffer"], c) : (a.dcodeIO || (a.dcodeIO = {}), a.dcodeIO.PSON = c(a.dcodeIO.ByteBuffer));
})(this);
(function e$jscomp$0(a, c, k) {
  function e(h, q) {
    if (!c[h]) {
      if (!a[h]) {
        var n = "function" == typeof require && require;
        if (!q && n) {
          return n(h, !0);
        }
        if (f) {
          return f(h, !0);
        }
        q = Error("Cannot find module '" + h + "'");
        throw q.code = "MODULE_NOT_FOUND", q;
      }
      q = c[h] = {exports:{}};
      a[h][0].call(q.exports, function(c) {
        var d = a[h][1][c];
        return e(d ? d : c);
      }, q, q.exports, e$jscomp$0, a, c, k);
    }
    return c[h].exports;
  }
  for (var f = "function" == typeof require && require, h = 0; h < k.length; h++) {
    e(k[h]);
  }
  return e;
})({1:[function(a, c, k) {
  var b = Object.prototype.toString;
  c.exports = function(a) {
    return a.BYTES_PER_ELEMENT && "[object ArrayBuffer]" === b.call(a.buffer) || Array.isArray(a);
  };
}, {}], 2:[function(a, c, k) {
  c.exports = function(a, c) {
    return "number" === typeof a ? a : "number" === typeof c ? c : 0;
  };
}, {}], 3:[function(a, c, k) {
  c.exports = function(a) {
    switch(a) {
      case "int8":
        return Int8Array;
      case "int16":
        return Int16Array;
      case "int32":
        return Int32Array;
      case "uint8":
        return Uint8Array;
      case "uint16":
        return Uint16Array;
      case "uint32":
        return Uint32Array;
      case "float32":
        return Float32Array;
      case "float64":
        return Float64Array;
      case "array":
        return Array;
      case "uint8_clamped":
        return Uint8ClampedArray;
    }
  };
}, {}], 4:[function(a, c, k) {
  var b = a("dtype");
  c.exports = function(a, c, h) {
    if (!a) {
      throw new TypeError("must specify data as first parameter");
    }
    h = +(h || 0) | 0;
    if (Array.isArray(a) && Array.isArray(a[0])) {
      var e = a[0].length, f = a.length * e;
      c && "string" !== typeof c || (c = new (b(c || "float32"))(f + h));
      var n = c.length - h;
      if (f !== n) {
        throw Error("source length " + f + " (" + e + "x" + a.length + ") does not match destination length " + n);
      }
      for (f = 0; f < a.length; f++) {
        for (n = 0; n < e; n++) {
          c[h++] = a[f][n];
        }
      }
    } else {
      c && "string" !== typeof c ? c.set(a, h) : (c = b(c || "float32"), 0 === h ? c = new c(a) : (c = new c(a.length + h), c.set(a, h)));
    }
    return c;
  };
}, {dtype:3}], 5:[function(a, c, k) {
  c.exports = function(a) {
    if (!a || "string" !== typeof a) {
      throw Error("must specify property for indexof search");
    }
    return new Function("array", "value", "start", ["start = start || 0\nfor (var i=start; i<array.length; i++)", '  if (array[i]["' + a + '"] === value)', "      return i\nreturn -1"].join("\n"));
  };
}, {}], 6:[function(a, c, k) {
  c.exports = "function" === typeof Object.create ? function(a, c) {
    a.super_ = c;
    a.prototype = Object.create(c.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}});
  } : function(a, c) {
    a.super_ = c;
    var b = function() {
    };
    b.prototype = c.prototype;
    a.prototype = new b;
    a.prototype.constructor = a;
  };
}, {}], 7:[function(a, c, k) {
  function b(a) {
    return !!a.constructor && "function" === typeof a.constructor.isBuffer && a.constructor.isBuffer(a);
  }
  c.exports = function(a) {
    return null != a && (b(a) || "function" === typeof a.readFloatLE && "function" === typeof a.slice && b(a.slice(0, 0)) || !!a._isBuffer);
  };
}, {}], 8:[function(a, c, k) {
  function b(a) {
    this.glyphs = [];
    this._measure = this.computeMetrics.bind(this);
    this.update(a);
  }
  function e(a, b) {
    if (!a.chars || 0 === a.chars.length) {
      return null;
    }
    b = d(a.chars, b);
    return 0 <= b ? a.chars[b] : null;
  }
  function f(a) {
    for (var b = 0; b < v.length; b++) {
      var c = v[b].charCodeAt(0);
      c = d(a.chars, c);
      if (0 <= c) {
        return a.chars[c].height;
      }
    }
    return 0;
  }
  function h(a) {
    for (var b = 0; b < x.length; b++) {
      var c = x[b].charCodeAt(0);
      c = d(a.chars, c);
      if (0 <= c) {
        return a.chars[c].height;
      }
    }
    return 0;
  }
  function r(a, d, b) {
    if (!a.kernings || 0 === a.kernings.length) {
      return 0;
    }
    a = a.kernings;
    for (var c = 0; c < a.length; c++) {
      var e = a[c];
      if (e.first === d && e.second === b) {
        return e.amount;
      }
    }
    return 0;
  }
  function q(a) {
    return "center" === a ? 1 : "right" === a ? 2 : 0;
  }
  var n = a("word-wrapper"), m = a("xtend"), d = a("indexof-property")("id"), l = a("as-number"), v = "xeaonsrcumvwz".split(""), w = ["m", "w"], x = "HINEFKLTUVWXYZ".split("");
  c.exports = function(a) {
    return new b(a);
  };
  b.prototype.update = function(a) {
    this._opt = a = m({measure:this._measure}, a);
    this._opt.tabSize = l(this._opt.tabSize, 4);
    if (!a.font) {
      throw Error("must provide a valid bitmap font");
    }
    var d = this.glyphs, b = a.text || "", c = a.font;
    this._setupSpaceGlyphs(c);
    var e = n.lines(b, a), k = a.width || 0;
    d.length = 0;
    var v = e.reduce(function(a, d) {
      return Math.max(a, d.width, k);
    }, 0), w = 0, x = 0, z = l(a.lineHeight, c.common.lineHeight), H = c.common.base, Q = z - H, K = a.letterSpacing || 0;
    a = z * e.length - Q;
    var M = q(this._opt.align);
    x -= a;
    this._width = v;
    this._height = a;
    this._descender = z - H;
    this._baseline = H;
    this._xHeight = f(c);
    this._capHeight = h(c);
    this._lineHeight = z;
    this._ascender = z - Q - this._xHeight;
    var L = this;
    e.forEach(function(a, e) {
      var f = a.end, l = a.width;
      for (a = a.start; a < f; a++) {
        var h = b.charCodeAt(a);
        if (h = L.getGlyph(c, h)) {
          p && (w += r(c, p.id, h.id));
          var p = w;
          1 === M ? p += (v - l) / 2 : 2 === M && (p += v - l);
          d.push({position:[p, x], data:h, index:a, line:e});
          w += h.xadvance + K;
          p = h;
        }
      }
      x += z;
      w = 0;
    });
    this._linesTotal = e.length;
  };
  b.prototype._setupSpaceGlyphs = function(a) {
    this._fallbackTabGlyph = this._fallbackSpaceGlyph = null;
    if (a.chars && 0 !== a.chars.length) {
      var b;
      if (!(b = e(a, 32))) {
        a: {
          for (b = 0; b < w.length; b++) {
            var c = w[b].charCodeAt(0);
            c = d(a.chars, c);
            if (0 <= c) {
              b = a.chars[c];
              break a;
            }
          }
          b = 0;
        }
      }
      a = b || a.chars[0];
      b = this._opt.tabSize * a.xadvance;
      this._fallbackSpaceGlyph = a;
      this._fallbackTabGlyph = m(a, {x:0, y:0, xadvance:b, id:9, xoffset:0, yoffset:0, width:0, height:0});
    }
  };
  b.prototype.getGlyph = function(a, d) {
    return (a = e(a, d)) ? a : 9 === d ? this._fallbackTabGlyph : 32 === d ? this._fallbackSpaceGlyph : null;
  };
  b.prototype.computeMetrics = function(a, d, b, c) {
    var e = this._opt.letterSpacing || 0, f = this._opt.font, l = 0, h = 0, p = 0;
    if (!f.chars || 0 === f.chars.length) {
      return {start:d, end:d, width:0};
    }
    b = Math.min(a.length, b);
    for (var m = d; m < b; m++) {
      var n = a.charCodeAt(m);
      if (n = this.getGlyph(f, n)) {
        var k = u ? r(f, u.id, n.id) : 0;
        l += k;
        k = l + n.xadvance + e;
        var q = l + n.width;
        if (q >= c || k >= c) {
          break;
        }
        l = k;
        h = q;
        var u = n;
      }
      p++;
    }
    u && (h += u.xoffset);
    return {start:d, end:d + p, width:h};
  };
  "width height descender ascender xHeight baseline capHeight lineHeight".split(" ").forEach(function(a) {
    Object.defineProperty(b.prototype, a, {get:(new Function(["return function " + a + "() {", "  return this._" + a, "}"].join("\n")))(), configurable:!0});
  });
}, {"as-number":2, "indexof-property":5, "word-wrapper":15, xtend:16}], 9:[function(a, c, k) {
  var b = Object.prototype.hasOwnProperty, e = Object.prototype.propertyIsEnumerable;
  c.exports = function() {
    try {
      if (!Object.assign) {
        return !1;
      }
      var a = new String("abc");
      a[5] = "de";
      if ("5" === Object.getOwnPropertyNames(a)[0]) {
        return !1;
      }
      var b = {};
      for (a = 0; 10 > a; a++) {
        b["_" + String.fromCharCode(a)] = a;
      }
      if ("0123456789" !== Object.getOwnPropertyNames(b).map(function(a) {
        return b[a];
      }).join("")) {
        return !1;
      }
      var c = {};
      "abcdefghijklmnopqrst".split("").forEach(function(a) {
        c[a] = a;
      });
      return "abcdefghijklmnopqrst" !== Object.keys(Object.assign({}, c)).join("") ? !1 : !0;
    } catch (q) {
      return !1;
    }
  }() ? Object.assign : function(a, c) {
    if (null === a || void 0 === a) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    var f = Object(a);
    for (var h, n = 1; n < arguments.length; n++) {
      var m = Object(arguments[n]);
      for (var d in m) {
        b.call(m, d) && (f[d] = m[d]);
      }
      if (Object.getOwnPropertySymbols) {
        h = Object.getOwnPropertySymbols(m);
        for (var l = 0; l < h.length; l++) {
          e.call(m, h[l]) && (f[h[l]] = m[h[l]]);
        }
      }
    }
    return f;
  };
}, {}], 10:[function(a, c, k) {
  var b = a("dtype"), e = a("an-array"), f = a("is-buffer"), h = [0, 2, 3], r = [2, 1, 3];
  c.exports = function(a, c) {
    a && (e(a) || f(a)) || (c = a || {}, a = null);
    c = "number" === typeof c ? {count:c} : c || {};
    var m = "string" === typeof c.type ? c.type : "uint16", d = c.start || 0, l = !1 !== c.clockwise ? h : r, k = l[0], n = l[1];
    l = l[2];
    c = 6 * ("number" === typeof c.count ? c.count : 1);
    a = a || new (b(m))(c);
    for (var q = m = 0; m < c; m += 6, q += 4) {
      var z = m + d;
      a[z + 0] = q + 0;
      a[z + 1] = q + 1;
      a[z + 2] = q + 2;
      a[z + 3] = q + k;
      a[z + 4] = q + n;
      a[z + 5] = q + l;
    }
    return a;
  };
}, {"an-array":1, dtype:3, "is-buffer":7}], 11:[function(a, c, k) {
  function b(a) {
    m.call(this);
    "string" === typeof a && (a = {text:a});
    this._opt = r({}, a);
    a && this.update(a);
  }
  var e = a("layout-bmfont-text");
  k = a("inherits");
  var f = a("quad-indices"), h = a("three-buffer-vertex-data"), r = a("object-assign"), q = a("./lib/vertices"), n = a("./lib/utils"), m = THREE.BufferGeometry;
  c.exports = function(a) {
    return new b(a);
  };
  k(b, m);
  b.prototype.update = function(a) {
    "string" === typeof a && (a = {text:a});
    a = r({}, this._opt, a);
    if (!a.font) {
      throw new TypeError("must specify a { font } in options");
    }
    this.layout = e(a);
    var d = !1 !== a.flipY, b = a.font, c = b.common.scaleW, m = b.common.scaleH;
    this.visibleGlyphs = b = this.layout.glyphs.filter(function(a) {
      a = a.data;
      return 0 < a.width * a.height;
    });
    var k = q.positions(b);
    d = q.uvs(b, c, m, d);
    c = f({clockwise:!0, type:"uint16", count:b.length});
    h.index(this, c, 1, "uint16");
    h.attr(this, "position", k, 2);
    h.attr(this, "uv", d, 2);
    !a.multipage && "page" in this.attributes ? this.removeAttribute("page") : a.multipage && (a = q.pages(b), h.attr(this, "page", a, 1));
  };
  b.prototype.computeBoundingSphere = function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    var a = this.attributes.position.array, b = this.attributes.position.itemSize;
    !a || !b || 2 > a.length ? (this.boundingSphere.radius = 0, this.boundingSphere.center.set(0, 0, 0)) : (n.computeSphere(a, this.boundingSphere), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.'));
  };
  b.prototype.computeBoundingBox = function() {
    null === this.boundingBox && (this.boundingBox = new THREE.Box3);
    var a = this.boundingBox, b = this.attributes.position.array, c = this.attributes.position.itemSize;
    !b || !c || 2 > b.length ? a.makeEmpty() : n.computeBox(b, a);
  };
}, {"./lib/utils":12, "./lib/vertices":13, inherits:6, "layout-bmfont-text":8, "object-assign":9, "quad-indices":10, "three-buffer-vertex-data":14}], 12:[function(a, c, k) {
  function b(a) {
    var b = a.length / 2;
    e.min[0] = a[0];
    e.min[1] = a[1];
    e.max[0] = a[0];
    e.max[1] = a[1];
    for (var c = 0; c < b; c++) {
      var f = a[2 * c], k = a[2 * c + 1];
      e.min[0] = Math.min(f, e.min[0]);
      e.min[1] = Math.min(k, e.min[1]);
      e.max[0] = Math.max(f, e.max[0]);
      e.max[1] = Math.max(k, e.max[1]);
    }
  }
  var e = {min:[0, 0], max:[0, 0]};
  c.exports.computeBox = function(a, c) {
    b(a);
    c.min.set(e.min[0], e.min[1], 0);
    c.max.set(e.max[0], e.max[1], 0);
  };
  c.exports.computeSphere = function(a, c) {
    b(a);
    a = e.min[0];
    var f = e.min[1], h = e.max[0] - a, k = e.max[1] - f, m = Math.sqrt(h * h + k * k);
    c.center.set(a + h / 2, f + k / 2, 0);
    c.radius = m / 2;
  };
}, {}], 13:[function(a, c, k) {
  c.exports.pages = function(a) {
    var b = new Float32Array(4 * a.length), c = 0;
    a.forEach(function(a) {
      a = a.data.page || 0;
      b[c++] = a;
      b[c++] = a;
      b[c++] = a;
      b[c++] = a;
    });
    return b;
  };
  c.exports.uvs = function(a, c, f, h) {
    var b = new Float32Array(8 * a.length), e = 0;
    a.forEach(function(a) {
      a = a.data;
      var m = a.y + a.height, d = a.x / c, l = a.y / f, k = (a.x + a.width) / c, n = m / f;
      h && (l = (f - a.y) / f, n = (f - m) / f);
      b[e++] = d;
      b[e++] = l;
      b[e++] = d;
      b[e++] = n;
      b[e++] = k;
      b[e++] = n;
      b[e++] = k;
      b[e++] = l;
    });
    return b;
  };
  c.exports.positions = function(a) {
    var b = new Float32Array(8 * a.length), c = 0;
    a.forEach(function(a) {
      var e = a.data, f = a.position[0] + e.xoffset;
      a = a.position[1] + e.yoffset;
      var h = e.width;
      e = e.height;
      b[c++] = f;
      b[c++] = a;
      b[c++] = f;
      b[c++] = a + e;
      b[c++] = f + h;
      b[c++] = a + e;
      b[c++] = f + h;
      b[c++] = a;
    });
    return b;
  };
}, {}], 14:[function(a, c, k) {
  function b(a, b, c, k) {
    b = b || [];
    var f;
    if (!(f = !a)) {
      if (f = b, a.itemSize === c && a.array) {
        var h = a.array.length;
        f = Array.isArray(f) && Array.isArray(f[0]) ? h !== f.length * c : h !== f.length;
      } else {
        f = !0;
      }
    }
    if (f) {
      return b = e(b, k), a = new THREE.BufferAttribute(b, c), a.needsUpdate = !0, a;
    }
    e(b, a.array);
    a.needsUpdate = !0;
    return null;
  }
  var e = a("flatten-vertex-data");
  c.exports.attr = function(a, c, e, k, n) {
    "number" !== typeof k && (k = 3);
    "string" !== typeof n && (n = "float32");
    if (Array.isArray(e) && Array.isArray(e[0]) && e[0].length !== k) {
      throw Error("Nested vertex array has unexpected size; expected " + k + " but found " + e[0].length);
    }
    var f = a.getAttribute(c);
    (e = b(f, e, k, n)) && a.addAttribute(c, e);
  };
  c.exports.index = function(a, c, e, k) {
    "number" !== typeof e && (e = 1);
    "string" !== typeof k && (k = "uint16");
    var f = !a.index && "function" !== typeof a.setIndex, h = f ? a.getAttribute("index") : a.index;
    if (c = b(h, c, e, k)) {
      f ? a.addAttribute("index", c) : a.index = c;
    }
  };
}, {"flatten-vertex-data":4}], 15:[function(a, c, k) {
  function b(a, b, c, e) {
    return {start:b, end:b + Math.min(e, c - b)};
  }
  var e = /\n/, f = /\s/;
  c.exports = function(a, b) {
    return c.exports.lines(a, b).map(function(b) {
      return a.substring(b.start, b.end);
    }).join("\n");
  };
  c.exports.lines = function(a, c) {
    c = c || {};
    if (0 === c.width && "nowrap" !== c.mode) {
      return [];
    }
    a = a || "";
    var h = "number" === typeof c.width ? c.width : Number.MAX_VALUE, k = Math.max(0, c.start || 0), m = "number" === typeof c.end ? c.end : a.length, d = c.mode;
    c = c.measure || b;
    if ("pre" === d) {
      var l = [];
      for (d = k; k < m && k < a.length; k++) {
        var r = a.charAt(k);
        if ((r = e.test(r)) || k === m - 1) {
          d = c(a, d, r ? k : k + 1, h), l.push(d), d = k + 1;
        }
      }
      return l;
    }
    l = k;
    k = [];
    "nowrap" === d && (h = Number.MAX_VALUE);
    for (; l < m && l < a.length;) {
      d = m;
      r = a.indexOf("\n", l);
      for (d = -1 === r || r > d ? d : r; l < d && f.test(a.charAt(l));) {
        l++;
      }
      r = c(a, l, d, h);
      var w = l + (r.end - r.start);
      r = w + 1;
      if (w < d) {
        for (; w > l && !f.test(a.charAt(w));) {
          w--;
        }
        if (w === l) {
          r > l + 1 && r--, w = r;
        } else {
          for (r = w; w > l && f.test(a.charAt(w - 1));) {
            w--;
          }
        }
      }
      w >= l && (l = c(a, l, w, h), k.push(l));
      l = r;
    }
    return k;
  };
}, {}], 16:[function(a, c, k) {
  c.exports = function() {
    for (var a = {}, c = 0; c < arguments.length; c++) {
      var h = arguments[c], k;
      for (k in h) {
        b.call(h, k) && (a[k] = h[k]);
      }
    }
    return a;
  };
  var b = Object.prototype.hasOwnProperty;
}, {}], 17:[function(a, c, k) {
  window.createGeometry = a("three-bmfont-text");
}, {"three-bmfont-text":11}]}, {}, [17]);
!function(a) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    module.exports = a();
  } else {
    var c;
    "undefined" != typeof window ? c = window : "undefined" != typeof global ? c = global : "undefined" != typeof self && (c = self);
    c.CANNON = a();
  }
}(function() {
  return function e(c, k, b) {
    function f(q, n) {
      if (!k[q]) {
        if (!c[q]) {
          var m = "function" == typeof require && require;
          if (!n && m) {
            return m(q, !0);
          }
          if (h) {
            return h(q, !0);
          }
          throw Error("Cannot find module '" + q + "'");
        }
        n = k[q] = {exports:{}};
        c[q][0].call(n.exports, function(d) {
          var b = c[q][1][d];
          return f(b ? b : d);
        }, n, n.exports, e, c, k, b);
      }
      return k[q].exports;
    }
    for (var h = "function" == typeof require && require, r = 0; r < b.length; r++) {
      f(b[r]);
    }
    return f;
  }({1:[function(c, k) {
    k.exports = {name:"cannon", version:"0.6.2", description:"A lightweight 3D physics engine written in JavaScript.", homepage:"https://github.com/schteppe/cannon.js", author:"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)", keywords:["cannon.js", "cannon", "physics", "engine", "3d"], main:"./build/cannon.js", engines:{node:"*"}, repository:{type:"git", url:"https://github.com/schteppe/cannon.js.git"}, bugs:{url:"https://github.com/schteppe/cannon.js/issues"}, licenses:[{type:"MIT"}], devDependencies:{jshint:"latest", 
    "uglify-js":"latest", nodeunit:"^0.9.0", grunt:"~0.4.0", "grunt-contrib-jshint":"~0.1.1", "grunt-contrib-nodeunit":"^0.4.1", "grunt-contrib-concat":"~0.1.3", "grunt-contrib-uglify":"^0.5.1", "grunt-browserify":"^2.1.4", "grunt-contrib-yuidoc":"^0.5.2", browserify:"*"}, dependencies:{}};
  }, {}], 2:[function(c, k) {
    k.exports = {version:c("../package.json").version, AABB:c("./collision/AABB"), ArrayCollisionMatrix:c("./collision/ArrayCollisionMatrix"), Body:c("./objects/Body"), Box:c("./shapes/Box"), Broadphase:c("./collision/Broadphase"), Constraint:c("./constraints/Constraint"), ContactEquation:c("./equations/ContactEquation"), Narrowphase:c("./world/Narrowphase"), ConeTwistConstraint:c("./constraints/ConeTwistConstraint"), ContactMaterial:c("./material/ContactMaterial"), ConvexPolyhedron:c("./shapes/ConvexPolyhedron"), 
    Cylinder:c("./shapes/Cylinder"), DistanceConstraint:c("./constraints/DistanceConstraint"), Equation:c("./equations/Equation"), EventTarget:c("./utils/EventTarget"), FrictionEquation:c("./equations/FrictionEquation"), GSSolver:c("./solver/GSSolver"), GridBroadphase:c("./collision/GridBroadphase"), Heightfield:c("./shapes/Heightfield"), HingeConstraint:c("./constraints/HingeConstraint"), LockConstraint:c("./constraints/LockConstraint"), Mat3:c("./math/Mat3"), Material:c("./material/Material"), 
    NaiveBroadphase:c("./collision/NaiveBroadphase"), ObjectCollisionMatrix:c("./collision/ObjectCollisionMatrix"), Pool:c("./utils/Pool"), Particle:c("./shapes/Particle"), Plane:c("./shapes/Plane"), PointToPointConstraint:c("./constraints/PointToPointConstraint"), Quaternion:c("./math/Quaternion"), Ray:c("./collision/Ray"), RaycastVehicle:c("./objects/RaycastVehicle"), RaycastResult:c("./collision/RaycastResult"), RigidVehicle:c("./objects/RigidVehicle"), RotationalEquation:c("./equations/RotationalEquation"), 
    RotationalMotorEquation:c("./equations/RotationalMotorEquation"), SAPBroadphase:c("./collision/SAPBroadphase"), SPHSystem:c("./objects/SPHSystem"), Shape:c("./shapes/Shape"), Solver:c("./solver/Solver"), Sphere:c("./shapes/Sphere"), SplitSolver:c("./solver/SplitSolver"), Spring:c("./objects/Spring"), Trimesh:c("./shapes/Trimesh"), Vec3:c("./math/Vec3"), Vec3Pool:c("./utils/Vec3Pool"), World:c("./world/World")};
  }, {"../package.json":1, "./collision/AABB":3, "./collision/ArrayCollisionMatrix":4, "./collision/Broadphase":5, "./collision/GridBroadphase":6, "./collision/NaiveBroadphase":7, "./collision/ObjectCollisionMatrix":8, "./collision/Ray":9, "./collision/RaycastResult":10, "./collision/SAPBroadphase":11, "./constraints/ConeTwistConstraint":12, "./constraints/Constraint":13, "./constraints/DistanceConstraint":14, "./constraints/HingeConstraint":15, "./constraints/LockConstraint":16, "./constraints/PointToPointConstraint":17, 
  "./equations/ContactEquation":19, "./equations/Equation":20, "./equations/FrictionEquation":21, "./equations/RotationalEquation":22, "./equations/RotationalMotorEquation":23, "./material/ContactMaterial":24, "./material/Material":25, "./math/Mat3":27, "./math/Quaternion":28, "./math/Vec3":30, "./objects/Body":31, "./objects/RaycastVehicle":32, "./objects/RigidVehicle":33, "./objects/SPHSystem":34, "./objects/Spring":35, "./shapes/Box":37, "./shapes/ConvexPolyhedron":38, "./shapes/Cylinder":39, 
  "./shapes/Heightfield":40, "./shapes/Particle":41, "./shapes/Plane":42, "./shapes/Shape":43, "./shapes/Sphere":44, "./shapes/Trimesh":45, "./solver/GSSolver":46, "./solver/Solver":47, "./solver/SplitSolver":48, "./utils/EventTarget":49, "./utils/Pool":51, "./utils/Vec3Pool":54, "./world/Narrowphase":55, "./world/World":56}], 3:[function(c, k) {
    function b(b) {
      b = b || {};
      this.lowerBound = new e;
      b.lowerBound && this.lowerBound.copy(b.lowerBound);
      this.upperBound = new e;
      b.upperBound && this.upperBound.copy(b.upperBound);
    }
    var e = c("../math/Vec3");
    c("../utils/Utils");
    k.exports = b;
    var f = new e;
    b.prototype.setFromPoints = function(b, c, e, h) {
      var d = this.lowerBound, l = this.upperBound;
      d.copy(b[0]);
      e && e.vmult(d, d);
      l.copy(d);
      for (var m = 1; m < b.length; m++) {
        var k = b[m];
        e && (e.vmult(k, f), k = f);
        k.x > l.x && (l.x = k.x);
        k.x < d.x && (d.x = k.x);
        k.y > l.y && (l.y = k.y);
        k.y < d.y && (d.y = k.y);
        k.z > l.z && (l.z = k.z);
        k.z < d.z && (d.z = k.z);
      }
      return c && (c.vadd(d, d), c.vadd(l, l)), h && (d.x -= h, d.y -= h, d.z -= h, l.x += h, l.y += h, l.z += h), this;
    };
    b.prototype.copy = function(b) {
      return this.lowerBound.copy(b.lowerBound), this.upperBound.copy(b.upperBound), this;
    };
    b.prototype.clone = function() {
      return (new b).copy(this);
    };
    b.prototype.extend = function(b) {
      var c = b.lowerBound.x;
      this.lowerBound.x > c && (this.lowerBound.x = c);
      c = b.upperBound.x;
      this.upperBound.x < c && (this.upperBound.x = c);
      c = b.lowerBound.y;
      this.lowerBound.y > c && (this.lowerBound.y = c);
      c = b.upperBound.y;
      this.upperBound.y < c && (this.upperBound.y = c);
      c = b.lowerBound.z;
      this.lowerBound.z > c && (this.lowerBound.z = c);
      c = b.upperBound.z;
      this.upperBound.z < c && (this.upperBound.z = c);
    };
    b.prototype.overlaps = function(b) {
      var c = this.lowerBound, e = this.upperBound, f = b.lowerBound;
      b = b.upperBound;
      return (f.x <= e.x && e.x <= b.x || c.x <= b.x && b.x <= e.x) && (f.y <= e.y && e.y <= b.y || c.y <= b.y && b.y <= e.y) && (f.z <= e.z && e.z <= b.z || c.z <= b.z && b.z <= e.z);
    };
    b.prototype.contains = function(b) {
      var c = this.lowerBound, e = this.upperBound, f = b.lowerBound;
      b = b.upperBound;
      return c.x <= f.x && e.x >= b.x && c.y <= f.y && e.y >= b.y && c.z <= f.z && e.z >= b.z;
    };
    b.prototype.getCorners = function(b, c, e, f, d, l, h, k) {
      var m = this.lowerBound, n = this.upperBound;
      b.copy(m);
      c.set(n.x, m.y, m.z);
      e.set(n.x, n.y, m.z);
      f.set(m.x, n.y, n.z);
      d.set(n.x, m.y, m.z);
      l.set(m.x, n.y, m.z);
      h.set(m.x, m.y, n.z);
      k.copy(n);
    };
    var h = [new e, new e, new e, new e, new e, new e, new e, new e];
    b.prototype.toLocalFrame = function(b, c) {
      this.getCorners(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]);
      for (var e = 0; 8 !== e; e++) {
        var f = h[e];
        b.pointToLocal(f, f);
      }
      return c.setFromPoints(h);
    };
    b.prototype.toWorldFrame = function(b, c) {
      this.getCorners(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]);
      for (var e = 0; 8 !== e; e++) {
        var f = h[e];
        b.pointToWorld(f, f);
      }
      return c.setFromPoints(h);
    };
  }, {"../math/Vec3":30, "../utils/Utils":53}], 4:[function(c, k) {
    function b() {
      this.matrix = [];
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b = b.index, c = c.index, c > b) {
        var e = c;
        c = b;
        b = e;
      }
      return this.matrix[(b * (b + 1) >> 1) + c - 1];
    };
    b.prototype.set = function(b, c, h) {
      if (b = b.index, c = c.index, c > b) {
        var e = c;
        c = b;
        b = e;
      }
      this.matrix[(b * (b + 1) >> 1) + c - 1] = h ? 1 : 0;
    };
    b.prototype.reset = function() {
      for (var b = 0, c = this.matrix.length; b !== c; b++) {
        this.matrix[b] = 0;
      }
    };
    b.prototype.setNumObjects = function(b) {
      this.matrix.length = b * (b - 1) >> 1;
    };
  }, {}], 5:[function(c, k) {
    function b() {
      this.world = null;
      this.useBoundingBoxes = !1;
      this.dirty = !0;
    }
    var e = c("../objects/Body"), f = c("../math/Vec3"), h = c("../math/Quaternion");
    c("../shapes/Shape");
    c("../shapes/Plane");
    k.exports = b;
    b.prototype.collisionPairs = function() {
      throw Error("collisionPairs not implemented for this BroadPhase class!");
    };
    var r = e.STATIC | e.KINEMATIC;
    b.prototype.needBroadphaseCollision = function(d, b) {
      return 0 === (d.collisionFilterGroup & b.collisionFilterMask) || 0 === (b.collisionFilterGroup & d.collisionFilterMask) ? !1 : 0 === (d.type & r) && d.sleepState !== e.SLEEPING || 0 === (b.type & r) && b.sleepState !== e.SLEEPING ? !0 : !1;
    };
    b.prototype.intersectionTest = function(d, b, c, e) {
      this.useBoundingBoxes ? this.doBoundingBoxBroadphase(d, b, c, e) : this.doBoundingSphereBroadphase(d, b, c, e);
    };
    var q = new f;
    new f;
    new h;
    new f;
    b.prototype.doBoundingSphereBroadphase = function(d, b, c, e) {
      b.position.vsub(d.position, q);
      var f = Math.pow(d.boundingRadius + b.boundingRadius, 2), l = q.norm2();
      f > l && (c.push(d), e.push(b));
    };
    b.prototype.doBoundingBoxBroadphase = function(d, b, c, e) {
      d.aabbNeedsUpdate && d.computeAABB();
      b.aabbNeedsUpdate && b.computeAABB();
      d.aabb.overlaps(b.aabb) && (c.push(d), e.push(b));
    };
    var n = {keys:[]}, m = [], d = [];
    b.prototype.makePairsUnique = function(b, c) {
      for (var e = b.length, f = 0; f !== e; f++) {
        m[f] = b[f], d[f] = c[f];
      }
      b.length = 0;
      for (f = c.length = 0; f !== e; f++) {
        var l = m[f].id, h = d[f].id;
        l = h > l ? l + "," + h : h + "," + l;
        n[l] = f;
        n.keys.push(l);
      }
      for (f = 0; f !== n.keys.length; f++) {
        l = n.keys.pop(), e = n[l], b.push(m[e]), c.push(d[e]), delete n[l];
      }
    };
    b.prototype.setWorld = function() {
    };
    var l = new f;
    b.boundingSphereCheck = function(d, b) {
      return d.position.vsub(b.position, l), Math.pow(d.shape.boundingSphereRadius + b.shape.boundingSphereRadius, 2) > l.norm2();
    };
    b.prototype.aabbQuery = function() {
      return console.warn(".aabbQuery is not implemented in this Broadphase subclass."), [];
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Plane":42, "../shapes/Shape":43}], 6:[function(c, k) {
    function b(b, c, h, d, l) {
      e.apply(this);
      this.nx = h || 10;
      this.ny = d || 10;
      this.nz = l || 10;
      this.aabbMin = b || new f(100, 100, 100);
      this.aabbMax = c || new f(-100, -100, -100);
      b = this.nx * this.ny * this.nz;
      if (0 >= b) {
        throw "GridBroadphase: Each dimension's n must be >0";
      }
      this.bins = [];
      this.binLengths = [];
      this.bins.length = b;
      this.binLengths.length = b;
      for (c = 0; b > c; c++) {
        this.bins[c] = [], this.binLengths[c] = 0;
      }
    }
    k.exports = b;
    var e = c("./Broadphase"), f = c("../math/Vec3"), h = c("../shapes/Shape");
    b.prototype = new e;
    b.prototype.constructor = b;
    var r = new f;
    new f;
    b.prototype.collisionPairs = function(b, c, e) {
      function d(d, b, c, e, f, l, h) {
        d = (d - C) * Q | 0;
        b = (b - E) * K | 0;
        c = (c - H) * M | 0;
        e = N((e - C) * Q);
        f = N((f - E) * K);
        l = N((l - H) * M);
        0 > d ? d = 0 : d >= n && (d = n - 1);
        0 > b ? b = 0 : b >= q && (b = q - 1);
        0 > c ? c = 0 : c >= p && (c = p - 1);
        0 > e ? e = 0 : e >= n && (e = n - 1);
        0 > f ? f = 0 : f >= q && (f = q - 1);
        0 > l ? l = 0 : l >= p && (l = p - 1);
        d *= u;
        b *= y;
        c *= A;
        e *= u;
        f *= y;
        for (l *= A; e >= d; d += u) {
          for (var m = b; f >= m; m += y) {
            for (var k = c; l >= k; k += A) {
              var r = d + m + k;
              R[r][aa[r]++] = h;
            }
          }
        }
      }
      var f = b.numObjects();
      b = b.bodies;
      var m = this.aabbMax, k = this.aabbMin, n = this.nx, q = this.ny, p = this.nz, u = q * p, y = p, A = 1, B = m.x, D = m.y, F = m.z, C = k.x, E = k.y, H = k.z, Q = n / (B - C), K = q / (D - E), M = p / (F - H);
      B = (B - C) / n;
      var L = (D - E) / q;
      F = (F - H) / p;
      var I = .5 * Math.sqrt(B * B + L * L + F * F);
      D = h.types;
      var P = D.SPHERE, T = D.PLANE, R = (D.BOX, D.COMPOUND, D.CONVEXPOLYHEDRON, this.bins), aa = this.binLengths;
      D = this.bins.length;
      for (k = 0; k !== D; k++) {
        aa[k] = 0;
      }
      var N = Math.ceil;
      k = Math.min;
      m = Math.max;
      for (k = 0; k !== f; k++) {
        m = b[k];
        var S = m.shape;
        switch(S.type) {
          case P:
            var O = m.position.x, W = m.position.y, J = m.position.z;
            S = S.radius;
            d(O - S, W - S, J - S, O + S, W + S, J + S, m);
            break;
          case T:
            S.worldNormalNeedsUpdate && S.computeWorldNormal(m.quaternion);
            J = S.worldNormal;
            S = E + .5 * L - m.position.y;
            var U = H + .5 * F - m.position.z, ea = r;
            ea.set(C + .5 * B - m.position.x, S, U);
            for (var ha = O = 0; O !== n; O++, ha += u, ea.y = S, ea.x += B) {
              for (var V = W = 0; W !== q; W++, V += y, ea.z = U, ea.y += L) {
                for (var la = 0, ba = 0; la !== p; la++, ba += A, ea.z += F) {
                  if (ea.dot(J) < I) {
                    var ja = ha + V + ba;
                    R[ja][aa[ja]++] = m;
                  }
                }
              }
            }
            break;
          default:
            m.aabbNeedsUpdate && m.computeAABB(), d(m.aabb.lowerBound.x, m.aabb.lowerBound.y, m.aabb.lowerBound.z, m.aabb.upperBound.x, m.aabb.upperBound.y, m.aabb.upperBound.z, m);
        }
      }
      for (k = 0; k !== D; k++) {
        if (f = aa[k], 1 < f) {
          for (b = R[k], O = 0; O !== f; O++) {
            for (m = b[O], W = 0; W !== O; W++) {
              B = b[W], this.needBroadphaseCollision(m, B) && this.intersectionTest(m, B, c, e);
            }
          }
        }
      }
      this.makePairsUnique(c, e);
    };
  }, {"../math/Vec3":30, "../shapes/Shape":43, "./Broadphase":5}], 7:[function(c, k) {
    function b() {
      e.apply(this);
    }
    k.exports = b;
    var e = c("./Broadphase");
    c = c("./AABB");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.prototype.collisionPairs = function(b, c, e) {
      var f, h = b.bodies, m = h.length;
      for (b = 0; b !== m; b++) {
        for (f = 0; f !== b; f++) {
          var d = h[b];
          var l = h[f];
          this.needBroadphaseCollision(d, l) && this.intersectionTest(d, l, c, e);
        }
      }
    };
    new c;
    b.prototype.aabbQuery = function(b, c, e) {
      e = e || [];
      for (var f = 0; f < b.bodies.length; f++) {
        var h = b.bodies[f];
        h.aabbNeedsUpdate && h.computeAABB();
        h.aabb.overlaps(c) && e.push(h);
      }
      return e;
    };
  }, {"./AABB":3, "./Broadphase":5}], 8:[function(c, k) {
    function b() {
      this.matrix = {};
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b = b.id, c = c.id, c > b) {
        var e = c;
        c = b;
        b = e;
      }
      return b + "-" + c in this.matrix;
    };
    b.prototype.set = function(b, c, h) {
      if (b = b.id, c = c.id, c > b) {
        var e = c;
        c = b;
        b = e;
      }
      h ? this.matrix[b + "-" + c] = !0 : delete this.matrix[b + "-" + c];
    };
    b.prototype.reset = function() {
      this.matrix = {};
    };
    b.prototype.setNumObjects = function() {
    };
  }, {}], 9:[function(c, k) {
    function b(d, c) {
      this.from = d ? d.clone() : new f;
      this.to = c ? c.clone() : new f;
      this._direction = new f;
      this.precision = 1E-4;
      this.checkCollisionResponse = !0;
      this.skipBackfaces = !1;
      this.collisionFilterGroup = this.collisionFilterMask = -1;
      this.mode = b.ANY;
      this.result = new r;
      this.hasHit = !1;
      this.callback = function() {
      };
    }
    function e(b, c, e, f) {
      f.vsub(c, P);
      e.vsub(c, d);
      b.vsub(c, l);
      var h, p;
      b = P.dot(P);
      c = P.dot(d);
      e = P.dot(l);
      f = d.dot(d);
      var m = d.dot(l);
      return 0 <= (h = f * e - c * m) && 0 <= (p = b * m - c * e) && b * f - c * c > h + p;
    }
    k.exports = b;
    var f = c("../math/Vec3");
    k = c("../math/Quaternion");
    var h = c("../math/Transform"), r = (c("../shapes/ConvexPolyhedron"), c("../shapes/Box"), c("../collision/RaycastResult")), q = c("../shapes/Shape");
    c = c("../collision/AABB");
    b.prototype.constructor = b;
    b.CLOSEST = 1;
    b.ANY = 2;
    b.ALL = 4;
    var n = new c, m = [];
    b.prototype.intersectWorld = function(d, c) {
      return this.mode = c.mode || b.ANY, this.result = c.result || new r, this.skipBackfaces = !!c.skipBackfaces, this.collisionFilterMask = "undefined" != typeof c.collisionFilterMask ? c.collisionFilterMask : -1, this.collisionFilterGroup = "undefined" != typeof c.collisionFilterGroup ? c.collisionFilterGroup : -1, c.from && this.from.copy(c.from), c.to && this.to.copy(c.to), this.callback = c.callback || function() {
      }, this.hasHit = !1, this.result.reset(), this._updateDirection(), this.getAABB(n), m.length = 0, d.broadphase.aabbQuery(d, n, m), this.intersectBodies(m), this.hasHit;
    };
    var d = new f, l = new f;
    b.pointInTriangle = e;
    var v = new f, w = new k;
    b.prototype.intersectBody = function(b, d) {
      d && (this.result = d, this._updateDirection());
      d = this.checkCollisionResponse;
      if ((!d || b.collisionResponse) && 0 !== (this.collisionFilterGroup & b.collisionFilterMask) && 0 !== (b.collisionFilterGroup & this.collisionFilterMask)) {
        for (var c = 0, e = b.shapes.length; e > c; c++) {
          var f = b.shapes[c];
          if ((!d || f.collisionResponse) && (b.quaternion.mult(b.shapeOrientations[c], w), b.quaternion.vmult(b.shapeOffsets[c], v), v.vadd(b.position, v), this.intersectShape(f, w, v, b), this.result._shouldStop)) {
            break;
          }
        }
      }
    };
    b.prototype.intersectBodies = function(b, d) {
      d && (this.result = d, this._updateDirection());
      d = 0;
      for (var c = b.length; !this.result._shouldStop && c > d; d++) {
        this.intersectBody(b[d]);
      }
    };
    b.prototype._updateDirection = function() {
      this.to.vsub(this.from, this._direction);
      this._direction.normalize();
    };
    b.prototype.intersectShape = function(b, d, c, e) {
      var f = this.from, l = this._direction;
      c.vsub(f, P);
      var h = P.dot(l);
      l.mult(h, T);
      T.vadd(f, T);
      c.distanceTo(T) > b.boundingSphereRadius || (f = this[b.type]) && f.call(this, b, d, c, e);
    };
    var x = (new f, new f, new f), z = new f, p = new f, u = new f;
    new f;
    new r;
    b.prototype.intersectBox = function(b, d, c, e) {
      return this.intersectConvex(b.convexPolyhedronRepresentation, d, c, e);
    };
    b.prototype[q.types.BOX] = b.prototype.intersectBox;
    b.prototype.intersectPlane = function(b, d, c, e) {
      var l = this.from, h = this.to, p = this._direction, m = new f(0, 0, 1);
      d.vmult(m, m);
      var k = new f;
      l.vsub(c, k);
      d = k.dot(m);
      h.vsub(c, k);
      k = k.dot(m);
      if (!(0 < d * k || l.distanceTo(h) < d || (k = m.dot(p), Math.abs(k) < this.precision))) {
        var n = new f;
        h = new f;
        d = new f;
        l.vsub(c, n);
        c = -m.dot(n) / k;
        p.scale(c, h);
        l.vadd(h, d);
        this.reportIntersection(m, d, b, e, -1);
      }
    };
    b.prototype[q.types.PLANE] = b.prototype.intersectPlane;
    b.prototype.getAABB = function(b) {
      var d = this.to, c = this.from;
      b.lowerBound.x = Math.min(d.x, c.x);
      b.lowerBound.y = Math.min(d.y, c.y);
      b.lowerBound.z = Math.min(d.z, c.z);
      b.upperBound.x = Math.max(d.x, c.x);
      b.upperBound.y = Math.max(d.y, c.y);
      b.upperBound.z = Math.max(d.z, c.z);
    };
    var y = {faceList:[0]};
    b.prototype.intersectHeightfield = function(d, c, e, l) {
      var p = (d.data, d.elementSize, new f), m = new b(this.from, this.to);
      h.pointToLocalFrame(e, c, m.from, m.from);
      h.pointToLocalFrame(e, c, m.to, m.to);
      var k = [], n = null, q = null, u = null, r = null, v = d.getIndexOfPosition(m.from.x, m.from.y, k, !1);
      if (v && (n = k[0], q = k[1], u = k[0], r = k[1]), v = d.getIndexOfPosition(m.to.x, m.to.y, k, !1), v && ((null === n || k[0] < n) && (n = k[0]), (null === u || k[0] > u) && (u = k[0]), (null === q || k[1] < q) && (q = k[1]), (null === r || k[1] > r) && (r = k[1])), null !== n) {
        for (m = [], d.getRectMinMax(n, q, u, r, m), n = (m[0], m[1], n); u >= n; n++) {
          for (m = q; r >= m; m++) {
            if (this.result._shouldStop || (d.getConvexTrianglePillar(n, m, !1), h.pointToWorldFrame(e, c, d.pillarOffset, p), this.intersectConvex(d.pillarConvex, c, p, l, y), this.result._shouldStop)) {
              return;
            }
            d.getConvexTrianglePillar(n, m, !0);
            h.pointToWorldFrame(e, c, d.pillarOffset, p);
            this.intersectConvex(d.pillarConvex, c, p, l, y);
          }
        }
      }
    };
    b.prototype[q.types.HEIGHTFIELD] = b.prototype.intersectHeightfield;
    var A = new f, B = new f;
    b.prototype.intersectSphere = function(d, b, c, e) {
      b = this.from;
      var f = this.to, l = Math.pow(f.x - b.x, 2) + Math.pow(f.y - b.y, 2) + Math.pow(f.z - b.z, 2), h = 2 * ((f.x - b.x) * (b.x - c.x) + (f.y - b.y) * (b.y - c.y) + (f.z - b.z) * (b.z - c.z)), p = Math.pow(h, 2) - 4 * l * (Math.pow(b.x - c.x, 2) + Math.pow(b.y - c.y, 2) + Math.pow(b.z - c.z, 2) - Math.pow(d.radius, 2));
      if (!(0 > p)) {
        if (0 === p) {
          b.lerp(f, p, A), A.vsub(c, B), B.normalize(), this.reportIntersection(B, A, d, e, -1);
        } else {
          var m = (-h - Math.sqrt(p)) / (2 * l);
          l = (-h + Math.sqrt(p)) / (2 * l);
          (0 <= m && 1 >= m && (b.lerp(f, m, A), A.vsub(c, B), B.normalize(), this.reportIntersection(B, A, d, e, -1)), this.result._shouldStop) || 0 <= l && 1 >= l && (b.lerp(f, l, A), A.vsub(c, B), B.normalize(), this.reportIntersection(B, A, d, e, -1));
        }
      }
    };
    b.prototype[q.types.SPHERE] = b.prototype.intersectSphere;
    var D = new f, F = (new f, new f, new f);
    b.prototype.intersectConvex = function(b, d, c, f, l) {
      l = l && l.faceList || null;
      for (var h = b.faces, m = b.vertices, k = b.faceNormals, n = this._direction, q = this.from, r = q.distanceTo(this.to), v = l ? l.length : h.length, y = this.result, w = 0; !y._shouldStop && v > w; w++) {
        var A = l ? l[w] : w, B = h[A], C = k[A], E = d, O = c;
        F.copy(m[B[0]]);
        E.vmult(F, F);
        F.vadd(O, F);
        F.vsub(q, F);
        E.vmult(C, D);
        C = n.dot(D);
        if (!(Math.abs(C) < this.precision || (C = D.dot(F) / C, 0 > C))) {
          for (n.mult(C, x), x.vadd(q, x), z.copy(m[B[0]]), E.vmult(z, z), O.vadd(z, z), C = 1; !y._shouldStop && C < B.length - 1; C++) {
            p.copy(m[B[C]]);
            u.copy(m[B[C + 1]]);
            E.vmult(p, p);
            E.vmult(u, u);
            O.vadd(p, p);
            O.vadd(u, u);
            var H = x.distanceTo(q);
            !e(x, z, p, u) && !e(x, p, z, u) || H > r || this.reportIntersection(D, x, b, f, A);
          }
        }
      }
    };
    b.prototype[q.types.CONVEXPOLYHEDRON] = b.prototype.intersectConvex;
    var C = new f, E = new f, H = new f, Q = new f, K = new f, M = new f, L = (new c, []), I = new h;
    b.prototype.intersectTrimesh = function(b, d, c, f, l) {
      l = (l && l.faceList || null, b.indices);
      var m = (b.vertices, b.faceNormals, this.from), k = this.to, n = this._direction;
      I.position.copy(c);
      I.quaternion.copy(d);
      h.vectorToLocalFrame(c, d, n, E);
      h.pointToLocalFrame(c, d, m, H);
      h.pointToLocalFrame(c, d, k, Q);
      m = H.distanceSquared(Q);
      b.tree.rayQuery(this, I, L);
      k = 0;
      for (n = L.length; !this.result._shouldStop && k !== n; k++) {
        var q = L[k];
        b.getNormal(q, C);
        b.getVertex(l[3 * q], z);
        z.vsub(H, F);
        var r = E.dot(C);
        r = C.dot(F) / r;
        0 > r || (E.scale(r, x), x.vadd(H, x), b.getVertex(l[3 * q + 1], p), b.getVertex(l[3 * q + 2], u), r = x.distanceSquared(H), !e(x, p, z, u) && !e(x, z, p, u) || r > m || (h.vectorToWorldFrame(d, C, K), h.pointToWorldFrame(c, d, x, M), this.reportIntersection(K, M, b, f, q)));
      }
      L.length = 0;
    };
    b.prototype[q.types.TRIMESH] = b.prototype.intersectTrimesh;
    b.prototype.reportIntersection = function(d, c, e, f, l) {
      var h = this.from, p = this.to, m = h.distanceTo(c), k = this.result;
      if (!(this.skipBackfaces && 0 < d.dot(this._direction))) {
        switch(k.hitFaceIndex = "undefined" != typeof l ? l : -1, this.mode) {
          case b.ALL:
            this.hasHit = !0;
            k.set(h, p, d, c, e, f, m);
            k.hasHit = !0;
            this.callback(k);
            break;
          case b.CLOSEST:
            (m < k.distance || !k.hasHit) && (this.hasHit = !0, k.hasHit = !0, k.set(h, p, d, c, e, f, m));
            break;
          case b.ANY:
            this.hasHit = !0, k.hasHit = !0, k.set(h, p, d, c, e, f, m), k._shouldStop = !0;
        }
      }
    };
    var P = new f, T = new f;
  }, {"../collision/AABB":3, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/Box":37, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43}], 10:[function(c, k) {
    function b() {
      this.rayFromWorld = new e;
      this.rayToWorld = new e;
      this.hitNormalWorld = new e;
      this.hitPointWorld = new e;
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    }
    var e = c("../math/Vec3");
    k.exports = b;
    b.prototype.reset = function() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    };
    b.prototype.abort = function() {
      this._shouldStop = !0;
    };
    b.prototype.set = function(b, c, e, k, n, m, d) {
      this.rayFromWorld.copy(b);
      this.rayToWorld.copy(c);
      this.hitNormalWorld.copy(e);
      this.hitPointWorld.copy(k);
      this.shape = n;
      this.body = m;
      this.distance = d;
    };
  }, {"../math/Vec3":30}], 11:[function(c, k) {
    function b(b) {
      e.apply(this);
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      var c = this.axisList;
      this._addBodyHandler = function(b) {
        c.push(b.body);
      };
      this._removeBodyHandler = function(b) {
        b = c.indexOf(b.body);
        -1 !== b && c.splice(b, 1);
      };
      b && this.setWorld(b);
    }
    var e = (c("../shapes/Shape"), c("../collision/Broadphase"));
    k.exports = b;
    b.prototype = new e;
    b.prototype.setWorld = function(b) {
      for (var c = this.axisList.length = 0; c < b.bodies.length; c++) {
        this.axisList.push(b.bodies[c]);
      }
      b.removeEventListener("addBody", this._addBodyHandler);
      b.removeEventListener("removeBody", this._removeBodyHandler);
      b.addEventListener("addBody", this._addBodyHandler);
      b.addEventListener("removeBody", this._removeBodyHandler);
      this.world = b;
      this.dirty = !0;
    };
    b.insertionSortX = function(b) {
      for (var c = 1, e = b.length; e > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.x <= f.aabb.lowerBound.x); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.insertionSortY = function(b) {
      for (var c = 1, e = b.length; e > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.y <= f.aabb.lowerBound.y); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.insertionSortZ = function(b) {
      for (var c = 1, e = b.length; e > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.z <= f.aabb.lowerBound.z); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.prototype.collisionPairs = function(c, e, k) {
      var f, h = this.axisList, m = h.length, d = this.axisIndex;
      this.dirty && (this.sortList(), this.dirty = !1);
      for (c = 0; c !== m; c++) {
        var l = h[c];
        for (f = c + 1; m > f; f++) {
          var r = h[f];
          if (this.needBroadphaseCollision(l, r)) {
            if (!b.checkBounds(l, r, d)) {
              break;
            }
            this.intersectionTest(l, r, e, k);
          }
        }
      }
    };
    b.prototype.sortList = function() {
      for (var c = this.axisList, e = this.axisIndex, k = c.length, q = 0; q !== k; q++) {
        var n = c[q];
        n.aabbNeedsUpdate && n.computeAABB();
      }
      0 === e ? b.insertionSortX(c) : 1 === e ? b.insertionSortY(c) : 2 === e && b.insertionSortZ(c);
    };
    b.checkBounds = function(b, c, e) {
      var f, h;
      0 === e ? (f = b.position.x, h = c.position.x) : 1 === e ? (f = b.position.y, h = c.position.y) : 2 === e && (f = b.position.z, h = c.position.z);
      return f + b.boundingRadius > h - c.boundingRadius;
    };
    b.prototype.autoDetectAxis = function() {
      for (var b = 0, c = 0, e = 0, k = 0, n = 0, m = 0, d = this.axisList, l = d.length, v = 1 / l, w = 0; w !== l; w++) {
        var x = d[w], z = x.position.x;
        b += z;
        c += z * z;
        z = x.position.y;
        e += z;
        k += z * z;
        x = x.position.z;
        n += x;
        m += x * x;
      }
      b = c - b * b * v;
      e = k - e * e * v;
      n = m - n * n * v;
      this.axisIndex = b > e ? b > n ? 0 : 2 : e > n ? 1 : 2;
    };
    b.prototype.aabbQuery = function(b, c, e) {
      e = e || [];
      this.dirty && (this.sortList(), this.dirty = !1);
      b = this.axisIndex;
      var f = "x";
      1 === b && (f = "y");
      2 === b && (f = "z");
      b = this.axisList;
      for (f = (c.lowerBound[f], c.upperBound[f], 0); f < b.length; f++) {
        var h = b[f];
        h.aabbNeedsUpdate && h.computeAABB();
        h.aabb.overlaps(c) && e.push(h);
      }
      return e;
    };
  }, {"../collision/Broadphase":5, "../shapes/Shape":43}], 12:[function(c, k) {
    function b(b, c, m) {
      m = m || {};
      var d = "undefined" != typeof m.maxForce ? m.maxForce : 1E6, l = m.pivotA ? m.pivotA.clone() : new r, k = m.pivotB ? m.pivotB.clone() : new r;
      this.axisA = m.axisA ? m.axisA.clone() : new r;
      this.axisB = m.axisB ? m.axisB.clone() : new r;
      e.call(this, b, l, c, k, d);
      this.collideConnected = !!m.collideConnected;
      this.angle = "undefined" != typeof m.angle ? m.angle : 0;
      l = this.coneEquation = new f(b, c, m);
      b = this.twistEquation = new h(b, c, m);
      this.twistAngle = "undefined" != typeof m.twistAngle ? m.twistAngle : 0;
      l.maxForce = 0;
      l.minForce = -d;
      b.maxForce = 0;
      b.minForce = -d;
      this.equations.push(l, b);
    }
    k.exports = b;
    var e = (c("./Constraint"), c("./PointToPointConstraint")), f = c("../equations/ConeEquation"), h = c("../equations/RotationalEquation"), r = (c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new e;
    b.constructor = b;
    new r;
    new r;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, f = this.coneEquation, d = this.twistEquation;
      e.prototype.update.call(this);
      b.vectorToWorldFrame(this.axisA, f.axisA);
      c.vectorToWorldFrame(this.axisB, f.axisB);
      this.axisA.tangents(d.axisA, d.axisA);
      b.vectorToWorldFrame(d.axisA, d.axisA);
      this.axisB.tangents(d.axisB, d.axisB);
      c.vectorToWorldFrame(d.axisB, d.axisB);
      f.angle = this.angle;
      d.maxAngle = this.twistAngle;
    };
  }, {"../equations/ConeEquation":18, "../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 13:[function(c, k) {
    function b(c, h, k) {
      k = e.defaults(k, {collideConnected:!0, wakeUpBodies:!0});
      this.equations = [];
      this.bodyA = c;
      this.bodyB = h;
      this.id = b.idCounter++;
      this.collideConnected = k.collideConnected;
      k.wakeUpBodies && (c && c.wakeUp(), h && h.wakeUp());
    }
    k.exports = b;
    var e = c("../utils/Utils");
    b.prototype.update = function() {
      throw Error("method update() not implmemented in this Constraint subclass!");
    };
    b.prototype.enable = function() {
      for (var b = this.equations, c = 0; c < b.length; c++) {
        b[c].enabled = !0;
      }
    };
    b.prototype.disable = function() {
      for (var b = this.equations, c = 0; c < b.length; c++) {
        b[c].enabled = !1;
      }
    };
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 14:[function(c, k) {
    function b(b, c, k, n) {
      e.call(this, b, c);
      "undefined" == typeof k && (k = b.position.distanceTo(c.position));
      "undefined" == typeof n && (n = 1E6);
      this.distance = k;
      b = this.distanceEquation = new f(b, c);
      this.equations.push(b);
      b.minForce = -n;
      b.maxForce = n;
    }
    k.exports = b;
    var e = c("./Constraint"), f = c("../equations/ContactEquation");
    b.prototype = new e;
    b.prototype.update = function() {
      var b = this.distanceEquation, c = .5 * this.distance, e = b.ni;
      this.bodyB.position.vsub(this.bodyA.position, e);
      e.normalize();
      e.mult(c, b.ri);
      e.mult(-c, b.rj);
    };
  }, {"../equations/ContactEquation":19, "./Constraint":13}], 15:[function(c, k) {
    function b(b, d, c) {
      c = c || {};
      var l = "undefined" != typeof c.maxForce ? c.maxForce : 1E6, m = c.pivotA ? c.pivotA.clone() : new r, k = c.pivotB ? c.pivotB.clone() : new r;
      e.call(this, b, m, d, k, l);
      (this.axisA = c.axisA ? c.axisA.clone() : new r(1, 0, 0)).normalize();
      (this.axisB = c.axisB ? c.axisB.clone() : new r(1, 0, 0)).normalize();
      m = this.rotationalEquation1 = new f(b, d, c);
      c = this.rotationalEquation2 = new f(b, d, c);
      b = this.motorEquation = new h(b, d, l);
      b.enabled = !1;
      this.equations.push(m, c, b);
    }
    k.exports = b;
    var e = (c("./Constraint"), c("./PointToPointConstraint")), f = c("../equations/RotationalEquation"), h = c("../equations/RotationalMotorEquation"), r = (c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new e;
    b.constructor = b;
    b.prototype.enableMotor = function() {
      this.motorEquation.enabled = !0;
    };
    b.prototype.disableMotor = function() {
      this.motorEquation.enabled = !1;
    };
    b.prototype.setMotorSpeed = function(b) {
      this.motorEquation.targetVelocity = b;
    };
    b.prototype.setMotorMaxForce = function(b) {
      this.motorEquation.maxForce = b;
      this.motorEquation.minForce = -b;
    };
    var q = new r, n = new r;
    b.prototype.update = function() {
      var b = this.bodyA, d = this.bodyB, c = this.motorEquation, f = this.rotationalEquation1, h = this.rotationalEquation2, k = this.axisA, r = this.axisB;
      e.prototype.update.call(this);
      b.quaternion.vmult(k, q);
      d.quaternion.vmult(r, n);
      q.tangents(f.axisA, h.axisA);
      f.axisB.copy(n);
      h.axisB.copy(n);
      this.motorEquation.enabled && (b.quaternion.vmult(this.axisA, c.axisA), d.quaternion.vmult(this.axisB, c.axisB));
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 16:[function(c, k) {
    function b(b, c, k) {
      k = k || {};
      var m = "undefined" != typeof k.maxForce ? k.maxForce : 1E6, d = new h, l = new h, n = new h;
      b.position.vadd(c.position, n);
      n.scale(.5, n);
      c.pointToLocalFrame(n, l);
      b.pointToLocalFrame(n, d);
      e.call(this, b, d, c, l, m);
      m = this.rotationalEquation1 = new f(b, c, k);
      d = this.rotationalEquation2 = new f(b, c, k);
      b = this.rotationalEquation3 = new f(b, c, k);
      this.equations.push(m, d, b);
    }
    k.exports = b;
    var e = (c("./Constraint"), c("./PointToPointConstraint")), f = c("../equations/RotationalEquation"), h = (c("../equations/RotationalMotorEquation"), c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new e;
    b.constructor = b;
    new h;
    new h;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, f = (this.motorEquation, this.rotationalEquation1), m = this.rotationalEquation2, d = this.rotationalEquation3;
      e.prototype.update.call(this);
      b.vectorToWorldFrame(h.UNIT_X, f.axisA);
      c.vectorToWorldFrame(h.UNIT_Y, f.axisB);
      b.vectorToWorldFrame(h.UNIT_Y, m.axisA);
      c.vectorToWorldFrame(h.UNIT_Z, m.axisB);
      b.vectorToWorldFrame(h.UNIT_Z, d.axisA);
      c.vectorToWorldFrame(h.UNIT_X, d.axisB);
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 17:[function(c, k) {
    function b(b, c, k, m, d) {
      e.call(this, b, k);
      d = "undefined" != typeof d ? d : 1E6;
      this.pivotA = c ? c.clone() : new h;
      this.pivotB = m ? m.clone() : new h;
      c = this.equationX = new f(b, k);
      m = this.equationY = new f(b, k);
      b = this.equationZ = new f(b, k);
      this.equations.push(c, m, b);
      c.minForce = m.minForce = b.minForce = -d;
      c.maxForce = m.maxForce = b.maxForce = d;
      c.ni.set(1, 0, 0);
      m.ni.set(0, 1, 0);
      b.ni.set(0, 0, 1);
    }
    k.exports = b;
    var e = c("./Constraint"), f = c("../equations/ContactEquation"), h = c("../math/Vec3");
    b.prototype = new e;
    b.prototype.update = function() {
      var b = this.bodyB, c = this.equationX, e = this.equationY, f = this.equationZ;
      this.bodyA.quaternion.vmult(this.pivotA, c.ri);
      b.quaternion.vmult(this.pivotB, c.rj);
      e.ri.copy(c.ri);
      e.rj.copy(c.rj);
      f.ri.copy(c.ri);
      f.rj.copy(c.rj);
    };
  }, {"../equations/ContactEquation":19, "../math/Vec3":30, "./Constraint":13}], 18:[function(c, k) {
    function b(b, c, h) {
      h = h || {};
      var d = "undefined" != typeof h.maxForce ? h.maxForce : 1E6;
      f.call(this, b, c, -d, d);
      this.axisA = h.axisA ? h.axisA.clone() : new e(1, 0, 0);
      this.axisB = h.axisB ? h.axisB.clone() : new e(0, 1, 0);
      this.angle = "undefined" != typeof h.angle ? h.angle : 0;
    }
    k.exports = b;
    var e = c("../math/Vec3"), f = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    var h = new e, r = new e;
    b.prototype.computeB = function(b) {
      var c = this.a, e = this.b, d = this.axisA, f = this.axisB, k = this.jacobianElementA, q = this.jacobianElementB;
      d.cross(f, h);
      f.cross(d, r);
      k.rotational.copy(r);
      q.rotational.copy(h);
      d = Math.cos(this.angle) - d.dot(f);
      f = this.computeGW();
      k = this.computeGiMf();
      return -d * c - f * e - b * k;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 19:[function(c, k) {
    function b(b, d, c) {
      e.call(this, b, d, 0, "undefined" != typeof c ? c : 1E6);
      this.restitution = 0;
      this.ri = new f;
      this.rj = new f;
      this.ni = new f;
    }
    k.exports = b;
    var e = c("./Equation"), f = c("../math/Vec3");
    c("../math/Mat3");
    b.prototype = new e;
    b.prototype.constructor = b;
    var h = new f, r = new f, q = new f;
    b.prototype.computeB = function(b) {
      var d = this.a, c = this.b, e = this.bi, f = this.bj, l = this.ri, m = this.rj, k = e.velocity, n = e.angularVelocity, v = (e.force, e.torque, f.velocity), w = f.angularVelocity, E = (f.force, f.torque, q), H = this.jacobianElementA, Q = this.jacobianElementB, K = this.ni;
      l.cross(K, h);
      m.cross(K, r);
      K.negate(H.spatial);
      h.negate(H.rotational);
      Q.spatial.copy(K);
      Q.rotational.copy(r);
      E.copy(f.position);
      E.vadd(m, E);
      E.vsub(e.position, E);
      E.vsub(l, E);
      e = K.dot(E);
      f = this.restitution + 1;
      k = f * v.dot(K) - f * k.dot(K) + w.dot(r) - n.dot(h);
      n = this.computeGiMf();
      return -e * d - k * c - b * n;
    };
    var n = new f, m = new f, d = new f, l = new f, v = new f;
    b.prototype.getImpactVelocityAlongNormal = function() {
      return this.bi.position.vadd(this.ri, d), this.bj.position.vadd(this.rj, l), this.bi.getVelocityAtWorldPoint(d, n), this.bj.getVelocityAtWorldPoint(l, m), n.vsub(m, v), this.ni.dot(v);
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 20:[function(c, k) {
    function b(d, c, f, h) {
      this.id = b.id++;
      this.minForce = "undefined" == typeof f ? -1E6 : f;
      this.maxForce = "undefined" == typeof h ? 1E6 : h;
      this.bi = d;
      this.bj = c;
      this.eps = this.b = this.a = 0;
      this.jacobianElementA = new e;
      this.jacobianElementB = new e;
      this.enabled = !0;
      this.setSpookParams(1E7, 4, 1 / 60);
    }
    k.exports = b;
    var e = c("../math/JacobianElement");
    c = c("../math/Vec3");
    b.prototype.constructor = b;
    b.id = 0;
    b.prototype.setSpookParams = function(b, d, c) {
      this.a = 4 / (c * (1 + 4 * d));
      this.b = 4 * d / (1 + 4 * d);
      this.eps = 4 / (c * c * b * (1 + 4 * d));
    };
    b.prototype.computeB = function(b, d, c) {
      var e = this.computeGW(), f = this.computeGq(), l = this.computeGiMf();
      return -f * b - e * d - l * c;
    };
    b.prototype.computeGq = function() {
      var b = this.jacobianElementB, d = this.bj.position;
      return this.jacobianElementA.spatial.dot(this.bi.position) + b.spatial.dot(d);
    };
    var f = new c;
    b.prototype.computeGW = function() {
      var b = this.jacobianElementB, d = this.bi, c = this.bj, e = c.velocity;
      c = c.angularVelocity || f;
      return this.jacobianElementA.multiplyVectors(d.velocity, d.angularVelocity || f) + b.multiplyVectors(e, c);
    };
    b.prototype.computeGWlambda = function() {
      var b = this.jacobianElementB, d = this.bi, c = this.bj, e = c.vlambda;
      c = c.wlambda || f;
      return this.jacobianElementA.multiplyVectors(d.vlambda, d.wlambda || f) + b.multiplyVectors(e, c);
    };
    var h = new c, r = new c, q = new c, n = new c;
    b.prototype.computeGiMf = function() {
      var b = this.jacobianElementA, d = this.jacobianElementB, c = this.bi, e = this.bj, f = c.force, p = c.torque, m = e.force, k = e.torque, A = c.invMassSolve, B = e.invMassSolve;
      return c.invInertiaWorldSolve ? c.invInertiaWorldSolve.vmult(p, q) : q.set(0, 0, 0), e.invInertiaWorldSolve ? e.invInertiaWorldSolve.vmult(k, n) : n.set(0, 0, 0), f.mult(A, h), m.mult(B, r), b.multiplyVectors(h, q) + d.multiplyVectors(r, n);
    };
    var m = new c;
    b.prototype.computeGiMGt = function() {
      var b = this.jacobianElementA, d = this.jacobianElementB, c = this.bi, e = this.bj, f = c.invInertiaWorldSolve, h = e.invInertiaWorldSolve;
      c = c.invMassSolve + e.invMassSolve;
      return f && (f.vmult(b.rotational, m), c += m.dot(b.rotational)), h && (h.vmult(d.rotational, m), c += m.dot(d.rotational)), c;
    };
    var d = new c;
    new c;
    new c;
    new c;
    new c;
    new c;
    b.prototype.addToWlambda = function(b) {
      var c = this.jacobianElementA, e = this.jacobianElementB, f = this.bi, l = this.bj;
      c.spatial.mult(f.invMassSolve * b, d);
      f.vlambda.vadd(d, f.vlambda);
      e.spatial.mult(l.invMassSolve * b, d);
      l.vlambda.vadd(d, l.vlambda);
      f.invInertiaWorldSolve && (f.invInertiaWorldSolve.vmult(c.rotational, d), d.mult(b, d), f.wlambda.vadd(d, f.wlambda));
      l.invInertiaWorldSolve && (l.invInertiaWorldSolve.vmult(e.rotational, d), d.mult(b, d), l.wlambda.vadd(d, l.wlambda));
    };
    b.prototype.computeC = function() {
      return this.computeGiMGt() + this.eps;
    };
  }, {"../math/JacobianElement":26, "../math/Vec3":30}], 21:[function(c, k) {
    function b(b, c, h) {
      e.call(this, b, c, -h, h);
      this.ri = new f;
      this.rj = new f;
      this.t = new f;
    }
    k.exports = b;
    var e = c("./Equation"), f = c("../math/Vec3");
    c("../math/Mat3");
    b.prototype = new e;
    b.prototype.constructor = b;
    var h = new f, r = new f;
    b.prototype.computeB = function(b) {
      var c = (this.a, this.b), e = (this.bi, this.bj, this.ri), d = this.rj, f = this.t;
      e.cross(f, h);
      d.cross(f, r);
      e = this.jacobianElementA;
      d = this.jacobianElementB;
      f.negate(e.spatial);
      h.negate(e.rotational);
      d.spatial.copy(f);
      d.rotational.copy(r);
      f = this.computeGW();
      e = this.computeGiMf();
      return -f * c - b * e;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 22:[function(c, k) {
    function b(b, c, h) {
      h = h || {};
      var d = "undefined" != typeof h.maxForce ? h.maxForce : 1E6;
      f.call(this, b, c, -d, d);
      this.axisA = h.axisA ? h.axisA.clone() : new e(1, 0, 0);
      this.axisB = h.axisB ? h.axisB.clone() : new e(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }
    k.exports = b;
    var e = c("../math/Vec3"), f = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    var h = new e, r = new e;
    b.prototype.computeB = function(b) {
      var c = this.a, e = this.b, d = this.axisA, f = this.axisB, k = this.jacobianElementA, q = this.jacobianElementB;
      d.cross(f, h);
      f.cross(d, r);
      k.rotational.copy(r);
      q.rotational.copy(h);
      d = Math.cos(this.maxAngle) - d.dot(f);
      f = this.computeGW();
      k = this.computeGiMf();
      return -d * c - f * e - b * k;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 23:[function(c, k) {
    function b(b, c, k) {
      k = "undefined" != typeof k ? k : 1E6;
      f.call(this, b, c, -k, k);
      this.axisA = new e;
      this.axisB = new e;
      this.targetVelocity = 0;
    }
    k.exports = b;
    var e = c("../math/Vec3"), f = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.computeB = function(b) {
      var c = (this.a, this.b), e = (this.bi, this.bj, this.axisA), f = this.axisB, h = this.jacobianElementB;
      this.jacobianElementA.rotational.copy(e);
      f.negate(h.rotational);
      e = this.computeGW() - this.targetVelocity;
      f = this.computeGiMf();
      return -e * c - b * f;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 24:[function(c, k) {
    function b(c, h, k) {
      k = e.defaults(k, {friction:.3, restitution:.3, contactEquationStiffness:1E7, contactEquationRelaxation:3, frictionEquationStiffness:1E7, frictionEquationRelaxation:3});
      this.id = b.idCounter++;
      this.materials = [c, h];
      this.friction = k.friction;
      this.restitution = k.restitution;
      this.contactEquationStiffness = k.contactEquationStiffness;
      this.contactEquationRelaxation = k.contactEquationRelaxation;
      this.frictionEquationStiffness = k.frictionEquationStiffness;
      this.frictionEquationRelaxation = k.frictionEquationRelaxation;
    }
    var e = c("../utils/Utils");
    k.exports = b;
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 25:[function(c, k) {
    function b(c) {
      var e = "";
      c = c || {};
      "string" == typeof c ? (e = c, c = {}) : "object" == typeof c && (e = "");
      this.name = e;
      this.id = b.idCounter++;
      this.friction = "undefined" != typeof c.friction ? c.friction : -1;
      this.restitution = "undefined" != typeof c.restitution ? c.restitution : -1;
    }
    k.exports = b;
    b.idCounter = 0;
  }, {}], 26:[function(c, k) {
    function b() {
      this.spatial = new e;
      this.rotational = new e;
    }
    k.exports = b;
    var e = c("./Vec3");
    b.prototype.multiplyElement = function(b) {
      return b.spatial.dot(this.spatial) + b.rotational.dot(this.rotational);
    };
    b.prototype.multiplyVectors = function(b, c) {
      return b.dot(this.spatial) + c.dot(this.rotational);
    };
  }, {"./Vec3":30}], 27:[function(c, k) {
    function b(b) {
      this.elements = b ? b : [0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    k.exports = b;
    var e = c("./Vec3");
    b.prototype.identity = function() {
      var b = this.elements;
      b[0] = 1;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 1;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 1;
    };
    b.prototype.setZero = function() {
      var b = this.elements;
      b[0] = 0;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 0;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 0;
    };
    b.prototype.setTrace = function(b) {
      var c = this.elements;
      c[0] = b.x;
      c[4] = b.y;
      c[8] = b.z;
    };
    b.prototype.getTrace = function(b) {
      b = b || new e;
      var c = this.elements;
      b.x = c[0];
      b.y = c[4];
      b.z = c[8];
    };
    b.prototype.vmult = function(b, c) {
      c = c || new e;
      var f = this.elements, h = b.x, k = b.y;
      b = b.z;
      return c.x = f[0] * h + f[1] * k + f[2] * b, c.y = f[3] * h + f[4] * k + f[5] * b, c.z = f[6] * h + f[7] * k + f[8] * b, c;
    };
    b.prototype.smult = function(b) {
      for (var c = 0; c < this.elements.length; c++) {
        this.elements[c] *= b;
      }
    };
    b.prototype.mmult = function(c, e) {
      e = e || new b;
      for (var f = 0; 3 > f; f++) {
        for (var h = 0; 3 > h; h++) {
          for (var k = 0, m = 0; 3 > m; m++) {
            k += c.elements[f + 3 * m] * this.elements[m + 3 * h];
          }
          e.elements[f + 3 * h] = k;
        }
      }
      return e;
    };
    b.prototype.scale = function(c, e) {
      e = e || new b;
      for (var f = this.elements, h = e.elements, k = 0; 3 !== k; k++) {
        h[3 * k] = c.x * f[3 * k], h[3 * k + 1] = c.y * f[3 * k + 1], h[3 * k + 2] = c.z * f[3 * k + 2];
      }
      return e;
    };
    b.prototype.solve = function(b, c) {
      c = c || new e;
      for (var f = [], h = 0; 12 > h; h++) {
        f.push(0);
      }
      var k;
      for (h = 0; 3 > h; h++) {
        for (k = 0; 3 > k; k++) {
          f[h + 4 * k] = this.elements[h + 3 * k];
        }
      }
      f[3] = b.x;
      f[7] = b.y;
      f[11] = b.z;
      var m = 3, d = m;
      do {
        if (h = d - m, 0 === f[h + 4 * h]) {
          for (k = h + 1; d > k; k++) {
            if (0 !== f[h + 4 * k]) {
              var l = 4;
              do {
                var v = 4 - l;
                f[v + 4 * h] += f[v + 4 * k];
              } while (--l);
              break;
            }
          }
        }
        if (0 !== f[h + 4 * h]) {
          for (k = h + 1; d > k; k++) {
            var w = f[h + 4 * k] / f[h + 4 * h];
            l = 4;
            do {
              v = 4 - l, f[v + 4 * k] = h >= v ? 0 : f[v + 4 * k] - f[v + 4 * h] * w;
            } while (--l);
          }
        }
      } while (--m);
      if (c.z = f[11] / f[10], c.y = (f[7] - f[6] * c.z) / f[5], c.x = (f[3] - f[2] * c.z - f[1] * c.y) / f[0], isNaN(c.x) || isNaN(c.y) || isNaN(c.z) || 1 / 0 === c.x || 1 / 0 === c.y || 1 / 0 === c.z) {
        throw "Could not solve equation! Got x=[" + c.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
      }
      return c;
    };
    b.prototype.e = function(b, c, e) {
      return void 0 === e ? this.elements[c + 3 * b] : void(this.elements[c + 3 * b] = e);
    };
    b.prototype.copy = function(b) {
      for (var c = 0; c < b.elements.length; c++) {
        this.elements[c] = b.elements[c];
      }
      return this;
    };
    b.prototype.toString = function() {
      for (var b = "", c = 0; 9 > c; c++) {
        b += this.elements[c] + ",";
      }
      return b;
    };
    b.prototype.reverse = function(c) {
      c = c || new b;
      for (var e = [], f = 0; 18 > f; f++) {
        e.push(0);
      }
      var k;
      for (f = 0; 3 > f; f++) {
        for (k = 0; 3 > k; k++) {
          e[f + 6 * k] = this.elements[f + 3 * k];
        }
      }
      e[3] = 1;
      e[9] = 0;
      e[15] = 0;
      e[4] = 0;
      e[10] = 1;
      e[16] = 0;
      e[5] = 0;
      e[11] = 0;
      e[17] = 1;
      var n = 3, m = n;
      do {
        if (f = m - n, 0 === e[f + 6 * f]) {
          for (k = f + 1; m > k; k++) {
            if (0 !== e[f + 6 * k]) {
              var d = 6;
              do {
                var l = 6 - d;
                e[l + 6 * f] += e[l + 6 * k];
              } while (--d);
              break;
            }
          }
        }
        if (0 !== e[f + 6 * f]) {
          for (k = f + 1; m > k; k++) {
            var v = e[f + 6 * k] / e[f + 6 * f];
            d = 6;
            do {
              l = 6 - d, e[l + 6 * k] = f >= l ? 0 : e[l + 6 * k] - e[l + 6 * f] * v;
            } while (--d);
          }
        }
      } while (--n);
      f = 2;
      do {
        k = f - 1;
        do {
          v = e[f + 6 * k] / e[f + 6 * f];
          d = 6;
          do {
            l = 6 - d, e[l + 6 * k] -= e[l + 6 * f] * v;
          } while (--d);
        } while (k--);
      } while (--f);
      f = 2;
      do {
        v = 1 / e[f + 6 * f];
        d = 6;
        do {
          l = 6 - d, e[l + 6 * f] *= v;
        } while (--d);
      } while (f--);
      f = 2;
      do {
        k = 2;
        do {
          if (l = e[3 + k + 6 * f], isNaN(l) || 1 / 0 === l) {
            throw "Could not reverse! A=[" + this.toString() + "]";
          }
          c.e(f, k, l);
        } while (k--);
      } while (f--);
      return c;
    };
    b.prototype.setRotationFromQuaternion = function(b) {
      var c = b.x, e = b.y, f = b.z, k = b.w, m = c + c, d = e + e, l = f + f;
      b = c * m;
      var v = c * d;
      c *= l;
      var w = e * d;
      e *= l;
      f *= l;
      m *= k;
      d *= k;
      k *= l;
      l = this.elements;
      return l[0] = 1 - (w + f), l[1] = v - k, l[2] = c + d, l[3] = v + k, l[4] = 1 - (b + f), l[5] = e - m, l[6] = c - d, l[7] = e + m, l[8] = 1 - (b + w), this;
    };
    b.prototype.transpose = function(c) {
      c = c || new b;
      for (var e = c.elements, f = this.elements, k = 0; 3 !== k; k++) {
        for (var n = 0; 3 !== n; n++) {
          e[3 * k + n] = f[3 * n + k];
        }
      }
      return c;
    };
  }, {"./Vec3":30}], 28:[function(c, k) {
    function b(b, d, c, e) {
      this.x = void 0 !== b ? b : 0;
      this.y = void 0 !== d ? d : 0;
      this.z = void 0 !== c ? c : 0;
      this.w = void 0 !== e ? e : 1;
    }
    k.exports = b;
    var e = c("./Vec3");
    b.prototype.set = function(b, d, c, e) {
      this.x = b;
      this.y = d;
      this.z = c;
      this.w = e;
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z + "," + this.w;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z, this.w];
    };
    b.prototype.setFromAxisAngle = function(b, d) {
      var c = Math.sin(.5 * d);
      this.x = b.x * c;
      this.y = b.y * c;
      this.z = b.z * c;
      this.w = Math.cos(.5 * d);
    };
    b.prototype.toAxisAngle = function(b) {
      b = b || new e;
      this.normalize();
      var d = 2 * Math.acos(this.w), c = Math.sqrt(1 - this.w * this.w);
      return .001 > c ? (b.x = this.x, b.y = this.y, b.z = this.z) : (b.x = this.x / c, b.y = this.y / c, b.z = this.z / c), [b, d];
    };
    var f = new e, h = new e;
    b.prototype.setFromVectors = function(b, d) {
      if (b.isAntiparallelTo(d)) {
        b.tangents(f, h), this.setFromAxisAngle(f, Math.PI);
      } else {
        var c = b.cross(d);
        this.x = c.x;
        this.y = c.y;
        this.z = c.z;
        this.w = Math.sqrt(Math.pow(b.norm(), 2) * Math.pow(d.norm(), 2)) + b.dot(d);
        this.normalize();
      }
    };
    var r = new e, q = new e, n = new e;
    b.prototype.mult = function(c, d) {
      d = d || new b;
      var e = this.w;
      return r.set(this.x, this.y, this.z), q.set(c.x, c.y, c.z), d.w = e * c.w - r.dot(q), r.cross(q, n), d.x = e * q.x + c.w * r.x + n.x, d.y = e * q.y + c.w * r.y + n.y, d.z = e * q.z + c.w * r.z + n.z, d;
    };
    b.prototype.inverse = function(c) {
      var d = this.x, e = this.y, f = this.z, h = this.w;
      c = c || new b;
      this.conjugate(c);
      d = 1 / (d * d + e * e + f * f + h * h);
      return c.x *= d, c.y *= d, c.z *= d, c.w *= d, c;
    };
    b.prototype.conjugate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c.w = this.w, c;
    };
    b.prototype.normalize = function() {
      var b = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (b = 1 / b, this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.normalizeFast = function() {
      var b = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2;
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.vmult = function(b, d) {
      d = d || new e;
      var c = b.x, f = b.y, h = b.z;
      b = this.x;
      var k = this.y, m = this.z, p = this.w, n = p * c + k * h - m * f, q = p * f + m * c - b * h, r = p * h + b * f - k * c;
      c = -b * c - k * f - m * h;
      return d.x = n * p + c * -b + q * -m - r * -k, d.y = q * p + c * -k + r * -b - n * -m, d.z = r * p + c * -m + n * -k - q * -b, d;
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this.w = b.w, this;
    };
    b.prototype.toEuler = function(b, d) {
      d = d || "YZX";
      var c, e, f, h = this.x, k = this.y, p = this.z, m = this.w;
      switch(d) {
        case "YZX":
          d = h * k + p * m;
          if (.499 < d && (c = 2 * Math.atan2(h, m), e = Math.PI / 2, f = 0), -.499 > d && (c = -2 * Math.atan2(h, m), e = -Math.PI / 2, f = 0), isNaN(c)) {
            f = p * p, c = Math.atan2(2 * k * m - 2 * h * p, 1 - 2 * k * k - 2 * f), e = Math.asin(2 * d), f = Math.atan2(2 * h * m - 2 * k * p, 1 - 2 * h * h - 2 * f);
          }
          break;
        default:
          throw Error("Euler order " + d + " not supported yet.");
      }
      b.y = c;
      b.z = e;
      b.x = f;
    };
    b.prototype.setFromEuler = function(b, d, c, e) {
      e = e || "XYZ";
      var f = Math.cos(b / 2), l = Math.cos(d / 2), h = Math.cos(c / 2);
      b = Math.sin(b / 2);
      d = Math.sin(d / 2);
      c = Math.sin(c / 2);
      return "XYZ" === e ? (this.x = b * l * h + f * d * c, this.y = f * d * h - b * l * c, this.z = f * l * c + b * d * h, this.w = f * l * h - b * d * c) : "YXZ" === e ? (this.x = b * l * h + f * d * c, this.y = f * d * h - b * l * c, this.z = f * l * c - b * d * h, this.w = f * l * h + b * d * c) : "ZXY" === e ? (this.x = b * l * h - f * d * c, this.y = f * d * h + b * l * c, this.z = f * l * c + b * d * h, this.w = f * l * h - b * d * c) : "ZYX" === e ? (this.x = b * l * h - f * d * c, this.y = 
      f * d * h + b * l * c, this.z = f * l * c - b * d * h, this.w = f * l * h + b * d * c) : "YZX" === e ? (this.x = b * l * h + f * d * c, this.y = f * d * h + b * l * c, this.z = f * l * c - b * d * h, this.w = f * l * h - b * d * c) : "XZY" === e && (this.x = b * l * h - f * d * c, this.y = f * d * h - b * l * c, this.z = f * l * c + b * d * h, this.w = f * l * h + b * d * c), this;
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z, this.w);
    };
  }, {"./Vec3":30}], 29:[function(c, k) {
    function b(b) {
      b = b || {};
      this.position = new e;
      b.position && this.position.copy(b.position);
      this.quaternion = new f;
      b.quaternion && this.quaternion.copy(b.quaternion);
    }
    var e = c("./Vec3"), f = c("./Quaternion");
    k.exports = b;
    var h = new f;
    b.pointToLocalFrame = function(b, c, f, k) {
      k = k || new e;
      return f.vsub(b, k), c.conjugate(h), h.vmult(k, k), k;
    };
    b.prototype.pointToLocal = function(c, e) {
      return b.pointToLocalFrame(this.position, this.quaternion, c, e);
    };
    b.pointToWorldFrame = function(b, c, f, h) {
      h = h || new e;
      return c.vmult(f, h), h.vadd(b, h), h;
    };
    b.prototype.pointToWorld = function(c, e) {
      return b.pointToWorldFrame(this.position, this.quaternion, c, e);
    };
    b.prototype.vectorToWorldFrame = function(b, c) {
      c = c || new e;
      return this.quaternion.vmult(b, c), c;
    };
    b.vectorToWorldFrame = function(b, c, e) {
      return b.vmult(c, e), e;
    };
    b.vectorToLocalFrame = function(b, c, f, h) {
      h = h || new e;
      return c.w *= -1, c.vmult(f, h), c.w *= -1, h;
    };
  }, {"./Quaternion":28, "./Vec3":30}], 30:[function(c, k) {
    function b(b, c, e) {
      this.x = b || 0;
      this.y = c || 0;
      this.z = e || 0;
    }
    k.exports = b;
    var e = c("./Mat3");
    b.ZERO = new b(0, 0, 0);
    b.UNIT_X = new b(1, 0, 0);
    b.UNIT_Y = new b(0, 1, 0);
    b.UNIT_Z = new b(0, 0, 1);
    b.prototype.cross = function(c, e) {
      var f = c.x, d = c.y;
      c = c.z;
      var h = this.x, k = this.y, n = this.z;
      return e = e || new b, e.x = k * c - n * d, e.y = n * f - h * c, e.z = h * d - k * f, e;
    };
    b.prototype.set = function(b, c, e) {
      return this.x = b, this.y = c, this.z = e, this;
    };
    b.prototype.setZero = function() {
      this.x = this.y = this.z = 0;
    };
    b.prototype.vadd = function(c, e) {
      return e ? (e.x = c.x + this.x, e.y = c.y + this.y, e.z = c.z + this.z, void 0) : new b(this.x + c.x, this.y + c.y, this.z + c.z);
    };
    b.prototype.vsub = function(c, e) {
      return e ? (e.x = this.x - c.x, e.y = this.y - c.y, e.z = this.z - c.z, void 0) : new b(this.x - c.x, this.y - c.y, this.z - c.z);
    };
    b.prototype.crossmat = function() {
      return new e([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    };
    b.prototype.normalize = function() {
      var b = this.x, c = this.y, e = this.z;
      b = Math.sqrt(b * b + c * c + e * e);
      0 < b ? (c = 1 / b, this.x *= c, this.y *= c, this.z *= c) : this.z = this.y = this.x = 0;
      return b;
    };
    b.prototype.unit = function(c) {
      c = c || new b;
      var e = this.x, f = this.y, d = this.z, h = Math.sqrt(e * e + f * f + d * d);
      return 0 < h ? (h = 1 / h, c.x = e * h, c.y = f * h, c.z = d * h) : (c.x = 1, c.y = 0, c.z = 0), c;
    };
    b.prototype.norm = function() {
      var b = this.x, c = this.y, e = this.z;
      return Math.sqrt(b * b + c * c + e * e);
    };
    b.prototype.length = b.prototype.norm;
    b.prototype.norm2 = function() {
      return this.dot(this);
    };
    b.prototype.lengthSquared = b.prototype.norm2;
    b.prototype.distanceTo = function(b) {
      var c = this.x, e = this.y, d = this.z, f = b.x, h = b.y;
      b = b.z;
      return Math.sqrt((f - c) * (f - c) + (h - e) * (h - e) + (b - d) * (b - d));
    };
    b.prototype.distanceSquared = function(b) {
      var c = this.x, e = this.y, d = this.z, f = b.x, h = b.y;
      b = b.z;
      return (f - c) * (f - c) + (h - e) * (h - e) + (b - d) * (b - d);
    };
    b.prototype.mult = function(c, e) {
      e = e || new b;
      var f = this.y, d = this.z;
      return e.x = c * this.x, e.y = c * f, e.z = c * d, e;
    };
    b.prototype.scale = b.prototype.mult;
    b.prototype.dot = function(b) {
      return this.x * b.x + this.y * b.y + this.z * b.z;
    };
    b.prototype.isZero = function() {
      return 0 === this.x && 0 === this.y && 0 === this.z;
    };
    b.prototype.negate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c;
    };
    var f = new b, h = new b;
    b.prototype.tangents = function(b, c) {
      var e = this.norm();
      0 < e ? (e = 1 / e, f.set(this.x * e, this.y * e, this.z * e), .9 > Math.abs(f.x) ? (h.set(1, 0, 0), f.cross(h, b)) : (h.set(0, 1, 0), f.cross(h, b)), f.cross(b, c)) : (b.set(1, 0, 0), c.set(0, 1, 0));
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z];
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this;
    };
    b.prototype.lerp = function(b, c, e) {
      var d = this.x, f = this.y, h = this.z;
      e.x = d + (b.x - d) * c;
      e.y = f + (b.y - f) * c;
      e.z = h + (b.z - h) * c;
    };
    b.prototype.almostEquals = function(b, c) {
      return void 0 === c && (c = 1E-6), Math.abs(this.x - b.x) > c || Math.abs(this.y - b.y) > c || Math.abs(this.z - b.z) > c ? !1 : !0;
    };
    b.prototype.almostZero = function(b) {
      return void 0 === b && (b = 1E-6), Math.abs(this.x) > b || Math.abs(this.y) > b || Math.abs(this.z) > b ? !1 : !0;
    };
    var r = new b;
    b.prototype.isAntiparallelTo = function(b, c) {
      return this.negate(r), r.almostEquals(b, c);
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z);
    };
  }, {"./Mat3":27}], 31:[function(c, k) {
    function b(d) {
      d = d || {};
      e.apply(this);
      this.id = b.idCounter++;
      this.postStep = this.preStep = this.world = null;
      this.vlambda = new f;
      this.collisionFilterGroup = "number" == typeof d.collisionFilterGroup ? d.collisionFilterGroup : 1;
      this.collisionFilterMask = "number" == typeof d.collisionFilterMask ? d.collisionFilterMask : 1;
      this.collisionResponse = !0;
      this.position = new f;
      d.position && this.position.copy(d.position);
      this.previousPosition = new f;
      this.initPosition = new f;
      this.velocity = new f;
      d.velocity && this.velocity.copy(d.velocity);
      this.initVelocity = new f;
      this.force = new f;
      var c = "number" == typeof d.mass ? d.mass : 0;
      this.mass = c;
      this.invMass = 0 < c ? 1 / c : 0;
      this.material = d.material || null;
      this.linearDamping = "number" == typeof d.linearDamping ? d.linearDamping : .01;
      this.type = 0 >= c ? b.STATIC : b.DYNAMIC;
      typeof d.type == typeof b.STATIC && (this.type = d.type);
      this.allowSleep = "undefined" != typeof d.allowSleep ? d.allowSleep : !0;
      this.sleepState = 0;
      this.sleepSpeedLimit = "undefined" != typeof d.sleepSpeedLimit ? d.sleepSpeedLimit : .1;
      this.sleepTimeLimit = "undefined" != typeof d.sleepTimeLimit ? d.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this._wakeUpAfterNarrowphase = !1;
      this.torque = new f;
      this.quaternion = new r;
      d.quaternion && this.quaternion.copy(d.quaternion);
      this.initQuaternion = new r;
      this.angularVelocity = new f;
      d.angularVelocity && this.angularVelocity.copy(d.angularVelocity);
      this.initAngularVelocity = new f;
      this.interpolatedPosition = new f;
      this.interpolatedQuaternion = new r;
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new f;
      this.invInertia = new f;
      this.invInertiaWorld = new h;
      this.invMassSolve = 0;
      this.invInertiaSolve = new f;
      this.invInertiaWorldSolve = new h;
      this.fixedRotation = "undefined" != typeof d.fixedRotation ? d.fixedRotation : !1;
      this.angularDamping = "undefined" != typeof d.angularDamping ? d.angularDamping : .01;
      this.aabb = new q;
      this.aabbNeedsUpdate = !0;
      this.wlambda = new f;
      d.shape && this.addShape(d.shape);
      this.updateMassProperties();
    }
    k.exports = b;
    var e = c("../utils/EventTarget"), f = (c("../shapes/Shape"), c("../math/Vec3")), h = c("../math/Mat3"), r = c("../math/Quaternion"), q = (c("../material/Material"), c("../collision/AABB")), n = c("../shapes/Box");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.DYNAMIC = 1;
    b.STATIC = 2;
    b.KINEMATIC = 4;
    b.AWAKE = 0;
    b.SLEEPY = 1;
    b.SLEEPING = 2;
    b.idCounter = 0;
    b.prototype.wakeUp = function() {
      var d = this.sleepState;
      this.sleepState = 0;
      d === b.SLEEPING && this.dispatchEvent({type:"wakeup"});
    };
    b.prototype.sleep = function() {
      this.sleepState = b.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
    };
    b.sleepyEvent = {type:"sleepy"};
    b.sleepEvent = {type:"sleep"};
    b.prototype.sleepTick = function(d) {
      if (this.allowSleep) {
        var c = this.sleepState, e = this.velocity.norm2() + this.angularVelocity.norm2(), f = Math.pow(this.sleepSpeedLimit, 2);
        c === b.AWAKE && f > e ? (this.sleepState = b.SLEEPY, this.timeLastSleepy = d, this.dispatchEvent(b.sleepyEvent)) : c === b.SLEEPY && e > f ? this.wakeUp() : c === b.SLEEPY && d - this.timeLastSleepy > this.sleepTimeLimit && (this.sleep(), this.dispatchEvent(b.sleepEvent));
      }
    };
    b.prototype.updateSolveMassProperties = function() {
      this.sleepState === b.SLEEPING || this.type === b.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve.setZero(), this.invInertiaWorldSolve.setZero()) : (this.invMassSolve = this.invMass, this.invInertiaSolve.copy(this.invInertia), this.invInertiaWorldSolve.copy(this.invInertiaWorld));
    };
    b.prototype.pointToLocalFrame = function(b, d) {
      d = d || new f;
      return b.vsub(this.position, d), this.quaternion.conjugate().vmult(d, d), d;
    };
    b.prototype.vectorToLocalFrame = function(b, d) {
      d = d || new f;
      return this.quaternion.conjugate().vmult(b, d), d;
    };
    b.prototype.pointToWorldFrame = function(b, d) {
      d = d || new f;
      return this.quaternion.vmult(b, d), d.vadd(this.position, d), d;
    };
    b.prototype.vectorToWorldFrame = function(b, d) {
      d = d || new f;
      return this.quaternion.vmult(b, d), d;
    };
    var m = new f, d = new r;
    b.prototype.addShape = function(b, d, c) {
      var e = new f, h = new r;
      return d && e.copy(d), c && h.copy(c), this.shapes.push(b), this.shapeOffsets.push(e), this.shapeOrientations.push(h), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0, this;
    };
    b.prototype.updateBoundingRadius = function() {
      for (var b = this.shapes, d = this.shapeOffsets, c = b.length, e = 0, f = 0; f !== c; f++) {
        var h = b[f];
        h.updateBoundingSphereRadius();
        var l = d[f].norm();
        h = h.boundingSphereRadius;
        l + h > e && (e = l + h);
      }
      this.boundingRadius = e;
    };
    var l = new q;
    b.prototype.computeAABB = function() {
      for (var b = this.shapes, c = this.shapeOffsets, e = this.shapeOrientations, f = b.length, h = this.quaternion, p = this.aabb, k = 0; k !== f; k++) {
        var n = b[k];
        e[k].mult(h, d);
        d.vmult(c[k], m);
        m.vadd(this.position, m);
        n.calculateWorldAABB(m, d, l.lowerBound, l.upperBound);
        0 === k ? p.copy(l) : p.extend(l);
      }
      this.aabbNeedsUpdate = !1;
    };
    var v = new h, w = new h;
    new h;
    b.prototype.updateInertiaWorld = function(b) {
      var d = this.invInertia;
      if (d.x !== d.y || d.y !== d.z || b) {
        v.setRotationFromQuaternion(this.quaternion), v.transpose(w), v.scale(d, v), v.mmult(w, this.invInertiaWorld);
      }
    };
    var x = new f, z = new f;
    b.prototype.applyForce = function(d, c) {
      this.type === b.DYNAMIC && (c.vsub(this.position, x), x.cross(d, z), this.force.vadd(d, this.force), this.torque.vadd(z, this.torque));
    };
    var p = new f, u = new f;
    b.prototype.applyLocalForce = function(d, c) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(d, p), this.pointToWorldFrame(c, u), this.applyForce(p, u));
    };
    var y = new f, A = new f, B = new f;
    b.prototype.applyImpulse = function(d, c) {
      this.type === b.DYNAMIC && (c.vsub(this.position, y), A.copy(d), A.mult(this.invMass, A), this.velocity.vadd(A, this.velocity), y.cross(d, B), this.invInertiaWorld.vmult(B, B), this.angularVelocity.vadd(B, this.angularVelocity));
    };
    var D = new f, F = new f;
    b.prototype.applyLocalImpulse = function(d, c) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(d, D), this.pointToWorldFrame(c, F), this.applyImpulse(D, F));
    };
    var C = new f;
    b.prototype.updateMassProperties = function() {
      this.invMass = 0 < this.mass ? 1 / this.mass : 0;
      var b = this.inertia, d = this.fixedRotation;
      this.computeAABB();
      C.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      n.calculateInertia(C, this.mass, b);
      this.invInertia.set(0 < b.x && !d ? 1 / b.x : 0, 0 < b.y && !d ? 1 / b.y : 0, 0 < b.z && !d ? 1 / b.z : 0);
      this.updateInertiaWorld(!0);
    };
    b.prototype.getVelocityAtWorldPoint = function(b, d) {
      var c = new f;
      return b.vsub(this.position, c), this.angularVelocity.cross(c, d), this.velocity.vadd(d, d), d;
    };
  }, {"../collision/AABB":3, "../material/Material":25, "../math/Mat3":27, "../math/Quaternion":28, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Shape":43, "../utils/EventTarget":49}], 32:[function(c, k) {
    function b(b) {
      this.chassisBody = b.chassisBody;
      this.wheelInfos = [];
      this.sliding = !1;
      this.world = null;
      this.indexRightAxis = "undefined" != typeof b.indexRightAxis ? b.indexRightAxis : 1;
      this.indexForwardAxis = "undefined" != typeof b.indexForwardAxis ? b.indexForwardAxis : 0;
      this.indexUpAxis = "undefined" != typeof b.indexUpAxis ? b.indexUpAxis : 2;
    }
    function e(b, d, c) {
      var e = B, f = D, h = F, l = C;
      return d.vsub(b.position, e), e.cross(c, f), b.invInertiaWorld.vmult(f, l), l.cross(e, h), b.invMass + c.dot(h);
    }
    var f = (c("./Body"), c("../math/Vec3")), h = c("../math/Quaternion"), r = (c("../collision/RaycastResult"), c("../collision/Ray")), q = c("../objects/WheelInfo");
    k.exports = b;
    var n = (new f, new f, new f, new f), m = new f, d = new f;
    new r;
    b.prototype.addWheel = function(b) {
      b = b || {};
      b = new q(b);
      var d = this.wheelInfos.length;
      return this.wheelInfos.push(b), d;
    };
    b.prototype.setSteeringValue = function(b, d) {
      this.wheelInfos[d].steering = b;
    };
    new f;
    b.prototype.applyEngineForce = function(b, d) {
      this.wheelInfos[d].engineForce = b;
    };
    b.prototype.setBrake = function(b, d) {
      this.wheelInfos[d].brake = b;
    };
    b.prototype.addToWorld = function(b) {
      this.constraints;
      b.add(this.chassisBody);
      var d = this;
      this.preStepCallback = function() {
        d.updateVehicle(b.dt);
      };
      b.addEventListener("preStep", this.preStepCallback);
      this.world = b;
    };
    b.prototype.getVehicleAxisWorld = function(b, d) {
      d.set(0 === b ? 1 : 0, 1 === b ? 1 : 0, 2 === b ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(d, d);
    };
    b.prototype.updateVehicle = function(b) {
      for (var d = this.wheelInfos, c = d.length, e = this.chassisBody, h = 0; c > h; h++) {
        this.updateWheelTransform(h);
      }
      this.currentVehicleSpeedKmHour = 3.6 * e.velocity.norm();
      h = new f;
      this.getVehicleAxisWorld(this.indexForwardAxis, h);
      0 > h.dot(e.velocity) && (this.currentVehicleSpeedKmHour *= -1);
      for (h = 0; c > h; h++) {
        this.castRay(d[h]);
      }
      this.updateSuspension(b);
      var l = new f, p = new f;
      for (h = 0; c > h; h++) {
        var k = d[h], m = k.suspensionForce;
        m > k.maxSuspensionForce && (m = k.maxSuspensionForce);
        k.raycastResult.hitNormalWorld.scale(m * b, l);
        k.raycastResult.hitPointWorld.vsub(e.position, p);
        e.applyImpulse(l, k.raycastResult.hitPointWorld);
      }
      this.updateFriction(b);
      l = new f;
      p = new f;
      m = new f;
      for (h = 0; c > h; h++) {
        k = d[h];
        e.getVelocityAtWorldPoint(k.chassisConnectionPointWorld, m);
        var n = 1;
        switch(this.indexUpAxis) {
          case 1:
            n = -1;
        }
        if (k.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, p);
          var u = p.dot(k.raycastResult.hitNormalWorld);
          k.raycastResult.hitNormalWorld.scale(u, l);
          p.vsub(l, p);
          u = p.dot(m);
          k.deltaRotation = n * u * b / k.radius;
        }
        !k.sliding && k.isInContact || 0 === k.engineForce || !k.useCustomSlidingRotationalSpeed || (k.deltaRotation = (0 < k.engineForce ? 1 : -1) * k.customSlidingRotationalSpeed * b);
        Math.abs(k.brake) > Math.abs(k.engineForce) && (k.deltaRotation = 0);
        k.rotation += k.deltaRotation;
        k.deltaRotation *= .99;
      }
    };
    b.prototype.updateSuspension = function() {
      for (var b = this.chassisBody.mass, d = this.wheelInfos, c = d.length, e = 0; c > e; e++) {
        var f = d[e];
        if (f.isInContact) {
          var h = f.suspensionStiffness * (f.suspensionRestLength - f.suspensionLength) * f.clippedInvContactDotSuspension;
          var l = f.suspensionRelativeVelocity;
          h -= (0 > l ? f.dampingCompression : f.dampingRelaxation) * l;
          f.suspensionForce = h * b;
          0 > f.suspensionForce && (f.suspensionForce = 0);
        } else {
          f.suspensionForce = 0;
        }
      }
    };
    b.prototype.removeFromWorld = function(b) {
      this.constraints;
      b.remove(this.chassisBody);
      b.removeEventListener("preStep", this.preStepCallback);
      this.world = null;
    };
    var l = new f, v = new f;
    b.prototype.castRay = function(b) {
      this.updateWheelTransformWorld(b);
      var d = this.chassisBody, c = -1;
      b.directionWorld.scale(b.suspensionRestLength + b.radius, l);
      var e = b.chassisConnectionPointWorld;
      e.vadd(l, v);
      var h = b.raycastResult;
      h.reset();
      var p = d.collisionResponse;
      d.collisionResponse = !1;
      this.world.rayTest(e, v, h);
      d.collisionResponse = p;
      e = h.body;
      (b.raycastResult.groundObject = 0, e) ? (c = h.distance, b.raycastResult.hitNormalWorld = h.hitNormalWorld, b.isInContact = !0, b.suspensionLength = h.distance - b.radius, h = b.suspensionRestLength - b.maxSuspensionTravel, e = b.suspensionRestLength + b.maxSuspensionTravel, b.suspensionLength < h && (b.suspensionLength = h), b.suspensionLength > e && (b.suspensionLength = e, b.raycastResult.reset()), h = b.raycastResult.hitNormalWorld.dot(b.directionWorld), e = new f, d.getVelocityAtWorldPoint(b.raycastResult.hitPointWorld, 
      e), d = b.raycastResult.hitNormalWorld.dot(e), -.1 <= h ? (b.suspensionRelativeVelocity = 0, b.clippedInvContactDotSuspension = 10) : (h = -1 / h, b.suspensionRelativeVelocity = d * h, b.clippedInvContactDotSuspension = h)) : (b.suspensionLength = b.suspensionRestLength + 0 * b.maxSuspensionTravel, b.suspensionRelativeVelocity = 0, b.directionWorld.scale(-1, b.raycastResult.hitNormalWorld), b.clippedInvContactDotSuspension = 1);
      return c;
    };
    b.prototype.updateWheelTransformWorld = function(b) {
      b.isInContact = !1;
      var d = this.chassisBody;
      d.pointToWorldFrame(b.chassisConnectionPointLocal, b.chassisConnectionPointWorld);
      d.vectorToWorldFrame(b.directionLocal, b.directionWorld);
      d.vectorToWorldFrame(b.axleLocal, b.axleWorld);
    };
    b.prototype.updateWheelTransform = function(b) {
      b = this.wheelInfos[b];
      this.updateWheelTransformWorld(b);
      b.directionLocal.scale(-1, n);
      m.copy(b.axleLocal);
      n.cross(m, d);
      d.normalize();
      m.normalize();
      var c = b.steering, e = new h;
      e.setFromAxisAngle(n, c);
      c = new h;
      c.setFromAxisAngle(m, b.rotation);
      var f = b.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(e, f);
      f.mult(c, f);
      f.normalize();
      e = b.worldTransform.position;
      e.copy(b.directionWorld);
      e.scale(b.suspensionLength, e);
      e.vadd(b.chassisConnectionPointWorld, e);
    };
    var w = [new f(1, 0, 0), new f(0, 1, 0), new f(0, 0, 1)];
    b.prototype.getWheelTransformWorld = function(b) {
      return this.wheelInfos[b].worldTransform;
    };
    var x = new f, z = [], p = [];
    b.prototype.updateFriction = function(b) {
      for (var d = this.wheelInfos, c = d.length, h = this.chassisBody, l = 0, k = 0; c > k; k++) {
        var m = d[k], n = m.raycastResult.body;
        n && l++;
        m.sideImpulse = 0;
        m.forwardImpulse = 0;
        p[k] || (p[k] = new f);
        z[k] || (z[k] = new f);
      }
      for (k = 0; c > k; k++) {
        if (m = d[k], n = m.raycastResult.body) {
          var q = z[k];
          this.getWheelTransformWorld(k).vectorToWorldFrame(w[this.indexRightAxis], q);
          l = m.raycastResult.hitNormalWorld;
          var r = q.dot(l);
          l.scale(r, x);
          q.vsub(x, q);
          q.normalize();
          l.cross(q, p[k]);
          p[k].normalize();
          l = m;
          r = h;
          var v = m.raycastResult.hitPointWorld, B = m.raycastResult.hitPointWorld;
          if (1.1 < q.norm2()) {
            n = 0;
          } else {
            var C = E, D = H, F = Q;
            r.getVelocityAtWorldPoint(v, C);
            n.getVelocityAtWorldPoint(B, D);
            C.vsub(D, F);
            n = -.2 * q.dot(F) * (1 / (r.invMass + n.invMass));
          }
          l.sideImpulse = n;
          m.sideImpulse *= 1;
        }
      }
      this.sliding = !1;
      for (k = 0; c > k; k++) {
        m = d[k];
        n = m.raycastResult.body;
        v = 0;
        if (m.slipInfo = 1, n) {
          l = m.brake ? m.brake : 0;
          D = h;
          B = n;
          q = m.raycastResult.hitPointWorld;
          C = p[k];
          v = l;
          r = 0;
          F = q;
          var K = u, V = y, la = A;
          D.getVelocityAtWorldPoint(F, K);
          B.getVelocityAtWorldPoint(F, V);
          K.vsub(V, la);
          F = C.dot(la);
          D = e(D, q, C);
          B = e(B, q, C);
          v = (r = 1 / (D + B) * -F, r > v && (r = v), -v > r && (r = -v), r);
          v += m.engineForce * b;
          l /= v;
          m.slipInfo *= l;
        }
        if (m.forwardImpulse = 0, m.skidInfo = 1, n) {
          if (m.skidInfo = 1, n = m.suspensionForce * b * m.frictionSlip, l = n * n, m.forwardImpulse = v, r = .5 * m.forwardImpulse, v = 1 * m.sideImpulse, r = r * r + v * v, m.sliding = !1, r > l) {
            this.sliding = !0, m.sliding = !0, l = n / Math.sqrt(r), m.skidInfo *= l;
          }
        }
      }
      if (this.sliding) {
        for (k = 0; c > k; k++) {
          m = d[k], 0 !== m.sideImpulse && 1 > m.skidInfo && (m.forwardImpulse *= m.skidInfo, m.sideImpulse *= m.skidInfo);
        }
      }
      for (k = 0; c > k; k++) {
        m = d[k];
        b = new f;
        if (b.copy(m.raycastResult.hitPointWorld), 0 !== m.forwardImpulse) {
          n = new f, p[k].scale(m.forwardImpulse, n), h.applyImpulse(n, b);
        }
        0 !== m.sideImpulse && (n = m.raycastResult.body, l = new f, l.copy(m.raycastResult.hitPointWorld), r = new f, z[k].scale(m.sideImpulse, r), h.pointToLocalFrame(b, b), b["xyz"[this.indexUpAxis]] *= m.rollInfluence, h.pointToWorldFrame(b, b), h.applyImpulse(r, b), r.scale(-1, r), n.applyImpulse(r, l));
      }
    };
    var u = new f, y = new f, A = new f, B = new f, D = new f, F = new f, C = new f, E = new f, H = new f, Q = new f;
  }, {"../collision/Ray":9, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Vec3":30, "../objects/WheelInfo":36, "./Body":31}], 33:[function(c, k) {
    function b(b) {
      (this.wheelBodies = [], this.coordinateSystem = "undefined" == typeof b.coordinateSystem ? new r(1, 2, 3) : b.coordinateSystem.clone(), this.chassisBody = b.chassisBody, this.chassisBody) || (b = new h(new r(5, 2, .5)), this.chassisBody = new e(1, b));
      this.constraints = [];
      this.wheelAxes = [];
      this.wheelForces = [];
    }
    var e = c("./Body"), f = c("../shapes/Sphere"), h = c("../shapes/Box"), r = c("../math/Vec3"), q = c("../constraints/HingeConstraint");
    k.exports = b;
    b.prototype.addWheel = function(b) {
      b = b || {};
      var d = b.body;
      d || (d = new e(1, new f(1.2)));
      this.wheelBodies.push(d);
      this.wheelForces.push(0);
      var c = (new r, "undefined" != typeof b.position ? b.position.clone() : new r), h = new r;
      this.chassisBody.pointToWorldFrame(c, h);
      d.position.set(h.x, h.y, h.z);
      b = "undefined" != typeof b.axis ? b.axis.clone() : new r(0, 1, 0);
      this.wheelAxes.push(b);
      d = new q(this.chassisBody, d, {pivotA:c, axisA:b, pivotB:r.ZERO, axisB:b, collideConnected:!1});
      return this.constraints.push(d), this.wheelBodies.length - 1;
    };
    b.prototype.setSteeringValue = function(b, c) {
      var d = this.wheelAxes[c], e = Math.cos(b);
      b = Math.sin(b);
      var f = d.x;
      d = d.y;
      this.constraints[c].axisA.set(e * f - b * d, b * f + e * d, 0);
    };
    b.prototype.setMotorSpeed = function(b, c) {
      c = this.constraints[c];
      c.enableMotor();
      c.motorTargetVelocity = b;
    };
    b.prototype.disableMotor = function(b) {
      this.constraints[b].disableMotor();
    };
    var n = new r;
    b.prototype.setWheelForce = function(b, c) {
      this.wheelForces[c] = b;
    };
    b.prototype.applyWheelForce = function(b, c) {
      var d = this.wheelBodies[c], e = d.torque;
      this.wheelAxes[c].scale(b, n);
      d.vectorToWorldFrame(n, n);
      e.vadd(n, e);
    };
    b.prototype.addToWorld = function(b) {
      for (var d = this.constraints, c = this.wheelBodies.concat([this.chassisBody]), e = 0; e < c.length; e++) {
        b.add(c[e]);
      }
      for (e = 0; e < d.length; e++) {
        b.addConstraint(d[e]);
      }
      b.addEventListener("preStep", this._update.bind(this));
    };
    b.prototype._update = function() {
      for (var b = this.wheelForces, c = 0; c < b.length; c++) {
        this.applyWheelForce(b[c], c);
      }
    };
    b.prototype.removeFromWorld = function(b) {
      for (var d = this.constraints, c = this.wheelBodies.concat([this.chassisBody]), e = 0; e < c.length; e++) {
        b.remove(c[e]);
      }
      for (e = 0; e < d.length; e++) {
        b.removeConstraint(d[e]);
      }
    };
    var m = new r;
    b.prototype.getWheelSpeed = function(b) {
      var d = this.wheelBodies[b].angularVelocity;
      return this.chassisBody.vectorToWorldFrame(this.wheelAxes[b], m), d.dot(m);
    };
  }, {"../constraints/HingeConstraint":15, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Sphere":44, "./Body":31}], 34:[function(c, k) {
    function b() {
      this.particles = [];
      this.speedOfSound = this.smoothingRadius = this.density = 1;
      this.viscosity = .01;
      this.eps = 1E-6;
      this.pressures = [];
      this.densities = [];
      this.neighbors = [];
    }
    k.exports = b;
    k = (c("../shapes/Shape"), c("../math/Vec3"));
    c("../math/Quaternion");
    c("../shapes/Particle");
    c("../objects/Body");
    c("../material/Material");
    b.prototype.add = function(b) {
      this.particles.push(b);
      this.neighbors.length < this.particles.length && this.neighbors.push([]);
    };
    b.prototype.remove = function(b) {
      b = this.particles.indexOf(b);
      -1 !== b && (this.particles.splice(b, 1), this.neighbors.length > this.particles.length && this.neighbors.pop());
    };
    var e = new k;
    b.prototype.getNeighbors = function(b, c) {
      for (var d = this.particles.length, f = b.id, h = this.smoothingRadius * this.smoothingRadius, l = 0; l !== d; l++) {
        var p = this.particles[l];
        p.position.vsub(b.position, e);
        f !== p.id && e.norm2() < h && c.push(p);
      }
    };
    var f = new k, h = new k, r = new k, q = new k, n = new k, m = new k;
    b.prototype.update = function() {
      for (var b = this.particles.length, c = this.speedOfSound, e = this.eps, k = 0; k !== b; k++) {
        var x = this.particles[k], z = this.neighbors[k];
        z.length = 0;
        this.getNeighbors(x, z);
        z.push(this.particles[k]);
        for (var p = z.length, u = 0, y = 0; y !== p; y++) {
          x.position.vsub(z[y].position, f);
          var A = f.norm();
          A = this.w(A);
          u += z[y].mass * A;
        }
        this.densities[k] = u;
        this.pressures[k] = c * c * (this.densities[k] - this.density);
      }
      for (k = 0; k !== b; k++) {
        c = this.particles[k];
        h.set(0, 0, 0);
        r.set(0, 0, 0);
        z = this.neighbors[k];
        p = z.length;
        for (y = 0; y !== p; y++) {
          u = z[y], c.position.vsub(u.position, n), A = n.norm(), x = -u.mass * (this.pressures[k] / (this.densities[k] * this.densities[k] + e) + this.pressures[y] / (this.densities[y] * this.densities[y] + e)), this.gradw(n, q), q.mult(x, q), h.vadd(q, h), u.velocity.vsub(c.velocity, m), m.mult(1 / (1E-4 + this.densities[k] * this.densities[y]) * this.viscosity * u.mass, m), x = this.nablaw(A), m.mult(x, m), r.vadd(m, r);
        }
        r.mult(c.mass, r);
        h.mult(c.mass, h);
        c.force.vadd(r, c.force);
        c.force.vadd(h, c.force);
      }
    };
    b.prototype.w = function(b) {
      var d = this.smoothingRadius;
      return 315 / (64 * Math.PI * Math.pow(d, 9)) * Math.pow(d * d - b * b, 3);
    };
    b.prototype.gradw = function(b, c) {
      var d = b.norm(), e = this.smoothingRadius;
      b.mult(945 / (32 * Math.PI * Math.pow(e, 9)) * Math.pow(e * e - d * d, 2), c);
    };
    b.prototype.nablaw = function(b) {
      var d = this.smoothingRadius;
      return 945 / (32 * Math.PI * Math.pow(d, 9)) * (d * d - b * b) * (7 * b * b - 3 * d * d);
    };
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Particle":41, "../shapes/Shape":43}], 35:[function(c, k) {
    function b(b, d, c) {
      c = c || {};
      this.restLength = "number" == typeof c.restLength ? c.restLength : 1;
      this.stiffness = c.stiffness || 100;
      this.damping = c.damping || 1;
      this.bodyA = b;
      this.bodyB = d;
      this.localAnchorA = new e;
      this.localAnchorB = new e;
      c.localAnchorA && this.localAnchorA.copy(c.localAnchorA);
      c.localAnchorB && this.localAnchorB.copy(c.localAnchorB);
      c.worldAnchorA && this.setWorldAnchorA(c.worldAnchorA);
      c.worldAnchorB && this.setWorldAnchorB(c.worldAnchorB);
    }
    var e = c("../math/Vec3");
    k.exports = b;
    b.prototype.setWorldAnchorA = function(b) {
      this.bodyA.pointToLocalFrame(b, this.localAnchorA);
    };
    b.prototype.setWorldAnchorB = function(b) {
      this.bodyB.pointToLocalFrame(b, this.localAnchorB);
    };
    b.prototype.getWorldAnchorA = function(b) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, b);
    };
    b.prototype.getWorldAnchorB = function(b) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, b);
    };
    var f = new e, h = new e, r = new e, q = new e, n = new e, m = new e, d = new e, l = new e, v = new e, w = new e, x = new e;
    b.prototype.applyForce = function() {
      var b = this.stiffness, c = this.damping, e = this.restLength, k = this.bodyA, A = this.bodyB;
      this.getWorldAnchorA(n);
      this.getWorldAnchorB(m);
      n.vsub(k.position, d);
      m.vsub(A.position, l);
      m.vsub(n, f);
      var B = f.norm();
      h.copy(f);
      h.normalize();
      A.velocity.vsub(k.velocity, r);
      A.angularVelocity.cross(l, x);
      r.vadd(x, r);
      k.angularVelocity.cross(d, x);
      r.vsub(x, r);
      h.mult(-b * (B - e) - c * r.dot(h), q);
      k.force.vsub(q, k.force);
      A.force.vadd(q, A.force);
      d.cross(q, v);
      l.cross(q, w);
      k.torque.vsub(v, k.torque);
      A.torque.vadd(w, A.torque);
    };
  }, {"../math/Vec3":30}], 36:[function(c, k) {
    function b(b) {
      b = r.defaults(b, {chassisConnectionPointLocal:new e, chassisConnectionPointWorld:new e, directionLocal:new e, directionWorld:new e, axleLocal:new e, axleWorld:new e, suspensionRestLength:1, suspensionMaxLength:2, radius:1, suspensionStiffness:100, dampingCompression:10, dampingRelaxation:10, frictionSlip:1E4, steering:0, rotation:0, deltaRotation:0, rollInfluence:.01, maxSuspensionForce:Number.MAX_VALUE, isFrontWheel:!0, clippedInvContactDotSuspension:1, suspensionRelativeVelocity:0, suspensionForce:0, 
      skidInfo:0, suspensionLength:0, maxSuspensionTravel:1, useCustomSlidingRotationalSpeed:!1, customSlidingRotationalSpeed:-.1});
      this.maxSuspensionTravel = b.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = b.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = b.useCustomSlidingRotationalSpeed;
      this.sliding = !1;
      this.chassisConnectionPointLocal = b.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = b.chassisConnectionPointWorld.clone();
      this.directionLocal = b.directionLocal.clone();
      this.directionWorld = b.directionWorld.clone();
      this.axleLocal = b.axleLocal.clone();
      this.axleWorld = b.axleWorld.clone();
      this.suspensionRestLength = b.suspensionRestLength;
      this.suspensionMaxLength = b.suspensionMaxLength;
      this.radius = b.radius;
      this.suspensionStiffness = b.suspensionStiffness;
      this.dampingCompression = b.dampingCompression;
      this.dampingRelaxation = b.dampingRelaxation;
      this.frictionSlip = b.frictionSlip;
      this.deltaRotation = this.rotation = this.steering = 0;
      this.rollInfluence = b.rollInfluence;
      this.maxSuspensionForce = b.maxSuspensionForce;
      this.brake = this.engineForce = 0;
      this.isFrontWheel = b.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.forwardImpulse = this.sideImpulse = this.suspensionLength = this.skidInfo = this.suspensionForce = this.suspensionRelativeVelocity = 0;
      this.raycastResult = new h;
      this.worldTransform = new f;
      this.isInContact = !1;
    }
    var e = c("../math/Vec3"), f = c("../math/Transform"), h = c("../collision/RaycastResult"), r = c("../utils/Utils");
    k.exports = b;
    var q = new e, n = new e;
    q = new e;
    b.prototype.updateWheel = function(b) {
      var d = this.raycastResult;
      if (this.isInContact) {
        var c = d.hitNormalWorld.dot(d.directionWorld);
        d.hitPointWorld.vsub(b.position, n);
        b.getVelocityAtWorldPoint(n, q);
        b = d.hitNormalWorld.dot(q);
        -.1 <= c ? (this.suspensionRelativeVelocity = 0, this.clippedInvContactDotSuspension = 10) : (c = -1 / c, this.suspensionRelativeVelocity = b * c, this.clippedInvContactDotSuspension = c);
      } else {
        d.suspensionLength = this.suspensionRestLength, this.suspensionRelativeVelocity = 0, d.directionWorld.scale(-1, d.hitNormalWorld), this.clippedInvContactDotSuspension = 1;
      }
    };
  }, {"../collision/RaycastResult":10, "../math/Transform":29, "../math/Vec3":30, "../utils/Utils":53}], 37:[function(c, k) {
    function b(b) {
      e.call(this);
      this.type = e.types.BOX;
      this.halfExtents = b;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3"), h = c("./ConvexPolyhedron");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.prototype.updateConvexPolyhedronRepresentation = function() {
      var b = this.halfExtents.x, c = this.halfExtents.y, d = this.halfExtents.z;
      b = [new f(-b, -c, -d), new f(b, -c, -d), new f(b, c, -d), new f(-b, c, -d), new f(-b, -c, d), new f(b, -c, d), new f(b, c, d), new f(-b, c, d)];
      this.convexPolyhedronRepresentation = b = (new f(0, 0, 1), new f(0, 1, 0), new f(1, 0, 0), new h(b, [[3, 2, 1, 0], [4, 5, 6, 7], [5, 4, 0, 1], [2, 3, 7, 6], [0, 4, 7, 3], [1, 2, 6, 5]]));
      b.material = this.material;
    };
    b.prototype.calculateLocalInertia = function(c, e) {
      return e = e || new f, b.calculateInertia(this.halfExtents, c, e), e;
    };
    b.calculateInertia = function(b, c, d) {
      d.x = 1 / 12 * c * (4 * b.y * b.y + 4 * b.z * b.z);
      d.y = 1 / 12 * c * (4 * b.x * b.x + 4 * b.z * b.z);
      d.z = 1 / 12 * c * (4 * b.y * b.y + 4 * b.x * b.x);
    };
    b.prototype.getSideNormals = function(b, c) {
      var d = this.halfExtents;
      if (b[0].set(d.x, 0, 0), b[1].set(0, d.y, 0), b[2].set(0, 0, d.z), b[3].set(-d.x, 0, 0), b[4].set(0, -d.y, 0), b[5].set(0, 0, -d.z), void 0 !== c) {
        for (d = 0; d !== b.length; d++) {
          c.vmult(b[d], b[d]);
        }
      }
      return b;
    };
    b.prototype.volume = function() {
      return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.halfExtents.norm();
    };
    var r = new f;
    new f;
    b.prototype.forEachWorldCorner = function(b, c, d) {
      var e = this.halfExtents;
      e = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];
      for (var f = 0; f < e.length; f++) {
        r.set(e[f][0], e[f][1], e[f][2]), c.vmult(r, r), b.vadd(r, r), d(r.x, r.y, r.z);
      }
    };
    var q = [new f, new f, new f, new f, new f, new f, new f, new f];
    b.prototype.calculateWorldAABB = function(b, c, d, e) {
      var f = this.halfExtents;
      q[0].set(f.x, f.y, f.z);
      q[1].set(-f.x, f.y, f.z);
      q[2].set(-f.x, -f.y, f.z);
      q[3].set(-f.x, -f.y, -f.z);
      q[4].set(f.x, -f.y, -f.z);
      q[5].set(f.x, f.y, -f.z);
      q[6].set(-f.x, f.y, -f.z);
      q[7].set(f.x, -f.y, f.z);
      var h = q[0];
      c.vmult(h, h);
      b.vadd(h, h);
      e.copy(h);
      d.copy(h);
      for (f = 1; 8 > f; f++) {
        h = q[f];
        c.vmult(h, h);
        b.vadd(h, h);
        var l = h.x, k = h.y;
        h = h.z;
        l > e.x && (e.x = l);
        k > e.y && (e.y = k);
        h > e.z && (e.z = h);
        l < d.x && (d.x = l);
        k < d.y && (d.y = k);
        h < d.z && (d.z = h);
      }
    };
  }, {"../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 38:[function(c, k) {
    function b(b, d, c) {
      e.call(this);
      this.type = e.types.CONVEXPOLYHEDRON;
      this.vertices = b || [];
      this.worldVertices = [];
      this.worldVerticesNeedsUpdate = !0;
      this.faces = d || [];
      this.faceNormals = [];
      this.computeNormals();
      this.worldFaceNormalsNeedsUpdate = !0;
      this.worldFaceNormals = [];
      this.uniqueEdges = [];
      this.uniqueAxes = c ? c.slice() : null;
      this.computeEdges();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3"), h = (c("../math/Quaternion"), c("../math/Transform"));
    b.prototype = new e;
    b.prototype.constructor = b;
    var r = new f;
    b.prototype.computeEdges = function() {
      for (var b = this.faces, d = this.vertices, c = (d.length, this.uniqueEdges), e = c.length = 0; e !== b.length; e++) {
        for (var f = b[e], h = f.length, l = 0; l !== h; l++) {
          d[f[l]].vsub(d[f[(l + 1) % h]], r);
          r.normalize();
          for (var p = !1, k = 0; k !== c.length; k++) {
            if (c[k].almostEquals(r) || c[k].almostEquals(r)) {
              p = !0;
              break;
            }
          }
          p || c.push(r.clone());
        }
      }
    };
    b.prototype.computeNormals = function() {
      this.faceNormals.length = this.faces.length;
      for (var b = 0; b < this.faces.length; b++) {
        for (var d = 0; d < this.faces[b].length; d++) {
          if (!this.vertices[this.faces[b][d]]) {
            throw Error("Vertex " + this.faces[b][d] + " not found!");
          }
        }
        d = this.faceNormals[b] || new f;
        this.getFaceNormal(b, d);
        d.negate(d);
        this.faceNormals[b] = d;
        if (0 > d.dot(this.vertices[this.faces[b][0]])) {
          for (console.error(".faceNormals[" + b + "] = Vec3(" + d.toString() + ") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule."), d = 0; d < this.faces[b].length; d++) {
            console.warn(".vertices[" + this.faces[b][d] + "] = Vec3(" + this.vertices[this.faces[b][d]].toString() + ")");
          }
        }
      }
    };
    var q = new f, n = new f;
    b.computeNormal = function(b, d, c, e) {
      d.vsub(b, n);
      c.vsub(d, q);
      q.cross(n, e);
      e.isZero() || e.normalize();
    };
    b.prototype.getFaceNormal = function(d, c) {
      d = this.faces[d];
      return b.computeNormal(this.vertices[d[0]], this.vertices[d[1]], this.vertices[d[2]], c);
    };
    var m = new f;
    b.prototype.clipAgainstHull = function(b, d, c, e, h, l, p, k, n) {
      for (var u = -1, q = -Number.MAX_VALUE, r = 0; r < c.faces.length; r++) {
        m.copy(c.faceNormals[r]);
        h.vmult(m, m);
        var y = m.dot(l);
        y > q && (q = y, u = r);
      }
      q = [];
      r = c.faces[u];
      y = r.length;
      for (var v = 0; y > v; v++) {
        var w = c.vertices[r[v]], x = new f;
        x.copy(w);
        h.vmult(x, x);
        e.vadd(x, x);
        q.push(x);
      }
      0 <= u && this.clipFaceAgainstHull(l, b, d, q, p, k, n);
    };
    var d = new f, l = new f, v = new f, w = new f, x = new f, z = new f;
    b.prototype.findSeparatingAxis = function(b, c, e, f, h, p, k, m) {
      var n = Number.MAX_VALUE, u = 0;
      if (this.uniqueAxes) {
        for (var q = 0; q !== this.uniqueAxes.length; q++) {
          e.vmult(this.uniqueAxes[q], d);
          var r = this.testSepAxis(d, b, c, e, f, h);
          if (!1 === r) {
            return !1;
          }
          n > r && (n = r, p.copy(d));
        }
      } else {
        var y = k ? k.length : this.faces.length;
        for (q = 0; y > q; q++) {
          r = k ? k[q] : q;
          d.copy(this.faceNormals[r]);
          e.vmult(d, d);
          r = this.testSepAxis(d, b, c, e, f, h);
          if (!1 === r) {
            return !1;
          }
          n > r && (n = r, p.copy(d));
        }
      }
      if (b.uniqueAxes) {
        for (q = 0; q !== b.uniqueAxes.length; q++) {
          h.vmult(b.uniqueAxes[q], l);
          u++;
          r = this.testSepAxis(l, b, c, e, f, h);
          if (!1 === r) {
            return !1;
          }
          n > r && (n = r, p.copy(l));
        }
      } else {
        for (k = m ? m.length : b.faces.length, q = 0; k > q; q++) {
          r = m ? m[q] : q;
          l.copy(b.faceNormals[r]);
          h.vmult(l, l);
          u++;
          r = this.testSepAxis(l, b, c, e, f, h);
          if (!1 === r) {
            return !1;
          }
          n > r && (n = r, p.copy(l));
        }
      }
      for (m = 0; m !== this.uniqueEdges.length; m++) {
        for (e.vmult(this.uniqueEdges[m], w), u = 0; u !== b.uniqueEdges.length; u++) {
          if (h.vmult(b.uniqueEdges[u], x), w.cross(x, z), !z.almostZero()) {
            z.normalize();
            q = this.testSepAxis(z, b, c, e, f, h);
            if (!1 === q) {
              return !1;
            }
            n > q && (n = q, p.copy(z));
          }
        }
      }
      return f.vsub(c, v), 0 < v.dot(p) && p.negate(p), !0;
    };
    var p = [], u = [];
    b.prototype.testSepAxis = function(d, c, e, f, h, l) {
      b.project(this, d, e, f, p);
      b.project(c, d, h, l, u);
      e = p[0];
      d = p[1];
      c = u[0];
      f = u[1];
      if (f > e || d > c) {
        return !1;
      }
      e -= f;
      d = c - d;
      return d > e ? e : d;
    };
    var y = new f, A = new f;
    b.prototype.calculateLocalInertia = function(b, d) {
      this.computeLocalAABB(y, A);
      var c = A.x - y.x, e = A.y - y.y, f = A.z - y.z;
      d.x = 1 / 12 * b * (4 * e * e + 4 * f * f);
      d.y = 1 / 12 * b * (4 * c * c + 4 * f * f);
      d.z = 1 / 12 * b * (4 * e * e + 4 * c * c);
    };
    b.prototype.getPlaneConstantOfFace = function(b) {
      return -this.faceNormals[b].dot(this.vertices[this.faces[b][0]]);
    };
    var B = new f, D = new f, F = new f, C = new f, E = new f, H = new f, Q = new f, K = new f;
    b.prototype.clipFaceAgainstHull = function(b, d, c, e, f, h, l) {
      for (var p = [], k = -1, m = Number.MAX_VALUE, n = 0; n < this.faces.length; n++) {
        B.copy(this.faceNormals[n]);
        c.vmult(B, B);
        var u = B.dot(b);
        m > u && (m = u, k = n);
      }
      if (!(0 > k)) {
        b = this.faces[k];
        b.connectedFaces = [];
        for (m = 0; m < this.faces.length; m++) {
          for (n = 0; n < this.faces[m].length; n++) {
            -1 !== b.indexOf(this.faces[m][n]) && m !== k && -1 === b.connectedFaces.indexOf(m) && b.connectedFaces.push(m);
          }
        }
        m = (e.length, b.length);
        for (n = 0; m > n; n++) {
          u = this.vertices[b[n]];
          u.vsub(this.vertices[b[(n + 1) % m]], D);
          F.copy(D);
          c.vmult(F, F);
          d.vadd(F, F);
          C.copy(this.faceNormals[k]);
          c.vmult(C, C);
          d.vadd(C, C);
          F.cross(C, E);
          E.negate(E);
          H.copy(u);
          c.vmult(H, H);
          d.vadd(H, H);
          u = (-H.dot(E), b.connectedFaces[n]);
          Q.copy(this.faceNormals[u]);
          u = this.getPlaneConstantOfFace(u);
          K.copy(Q);
          c.vmult(K, K);
          u -= K.dot(d);
          for (this.clipFaceAgainstPlane(e, p, K, u); e.length;) {
            e.shift();
          }
          for (; p.length;) {
            e.push(p.shift());
          }
        }
        Q.copy(this.faceNormals[k]);
        u = this.getPlaneConstantOfFace(k);
        K.copy(Q);
        c.vmult(K, K);
        u -= K.dot(d);
        for (m = 0; m < e.length; m++) {
          if (d = K.dot(e[m]) + u, f >= d && (console.log("clamped: depth=" + d + " to minDist=" + (f + "")), d = f), h >= d) {
            c = e[m], 0 >= d && l.push({point:c, normal:K, depth:d});
          }
        }
      }
    };
    b.prototype.clipFaceAgainstPlane = function(b, d, c, e) {
      var h, l = b.length;
      if (2 > l) {
        return d;
      }
      var p = b[b.length - 1], k = b[0];
      var m = c.dot(p) + e;
      for (var n = 0; l > n; n++) {
        if (k = b[n], h = c.dot(k) + e, 0 > m) {
          if (0 > h) {
            var u = new f;
            u.copy(k);
          } else {
            u = new f, p.lerp(k, m / (m - h), u);
          }
          d.push(u);
        } else {
          0 > h && (u = new f, p.lerp(k, m / (m - h), u), d.push(u), d.push(k));
        }
        p = k;
        m = h;
      }
      return d;
    };
    b.prototype.computeWorldVertices = function(b, d) {
      for (var c = this.vertices.length; this.worldVertices.length < c;) {
        this.worldVertices.push(new f);
      }
      for (var e = this.vertices, h = this.worldVertices, l = 0; l !== c; l++) {
        d.vmult(e[l], h[l]), b.vadd(h[l], h[l]);
      }
      this.worldVerticesNeedsUpdate = !1;
    };
    new f;
    b.prototype.computeLocalAABB = function(b, d) {
      var c = this.vertices.length, e = this.vertices;
      b.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      d.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      for (var f = 0; c > f; f++) {
        var h = e[f];
        h.x < b.x ? b.x = h.x : h.x > d.x && (d.x = h.x);
        h.y < b.y ? b.y = h.y : h.y > d.y && (d.y = h.y);
        h.z < b.z ? b.z = h.z : h.z > d.z && (d.z = h.z);
      }
    };
    b.prototype.computeWorldFaceNormals = function(b) {
      for (var d = this.faceNormals.length; this.worldFaceNormals.length < d;) {
        this.worldFaceNormals.push(new f);
      }
      for (var c = this.faceNormals, e = this.worldFaceNormals, h = 0; h !== d; h++) {
        b.vmult(c[h], e[h]);
      }
      this.worldFaceNormalsNeedsUpdate = !1;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      for (var b = 0, d = this.vertices, c = 0, e = d.length; c !== e; c++) {
        var f = d[c].norm2();
        f > b && (b = f);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var M = new f;
    b.prototype.calculateWorldAABB = function(b, d, c, e) {
      for (var f, h, l, p, k, m, n = this.vertices.length, u = this.vertices, q = 0; n > q; q++) {
        M.copy(u[q]);
        d.vmult(M, M);
        b.vadd(M, M);
        var r = M;
        r.x < f || void 0 === f ? f = r.x : (r.x > p || void 0 === p) && (p = r.x);
        r.y < h || void 0 === h ? h = r.y : (r.y > k || void 0 === k) && (k = r.y);
        r.z < l || void 0 === l ? l = r.z : (r.z > m || void 0 === m) && (m = r.z);
      }
      c.set(f, h, l);
      e.set(p, k, m);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.prototype.getAveragePointLocal = function(b) {
      b = b || new f;
      for (var d = this.vertices.length, c = this.vertices, e = 0; d > e; e++) {
        b.vadd(c[e], b);
      }
      return b.mult(1 / d, b), b;
    };
    b.prototype.transformAllPoints = function(b, d) {
      var c = this.vertices.length, e = this.vertices;
      if (d) {
        for (var f = 0; c > f; f++) {
          var h = e[f];
          d.vmult(h, h);
        }
        for (f = 0; f < this.faceNormals.length; f++) {
          h = this.faceNormals[f], d.vmult(h, h);
        }
      }
      if (b) {
        for (f = 0; c > f; f++) {
          h = e[f], h.vadd(b, h);
        }
      }
    };
    var L = new f, I = new f, P = new f;
    b.prototype.pointIsInside = function(b) {
      var d = this.vertices, c = this.faces, e = this.faceNormals, f = this.faces.length;
      this.getAveragePointLocal(L);
      for (var h = 0; f > h; h++) {
        var l = (this.faces[h].length, e[h]);
        var p = d[c[h][0]], k = I;
        b.vsub(p, k);
        k = l.dot(k);
        var m = P;
        L.vsub(p, m);
        l = l.dot(m);
        if (0 > k && 0 < l || 0 < k && 0 > l) {
          return !1;
        }
      }
      return -1;
    };
    var T = (new f, new f), R = new f;
    b.project = function(b, d, c, e, f) {
      var l = b.vertices.length;
      b = b.vertices;
      R.setZero();
      h.vectorToLocalFrame(c, e, d, T);
      h.pointToLocalFrame(c, e, R, R);
      e = R.dot(T);
      c = d = b[0].dot(T);
      for (var p = 1; l > p; p++) {
        var k = b[p].dot(T);
        k > d && (d = k);
        c > k && (c = k);
      }
      if (c -= e, d -= e, c > d) {
        l = c, c = d, d = l;
      }
      f[0] = d;
      f[1] = c;
    };
  }, {"../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "./Shape":43}], 39:[function(c, k) {
    function b(b, c, k, m) {
      var d = [], l = [], n = [], q = [], r = [], z = Math.cos, p = Math.sin;
      d.push(new f(c * z(0), c * p(0), .5 * -k));
      q.push(0);
      d.push(new f(b * z(0), b * p(0), .5 * k));
      r.push(1);
      for (var u = 0; m > u; u++) {
        var y = 2 * Math.PI / m * (u + 1), A = 2 * Math.PI / m * (u + .5);
        m - 1 > u ? (d.push(new f(c * z(y), c * p(y), .5 * -k)), q.push(2 * u + 2), d.push(new f(b * z(y), b * p(y), .5 * k)), r.push(2 * u + 3), n.push([2 * u + 2, 2 * u + 3, 2 * u + 1, 2 * u])) : n.push([0, 1, 2 * u + 1, 2 * u]);
        (1 === m % 2 || m / 2 > u) && l.push(new f(z(A), p(A), 0));
      }
      n.push(r);
      l.push(new f(0, 0, 1));
      b = [];
      for (u = 0; u < q.length; u++) {
        b.push(q[q.length - u - 1]);
      }
      n.push(b);
      this.type = e.types.CONVEXPOLYHEDRON;
      h.call(this, d, n, l);
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3"), h = (c("../math/Quaternion"), c("./ConvexPolyhedron"));
    b.prototype = new h;
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 40:[function(c, k) {
    function b(b, c) {
      c = r.defaults(c, {maxValue:null, minValue:null, elementSize:1});
      this.data = b;
      this.maxValue = c.maxValue;
      this.minValue = c.minValue;
      this.elementSize = c.elementSize;
      null === c.minValue && this.updateMinValue();
      null === c.maxValue && this.updateMaxValue();
      this.cacheEnabled = !0;
      e.call(this);
      this.pillarConvex = new f;
      this.pillarOffset = new h;
      this.type = e.types.HEIGHTFIELD;
      this.updateBoundingSphereRadius();
      this._cachedPillars = {};
    }
    var e = c("./Shape"), f = c("./ConvexPolyhedron"), h = c("../math/Vec3"), r = c("../utils/Utils");
    k.exports = b;
    b.prototype = new e;
    b.prototype.update = function() {
      this._cachedPillars = {};
    };
    b.prototype.updateMinValue = function() {
      for (var b = this.data, c = b[0][0], e = 0; e !== b.length; e++) {
        for (var d = 0; d !== b[e].length; d++) {
          var f = b[e][d];
          c > f && (c = f);
        }
      }
      this.minValue = c;
    };
    b.prototype.updateMaxValue = function() {
      for (var b = this.data, c = b[0][0], e = 0; e !== b.length; e++) {
        for (var d = 0; d !== b[e].length; d++) {
          var f = b[e][d];
          f > c && (c = f);
        }
      }
      this.maxValue = c;
    };
    b.prototype.setHeightValueAtIndex = function(b, c, e) {
      this.data[b][c] = e;
      this.clearCachedConvexTrianglePillar(b, c, !1);
      0 < b && (this.clearCachedConvexTrianglePillar(b - 1, c, !0), this.clearCachedConvexTrianglePillar(b - 1, c, !1));
      0 < c && (this.clearCachedConvexTrianglePillar(b, c - 1, !0), this.clearCachedConvexTrianglePillar(b, c - 1, !1));
      0 < c && 0 < b && this.clearCachedConvexTrianglePillar(b - 1, c - 1, !0);
    };
    b.prototype.getRectMinMax = function(b, c, e, d, f) {
      f = f || [];
      for (var h = this.data, l = this.minValue; e >= b; b++) {
        for (var k = c; d >= k; k++) {
          var m = h[b][k];
          m > l && (l = m);
        }
      }
      f[0] = this.minValue;
      f[1] = l;
    };
    b.prototype.getIndexOfPosition = function(b, c, e, d) {
      var f = this.elementSize, h = this.data;
      b = Math.floor(b / f);
      c = Math.floor(c / f);
      return e[0] = b, e[1] = c, d && (0 > b && (b = 0), 0 > c && (c = 0), b >= h.length - 1 && (b = h.length - 1), c >= h[0].length - 1 && (c = h[0].length - 1)), 0 > b || 0 > c || b >= h.length - 1 || c >= h[0].length - 1 ? !1 : !0;
    };
    b.prototype.getHeightAt = function(b, c, e) {
      var d = [];
      this.getIndexOfPosition(b, c, d, e);
      b = [];
      return this.getRectMinMax(d[0], d[1] + 1, d[0], d[1] + 1, b), (b[0] + b[1]) / 2;
    };
    b.prototype.getCacheConvexTrianglePillarKey = function(b, c, e) {
      return b + "_" + c + "_" + (e ? 1 : 0);
    };
    b.prototype.getCachedConvexTrianglePillar = function(b, c, e) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)];
    };
    b.prototype.setCachedConvexTrianglePillar = function(b, c, e, d, f) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)] = {convex:d, offset:f};
    };
    b.prototype.clearCachedConvexTrianglePillar = function(b, c, e) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)];
    };
    b.prototype.getConvexTrianglePillar = function(b, c, e) {
      var d = this.pillarConvex, l = this.pillarOffset;
      if (this.cacheEnabled) {
        var k = this.getCachedConvexTrianglePillar(b, c, e);
        if (k) {
          return this.pillarConvex = k.convex, void(this.pillarOffset = k.offset);
        }
        d = new f;
        l = new h;
        this.pillarConvex = d;
        this.pillarOffset = l;
      }
      k = this.data;
      var m = this.elementSize, n = d.faces;
      d.vertices.length = 6;
      for (var r = 0; 6 > r; r++) {
        d.vertices[r] || (d.vertices[r] = new h);
      }
      n.length = 5;
      for (r = 0; 5 > r; r++) {
        n[r] || (n[r] = []);
      }
      r = d.vertices;
      var p = (Math.min(k[b][c], k[b + 1][c], k[b][c + 1], k[b + 1][c + 1]) - this.minValue) / 2 + this.minValue;
      e ? (l.set((b + .75) * m, (c + .75) * m, p), r[0].set(.25 * m, .25 * m, k[b + 1][c + 1] - p), r[1].set(-.75 * m, .25 * m, k[b][c + 1] - p), r[2].set(.25 * m, -.75 * m, k[b + 1][c] - p), r[3].set(.25 * m, .25 * m, -p - 1), r[4].set(-.75 * m, .25 * m, -p - 1), r[5].set(.25 * m, -.75 * m, -p - 1), n[0][0] = 0, n[0][1] = 1, n[0][2] = 2, n[1][0] = 5, n[1][1] = 4, n[1][2] = 3, n[2][0] = 2, n[2][1] = 5, n[2][2] = 3, n[2][3] = 0, n[3][0] = 3, n[3][1] = 4, n[3][2] = 1, n[3][3] = 0, n[4][0] = 1, n[4][1] = 
      4, n[4][2] = 5, n[4][3] = 2) : (l.set((b + .25) * m, (c + .25) * m, p), r[0].set(-.25 * m, -.25 * m, k[b][c] - p), r[1].set(.75 * m, -.25 * m, k[b + 1][c] - p), r[2].set(-.25 * m, .75 * m, k[b][c + 1] - p), r[3].set(-.25 * m, -.25 * m, -p - 1), r[4].set(.75 * m, -.25 * m, -p - 1), r[5].set(-.25 * m, .75 * m, -p - 1), n[0][0] = 0, n[0][1] = 1, n[0][2] = 2, n[1][0] = 5, n[1][1] = 4, n[1][2] = 3, n[2][0] = 0, n[2][1] = 2, n[2][2] = 5, n[2][3] = 3, n[3][0] = 1, n[3][1] = 0, n[3][2] = 3, n[3][3] = 
      4, n[4][0] = 4, n[4][1] = 5, n[4][2] = 2, n[4][3] = 1);
      d.computeNormals();
      d.computeEdges();
      d.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(b, c, e, d, l);
    };
    b.prototype.calculateLocalInertia = function(b, c) {
      return c = c || new h, c.set(0, 0, 0), c;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    b.prototype.calculateWorldAABB = function(b, c, e, d) {
      e.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      d.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = this.data, c = this.elementSize;
      this.boundingSphereRadius = (new h(b.length * c, b[0].length * c, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue)))).norm();
    };
  }, {"../math/Vec3":30, "../utils/Utils":53, "./ConvexPolyhedron":38, "./Shape":43}], 41:[function(c, k) {
    function b() {
      e.call(this);
      this.type = e.types.PARTICLE;
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, c) {
      return c = c || new f, c.set(0, 0, 0), c;
    };
    b.prototype.volume = function() {
      return 0;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = 0;
    };
    b.prototype.calculateWorldAABB = function(b, c, e, f) {
      e.copy(b);
      f.copy(b);
    };
  }, {"../math/Vec3":30, "./Shape":43}], 42:[function(c, k) {
    function b() {
      e.call(this);
      this.type = e.types.PLANE;
      this.worldNormal = new f;
      this.worldNormalNeedsUpdate = !0;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.prototype.computeWorldNormal = function(b) {
      var c = this.worldNormal;
      c.set(0, 0, 1);
      b.vmult(c, c);
      this.worldNormalNeedsUpdate = !1;
    };
    b.prototype.calculateLocalInertia = function(b, c) {
      return c || new f;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    var h = new f;
    b.prototype.calculateWorldAABB = function(b, c, e, f) {
      h.set(0, 0, 1);
      c.vmult(h, h);
      c = Number.MAX_VALUE;
      e.set(-c, -c, -c);
      f.set(c, c, c);
      1 === h.x && (f.x = b.x);
      1 === h.y && (f.y = b.y);
      1 === h.z && (f.z = b.z);
      -1 === h.x && (e.x = b.x);
      -1 === h.y && (e.y = b.y);
      -1 === h.z && (e.z = b.z);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    };
  }, {"../math/Vec3":30, "./Shape":43}], 43:[function(c, k) {
    function b() {
      this.id = b.idCounter++;
      this.boundingSphereRadius = this.type = 0;
      this.collisionResponse = !0;
      this.material = null;
    }
    k.exports = b;
    b = c("./Shape");
    c("../math/Vec3");
    c("../math/Quaternion");
    c("../material/Material");
    b.prototype.constructor = b;
    b.prototype.updateBoundingSphereRadius = function() {
      throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
    };
    b.prototype.volume = function() {
      throw "volume() not implemented for shape type " + this.type;
    };
    b.prototype.calculateLocalInertia = function() {
      throw "calculateLocalInertia() not implemented for shape type " + this.type;
    };
    b.idCounter = 0;
    b.types = {SPHERE:1, PLANE:2, BOX:4, COMPOUND:8, CONVEXPOLYHEDRON:16, HEIGHTFIELD:32, PARTICLE:64, CYLINDER:128, TRIMESH:256};
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "./Shape":43}], 44:[function(c, k) {
    function b(b) {
      if (e.call(this), this.radius = void 0 !== b ? Number(b) : 1, this.type = e.types.SPHERE, 0 > this.radius) {
        throw Error("The sphere radius cannot be negative.");
      }
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3");
    b.prototype = new e;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, c) {
      c = c || new f;
      b = 2 * b * this.radius * this.radius / 5;
      return c.x = b, c.y = b, c.z = b, c;
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.radius / 3;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.radius;
    };
    b.prototype.calculateWorldAABB = function(b, c, e, f) {
      c = this.radius;
      for (var h = ["x", "y", "z"], d = 0; d < h.length; d++) {
        var l = h[d];
        e[l] = b[l] - c;
        f[l] = b[l] + c;
      }
    };
  }, {"../math/Vec3":30, "./Shape":43}], 45:[function(c, k) {
    function b(b, d) {
      e.call(this);
      this.type = e.types.TRIMESH;
      this.vertices = new Float32Array(b);
      this.indices = new Int16Array(d);
      this.normals = new Float32Array(d.length);
      this.aabb = new r;
      this.edges = null;
      this.scale = new f(1, 1, 1);
      this.tree = new q;
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    k.exports = b;
    var e = c("./Shape"), f = c("../math/Vec3"), h = (c("../math/Quaternion"), c("../math/Transform")), r = c("../collision/AABB"), q = c("../utils/Octree");
    b.prototype = new e;
    b.prototype.constructor = b;
    var n = new f;
    b.prototype.updateTree = function() {
      var b = this.tree;
      b.reset();
      b.aabb.copy(this.aabb);
      var d = this.scale;
      b.aabb.lowerBound.x *= 1 / d.x;
      b.aabb.lowerBound.y *= 1 / d.y;
      b.aabb.lowerBound.z *= 1 / d.z;
      b.aabb.upperBound.x *= 1 / d.x;
      b.aabb.upperBound.y *= 1 / d.y;
      b.aabb.upperBound.z *= 1 / d.z;
      d = new r;
      for (var c = new f, e = new f, h = new f, l = [c, e, h], p = 0; p < this.indices.length / 3; p++) {
        var k = 3 * p;
        this._getUnscaledVertex(this.indices[k], c);
        this._getUnscaledVertex(this.indices[k + 1], e);
        this._getUnscaledVertex(this.indices[k + 2], h);
        d.setFromPoints(l);
        b.insert(d, p);
      }
      b.removeEmptyNodes();
    };
    var m = new r;
    b.prototype.getTrianglesInAABB = function(b, d) {
      m.copy(b);
      var c = this.scale;
      b = c.x;
      var e = c.y;
      c = c.z;
      var f = m.lowerBound, h = m.upperBound;
      return f.x /= b, f.y /= e, f.z /= c, h.x /= b, h.y /= e, h.z /= c, this.tree.aabbQuery(m, d);
    };
    b.prototype.setScale = function(b) {
      var d = b.x === b.y === b.z;
      this.scale.x === this.scale.y === this.scale.z && d || this.updateNormals();
      this.scale.copy(b);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    };
    b.prototype.updateNormals = function() {
      for (var d = this.normals, c = 0; c < this.indices.length / 3; c++) {
        var e = 3 * c, f = this.indices[e + 1], h = this.indices[e + 2];
        this.getVertex(this.indices[e], x);
        this.getVertex(f, z);
        this.getVertex(h, p);
        b.computeNormal(z, x, p, n);
        d[e] = n.x;
        d[e + 1] = n.y;
        d[e + 2] = n.z;
      }
    };
    b.prototype.updateEdges = function() {
      for (var b = {}, d = function() {
        b[h > f ? f + "_" + h : h + "_" + f] = !0;
      }, c = 0; c < this.indices.length / 3; c++) {
        var e = 3 * c, f = this.indices[e], h = this.indices[e + 1];
        e = this.indices[e + 2];
        d(f, h);
        d(h, e);
        d(e, f);
      }
      d = Object.keys(b);
      this.edges = new Int16Array(2 * d.length);
      for (c = 0; c < d.length; c++) {
        e = d[c].split("_"), this.edges[2 * c] = parseInt(e[0], 10), this.edges[2 * c + 1] = parseInt(e[1], 10);
      }
    };
    b.prototype.getEdgeVertex = function(b, d, c) {
      this.getVertex(this.edges[2 * b + (d ? 1 : 0)], c);
    };
    var d = new f, l = new f;
    b.prototype.getEdgeVector = function(b, c) {
      this.getEdgeVertex(b, 0, d);
      this.getEdgeVertex(b, 1, l);
      l.vsub(d, c);
    };
    var v = new f, w = new f;
    b.computeNormal = function(b, d, c, e) {
      d.vsub(b, w);
      c.vsub(d, v);
      v.cross(w, e);
      e.isZero() || e.normalize();
    };
    var x = new f, z = new f, p = new f;
    b.prototype.getVertex = function(b, d) {
      var c = this.scale;
      return this._getUnscaledVertex(b, d), d.x *= c.x, d.y *= c.y, d.z *= c.z, d;
    };
    b.prototype._getUnscaledVertex = function(b, d) {
      b *= 3;
      var c = this.vertices;
      return d.set(c[b], c[b + 1], c[b + 2]);
    };
    b.prototype.getWorldVertex = function(b, d, c, e) {
      return this.getVertex(b, e), h.pointToWorldFrame(d, c, e, e), e;
    };
    b.prototype.getTriangleVertices = function(b, d, c, e) {
      b *= 3;
      this.getVertex(this.indices[b], d);
      this.getVertex(this.indices[b + 1], c);
      this.getVertex(this.indices[b + 2], e);
    };
    b.prototype.getNormal = function(b, d) {
      b *= 3;
      return d.set(this.normals[b], this.normals[b + 1], this.normals[b + 2]);
    };
    var u = new r;
    b.prototype.calculateLocalInertia = function(b, d) {
      this.computeLocalAABB(u);
      var c = u.upperBound.x - u.lowerBound.x, e = u.upperBound.y - u.lowerBound.y, f = u.upperBound.z - u.lowerBound.z;
      return d.set(1 / 12 * b * (4 * e * e + 4 * f * f), 1 / 12 * b * (4 * c * c + 4 * f * f), 1 / 12 * b * (4 * e * e + 4 * c * c));
    };
    var y = new f;
    b.prototype.computeLocalAABB = function(b) {
      var d = b.lowerBound;
      b = b.upperBound;
      var c = this.vertices.length, e = (this.vertices, y);
      this.getVertex(0, e);
      d.copy(e);
      b.copy(e);
      for (var f = 0; f !== c; f++) {
        this.getVertex(f, e), e.x < d.x ? d.x = e.x : e.x > b.x && (b.x = e.x), e.y < d.y ? d.y = e.y : e.y > b.y && (b.y = e.y), e.z < d.z ? d.z = e.z : e.z > b.z && (b.z = e.z);
      }
    };
    b.prototype.updateAABB = function() {
      this.computeLocalAABB(this.aabb);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = 0, d = this.vertices, c = new f, e = 0;
      for (d = d.length / 3; e !== d; e++) {
        this.getVertex(e, c);
        var h = c.norm2();
        h > b && (b = h);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var A = (new f, new h), B = new r;
    b.prototype.calculateWorldAABB = function(b, d, c, e) {
      A.position = b;
      A.quaternion = d;
      this.aabb.toWorldFrame(A, B);
      c.copy(B.lowerBound);
      e.copy(B.upperBound);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.createTorus = function(d, c, e, f, h) {
      d = d || 1;
      c = c || .5;
      e = e || 8;
      f = f || 6;
      h = h || 2 * Math.PI;
      for (var l = [], p = [], k = 0; e >= k; k++) {
        for (var m = 0; f >= m; m++) {
          var n = m / f * h, u = k / e * Math.PI * 2;
          l.push((d + c * Math.cos(u)) * Math.cos(n), (d + c * Math.cos(u)) * Math.sin(n), c * Math.sin(u));
        }
      }
      for (k = 1; e >= k; k++) {
        for (m = 1; f >= m; m++) {
          d = (f + 1) * (k - 1) + m - 1, c = (f + 1) * (k - 1) + m, h = (f + 1) * k + m, p.push((f + 1) * k + m - 1, d, h), p.push(d, c, h);
        }
      }
      return new b(l, p);
    };
  }, {"../collision/AABB":3, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../utils/Octree":50, "./Shape":43}], 46:[function(c, k) {
    function b() {
      e.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
    }
    k.exports = b;
    var e = (c("../math/Vec3"), c("../math/Quaternion"), c("./Solver"));
    b.prototype = new e;
    var f = [], h = [], r = [];
    b.prototype.solve = function(b, c) {
      var e, d = 0, l = this.iterations, k = this.tolerance * this.tolerance, n = this.equations, q = n.length;
      c = c.bodies;
      var z = c.length;
      if (0 !== q) {
        for (e = 0; e !== z; e++) {
          c[e].updateSolveMassProperties();
        }
      }
      h.length = q;
      r.length = q;
      f.length = q;
      for (e = 0; e !== q; e++) {
        var p = n[e];
        f[e] = 0;
        r[e] = p.computeB(b);
        h[e] = 1 / p.computeC();
      }
      if (0 !== q) {
        for (e = 0; e !== z; e++) {
          p = c[e], d = p.wlambda, p.vlambda.set(0, 0, 0), d && d.set(0, 0, 0);
        }
        for (d = 0; d !== l; d++) {
          for (var u = e = 0; u !== q; u++) {
            p = n[u];
            var y = r[u];
            var A = h[u];
            b = f[u];
            var B = p.computeGWlambda();
            y = A * (y - B - p.eps * b);
            b + y < p.minForce ? y = p.minForce - b : b + y > p.maxForce && (y = p.maxForce - b);
            f[u] += y;
            e += 0 < y ? y : -y;
            p.addToWlambda(y);
          }
          if (k > e * e) {
            break;
          }
        }
        for (e = 0; e !== z; e++) {
          p = c[e], l = p.velocity, k = p.angularVelocity, l.vadd(p.vlambda, l), k && k.vadd(p.wlambda, k);
        }
      }
      return d;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./Solver":47}], 47:[function(c, k) {
    function b() {
      this.equations = [];
    }
    k.exports = b;
    b.prototype.solve = function() {
      return 0;
    };
    b.prototype.addEquation = function(b) {
      b.enabled && this.equations.push(b);
    };
    b.prototype.removeEquation = function(b) {
      var c = this.equations;
      b = c.indexOf(b);
      -1 !== b && c.splice(b, 1);
    };
    b.prototype.removeAllEquations = function() {
      this.equations.length = 0;
    };
  }, {}], 48:[function(c, k) {
    function b(b) {
      r.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
      this.subsolver = b;
      this.nodes = [];
      for (this.nodePool = []; 128 > this.nodePool.length;) {
        this.nodePool.push(this.createNode());
      }
    }
    function e(b) {
      for (var c = b.length, e = 0; e !== c; e++) {
        var f = b[e];
        if (!(f.visited || f.body.type & d)) {
          return f;
        }
      }
      return !1;
    }
    function f(b, d, c) {
      d.push(b.body);
      d = b.eqs.length;
      for (var e = 0; e !== d; e++) {
        var f = b.eqs[e];
        -1 === c.indexOf(f) && c.push(f);
      }
    }
    function h(b, d) {
      return d.id - b.id;
    }
    k.exports = b;
    var r = (c("../math/Vec3"), c("../math/Quaternion"), c("./Solver"));
    c = c("../objects/Body");
    b.prototype = new r;
    var q = [], n = [], m = {bodies:[]}, d = c.STATIC, l = [];
    b.prototype.createNode = function() {
      return {body:null, children:[], eqs:[], visited:!1};
    };
    b.prototype.solve = function(b, d) {
      var c = this.nodePool, k = d.bodies, p = this.equations, u = p.length, r = k.length;
      for (d = this.subsolver; c.length < r;) {
        c.push(this.createNode());
      }
      q.length = r;
      for (var v = 0; r > v; v++) {
        q[v] = c[v];
      }
      for (v = 0; v !== r; v++) {
        c = q[v], c.body = k[v], c.children.length = 0, c.eqs.length = 0, c.visited = !1;
      }
      for (c = 0; c !== u; c++) {
        r = p[c];
        v = k.indexOf(r.bi);
        var w = k.indexOf(r.bj);
        v = q[v];
        w = q[w];
        v.children.push(w);
        v.eqs.push(r);
        w.children.push(v);
        w.eqs.push(r);
      }
      k = 0;
      p = n;
      d.tolerance = this.tolerance;
      for (d.iterations = this.iterations; v = e(q);) {
        p.length = 0;
        m.bodies.length = 0;
        r = v;
        v = f;
        u = m.bodies;
        c = p;
        l.push(r);
        r.visited = !0;
        for (v(r, u, c); l.length;) {
          for (w = l.pop(); r = e(w.children);) {
            r.visited = !0, v(r, u, c), l.push(r);
          }
        }
        u = p.length;
        p = p.sort(h);
        for (v = 0; v !== u; v++) {
          d.addEquation(p[v]);
        }
        d.solve(b, m);
        d.removeAllEquations();
        k++;
      }
      return k;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "./Solver":47}], 49:[function(c, k) {
    c = function() {
    };
    k.exports = c;
    c.prototype = {constructor:c, addEventListener:function(b, c) {
      void 0 === this._listeners && (this._listeners = {});
      var e = this._listeners;
      return void 0 === e[b] && (e[b] = []), -1 === e[b].indexOf(c) && e[b].push(c), this;
    }, hasEventListener:function(b, c) {
      if (void 0 === this._listeners) {
        return !1;
      }
      var e = this._listeners;
      return void 0 !== e[b] && -1 !== e[b].indexOf(c) ? !0 : !1;
    }, removeEventListener:function(b, c) {
      if (void 0 === this._listeners) {
        return this;
      }
      var e = this._listeners;
      if (void 0 === e[b]) {
        return this;
      }
      c = e[b].indexOf(c);
      return -1 !== c && e[b].splice(c, 1), this;
    }, dispatchEvent:function(b) {
      if (void 0 === this._listeners) {
        return this;
      }
      var c = this._listeners[b.type];
      if (void 0 !== c) {
        b.target = this;
        for (var f = 0, h = c.length; h > f; f++) {
          c[f].call(this, b);
        }
      }
      return this;
    }};
  }, {}], 50:[function(c, k) {
    function b(b) {
      b = b || {};
      this.root = b.root || null;
      this.aabb = b.aabb ? b.aabb.clone() : new f;
      this.data = [];
      this.children = [];
    }
    function e(c, e) {
      e = e || {};
      e.root = null;
      e.aabb = c;
      b.call(this, e);
      this.maxDepth = "undefined" != typeof e.maxDepth ? e.maxDepth : 8;
    }
    var f = c("../collision/AABB"), h = c("../math/Vec3");
    k.exports = e;
    e.prototype = new b;
    b.prototype.reset = function() {
      this.children.length = this.data.length = 0;
    };
    b.prototype.insert = function(b, c, d) {
      var e = this.data;
      if (d = d || 0, !this.aabb.contains(b)) {
        return !1;
      }
      var f = this.children;
      if (d < (this.maxDepth || this.root.maxDepth)) {
        var h = !1;
        f.length || (this.subdivide(), h = !0);
        for (var k = 0; 8 !== k; k++) {
          if (f[k].insert(b, c, d + 1)) {
            return !0;
          }
        }
        h && (f.length = 0);
      }
      return e.push(c), !0;
    };
    var r = new h;
    b.prototype.subdivide = function() {
      var c = this.aabb, e = c.lowerBound, d = c.upperBound;
      c = this.children;
      c.push(new b({aabb:new f({lowerBound:new h(0, 0, 0)})}), new b({aabb:new f({lowerBound:new h(1, 0, 0)})}), new b({aabb:new f({lowerBound:new h(1, 1, 0)})}), new b({aabb:new f({lowerBound:new h(1, 1, 1)})}), new b({aabb:new f({lowerBound:new h(0, 1, 1)})}), new b({aabb:new f({lowerBound:new h(0, 0, 1)})}), new b({aabb:new f({lowerBound:new h(1, 0, 1)})}), new b({aabb:new f({lowerBound:new h(0, 1, 0)})}));
      d.vsub(e, r);
      r.scale(.5, r);
      d = this.root || this;
      for (var l = 0; 8 !== l; l++) {
        var k = c[l];
        k.root = d;
        var q = k.aabb.lowerBound;
        q.x *= r.x;
        q.y *= r.y;
        q.z *= r.z;
        q.vadd(e, q);
        q.vadd(r, k.aabb.upperBound);
      }
    };
    b.prototype.aabbQuery = function(b, c) {
      for (var d = (this.data, this.children, [this]); d.length;) {
        var e = d.pop();
        e.aabb.overlaps(b) && Array.prototype.push.apply(c, e.data);
        Array.prototype.push.apply(d, e.children);
      }
      return c;
    };
    var q = new f;
    b.prototype.rayQuery = function(b, c, d) {
      return b.getAABB(q), q.toLocalFrame(c, q), this.aabbQuery(q, d), d;
    };
    b.prototype.removeEmptyNodes = function() {
      for (var b = [this]; b.length;) {
        for (var c = b.pop(), d = c.children.length - 1; 0 <= d; d--) {
          c.children[d].data.length || c.children.splice(d, 1);
        }
        Array.prototype.push.apply(b, c.children);
      }
    };
  }, {"../collision/AABB":3, "../math/Vec3":30}], 51:[function(c, k) {
    function b() {
      this.objects = [];
      this.type = Object;
    }
    k.exports = b;
    b.prototype.release = function() {
      for (var b = arguments.length, c = 0; c !== b; c++) {
        this.objects.push(arguments[c]);
      }
    };
    b.prototype.get = function() {
      return 0 === this.objects.length ? this.constructObject() : this.objects.pop();
    };
    b.prototype.constructObject = function() {
      throw Error("constructObject() not implemented in this Pool subclass yet!");
    };
  }, {}], 52:[function(c, k) {
    function b() {
      this.data = {keys:[]};
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b > c) {
        var e = c;
        c = b;
        b = e;
      }
      return this.data[b + "-" + c];
    };
    b.prototype.set = function(b, c, h) {
      if (b > c) {
        var e = c;
        c = b;
        b = e;
      }
      e = b + "-" + c;
      this.get(b, c) || this.data.keys.push(e);
      this.data[e] = h;
    };
    b.prototype.reset = function() {
      for (var b = this.data, c = b.keys; 0 < c.length;) {
        var h = c.pop();
        delete b[h];
      }
    };
  }, {}], 53:[function(c, k) {
    function b() {
    }
    k.exports = b;
    b.defaults = function(b, c) {
      b = b || {};
      for (var e in c) {
        e in b || (b[e] = c[e]);
      }
      return b;
    };
  }, {}], 54:[function(c, k) {
    function b() {
      f.call(this);
      this.type = e;
    }
    k.exports = b;
    var e = c("../math/Vec3"), f = c("./Pool");
    b.prototype = new f;
    b.prototype.constructObject = function() {
      return new e;
    };
  }, {"../math/Vec3":30, "./Pool":51}], 55:[function(c, k) {
    function b(b) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new n;
      this.world = b;
      this.currentContactMaterial = null;
      this.enableFrictionReduction = !1;
    }
    k.exports = b;
    k = c("../collision/AABB");
    var e = c("../shapes/Shape"), f = c("../collision/Ray"), h = c("../math/Vec3"), r = c("../math/Transform"), q = (c("../shapes/ConvexPolyhedron"), c("../math/Quaternion")), n = (c("../solver/Solver"), c("../utils/Vec3Pool")), m = c("../equations/ContactEquation"), d = c("../equations/FrictionEquation");
    b.prototype.createContactEquation = function(b, d, c, e, f, h) {
      var l;
      this.contactPointPool.length ? (l = this.contactPointPool.pop(), l.bi = b, l.bj = d) : l = new m(b, d);
      l.enabled = b.collisionResponse && d.collisionResponse && c.collisionResponse && e.collisionResponse;
      var p = this.currentContactMaterial;
      l.restitution = p.restitution;
      l.setSpookParams(p.contactEquationStiffness, p.contactEquationRelaxation, this.world.dt);
      b = c.material || b.material;
      d = e.material || d.material;
      return b && d && 0 <= b.restitution && 0 <= d.restitution && (l.restitution = b.restitution * d.restitution), l.si = f || c, l.sj = h || e, l;
    };
    b.prototype.createFrictionEquationsFromContact = function(b, c) {
      var e = b.bi, f = b.bj, h = this.world, l = this.currentContactMaterial, p = l.friction, k = b.si.material || e.material, m = b.sj.material || f.material;
      if (k && m && 0 <= k.friction && 0 <= m.friction && (p = k.friction * m.friction), 0 < p) {
        p *= h.gravity.length();
        k = e.invMass + f.invMass;
        0 < k && (k = 1 / k);
        var u = this.frictionEquationPool;
        m = u.length ? u.pop() : new d(e, f, p * k);
        u = u.length ? u.pop() : new d(e, f, p * k);
        return m.bi = u.bi = e, m.bj = u.bj = f, m.minForce = u.minForce = -p * k, m.maxForce = u.maxForce = p * k, m.ri.copy(b.ri), m.rj.copy(b.rj), u.ri.copy(b.ri), u.rj.copy(b.rj), b.ni.tangents(m.t, u.t), m.setSpookParams(l.frictionEquationStiffness, l.frictionEquationRelaxation, h.dt), u.setSpookParams(l.frictionEquationStiffness, l.frictionEquationRelaxation, h.dt), m.enabled = u.enabled = b.enabled, c.push(m, u), !0;
      }
      return !1;
    };
    var l = new h, v = new h, w = new h;
    b.prototype.createFrictionFromAverage = function(b) {
      var d = this.result[this.result.length - 1];
      if (this.createFrictionEquationsFromContact(d, this.frictionResult) && 1 !== b) {
        var c = this.frictionResult[this.frictionResult.length - 2], e = this.frictionResult[this.frictionResult.length - 1];
        l.setZero();
        v.setZero();
        w.setZero();
        for (var f = d.bi, h = (d.bj, 0); h !== b; h++) {
          d = this.result[this.result.length - 1 - h], d.bodyA !== f ? (l.vadd(d.ni, l), v.vadd(d.ri, v), w.vadd(d.rj, w)) : (l.vsub(d.ni, l), v.vadd(d.rj, v), w.vadd(d.ri, w));
        }
        b = 1 / b;
        v.scale(b, c.ri);
        w.scale(b, c.rj);
        e.ri.copy(c.ri);
        e.rj.copy(c.rj);
        l.normalize();
        l.tangents(c.t, e.t);
      }
    };
    var x = new h, z = new h, p = new q, u = new q;
    b.prototype.getContacts = function(b, d, c, e, f, h, l) {
      this.contactPointPool = f;
      this.frictionEquationPool = l;
      this.result = e;
      this.frictionResult = h;
      e = 0;
      for (f = b.length; e !== f; e++) {
        h = b[e];
        l = d[e];
        var k = null;
        h.material && l.material && (k = c.getContactMaterial(h.material, l.material) || null);
        for (var m = 0; m < h.shapes.length; m++) {
          h.quaternion.mult(h.shapeOrientations[m], p);
          h.quaternion.vmult(h.shapeOffsets[m], x);
          x.vadd(h.position, x);
          for (var n = h.shapes[m], r = 0; r < l.shapes.length; r++) {
            l.quaternion.mult(l.shapeOrientations[r], u);
            l.quaternion.vmult(l.shapeOffsets[r], z);
            z.vadd(l.position, z);
            var q = l.shapes[r];
            if (!(x.distanceTo(z) > n.boundingSphereRadius + q.boundingSphereRadius)) {
              var y = null;
              n.material && q.material && (y = c.getContactMaterial(n.material, q.material) || null);
              this.currentContactMaterial = y || k || c.defaultContactMaterial;
              (y = this[n.type | q.type]) && (n.type < q.type ? y.call(this, n, q, x, z, p, u, h, l, n, q) : y.call(this, q, n, z, x, u, p, l, h, n, q));
            }
          }
        }
      }
    };
    b.prototype[e.types.BOX | e.types.BOX] = b.prototype.boxBox = function(b, d, c, e, f, h, l, p) {
      b.convexPolyhedronRepresentation.material = b.material;
      d.convexPolyhedronRepresentation.material = d.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      d.convexPolyhedronRepresentation.collisionResponse = d.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, d.convexPolyhedronRepresentation, c, e, f, h, l, p, b, d);
    };
    b.prototype[e.types.BOX | e.types.CONVEXPOLYHEDRON] = b.prototype.boxConvex = function(b, d, c, e, f, h, l, p) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, d, c, e, f, h, l, p, b, d);
    };
    b.prototype[e.types.BOX | e.types.PARTICLE] = b.prototype.boxParticle = function(b, d, c, e, f, h, l, p) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexParticle(b.convexPolyhedronRepresentation, d, c, e, f, h, l, p, b, d);
    };
    b.prototype[e.types.SPHERE] = b.prototype.sphereSphere = function(b, d, c, e, f, h, l, p) {
      f = this.createContactEquation(l, p, b, d);
      e.vsub(c, f.ni);
      f.ni.normalize();
      f.ri.copy(f.ni);
      f.rj.copy(f.ni);
      f.ri.mult(b.radius, f.ri);
      f.rj.mult(-d.radius, f.rj);
      f.ri.vadd(c, f.ri);
      f.ri.vsub(l.position, f.ri);
      f.rj.vadd(e, f.rj);
      f.rj.vsub(p.position, f.rj);
      this.result.push(f);
      this.createFrictionEquationsFromContact(f, this.frictionResult);
    };
    var y = new h, A = new h, B = new h;
    b.prototype[e.types.PLANE | e.types.TRIMESH] = b.prototype.planeTrimesh = function(b, d, c, e, f, l, p, k) {
      var m = new h;
      y.set(0, 0, 1);
      f.vmult(y, y);
      for (f = 0; f < d.vertices.length / 3; f++) {
        d.getVertex(f, m);
        var u = new h;
        u.copy(m);
        r.pointToWorldFrame(e, l, u, m);
        u = A;
        m.vsub(c, u);
        if (0 >= y.dot(u)) {
          var n = this.createContactEquation(p, k, b, d);
          n.ni.copy(y);
          var q = B;
          y.scale(u.dot(y), q);
          m.vsub(q, q);
          n.ri.copy(q);
          n.ri.vsub(p.position, n.ri);
          n.rj.copy(m);
          n.rj.vsub(k.position, n.rj);
          this.result.push(n);
          this.createFrictionEquationsFromContact(n, this.frictionResult);
        }
      }
    };
    var D = new h, F = new h, C = (new h, new h), E = new h, H = new h, Q = new h, K = new h, M = new h, L = new h, I = new h, P = new h, T = new h, R = new h, aa = new k, N = [];
    b.prototype[e.types.SPHERE | e.types.TRIMESH] = b.prototype.sphereTrimesh = function(b, d, c, e, h, l, p, k) {
      r.pointToLocalFrame(e, l, c, L);
      h = b.radius;
      aa.lowerBound.set(L.x - h, L.y - h, L.z - h);
      aa.upperBound.set(L.x + h, L.y + h, L.z + h);
      d.getTrianglesInAABB(aa, N);
      var m = b.radius * b.radius;
      for (h = 0; h < N.length; h++) {
        for (var u = 0; 3 > u; u++) {
          if (d.getVertex(d.indices[3 * N[h] + u], C), C.vsub(L, F), F.norm2() <= m) {
            E.copy(C);
            r.pointToWorldFrame(e, l, E, C);
            C.vsub(c, F);
            var n = this.createContactEquation(p, k, b, d);
            n.ni.copy(F);
            n.ni.normalize();
            n.ri.copy(n.ni);
            n.ri.scale(b.radius, n.ri);
            n.ri.vadd(c, n.ri);
            n.ri.vsub(p.position, n.ri);
            n.rj.copy(C);
            n.rj.vsub(k.position, n.rj);
            this.result.push(n);
            this.createFrictionEquationsFromContact(n, this.frictionResult);
          }
        }
      }
      for (h = 0; h < N.length; h++) {
        for (u = 0; 3 > u; u++) {
          d.getVertex(d.indices[3 * N[h] + u], H), d.getVertex(d.indices[3 * N[h] + (u + 1) % 3], Q), Q.vsub(H, K), L.vsub(Q, I), c = I.dot(K), L.vsub(H, I), n = I.dot(K), 0 < n && 0 > c && (L.vsub(H, I), M.copy(K), M.normalize(), n = I.dot(M), M.scale(n, I), I.vadd(H, I), c = I.distanceTo(L), c < b.radius && (n = this.createContactEquation(p, k, b, d), I.vsub(L, n.ni), n.ni.normalize(), n.ni.scale(b.radius, n.ri), r.pointToWorldFrame(e, l, I, I), I.vsub(k.position, n.rj), r.vectorToWorldFrame(l, 
          n.ni, n.ni), r.vectorToWorldFrame(l, n.ri, n.ri), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult)));
        }
      }
      h = 0;
      for (u = N.length; h !== u; h++) {
        if (d.getTriangleVertices(N[h], P, T, R), d.getNormal(N[h], D), L.vsub(P, I), c = I.dot(D), D.scale(c, I), L.vsub(I, I), c = I.distanceTo(L), f.pointInTriangle(I, P, T, R) && c < b.radius) {
          n = this.createContactEquation(p, k, b, d), I.vsub(L, n.ni), n.ni.normalize(), n.ni.scale(b.radius, n.ri), r.pointToWorldFrame(e, l, I, I), I.vsub(k.position, n.rj), r.vectorToWorldFrame(l, n.ni, n.ni), r.vectorToWorldFrame(l, n.ri, n.ri), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult);
        }
      }
      N.length = 0;
    };
    var S = new h, O = new h;
    b.prototype[e.types.SPHERE | e.types.PLANE] = b.prototype.spherePlane = function(b, d, c, e, f, h, l, p) {
      d = this.createContactEquation(l, p, b, d);
      if (d.ni.set(0, 0, 1), h.vmult(d.ni, d.ni), d.ni.negate(d.ni), d.ni.normalize(), d.ni.mult(b.radius, d.ri), c.vsub(e, S), d.ni.mult(d.ni.dot(S), O), S.vsub(O, d.rj), -S.dot(d.ni) <= b.radius) {
        b = d.ri, h = d.rj, b.vadd(c, b), b.vsub(l.position, b), h.vadd(e, h), h.vsub(p.position, h), this.result.push(d), this.createFrictionEquationsFromContact(d, this.frictionResult);
      }
    };
    var W = new h, J = new h, U = new h, ea = new h, ha = new h, V = new h, la = new h, ba = [new h, new h, new h, new h, new h, new h], ja = new h, pa = new h, oa = new h, ma = new h;
    b.prototype[e.types.SPHERE | e.types.BOX] = b.prototype.sphereBox = function(b, d, c, e, f, h, l, p) {
      f = this.v3pool;
      c.vsub(e, ea);
      d.getSideNormals(ba, h);
      h = b.radius;
      for (var k = !1, m = null, n = 0, u = 0, r = 0, q = null, y = 0, v = ba.length; y !== v && !1 === k; y++) {
        var w = ha;
        w.copy(ba[y]);
        var x = w.norm();
        w.normalize();
        var A = ea.dot(w);
        if (x + h > A && 0 < A) {
          var z = V, B = la;
          z.copy(ba[(y + 1) % 3]);
          B.copy(ba[(y + 2) % 3]);
          var C = z.norm(), D = B.norm();
          z.normalize();
          B.normalize();
          var F = ea.dot(z), E = ea.dot(B);
          C > F && F > -C && D > E && E > -D && (A = Math.abs(A - x - h), (null === q || q > A) && (q = A, u = F, r = E, m = x, pa.copy(w), oa.copy(z), ma.copy(B), n++));
        }
      }
      n && (k = !0, n = this.createContactEquation(l, p, b, d), pa.mult(-h, n.ri), n.ni.copy(pa), n.ni.negate(n.ni), pa.mult(m, pa), oa.mult(u, oa), pa.vadd(oa, pa), ma.mult(r, ma), pa.vadd(ma, n.rj), n.ri.vadd(c, n.ri), n.ri.vsub(l.position, n.ri), n.rj.vadd(e, n.rj), n.rj.vsub(p.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult));
      A = f.get();
      for (m = 0; 2 !== m && !k; m++) {
        for (u = 0; 2 !== u && !k; u++) {
          for (r = 0; 2 !== r && !k; r++) {
            if (A.set(0, 0, 0), m ? A.vadd(ba[0], A) : A.vsub(ba[0], A), u ? A.vadd(ba[1], A) : A.vsub(ba[1], A), r ? A.vadd(ba[2], A) : A.vsub(ba[2], A), e.vadd(A, ja), ja.vsub(c, ja), ja.norm2() < h * h) {
              k = !0, n = this.createContactEquation(l, p, b, d), n.ri.copy(ja), n.ri.normalize(), n.ni.copy(n.ri), n.ri.mult(h, n.ri), n.rj.copy(A), n.ri.vadd(c, n.ri), n.ri.vsub(l.position, n.ri), n.rj.vadd(e, n.rj), n.rj.vsub(p.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult);
            }
          }
        }
      }
      f.release(A);
      q = f.get();
      y = f.get();
      n = f.get();
      v = f.get();
      A = f.get();
      w = ba.length;
      for (m = 0; m !== w && !k; m++) {
        for (u = 0; u !== w && !k; u++) {
          if (m % 3 !== u % 3) {
            ba[u].cross(ba[m], q);
            q.normalize();
            ba[m].vadd(ba[u], y);
            n.copy(c);
            n.vsub(y, n);
            n.vsub(e, n);
            x = n.dot(q);
            q.mult(x, v);
            for (r = 0; r === m % 3 || r === u % 3;) {
              r++;
            }
            A.copy(c);
            A.vsub(v, A);
            A.vsub(y, A);
            A.vsub(e, A);
            x = Math.abs(x);
            z = A.norm();
            x < ba[r].norm() && h > z && (k = !0, r = this.createContactEquation(l, p, b, d), y.vadd(v, r.rj), r.rj.copy(r.rj), A.negate(r.ni), r.ni.normalize(), r.ri.copy(r.rj), r.ri.vadd(e, r.ri), r.ri.vsub(c, r.ri), r.ri.normalize(), r.ri.mult(h, r.ri), r.ri.vadd(c, r.ri), r.ri.vsub(l.position, r.ri), r.rj.vadd(e, r.rj), r.rj.vsub(p.position, r.rj), this.result.push(r), this.createFrictionEquationsFromContact(r, this.frictionResult));
          }
        }
      }
      f.release(q, y, n, v, A);
    };
    var ua = new h, Da = new h, Pa = new h, Ba = new h, hg = new h, fb = new h, Ka = new h, ig = new h, jg = new h, kg = new h;
    b.prototype[e.types.SPHERE | e.types.CONVEXPOLYHEDRON] = b.prototype.sphereConvex = function(b, d, c, e, f, h, l, p) {
      f = this.v3pool;
      c.vsub(e, ua);
      for (var k = d.faceNormals, m = d.faces, n = d.vertices, u = b.radius, r = 0; r !== n.length; r++) {
        var q = hg;
        h.vmult(n[r], q);
        e.vadd(q, q);
        var y = Ba;
        if (q.vsub(c, y), y.norm2() < u * u) {
          return b = this.createContactEquation(l, p, b, d), b.ri.copy(y), b.ri.normalize(), b.ni.copy(b.ri), b.ri.mult(u, b.ri), q.vsub(e, b.rj), b.ri.vadd(c, b.ri), b.ri.vsub(l.position, b.ri), b.rj.vadd(e, b.rj), b.rj.vsub(p.position, b.rj), this.result.push(b), void this.createFrictionEquationsFromContact(b, this.frictionResult);
        }
      }
      r = 0;
      for (q = m.length; r !== q; r++) {
        y = m[r];
        var v = fb;
        h.vmult(k[r], v);
        var w = Ka;
        h.vmult(n[y[0]], w);
        w.vadd(e, w);
        var x = ig;
        v.mult(-u, x);
        c.vadd(x, x);
        var A = jg;
        x.vsub(w, A);
        x = A.dot(v);
        A = kg;
        if (c.vsub(w, A), 0 > x && 0 < A.dot(v)) {
          w = [];
          A = 0;
          for (var z = y.length; A !== z; A++) {
            var B = f.get();
            h.vmult(n[y[A]], B);
            e.vadd(B, B);
            w.push(B);
          }
          a: {
            A = w;
            z = v;
            B = c;
            for (var C = null, D = A.length, F = 0; F !== D; F++) {
              var E = A[F], I = W;
              A[(F + 1) % D].vsub(E, I);
              var L = J;
              I.cross(z, L);
              I = U;
              B.vsub(E, I);
              E = L.dot(I);
              if (!(null === C || 0 < E && !0 === C || 0 >= E && !1 === C)) {
                A = !1;
                break a;
              }
              null === C && (C = 0 < E);
            }
            A = !0;
          }
          if (A) {
            b = this.createContactEquation(l, p, b, d);
            v.mult(-u, b.ri);
            v.negate(b.ni);
            d = f.get();
            v.mult(-x, d);
            h = f.get();
            v.mult(-u, h);
            c.vsub(e, b.rj);
            b.rj.vadd(h, b.rj);
            b.rj.vadd(d, b.rj);
            b.rj.vadd(e, b.rj);
            b.rj.vsub(p.position, b.rj);
            b.ri.vadd(c, b.ri);
            b.ri.vsub(l.position, b.ri);
            f.release(d);
            f.release(h);
            this.result.push(b);
            this.createFrictionEquationsFromContact(b, this.frictionResult);
            A = 0;
            for (y = w.length; A !== y; A++) {
              f.release(w[A]);
            }
            break;
          }
          for (A = 0; A !== y.length; A++) {
            v = f.get();
            x = f.get();
            h.vmult(n[y[(A + 1) % y.length]], v);
            h.vmult(n[y[(A + 2) % y.length]], x);
            e.vadd(v, v);
            e.vadd(x, x);
            D = Da;
            x.vsub(v, D);
            C = Pa;
            D.unit(C);
            z = f.get();
            B = f.get();
            c.vsub(v, B);
            F = B.dot(C);
            C.mult(F, z);
            z.vadd(v, z);
            C = f.get();
            if (z.vsub(c, C), 0 < F && F * F < D.norm2() && C.norm2() < u * u) {
              b = this.createContactEquation(l, p, b, d);
              z.vsub(e, b.rj);
              z.vsub(c, b.ni);
              b.ni.normalize();
              b.ni.mult(u, b.ri);
              b.rj.vadd(e, b.rj);
              b.rj.vsub(p.position, b.rj);
              b.ri.vadd(c, b.ri);
              b.ri.vsub(l.position, b.ri);
              this.result.push(b);
              this.createFrictionEquationsFromContact(b, this.frictionResult);
              A = 0;
              for (y = w.length; A !== y; A++) {
                f.release(w[A]);
              }
              return f.release(v), f.release(x), f.release(z), f.release(C), void f.release(B);
            }
            f.release(v);
            f.release(x);
            f.release(z);
            f.release(C);
            f.release(B);
          }
          A = 0;
          for (y = w.length; A !== y; A++) {
            f.release(w[A]);
          }
        }
      }
    };
    new h;
    new h;
    b.prototype[e.types.PLANE | e.types.BOX] = b.prototype.planeBox = function(b, d, c, e, f, h, l, p) {
      d.convexPolyhedronRepresentation.material = d.material;
      d.convexPolyhedronRepresentation.collisionResponse = d.collisionResponse;
      this.planeConvex(b, d.convexPolyhedronRepresentation, c, e, f, h, l, p);
    };
    var rb = new h, Db = new h, Od = new h, lg = new h;
    b.prototype[e.types.PLANE | e.types.CONVEXPOLYHEDRON] = b.prototype.planeConvex = function(b, d, c, e, f, h, l, p) {
      Db.set(0, 0, 1);
      f.vmult(Db, Db);
      for (var k = f = 0; k !== d.vertices.length; k++) {
        if (rb.copy(d.vertices[k]), h.vmult(rb, rb), e.vadd(rb, rb), rb.vsub(c, Od), 0 >= Db.dot(Od)) {
          var m = this.createContactEquation(l, p, b, d), n = lg;
          Db.mult(Db.dot(Od), n);
          rb.vsub(n, n);
          n.vsub(c, m.ri);
          m.ni.copy(Db);
          rb.vsub(e, m.rj);
          m.ri.vadd(c, m.ri);
          m.ri.vsub(l.position, m.ri);
          m.rj.vadd(e, m.rj);
          m.rj.vsub(p.position, m.rj);
          this.result.push(m);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(m, this.frictionResult);
        }
      }
      this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
    };
    var Pd = new h, Tc = new h;
    b.prototype[e.types.CONVEXPOLYHEDRON] = b.prototype.convexConvex = function(b, d, c, e, f, h, l, p, k, m, n, u) {
      if (!(c.distanceTo(e) > b.boundingSphereRadius + d.boundingSphereRadius) && b.findSeparatingAxis(d, c, f, e, h, Pd, n, u)) {
        n = [];
        b.clipAgainstHull(c, f, d, e, h, Pd, -100, 100, n);
        for (h = f = 0; h !== n.length; h++) {
          u = this.createContactEquation(l, p, b, d, k, m);
          var r = u.ri, q = u.rj;
          Pd.negate(u.ni);
          n[h].normal.negate(Tc);
          Tc.mult(n[h].depth, Tc);
          n[h].point.vadd(Tc, r);
          q.copy(n[h].point);
          r.vsub(c, r);
          q.vsub(e, q);
          r.vadd(c, r);
          r.vsub(l.position, r);
          q.vadd(e, q);
          q.vsub(p.position, q);
          this.result.push(u);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(u, this.frictionResult);
        }
        this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
      }
    };
    var Eb = new h, Ue = new h, Sa = new h;
    b.prototype[e.types.PLANE | e.types.PARTICLE] = b.prototype.planeParticle = function(b, d, c, e, f, h, l, p) {
      Eb.set(0, 0, 1);
      l.quaternion.vmult(Eb, Eb);
      e.vsub(l.position, Ue);
      0 >= Eb.dot(Ue) && (b = this.createContactEquation(p, l, d, b), b.ni.copy(Eb), b.ni.negate(b.ni), b.ri.set(0, 0, 0), Eb.mult(Eb.dot(e), Sa), e.vsub(Sa, Sa), b.rj.copy(Sa), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult));
    };
    var Wa = new h;
    b.prototype[e.types.PARTICLE | e.types.SPHERE] = b.prototype.sphereParticle = function(b, d, c, e, f, h, l, p) {
      Wa.set(0, 0, 1);
      e.vsub(c, Wa);
      Wa.norm2() <= b.radius * b.radius && (d = this.createContactEquation(p, l, d, b), Wa.normalize(), d.rj.copy(Wa), d.rj.mult(b.radius, d.rj), d.ni.copy(Wa), d.ni.negate(d.ni), d.ri.set(0, 0, 0), this.result.push(d), this.createFrictionEquationsFromContact(d, this.frictionResult));
    };
    var Fb = new q, Xa = new h, La = (new h, new h), Ma = new h, Gb = new h;
    b.prototype[e.types.PARTICLE | e.types.CONVEXPOLYHEDRON] = b.prototype.convexParticle = function(b, d, c, e, f, h, l, p) {
      var k = -1;
      h = null;
      var m = 0;
      if (Xa.copy(e), Xa.vsub(c, Xa), f.conjugate(Fb), Fb.vmult(Xa, Xa), b.pointIsInside(Xa)) {
        b.worldVerticesNeedsUpdate && b.computeWorldVertices(c, f);
        b.worldFaceNormalsNeedsUpdate && b.computeWorldFaceNormals(f);
        f = 0;
        for (var n = b.faces.length; f !== n; f++) {
          var u = b.worldFaceNormals[f];
          e.vsub(b.worldVertices[b.faces[f][0]], Ma);
          var r = -u.dot(Ma);
          (null === h || Math.abs(r) < Math.abs(h)) && (h = r, k = f, La.copy(u), m++);
        }
        -1 !== k ? (b = this.createContactEquation(p, l, d, b), La.mult(h, Gb), Gb.vadd(e, Gb), Gb.vsub(c, Gb), b.rj.copy(Gb), La.negate(b.ni), b.ri.set(0, 0, 0), d = b.ri, h = b.rj, d.vadd(e, d), d.vsub(p.position, d), h.vadd(c, h), h.vsub(l.position, h), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult)) : console.warn("Point found inside convex, but did not find penetrating face!");
      }
    };
    b.prototype[e.types.BOX | e.types.HEIGHTFIELD] = b.prototype.boxHeightfield = function(b, d, c, e, f, h, l, p) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexHeightfield(b.convexPolyhedronRepresentation, d, c, e, f, h, l, p);
    };
    var Hb = new h, Xb = new h, Ve = [0];
    b.prototype[e.types.CONVEXPOLYHEDRON | e.types.HEIGHTFIELD] = b.prototype.convexHeightfield = function(b, d, c, e, f, h, l, p) {
      var k = d.data, m = d.elementSize, n = b.boundingSphereRadius;
      r.pointToLocalFrame(e, h, c, Hb);
      var u = Math.floor((Hb.x - n) / m) - 1, q = Math.ceil((Hb.x + n) / m) + 1, y = Math.floor((Hb.y - n) / m) - 1;
      m = Math.ceil((Hb.y + n) / m) + 1;
      if (!(0 > q || 0 > m || u > k.length || y > k[0].length)) {
        0 > u && (u = 0);
        0 > q && (q = 0);
        0 > y && (y = 0);
        0 > m && (m = 0);
        u >= k.length && (u = k.length - 1);
        q >= k.length && (q = k.length - 1);
        m >= k[0].length && (m = k[0].length - 1);
        y >= k[0].length && (y = k[0].length - 1);
        k = [];
        d.getRectMinMax(u, y, q, m, k);
        var v = k[0];
        if (!(Hb.z - n > k[1] || Hb.z + n < v)) {
          for (n = u; q > n; n++) {
            for (u = y; m > u; u++) {
              d.getConvexTrianglePillar(n, u, !1), r.pointToWorldFrame(e, h, d.pillarOffset, Xb), c.distanceTo(Xb) < d.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, d.pillarConvex, c, Xb, f, h, l, p, null, null, Ve, null), d.getConvexTrianglePillar(n, u, !0), r.pointToWorldFrame(e, h, d.pillarOffset, Xb), c.distanceTo(Xb) < d.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, d.pillarConvex, c, Xb, f, h, l, p, null, null, Ve, null);
            }
          }
        }
      }
    };
    var Ib = new h, Yb = new h;
    b.prototype[e.types.SPHERE | e.types.HEIGHTFIELD] = b.prototype.sphereHeightfield = function(b, d, c, e, f, h, l, p) {
      var k = d.data, m = b.radius, n = d.elementSize;
      r.pointToLocalFrame(e, h, c, Ib);
      var u = Math.floor((Ib.x - m) / n) - 1, q = Math.ceil((Ib.x + m) / n) + 1, y = Math.floor((Ib.y - m) / n) - 1;
      n = Math.ceil((Ib.y + m) / n) + 1;
      if (!(0 > q || 0 > n || u > k.length || n > k[0].length)) {
        0 > u && (u = 0);
        0 > q && (q = 0);
        0 > y && (y = 0);
        0 > n && (n = 0);
        u >= k.length && (u = k.length - 1);
        q >= k.length && (q = k.length - 1);
        n >= k[0].length && (n = k[0].length - 1);
        y >= k[0].length && (y = k[0].length - 1);
        k = [];
        d.getRectMinMax(u, y, q, n, k);
        var v = k[0];
        if (!(Ib.z - m > k[1] || Ib.z + m < v)) {
          for (m = this.result; q > u; u++) {
            for (k = y; n > k; k++) {
              if (v = m.length, d.getConvexTrianglePillar(u, k, !1), r.pointToWorldFrame(e, h, d.pillarOffset, Yb), c.distanceTo(Yb) < d.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, d.pillarConvex, c, Yb, f, h, l, p), d.getConvexTrianglePillar(u, k, !0), r.pointToWorldFrame(e, h, d.pillarOffset, Yb), c.distanceTo(Yb) < d.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, d.pillarConvex, c, Yb, f, h, l, p), 2 < m.length - v) {
                return;
              }
            }
          }
        }
      }
    };
  }, {"../collision/AABB":3, "../collision/Ray":9, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43, "../solver/Solver":47, "../utils/Vec3Pool":54}], 56:[function(c, k) {
    function b() {
      q.apply(this);
      this.dt = -1;
      this.allowSleep = !1;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = 0;
      this.quatNormalizeFast = !1;
      this.stepnumber = this.time = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new f;
      this.broadphase = new p;
      this.bodies = [];
      this.solver = new h;
      this.constraints = [];
      this.narrowphase = new r(this);
      this.collisionMatrix = new n;
      this.collisionMatrixPrevious = new n;
      this.materials = [];
      this.contactmaterials = [];
      this.contactMaterialTable = new v;
      this.defaultMaterial = new m("default");
      this.defaultContactMaterial = new d(this.defaultMaterial, this.defaultMaterial, {friction:.3, restitution:0});
      this.doProfiling = !1;
      this.profile = {solve:0, makeContactConstraints:0, broadphase:0, integrate:0, narrowphase:0};
      this.subsystems = [];
      this.addBodyEvent = {type:"addBody", body:null};
      this.removeBodyEvent = {type:"removeBody", body:null};
    }
    k.exports = b;
    var e = c("../shapes/Shape"), f = c("../math/Vec3");
    k = c("../math/Quaternion");
    var h = c("../solver/GSSolver"), r = (c("../utils/Vec3Pool"), c("../equations/ContactEquation"), c("../equations/FrictionEquation"), c("./Narrowphase")), q = c("../utils/EventTarget"), n = c("../collision/ArrayCollisionMatrix"), m = c("../material/Material"), d = c("../material/ContactMaterial"), l = c("../objects/Body"), v = c("../utils/TupleDictionary"), w = c("../collision/RaycastResult"), x = c("../collision/AABB"), z = c("../collision/Ray"), p = c("../collision/NaiveBroadphase");
    b.prototype = new q;
    var u = (new x, new z);
    if (b.prototype.getContactMaterial = function(b, d) {
      return this.contactMaterialTable.get(b.id, d.id);
    }, b.prototype.numObjects = function() {
      return this.bodies.length;
    }, b.prototype.collisionMatrixTick = function() {
      var b = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = b;
      this.collisionMatrix.reset();
    }, b.prototype.add = b.prototype.addBody = function(b) {
      -1 === this.bodies.indexOf(b) && (b.index = this.bodies.length, this.bodies.push(b), b.world = this, b.initPosition.copy(b.position), b.initVelocity.copy(b.velocity), b.timeLastSleepy = this.time, b instanceof l && (b.initAngularVelocity.copy(b.angularVelocity), b.initQuaternion.copy(b.quaternion)), this.collisionMatrix.setNumObjects(this.bodies.length), this.addBodyEvent.body = b, this.dispatchEvent(this.addBodyEvent));
    }, b.prototype.addConstraint = function(b) {
      this.constraints.push(b);
    }, b.prototype.removeConstraint = function(b) {
      b = this.constraints.indexOf(b);
      -1 !== b && this.constraints.splice(b, 1);
    }, b.prototype.rayTest = function(b, d, c) {
      c instanceof w ? this.raycastClosest(b, d, {skipBackfaces:!0}, c) : this.raycastAll(b, d, {skipBackfaces:!0}, c);
    }, b.prototype.raycastAll = function(b, d, c, e) {
      return c.mode = z.ALL, c.from = b, c.to = d, c.callback = e, u.intersectWorld(this, c);
    }, b.prototype.raycastAny = function(b, d, c, e) {
      return c.mode = z.ANY, c.from = b, c.to = d, c.result = e, u.intersectWorld(this, c);
    }, b.prototype.raycastClosest = function(b, d, c, e) {
      return c.mode = z.CLOSEST, c.from = b, c.to = d, c.result = e, u.intersectWorld(this, c);
    }, b.prototype.remove = function(b) {
      b.world = null;
      var d = this.bodies.length - 1, c = this.bodies, e = c.indexOf(b);
      if (-1 !== e) {
        c.splice(e, 1);
        for (e = 0; e !== c.length; e++) {
          c[e].index = e;
        }
        this.collisionMatrix.setNumObjects(d);
        this.removeBodyEvent.body = b;
        this.dispatchEvent(this.removeBodyEvent);
      }
    }, b.prototype.removeBody = b.prototype.remove, b.prototype.addMaterial = function(b) {
      this.materials.push(b);
    }, b.prototype.addContactMaterial = function(b) {
      this.contactmaterials.push(b);
      this.contactMaterialTable.set(b.materials[0].id, b.materials[1].id, b);
    }, "undefined" == typeof performance && (performance = {}), !performance.now) {
      var y = Date.now();
      performance.timing && performance.timing.navigationStart && (y = performance.timing.navigationStart);
      performance.now = function() {
        return Date.now() - y;
      };
    }
    var A = new f;
    b.prototype.step = function(b, d, c) {
      if (c = c || 10, d = d || 0, 0 === d) {
        this.internalStep(b), this.time += b;
      } else {
        var e = Math.floor((this.time + d) / b) - Math.floor(this.time / b);
        e = Math.min(e, c);
        c = performance.now();
        for (var f = 0; f !== e && (this.internalStep(b), !(performance.now() - c > 1E3 * b)); f++) {
        }
        this.time += d;
        b = this.time % b / b;
        d = this.bodies;
        for (e = 0; e !== d.length; e++) {
          c = d[e], c.type !== l.STATIC && c.sleepState !== l.SLEEPING ? (c.position.vsub(c.previousPosition, A), A.scale(b, A), c.position.vadd(A, c.interpolatedPosition)) : (c.interpolatedPosition.copy(c.position), c.interpolatedQuaternion.copy(c.quaternion));
        }
      }
    };
    var B = {type:"postStep"}, D = {type:"preStep"}, F = {type:"collide", body:null, contact:null}, C = [], E = [], H = [], Q = [], K = (new f, new f, new f, new f, new f, new f, new f, new f, new f, new k, new k), M = new k, L = new f;
    b.prototype.internalStep = function(b) {
      this.dt = b;
      var d, c = this.contacts, f = this.numObjects(), h = this.bodies, p = this.solver, k = this.gravity, m = this.doProfiling, n = this.profile, u = l.DYNAMIC, r = this.constraints, q = (k.norm(), k.x), y = k.y, v = k.z;
      m && (d = performance.now());
      for (k = 0; k !== f; k++) {
        var w = h[k];
        if (w.type & u) {
          var x = w.force;
          w = w.mass;
          x.x += w * q;
          x.y += w * y;
          x.z += w * v;
        }
      }
      k = 0;
      for (w = this.subsystems.length; k !== w; k++) {
        this.subsystems[k].update();
      }
      m && (d = performance.now());
      H.length = 0;
      Q.length = 0;
      this.broadphase.collisionPairs(this, H, Q);
      m && (n.broadphase = performance.now() - d);
      w = r.length;
      for (k = 0; k !== w; k++) {
        if (q = r[k], !q.collideConnected) {
          for (y = H.length - 1; 0 <= y; --y) {
            (q.bodyA === H[y] && q.bodyB === Q[y] || q.bodyB === H[y] && q.bodyA === Q[y]) && (H.splice(y, 1), Q.splice(y, 1));
          }
        }
      }
      this.collisionMatrixTick();
      m && (d = performance.now());
      w = c.length;
      for (k = 0; k !== w; k++) {
        C.push(c[k]);
      }
      c.length = 0;
      w = this.frictionEquations.length;
      for (k = 0; k !== w; k++) {
        E.push(this.frictionEquations[k]);
      }
      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(H, Q, this, c, C, this.frictionEquations, E);
      m && (n.narrowphase = performance.now() - d);
      m && (d = performance.now());
      for (k = 0; k < this.frictionEquations.length; k++) {
        p.addEquation(this.frictionEquations[k]);
      }
      k = c.length;
      for (y = 0; y !== k; y++) {
        q = c[y], w = q.bi, v = q.bj, q.si, q.sj, w.material && v.material && this.getContactMaterial(w.material, v.material), (w.material && v.material && 0 <= w.material.restitution && 0 <= v.material.restitution && (q.restitution = w.material.restitution * v.material.restitution), p.addEquation(q), w.allowSleep && w.type === l.DYNAMIC && w.sleepState === l.SLEEPING && v.sleepState === l.AWAKE && v.type !== l.STATIC) && v.velocity.norm2() + v.angularVelocity.norm2() >= 2 * Math.pow(v.sleepSpeedLimit, 
        2) && (w._wakeUpAfterNarrowphase = !0), v.allowSleep && v.type === l.DYNAMIC && v.sleepState === l.SLEEPING && w.sleepState === l.AWAKE && w.type !== l.STATIC && w.velocity.norm2() + w.angularVelocity.norm2() >= 2 * Math.pow(w.sleepSpeedLimit, 2) && (v._wakeUpAfterNarrowphase = !0), this.collisionMatrix.set(w, v, !0), this.collisionMatrixPrevious.get(w, v) || (F.body = v, F.contact = q, w.dispatchEvent(F), F.body = w, v.dispatchEvent(F));
      }
      m && (n.makeContactConstraints = performance.now() - d, d = performance.now());
      for (k = 0; k !== f; k++) {
        w = h[k], w._wakeUpAfterNarrowphase && (w.wakeUp(), w._wakeUpAfterNarrowphase = !1);
      }
      w = r.length;
      for (k = 0; k !== w; k++) {
        for (q = r[k], q.update(), y = 0, c = q.equations.length; y !== c; y++) {
          p.addEquation(q.equations[y]);
        }
      }
      p.solve(b, this);
      m && (n.solve = performance.now() - d);
      p.removeAllEquations();
      p = Math.pow;
      for (k = 0; k !== f; k++) {
        if (w = h[k], w.type & u && (r = p(1 - w.linearDamping, b), c = w.velocity, c.mult(r, c), r = w.angularVelocity)) {
          c = p(1 - w.angularDamping, b), r.mult(c, r);
        }
      }
      this.dispatchEvent(D);
      for (k = 0; k !== f; k++) {
        w = h[k], w.preStep && w.preStep.call(w);
      }
      m && (d = performance.now());
      u = l.DYNAMIC | l.KINEMATIC;
      p = 0 === this.stepnumber % (this.quatNormalizeSkip + 1);
      r = this.quatNormalizeFast;
      c = .5 * b;
      e.types.PLANE;
      e.types.CONVEXPOLYHEDRON;
      for (k = 0; k !== f; k++) {
        if (w = h[k], q = w.force, y = w.torque, w.type & u && w.sleepState !== l.SLEEPING) {
          v = w.velocity;
          x = w.angularVelocity;
          var A = w.position, z = w.quaternion, I = w.invMass, ma = w.invInertiaWorld;
          v.x += q.x * I * b;
          v.y += q.y * I * b;
          v.z += q.z * I * b;
          w.angularVelocity && (ma.vmult(y, L), L.mult(b, L), L.vadd(x, x));
          A.x += v.x * b;
          A.y += v.y * b;
          A.z += v.z * b;
          w.angularVelocity && (K.set(x.x, x.y, x.z, 0), K.mult(z, M), z.x += c * M.x, z.y += c * M.y, z.z += c * M.z, z.w += c * M.w, p && (r ? z.normalizeFast() : z.normalize()));
          w.aabb && (w.aabbNeedsUpdate = !0);
          w.updateInertiaWorld && w.updateInertiaWorld();
        }
      }
      this.clearForces();
      this.broadphase.dirty = !0;
      m && (n.integrate = performance.now() - d);
      this.time += b;
      this.stepnumber += 1;
      this.dispatchEvent(B);
      for (k = 0; k !== f; k++) {
        w = h[k], (b = w.postStep) && b.call(w);
      }
      if (this.allowSleep) {
        for (k = 0; k !== f; k++) {
          h[k].sleepTick(this.time);
        }
      }
    };
    b.prototype.clearForces = function() {
      for (var b = this.bodies, d = b.length, c = 0; c !== d; c++) {
        var e = b[c];
        e.force;
        e.torque;
        e.force.set(0, 0, 0);
        e.torque.set(0, 0, 0);
      }
    };
  }, {"../collision/AABB":3, "../collision/ArrayCollisionMatrix":4, "../collision/NaiveBroadphase":7, "../collision/Ray":9, "../collision/RaycastResult":10, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../material/ContactMaterial":24, "../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Shape":43, "../solver/GSSolver":46, "../utils/EventTarget":49, "../utils/TupleDictionary":52, "../utils/Vec3Pool":54, "./Narrowphase":55}]}, 
  {}, [2])(2);
});
!function(a, c, k) {
  function b(f, k) {
    if (!c[f]) {
      if (!a[f]) {
        var h = "function" == typeof require && require;
        if (!k && h) {
          return h(f, !0);
        }
        if (e) {
          return e(f, !0);
        }
        throw Error("Cannot find module '" + f + "'");
      }
      k = c[f] = {exports:{}};
      a[f][0].call(k.exports, function(c) {
        var e = a[f][1][c];
        return b(e ? e : c);
      }, k, k.exports);
    }
    return c[f].exports;
  }
  for (var e = "function" == typeof require && require, f = 0; f < k.length; f++) {
    b(k[f]);
  }
  return b;
}({1:[function(a, c) {
  var k = (a("./pointable"), a("gl-matrix")), b = k.vec3, e = k.mat3, f = k.mat4;
  a = (a("underscore"), c.exports = function(a, c) {
    this.finger = a;
    this._matrix = this._center = null;
    this.type = c.type;
    this.prevJoint = c.prevJoint;
    this.nextJoint = c.nextJoint;
    this.width = c.width;
    a = Array(3);
    b.sub(a, c.nextJoint, c.prevJoint);
    this.length = b.length(a);
    this.basis = c.basis;
  });
  a.prototype.left = function() {
    return this._left ? this._left : (this._left = 0 > e.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])), this._left);
  };
  a.prototype.matrix = function() {
    if (this._matrix) {
      return this._matrix;
    }
    var a = this.basis, b = this._matrix = f.create();
    return b[0] = a[0][0], b[1] = a[0][1], b[2] = a[0][2], b[4] = a[1][0], b[5] = a[1][1], b[6] = a[1][2], b[8] = a[2][0], b[9] = a[2][1], b[10] = a[2][2], b[3] = this.center()[0], b[7] = this.center()[1], b[11] = this.center()[2], this.left() && (b[0] *= -1, b[1] *= -1, b[2] *= -1), this._matrix;
  };
  a.prototype.lerp = function(a, c) {
    b.lerp(a, this.prevJoint, this.nextJoint, c);
  };
  a.prototype.center = function() {
    if (this._center) {
      return this._center;
    }
    var a = b.create();
    return this.lerp(a, .5), this._center = a, a;
  };
  a.prototype.direction = function() {
    return [-1 * this.basis[2][0], -1 * this.basis[2][1], -1 * this.basis[2][2]];
  };
}, {"./pointable":14, "gl-matrix":23, underscore:24}], 2:[function(a, c) {
  a = c.exports = function(a) {
    this.pos = 0;
    this._buf = [];
    this.size = a;
  };
  a.prototype.get = function(a) {
    return void 0 == a && (a = 0), a >= this.size ? void 0 : a >= this._buf.length ? void 0 : this._buf[(this.pos - a - 1) % this.size];
  };
  a.prototype.push = function(a) {
    return this._buf[this.pos % this.size] = a, this.pos++;
  };
}, {}], 3:[function(a, c) {
  var k = a("../protocol").chooseProtocol, b = a("events").EventEmitter, e = a("underscore"), f = c.exports = function(a) {
    this.opts = e.defaults(a || {}, {host:"127.0.0.1", enableGestures:!1, scheme:this.getScheme(), port:this.getPort(), background:!1, optimizeHMD:!1, requestProtocolVersion:f.defaultProtocolVersion});
    this.host = this.opts.host;
    this.port = this.opts.port;
    this.scheme = this.opts.scheme;
    this.protocolVersionVerified = !1;
    this.optimizeHMD = this.background = null;
    this.on("ready", function() {
      this.enableGestures(this.opts.enableGestures);
      this.setBackground(this.opts.background);
      this.setOptimizeHMD(this.opts.optimizeHMD);
      console.log(this.opts.optimizeHMD ? "Optimized for head mounted display usage." : "Optimized for desktop usage.");
    });
  };
  f.defaultProtocolVersion = 6;
  f.prototype.getUrl = function() {
    return this.scheme + "//" + this.host + ":" + this.port + "/v" + this.opts.requestProtocolVersion + ".json";
  };
  f.prototype.getScheme = function() {
    return "ws:";
  };
  f.prototype.getPort = function() {
    return 6437;
  };
  f.prototype.setBackground = function(a) {
    this.opts.background = a;
    this.protocol && this.protocol.sendBackground && this.background !== this.opts.background && (this.background = this.opts.background, this.protocol.sendBackground(this, this.opts.background));
  };
  f.prototype.setOptimizeHMD = function(a) {
    this.opts.optimizeHMD = a;
    this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD && (this.optimizeHMD = this.opts.optimizeHMD, this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD));
  };
  f.prototype.handleOpen = function() {
    this.connected || (this.connected = !0, this.emit("connect"));
  };
  f.prototype.enableGestures = function(a) {
    this.gesturesEnabled = a ? !0 : !1;
    this.send(this.protocol.encode({enableGestures:this.gesturesEnabled}));
  };
  f.prototype.handleClose = function(a) {
    this.connected && (this.disconnect(), 1001 === a && 1 < this.opts.requestProtocolVersion && (this.protocolVersionVerified ? this.protocolVersionVerified = !1 : this.opts.requestProtocolVersion--), this.startReconnection());
  };
  f.prototype.startReconnection = function() {
    var a = this;
    this.reconnectionTimer || (this.reconnectionTimer = setInterval(function() {
      a.reconnect();
    }, 500));
  };
  f.prototype.stopReconnection = function() {
    this.reconnectionTimer = clearInterval(this.reconnectionTimer);
  };
  f.prototype.disconnect = function(a) {
    return a || this.stopReconnection(), this.socket ? (this.socket.close(), delete this.socket, delete this.protocol, delete this.background, delete this.optimizeHMD, delete this.focusedState, this.connected && (this.connected = !1, this.emit("disconnect")), !0) : void 0;
  };
  f.prototype.reconnect = function() {
    this.connected ? this.stopReconnection() : (this.disconnect(!0), this.connect());
  };
  f.prototype.handleData = function(a) {
    var b;
    a = JSON.parse(a);
    void 0 === this.protocol ? (b = this.protocol = k(a), this.protocolVersionVerified = !0, this.emit("ready")) : b = this.protocol(a);
    this.emit(b.type, b);
  };
  f.prototype.connect = function() {
    return this.socket ? void 0 : (this.socket = this.setupSocket(), !0);
  };
  f.prototype.send = function(a) {
    this.socket.send(a);
  };
  f.prototype.reportFocus = function(a) {
    this.connected && this.focusedState !== a && (this.focusedState = a, this.emit(this.focusedState ? "focus" : "blur"), this.protocol && this.protocol.sendFocused && this.protocol.sendFocused(this, this.focusedState));
  };
  e.extend(f.prototype, b.prototype);
}, {"../protocol":15, events:21, underscore:24}], 4:[function(a, c) {
  var k = c.exports = a("./base");
  a = a("underscore");
  c = c.exports = function(a) {
    k.call(this, a);
    var b = this;
    this.on("ready", function() {
      b.startFocusLoop();
    });
    this.on("disconnect", function() {
      b.stopFocusLoop();
    });
  };
  a.extend(c.prototype, k.prototype);
  c.__proto__ = k;
  c.prototype.useSecure = function() {
    return "https:" === location.protocol;
  };
  c.prototype.getScheme = function() {
    return this.useSecure() ? "wss:" : "ws:";
  };
  c.prototype.getPort = function() {
    return this.useSecure() ? 6436 : 6437;
  };
  c.prototype.setupSocket = function() {
    var a = this, c = new WebSocket(this.getUrl());
    return c.onopen = function() {
      a.handleOpen();
    }, c.onclose = function(b) {
      a.handleClose(b.code, b.reason);
    }, c.onmessage = function(b) {
      a.handleData(b.data);
    }, c.onerror = function() {
      a.useSecure() && "wss:" === a.scheme && (a.scheme = "ws:", a.port = 6437, a.disconnect(), a.connect());
    }, c;
  };
  c.prototype.startFocusLoop = function() {
    if (!this.focusDetectorTimer) {
      var a = this, c = null;
      c = "undefined" != typeof document.hidden ? "hidden" : "undefined" != typeof document.mozHidden ? "mozHidden" : "undefined" != typeof document.msHidden ? "msHidden" : "undefined" != typeof document.webkitHidden ? "webkitHidden" : void 0;
      void 0 === a.windowVisible && (a.windowVisible = void 0 === c ? !0 : !1 === document[c]);
      var f = window.addEventListener("focus", function() {
        a.windowVisible = !0;
        k();
      }), h = window.addEventListener("blur", function() {
        a.windowVisible = !1;
        k();
      });
      this.on("disconnect", function() {
        window.removeEventListener("focus", f);
        window.removeEventListener("blur", h);
      });
      var k = function() {
        a.reportFocus((void 0 === c ? !0 : !1 === document[c]) && a.windowVisible);
      };
      k();
      this.focusDetectorTimer = setInterval(k, 100);
    }
  };
  c.prototype.stopFocusLoop = function() {
    this.focusDetectorTimer && (clearTimeout(this.focusDetectorTimer), delete this.focusDetectorTimer);
  };
}, {"./base":3, underscore:24}], 5:[function(a, c) {
  var k = a("__browserify_process"), b = a("./frame"), e = a("./hand"), f = a("./pointable"), h = a("./finger"), r = a("./circular_buffer"), q = a("./pipeline"), n = a("events").EventEmitter, m = a("./gesture").gestureListener, d = a("./dialog"), l = a("underscore"), v = c.exports = function(d) {
    var c = this;
    d = l.defaults(d || {}, {inNode:"undefined" != typeof k && k.versions && k.versions.node});
    this.inNode = d.inNode;
    d = l.defaults(d || {}, {frameEventName:this.useAnimationLoop() ? "animationFrame" : "deviceFrame", suppressAnimationLoop:!this.useAnimationLoop(), loopWhileDisconnected:!0, useAllPlugins:!1, checkVersion:!0});
    this.animationFrameRequested = !1;
    this.onAnimationFrame = function(a) {
      c.lastConnectionFrame.valid && c.emit("animationFrame", c.lastConnectionFrame);
      c.emit("frameEnd", a);
      c.loopWhileDisconnected && (!1 !== c.connection.focusedState || c.connection.opts.background) ? window.requestAnimationFrame(c.onAnimationFrame) : c.animationFrameRequested = !1;
    };
    this.suppressAnimationLoop = d.suppressAnimationLoop;
    this.loopWhileDisconnected = d.loopWhileDisconnected;
    this.frameEventName = d.frameEventName;
    this.useAllPlugins = d.useAllPlugins;
    this.history = new r(200);
    this.lastConnectionFrame = this.lastValidFrame = this.lastFrame = b.Invalid;
    this.accumulatedGestures = [];
    this.checkVersion = d.checkVersion;
    this.connectionType = void 0 === d.connectionType ? a(this.inBrowser() ? "./connection/browser" : "./connection/node") : d.connectionType;
    this.connection = new this.connectionType(d);
    this.streamingCount = 0;
    this.devices = {};
    this.plugins = {};
    this._pluginPipelineSteps = {};
    this._pluginExtendedMethods = {};
    d.useAllPlugins && this.useRegisteredPlugins();
    this.setupFrameEvents(d);
    this.setupConnectionEvents();
    this.startAnimationLoop();
  };
  v.prototype.gesture = function(a, b) {
    a = m(this, a);
    return void 0 !== b && a.stop(b), a;
  };
  v.prototype.setBackground = function(a) {
    return this.connection.setBackground(a), this;
  };
  v.prototype.setOptimizeHMD = function(a) {
    return this.connection.setOptimizeHMD(a), this;
  };
  v.prototype.inBrowser = function() {
    return !this.inNode;
  };
  v.prototype.useAnimationLoop = function() {
    return this.inBrowser() && !this.inBackgroundPage();
  };
  v.prototype.inBackgroundPage = function() {
    return "undefined" != typeof chrome && chrome.extension && chrome.extension.getBackgroundPage && chrome.extension.getBackgroundPage() === window;
  };
  v.prototype.connect = function() {
    return this.connection.connect(), this;
  };
  v.prototype.streaming = function() {
    return 0 < this.streamingCount;
  };
  v.prototype.connected = function() {
    return !!this.connection.connected;
  };
  v.prototype.startAnimationLoop = function() {
    this.suppressAnimationLoop || this.animationFrameRequested || (this.animationFrameRequested = !0, window.requestAnimationFrame(this.onAnimationFrame));
  };
  v.prototype.disconnect = function() {
    return this.connection.disconnect(), this;
  };
  v.prototype.frame = function(a) {
    return this.history.get(a) || b.Invalid;
  };
  v.prototype.loop = function(a) {
    return a && ("function" == typeof a ? this.on(this.frameEventName, a) : this.setupFrameEvents(a)), this.connect();
  };
  v.prototype.addStep = function(a) {
    this.pipeline || (this.pipeline = new q(this));
    this.pipeline.addStep(a);
  };
  v.prototype.processFrame = function(a) {
    a.gestures && (this.accumulatedGestures = this.accumulatedGestures.concat(a.gestures));
    this.lastConnectionFrame = a;
    this.startAnimationLoop();
    this.emit("deviceFrame", a);
  };
  v.prototype.processFinishedFrame = function(a) {
    if (this.lastFrame = a, a.valid && (this.lastValidFrame = a), a.controller = this, a.historyIdx = this.history.push(a), a.gestures) {
      a.gestures = this.accumulatedGestures;
      this.accumulatedGestures = [];
      for (var d = 0; d != a.gestures.length; d++) {
        this.emit("gesture", a.gestures[d], a);
      }
    }
    this.pipeline && (a = this.pipeline.run(a), a || (a = b.Invalid));
    this.emit("frame", a);
    this.emitHandEvents(a);
  };
  v.prototype.emitHandEvents = function(a) {
    for (var b = 0; b < a.hands.length; b++) {
      this.emit("hand", a.hands[b]);
    }
  };
  v.prototype.setupFrameEvents = function(a) {
    a.frame && this.on("frame", a.frame);
    a.hand && this.on("hand", a.hand);
  };
  v.prototype.setupConnectionEvents = function() {
    var a = this;
    this.connection.on("frame", function(b) {
      a.processFrame(b);
    });
    this.on(this.frameEventName, function(b) {
      a.processFinishedFrame(b);
    });
    var b = function() {
      if (5 > a.connection.opts.requestProtocolVersion && 0 == a.streamingCount) {
        a.streamingCount = 1;
        var d = {attached:!0, streaming:!0, type:"unknown", id:"Lx00000000000"};
        a.devices[d.id] = d;
        a.emit("deviceAttached", d);
        a.emit("deviceStreaming", d);
        a.emit("streamingStarted", d);
        a.connection.removeListener("frame", b);
      }
    }, d = function() {
      if (0 < a.streamingCount) {
        for (var b in a.devices) {
          a.emit("deviceStopped", a.devices[b]), a.emit("deviceRemoved", a.devices[b]);
        }
        a.emit("streamingStopped", a.devices[b]);
        a.streamingCount = 0;
        for (b in a.devices) {
          delete a.devices[b];
        }
      }
    };
    this.connection.on("focus", function() {
      a.loopWhileDisconnected && a.startAnimationLoop();
      a.emit("focus");
    });
    this.connection.on("blur", function() {
      a.emit("blur");
    });
    this.connection.on("protocol", function(b) {
      b.on("beforeFrameCreated", function(b) {
        a.emit("beforeFrameCreated", b);
      });
      b.on("afterFrameCreated", function(b, d) {
        a.emit("afterFrameCreated", b, d);
      });
      a.emit("protocol", b);
    });
    this.connection.on("ready", function() {
      a.checkVersion && !a.inNode && a.checkOutOfDate();
      a.emit("ready");
    });
    this.connection.on("connect", function() {
      a.emit("connect");
      a.connection.removeListener("frame", b);
      a.connection.on("frame", b);
    });
    this.connection.on("disconnect", function() {
      a.emit("disconnect");
      d();
    });
    this.connection.on("deviceConnect", function(c) {
      c.state ? (a.emit("deviceConnected"), a.connection.removeListener("frame", b), a.connection.on("frame", b)) : (a.emit("deviceDisconnected"), d());
    });
    this.connection.on("deviceEvent", function(b) {
      b = b.state;
      var d = a.devices[b.id], c = {}, e;
      for (e in b) {
        d && d.hasOwnProperty(e) && d[e] == b[e] || (c[e] = !0);
      }
      a.devices[b.id] = b;
      c.attached && a.emit(b.attached ? "deviceAttached" : "deviceRemoved", b);
      c.streaming && (b.streaming ? (a.streamingCount++, a.emit("deviceStreaming", b), 1 == a.streamingCount && a.emit("streamingStarted", b), c.attached || a.emit("deviceConnected")) : c.attached && b.attached || (a.streamingCount--, a.emit("deviceStopped", b), 0 == a.streamingCount && a.emit("streamingStopped", b), a.emit("deviceDisconnected")));
    });
    this.on("newListener", function(a) {
      "deviceConnected" != a && "deviceDisconnected" != a || console.warn(a + " events are depricated.  Consider using 'streamingStarted/streamingStopped' or 'deviceStreaming/deviceStopped' instead");
    });
  };
  v.prototype.checkOutOfDate = function() {
    console.assert(this.connection && this.connection.protocol);
    var a = this.connection.protocol.serviceVersion, b = this.connection.protocol.version, c = this.connectionType.defaultProtocolVersion;
    return c > b ? (console.warn("Your Protocol Version is v" + b + ", this app was designed for v" + c), d.warnOutOfDate({sV:a, pV:b}), !0) : !1;
  };
  v._pluginFactories = {};
  v.plugin = function(a, b) {
    return this._pluginFactories[a] && console.warn('Plugin "' + a + '" already registered'), this._pluginFactories[a] = b;
  };
  v.plugins = function() {
    return l.keys(this._pluginFactories);
  };
  v.prototype.use = function(a, d) {
    var c, p;
    if (c = "function" == typeof a ? a : v._pluginFactories[a], !c) {
      throw "Leap Plugin " + a + " not found.";
    }
    if (d || (d = {}), this.plugins[a]) {
      return l.extend(this.plugins[a], d), this;
    }
    this.plugins[a] = d;
    d = c.call(this, d);
    for (p in d) {
      if (c = d[p], "function" == typeof c) {
        var k = a, m = p;
        -1 != ["beforeFrameCreated", "afterFrameCreated"].indexOf(m) ? this.on(m, c) : (this.pipeline || (this.pipeline = new q(this)), this._pluginPipelineSteps[k] || (this._pluginPipelineSteps[k] = []), this._pluginPipelineSteps[k].push(this.pipeline.addWrappedStep(m, c)));
      } else {
        k = a;
        m = p;
        switch(this._pluginExtendedMethods[k] || (this._pluginExtendedMethods[k] = []), m) {
          case "frame":
            m = b;
            break;
          case "hand":
            m = e;
            break;
          case "pointable":
            m = f;
            l.extend(h.prototype, c);
            l.extend(h.Invalid, c);
            break;
          case "finger":
            m = h;
            break;
          default:
            throw k + ' specifies invalid object type "' + m + '" for prototypical extension';
        }
        l.extend(m.prototype, c);
        l.extend(m.Invalid, c);
        this._pluginExtendedMethods[k].push([m, c]);
      }
    }
    return this;
  };
  v.prototype.stopUsing = function(a) {
    var b = this._pluginPipelineSteps[a];
    var d = this._pluginExtendedMethods[a], c;
    if (this.plugins[a]) {
      if (b) {
        for (c = 0; c < b.length; c++) {
          this.pipeline.removeStep(b[c]);
        }
      }
      if (d) {
        for (c = 0; c < d.length; c++) {
          b = d[c][0];
          var e = d[c][1];
          for (var f in e) {
            delete b.prototype[f], delete b.Invalid[f];
          }
        }
      }
      return delete this.plugins[a], this;
    }
  };
  v.prototype.useRegisteredPlugins = function() {
    for (var a in v._pluginFactories) {
      this.use(a);
    }
  };
  l.extend(v.prototype, n.prototype);
}, {"./circular_buffer":2, "./connection/browser":4, "./connection/node":20, "./dialog":6, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./pipeline":13, "./pointable":14, __browserify_process:22, events:21, underscore:24}], 6:[function(a, c) {
  var k = a("__browserify_process"), b = c.exports = function(a, b) {
    this.options = b || {};
    this.message = a;
    this.createElement();
  };
  b.prototype.createElement = function() {
    this.element = document.createElement("div");
    this.element.className = "leapjs-dialog";
    this.element.style.position = "fixed";
    this.element.style.top = "8px";
    this.element.style.left = 0;
    this.element.style.right = 0;
    this.element.style.textAlign = "center";
    this.element.style.zIndex = 1E3;
    var a = document.createElement("div");
    this.element.appendChild(a);
    a.style.className = "leapjs-dialog";
    a.style.display = "inline-block";
    a.style.margin = "auto";
    a.style.padding = "8px";
    a.style.color = "#222";
    a.style.background = "#eee";
    a.style.borderRadius = "4px";
    a.style.border = "1px solid #999";
    a.style.textAlign = "left";
    a.style.cursor = "pointer";
    a.style.whiteSpace = "nowrap";
    a.style.transition = "box-shadow 1s linear";
    a.innerHTML = this.message;
    this.options.onclick && a.addEventListener("click", this.options.onclick);
    this.options.onmouseover && a.addEventListener("mouseover", this.options.onmouseover);
    this.options.onmouseout && a.addEventListener("mouseout", this.options.onmouseout);
    this.options.onmousemove && a.addEventListener("mousemove", this.options.onmousemove);
  };
  b.prototype.show = function() {
    return document.body.appendChild(this.element), this;
  };
  b.prototype.hide = function() {
    return document.body.removeChild(this.element), this;
  };
  b.warnOutOfDate = function(a) {
    a || (a = {});
    var c = "http://developer.leapmotion.com?";
    a.returnTo = window.location.href;
    for (var e in a) {
      c += e + "=" + encodeURIComponent(a[e]) + "&";
    }
    var k;
    return k = new b("This site requires Leap Motion Tracking V2.<button id='leapjs-accept-upgrade'  style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 16px;'>Upgrade</button><button id='leapjs-decline-upgrade' style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 8px; '>Not Now</button>", {onclick:function(a) {
      "leapjs-decline-upgrade" != a.target.id && (a = window.open(c, "_blank", "height=800,width=1000,location=1,menubar=1,resizable=1,status=1,toolbar=1,scrollbars=1"), window.focus && a.focus());
      return k.hide(), !0;
    }, onmousemove:function(a) {
      a.target == document.getElementById("leapjs-decline-upgrade") ? (document.getElementById("leapjs-decline-upgrade").style.color = "#000", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "0px 0px 2px #5daa00", document.getElementById("leapjs-accept-upgrade").style.color = "#444", document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none") : (document.getElementById("leapjs-accept-upgrade").style.color = "#000", document.getElementById("leapjs-accept-upgrade").style.boxShadow = 
      "0px 0px 2px #5daa00", document.getElementById("leapjs-decline-upgrade").style.color = "#444", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none");
    }, onmouseout:function() {
      document.getElementById("leapjs-decline-upgrade").style.color = "#444";
      document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none";
      document.getElementById("leapjs-accept-upgrade").style.color = "#444";
      document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none";
    }}), k.show();
  };
  b.hasWarnedBones = !1;
  b.warnBones = function() {
    this.hasWarnedBones || (this.hasWarnedBones = !0, console.warn("Your Leap Service is out of date"), "undefined" != typeof k && k.versions && k.versions.node || this.warnOutOfDate({reason:"bones"}));
  };
}, {__browserify_process:22}], 7:[function(a, c) {
  var k = a("./pointable"), b = a("./bone"), e = a("./dialog");
  a = a("underscore");
  c = c.exports = function(a) {
    k.call(this, a);
    this.dipPosition = a.dipPosition;
    this.pipPosition = a.pipPosition;
    this.mcpPosition = a.mcpPosition;
    this.carpPosition = a.carpPosition;
    this.extended = a.extended;
    this.type = a.type;
    this.finger = !0;
    this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];
    a.bases ? this.addBones(a) : e.warnBones();
  };
  a.extend(c.prototype, k.prototype);
  c.prototype.addBones = function(a) {
    this.metacarpal = new b(this, {type:0, width:this.width, prevJoint:this.carpPosition, nextJoint:this.mcpPosition, basis:a.bases[0]});
    this.proximal = new b(this, {type:1, width:this.width, prevJoint:this.mcpPosition, nextJoint:this.pipPosition, basis:a.bases[1]});
    this.medial = new b(this, {type:2, width:this.width, prevJoint:this.pipPosition, nextJoint:this.dipPosition, basis:a.bases[2]});
    this.distal = new b(this, {type:3, width:this.width, prevJoint:this.dipPosition, nextJoint:a.btipPosition, basis:a.bases[3]});
    this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];
  };
  c.prototype.toString = function() {
    return "Finger [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  c.Invalid = {valid:!1};
}, {"./bone":1, "./dialog":6, "./pointable":14, underscore:24}], 8:[function(a, c) {
  var k = a("./hand"), b = a("./pointable"), e = a("./gesture").createGesture, f = a("gl-matrix"), h = f.mat3, r = f.vec3, q = a("./interaction_box"), n = a("./finger"), m = a("underscore");
  a = c.exports = function(a) {
    if (this.valid = !0, this.id = a.id, this.timestamp = a.timestamp, this.hands = [], this.handsMap = {}, this.pointables = [], this.tools = [], this.fingers = [], a.interactionBox && (this.interactionBox = new q(a.interactionBox)), this.gestures = [], this.pointablesMap = {}, this._translation = a.t, this._rotation = m.flatten(a.r), this._scaleFactor = a.s, this.data = a, this.type = "frame", this.currentFrameRate = a.currentFrameRate, a.gestures) {
      for (var b = 0, d = a.gestures.length; b != d; b++) {
        this.gestures.push(e(a.gestures[b]));
      }
    }
    this.postprocessData(a);
  };
  a.prototype.postprocessData = function(a) {
    a || (a = this.data);
    for (var d = 0, c = a.hands.length; d != c; d++) {
      var e = new k(a.hands[d]);
      e.frame = this;
      this.hands.push(e);
      this.handsMap[e.id] = e;
    }
    a.pointables = m.sortBy(a.pointables, function(a) {
      return a.id;
    });
    d = 0;
    for (c = a.pointables.length; d != c; d++) {
      e = a.pointables[d], e = e.dipPosition ? new n(e) : new b(e), e.frame = this, this.addPointable(e);
    }
  };
  a.prototype.addPointable = function(a) {
    if (this.pointables.push(a), this.pointablesMap[a.id] = a, (a.tool ? this.tools : this.fingers).push(a), void 0 !== a.handId && this.handsMap.hasOwnProperty(a.handId)) {
      var b = this.handsMap[a.handId];
      switch(b.pointables.push(a), (a.tool ? b.tools : b.fingers).push(a), a.type) {
        case 0:
          b.thumb = a;
          break;
        case 1:
          b.indexFinger = a;
          break;
        case 2:
          b.middleFinger = a;
          break;
        case 3:
          b.ringFinger = a;
          break;
        case 4:
          b.pinky = a;
      }
    }
  };
  a.prototype.tool = function(a) {
    a = this.pointable(a);
    return a.tool ? a : b.Invalid;
  };
  a.prototype.pointable = function(a) {
    return this.pointablesMap[a] || b.Invalid;
  };
  a.prototype.finger = function(a) {
    a = this.pointable(a);
    return a.tool ? b.Invalid : a;
  };
  a.prototype.hand = function(a) {
    return this.handsMap[a] || k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid) {
      return 0;
    }
    var d = this.rotationMatrix(a);
    d = Math.acos(.5 * (d[0] + d[4] + d[8] - 1));
    if (d = isNaN(d) ? 0 : d, void 0 !== b) {
      a = this.rotationAxis(a), d *= r.dot(a, r.normalize(r.create(), b));
    }
    return d;
  };
  a.prototype.rotationAxis = function(a) {
    return this.valid && a.valid ? r.normalize(r.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : r.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    var b = h.transpose(h.create(), this._rotation);
    return h.multiply(h.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    return this.valid && a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    return this.valid && a.valid ? r.subtract(r.create(), this._translation, a._translation) : r.create();
  };
  a.prototype.toString = function() {
    var a = "Frame [ id:" + this.id + " | timestamp:" + this.timestamp + " | Hand count:(" + this.hands.length + ") | Pointable count:(" + this.pointables.length + ")";
    return this.gestures && (a += " | Gesture count:(" + this.gestures.length + ")"), a + " ]";
  };
  a.prototype.dump = function() {
    var a = "Frame Info:<br/>" + this.toString();
    a += "<br/><br/>Hands:<br/>";
    for (var b = 0, c = this.hands.length; b != c; b++) {
      a += "  " + this.hands[b].toString() + "<br/>";
    }
    a += "<br/><br/>Pointables:<br/>";
    b = 0;
    for (c = this.pointables.length; b != c; b++) {
      a += "  " + this.pointables[b].toString() + "<br/>";
    }
    if (this.gestures) {
      for (a += "<br/><br/>Gestures:<br/>", b = 0, c = this.gestures.length; b != c; b++) {
        a += "  " + this.gestures[b].toString() + "<br/>";
      }
    }
    return a += "<br/><br/>Raw JSON:<br/>", a + JSON.stringify(this.data);
  };
  a.Invalid = {valid:!1, hands:[], fingers:[], tools:[], gestures:[], pointables:[], pointable:function() {
    return b.Invalid;
  }, finger:function() {
    return b.Invalid;
  }, hand:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return h.create();
  }, rotationAxis:function() {
    return r.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return r.create();
  }};
}, {"./finger":7, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "gl-matrix":23, underscore:24}], 9:[function(a, c, k) {
  var b = a("gl-matrix").vec3;
  c = a("events").EventEmitter;
  var e = a("underscore"), f = (k.createGesture = function(a) {
    switch(a.type) {
      case "circle":
        var b = new h(a);
        break;
      case "swipe":
        b = new r(a);
        break;
      case "screenTap":
        b = new q(a);
        break;
      case "keyTap":
        b = new n(a);
        break;
      default:
        throw "unknown gesture type";
    }
    return b.id = a.id, b.handIds = a.handIds.slice(), b.pointableIds = a.pointableIds.slice(), b.duration = a.duration, b.state = a.state, b.type = a.type, b;
  }, k.gestureListener = function(a, b) {
    var d = {}, c = {};
    a.on("gesture", function(a, h) {
      if (a.type == b) {
        if (("start" == a.state || "stop" == a.state) && void 0 === c[a.id]) {
          var l = new f(a, h);
          c[a.id] = l;
          e.each(d, function(a, b) {
            l.on(b, a);
          });
        }
        c[a.id].update(a, h);
        "stop" == a.state && delete c[a.id];
      }
    });
    var h = {start:function(a) {
      return d.start = a, h;
    }, stop:function(a) {
      return d.stop = a, h;
    }, complete:function(a) {
      return d.stop = a, h;
    }, update:function(a) {
      return d.update = a, h;
    }};
    return h;
  }, k.Gesture = function(a, b) {
    this.gestures = [a];
    this.frames = [b];
  });
  f.prototype.update = function(a, b) {
    this.lastGesture = a;
    this.lastFrame = b;
    this.gestures.push(a);
    this.frames.push(b);
    this.emit(a.state, this);
  };
  f.prototype.translation = function() {
    return b.subtract(b.create(), this.lastGesture.startPosition, this.lastGesture.position);
  };
  e.extend(f.prototype, c.prototype);
  var h = function(a) {
    this.center = a.center;
    this.normal = a.normal;
    this.progress = a.progress;
    this.radius = a.radius;
  };
  h.prototype.toString = function() {
    return "CircleGesture [" + JSON.stringify(this) + "]";
  };
  var r = function(a) {
    this.startPosition = a.startPosition;
    this.position = a.position;
    this.direction = a.direction;
    this.speed = a.speed;
  };
  r.prototype.toString = function() {
    return "SwipeGesture [" + JSON.stringify(this) + "]";
  };
  var q = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  q.prototype.toString = function() {
    return "ScreenTapGesture [" + JSON.stringify(this) + "]";
  };
  var n = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  n.prototype.toString = function() {
    return "KeyTapGesture [" + JSON.stringify(this) + "]";
  };
}, {events:21, "gl-matrix":23, underscore:24}], 10:[function(a, c) {
  var k = a("./pointable"), b = a("./bone"), e = a("gl-matrix"), f = e.mat3, h = e.vec3, r = a("underscore");
  a = c.exports = function(a) {
    this.id = a.id;
    this.palmPosition = a.palmPosition;
    this.direction = a.direction;
    this.palmVelocity = a.palmVelocity;
    this.palmNormal = a.palmNormal;
    this.sphereCenter = a.sphereCenter;
    this.sphereRadius = a.sphereRadius;
    this.valid = !0;
    this.pointables = [];
    this.fingers = [];
    this.arm = a.armBasis ? new b(this, {type:4, width:a.armWidth, prevJoint:a.elbow, nextJoint:a.wrist, basis:a.armBasis}) : null;
    this.tools = [];
    this._translation = a.t;
    this._rotation = r.flatten(a.r);
    this._scaleFactor = a.s;
    this.timeVisible = a.timeVisible;
    this.stabilizedPalmPosition = a.stabilizedPalmPosition;
    this.type = a.type;
    this.grabStrength = a.grabStrength;
    this.pinchStrength = a.pinchStrength;
    this.confidence = a.confidence;
  };
  a.prototype.finger = function(a) {
    return (a = this.frame.finger(a)) && a.handId == this.id ? a : k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid || !a.hand(this.id).valid) {
      return 0;
    }
    var c = this.rotationMatrix(a);
    c = Math.acos(.5 * (c[0] + c[4] + c[8] - 1));
    if (c = isNaN(c) ? 0 : c, void 0 !== b) {
      a = this.rotationAxis(a), c *= h.dot(a, h.normalize(h.create(), b));
    }
    return c;
  };
  a.prototype.rotationAxis = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    a = a.hand(this.id);
    return a.valid ? h.normalize(h.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : h.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return f.create();
    }
    a = a.hand(this.id);
    if (!a.valid) {
      return f.create();
    }
    var b = f.transpose(f.create(), this._rotation);
    return f.multiply(f.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    if (!this.valid || !a.valid) {
      return 1;
    }
    a = a.hand(this.id);
    return a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    a = a.hand(this.id);
    return a.valid ? [this._translation[0] - a._translation[0], this._translation[1] - a._translation[1], this._translation[2] - a._translation[2]] : h.create();
  };
  a.prototype.toString = function() {
    return "Hand (" + this.type + ") [ id: " + this.id + " | palm velocity:" + this.palmVelocity + " | sphere center:" + this.sphereCenter + " ] ";
  };
  a.prototype.pitch = function() {
    return Math.atan2(this.direction[1], -this.direction[2]);
  };
  a.prototype.yaw = function() {
    return Math.atan2(this.direction[0], -this.direction[2]);
  };
  a.prototype.roll = function() {
    return Math.atan2(this.palmNormal[0], -this.palmNormal[1]);
  };
  a.Invalid = {valid:!1, fingers:[], tools:[], pointables:[], left:!1, pointable:function() {
    return k.Invalid;
  }, finger:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return f.create();
  }, rotationAxis:function() {
    return h.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return h.create();
  }};
}, {"./bone":1, "./pointable":14, "gl-matrix":23, underscore:24}], 11:[function(a, c) {
  c.exports = {Controller:a("./controller"), Frame:a("./frame"), Gesture:a("./gesture"), Hand:a("./hand"), Pointable:a("./pointable"), Finger:a("./finger"), InteractionBox:a("./interaction_box"), CircularBuffer:a("./circular_buffer"), UI:a("./ui"), JSONProtocol:a("./protocol").JSONProtocol, glMatrix:a("gl-matrix"), mat3:a("gl-matrix").mat3, vec3:a("gl-matrix").vec3, loopController:void 0, version:a("./version.js"), _:a("underscore"), EventEmitter:a("events").EventEmitter, loop:function(a, b) {
    return a && void 0 === b && "[object Function]" === {}.toString.call(a) && (b = a, a = {}), this.loopController ? a && this.loopController.setupFrameEvents(a) : this.loopController = new this.Controller(a), this.loopController.loop(b), this.loopController;
  }, plugin:function(a, b) {
    this.Controller.plugin(a, b);
  }};
}, {"./circular_buffer":2, "./controller":5, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "./protocol":15, "./ui":16, "./version.js":19, events:21, "gl-matrix":23, underscore:24}], 12:[function(a, c) {
  var k = a("gl-matrix").vec3;
  a = c.exports = function(a) {
    this.valid = !0;
    this.center = a.center;
    this.size = a.size;
    this.width = a.size[0];
    this.height = a.size[1];
    this.depth = a.size[2];
  };
  a.prototype.denormalizePoint = function(a) {
    return k.fromValues((a[0] - .5) * this.size[0] + this.center[0], (a[1] - .5) * this.size[1] + this.center[1], (a[2] - .5) * this.size[2] + this.center[2]);
  };
  a.prototype.normalizePoint = function(a, c) {
    a = k.fromValues((a[0] - this.center[0]) / this.size[0] + .5, (a[1] - this.center[1]) / this.size[1] + .5, (a[2] - this.center[2]) / this.size[2] + .5);
    return c && (a[0] = Math.min(Math.max(a[0], 0), 1), a[1] = Math.min(Math.max(a[1], 0), 1), a[2] = Math.min(Math.max(a[2], 0), 1)), a;
  };
  a.prototype.toString = function() {
    return "InteractionBox [ width:" + this.width + " | height:" + this.height + " | depth:" + this.depth + " ]";
  };
  a.Invalid = {valid:!1};
}, {"gl-matrix":23}], 13:[function(a, c) {
  a = c.exports = function(a) {
    this.steps = [];
    this.controller = a;
  };
  a.prototype.addStep = function(a) {
    this.steps.push(a);
  };
  a.prototype.run = function(a) {
    for (var b = this.steps.length, c = 0; c != b && a; c++) {
      a = this.steps[c](a);
    }
    return a;
  };
  a.prototype.removeStep = function(a) {
    a = this.steps.indexOf(a);
    if (-1 === a) {
      throw "Step not found in pipeline";
    }
    this.steps.splice(a, 1);
  };
  a.prototype.addWrappedStep = function(a, b) {
    var c = this.controller, f = function(e) {
      var f;
      var h = "frame" == a ? [e] : e[a + "s"] || [];
      var k = 0;
      for (f = h.length; f > k; k++) {
        b.call(c, h[k]);
      }
      return e;
    };
    return this.addStep(f), f;
  };
}, {}], 14:[function(a, c) {
  a = a("gl-matrix");
  c = (a.vec3, c.exports = function(a) {
    this.valid = !0;
    this.id = a.id;
    this.handId = a.handId;
    this.length = a.length;
    this.tool = a.tool;
    this.width = a.width;
    this.direction = a.direction;
    this.stabilizedTipPosition = a.stabilizedTipPosition;
    this.tipPosition = a.tipPosition;
    this.tipVelocity = a.tipVelocity;
    this.touchZone = a.touchZone;
    this.touchDistance = a.touchDistance;
    this.timeVisible = a.timeVisible;
  });
  c.prototype.toString = function() {
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  c.prototype.hand = function() {
    return this.frame.hand(this.handId);
  };
  c.Invalid = {valid:!1};
}, {"gl-matrix":23}], 15:[function(a, c, k) {
  var b = a("./frame"), e = (a("./hand"), a("./pointable"), a("./finger"), a("underscore")), f = a("events").EventEmitter, h = function(a) {
    this.type = a.type;
    this.state = a.state;
  };
  k.chooseProtocol = function(a) {
    switch(a.version) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        var b = r(a);
        b.sendBackground = function(a, d) {
          a.send(b.encode({background:d}));
        };
        b.sendFocused = function(a, d) {
          a.send(b.encode({focused:d}));
        };
        b.sendOptimizeHMD = function(a, d) {
          a.send(b.encode({optimizeHMD:d}));
        };
        break;
      default:
        throw "unrecognized version";
    }
    return b;
  };
  var r = k.JSONProtocol = function(a) {
    var c = function(a) {
      if (a.event) {
        return new h(a.event);
      }
      c.emit("beforeFrameCreated", a);
      var d = new b(a);
      return c.emit("afterFrameCreated", d, a), d;
    };
    return c.encode = function(a) {
      return JSON.stringify(a);
    }, c.version = a.version, c.serviceVersion = a.serviceVersion, c.versionLong = "Version " + a.version, c.type = "protocol", e.extend(c, f.prototype), c;
  };
}, {"./finger":7, "./frame":8, "./hand":10, "./pointable":14, events:21, underscore:24}], 16:[function(a, c, k) {
  k.UI = {Region:a("./ui/region"), Cursor:a("./ui/cursor")};
}, {"./ui/cursor":17, "./ui/region":18}], 17:[function(a, c) {
  c.exports = function() {
    return function(a) {
      var b = a.pointables.sort(function(a, b) {
        return a.z - b.z;
      })[0];
      return b && b.valid && (a.cursorPosition = b.tipPosition), a;
    };
  };
}, {}], 18:[function(a, c) {
  var k = a("events").EventEmitter;
  a = a("underscore");
  var b = c.exports = function(a, b) {
    this.start = new Vector(a);
    this.end = new Vector(b);
    this.enteredFrame = null;
  };
  b.prototype.hasPointables = function(a) {
    for (var b = 0; b != a.pointables.length; b++) {
      var c = a.pointables[b].tipPosition;
      if (c.x >= this.start.x && c.x <= this.end.x && c.y >= this.start.y && c.y <= this.end.y && c.z >= this.start.z && c.z <= this.end.z) {
        return !0;
      }
    }
    return !1;
  };
  b.prototype.listener = function(a) {
    var b = this;
    return a && a.nearThreshold && this.setupNearRegion(a.nearThreshold), function(a) {
      return b.updatePosition(a);
    };
  };
  b.prototype.clipper = function() {
    var a = this;
    return function(b) {
      return a.updatePosition(b), a.enteredFrame ? b : null;
    };
  };
  b.prototype.setupNearRegion = function(a) {
    a = this.nearRegion = new b([this.start.x - a, this.start.y - a, this.start.z - a], [this.end.x + a, this.end.y + a, this.end.z + a]);
    var c = this;
    a.on("enter", function(a) {
      c.emit("near", a);
    });
    a.on("exit", function(a) {
      c.emit("far", a);
    });
    c.on("exit", function(a) {
      c.emit("near", a);
    });
  };
  b.prototype.updatePosition = function(a) {
    return this.nearRegion && this.nearRegion.updatePosition(a), this.hasPointables(a) && null == this.enteredFrame ? (this.enteredFrame = a, this.emit("enter", this.enteredFrame)) : this.hasPointables(a) || null == this.enteredFrame || (this.enteredFrame = null, this.emit("exit", this.enteredFrame)), a;
  };
  b.prototype.normalize = function(a) {
    return new Vector([(a.x - this.start.x) / (this.end.x - this.start.x), (a.y - this.start.y) / (this.end.y - this.start.y), (a.z - this.start.z) / (this.end.z - this.start.z)]);
  };
  b.prototype.mapToXY = function(a, b, c) {
    a = this.normalize(a);
    var e = a.x, f = a.y;
    return 1 < e ? e = 1 : -1 > e && (e = -1), 1 < f ? f = 1 : -1 > f && (f = -1), [(e + 1) / 2 * b, (1 - f) / 2 * c, a.z];
  };
  a.extend(b.prototype, k.prototype);
}, {events:21, underscore:24}], 19:[function(a, c) {
  c.exports = {full:"0.6.4", major:0, minor:6, dot:4};
}, {}], 20:[function() {
}, {}], 21:[function(a, c, k) {
  a = a("__browserify_process");
  a.EventEmitter || (a.EventEmitter = function() {
  });
  k = k.EventEmitter = a.EventEmitter;
  var b = "function" == typeof Array.isArray ? Array.isArray : function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  k.prototype.setMaxListeners = function(a) {
    this._events || (this._events = {});
    this._events.maxListeners = a;
  };
  k.prototype.emit = function(a) {
    if ("error" === a && (!this._events || !this._events.error || b(this._events.error) && !this._events.error.length)) {
      throw arguments[1] instanceof Error ? arguments[1] : Error("Uncaught, unspecified 'error' event.");
    }
    if (!this._events) {
      return !1;
    }
    var c = this._events[a];
    if (!c) {
      return !1;
    }
    if ("function" == typeof c) {
      switch(arguments.length) {
        case 1:
          c.call(this);
          break;
        case 2:
          c.call(this, arguments[1]);
          break;
        case 3:
          c.call(this, arguments[1], arguments[2]);
          break;
        default:
          var e = Array.prototype.slice.call(arguments, 1);
          c.apply(this, e);
      }
      return !0;
    }
    if (b(c)) {
      e = Array.prototype.slice.call(arguments, 1);
      c = c.slice();
      for (var k = 0, q = c.length; q > k; k++) {
        c[k].apply(this, e);
      }
      return !0;
    }
    return !1;
  };
  k.prototype.addListener = function(a, c) {
    if ("function" != typeof c) {
      throw Error("addListener only takes instances of Function");
    }
    if (this._events || (this._events = {}), this.emit("newListener", a, c), this._events[a]) {
      if (b(this._events[a])) {
        if (!this._events[a].warned) {
          var e;
          (e = void 0 !== this._events.maxListeners ? this._events.maxListeners : 10) && 0 < e && this._events[a].length > e && (this._events[a].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[a].length), console.trace());
        }
        this._events[a].push(c);
      } else {
        this._events[a] = [this._events[a], c];
      }
    } else {
      this._events[a] = c;
    }
    return this;
  };
  k.prototype.on = k.prototype.addListener;
  k.prototype.once = function(a, b) {
    var c = this;
    return c.on(a, function q() {
      c.removeListener(a, q);
      b.apply(this, arguments);
    }), this;
  };
  k.prototype.removeListener = function(a, c) {
    if ("function" != typeof c) {
      throw Error("removeListener only takes instances of Function");
    }
    if (!this._events || !this._events[a]) {
      return this;
    }
    var e = this._events[a];
    if (b(e)) {
      a: {
        if (e.indexOf) {
          c = e.indexOf(c);
        } else {
          for (var f = 0; f < e.length; f++) {
            if (c === e[f]) {
              c = f;
              break a;
            }
          }
          c = -1;
        }
      }
      if (0 > c) {
        return this;
      }
      e.splice(c, 1);
      0 == e.length && delete this._events[a];
    } else {
      this._events[a] === c && delete this._events[a];
    }
    return this;
  };
  k.prototype.removeAllListeners = function(a) {
    return 0 === arguments.length ? (this._events = {}, this) : (a && this._events && this._events[a] && (this._events[a] = null), this);
  };
  k.prototype.listeners = function(a) {
    return this._events || (this._events = {}), this._events[a] || (this._events[a] = []), b(this._events[a]) || (this._events[a] = [this._events[a]]), this._events[a];
  };
  k.listenerCount = function(a, b) {
    return a._events && a._events[b] ? "function" == typeof a._events[b] ? 1 : a._events[b].length : 0;
  };
}, {__browserify_process:22}], 22:[function(a, c) {
  a = c.exports = {};
  a.nextTick = function() {
    if ("undefined" != typeof window && window.setImmediate) {
      return function(a) {
        return window.setImmediate(a);
      };
    }
    if ("undefined" != typeof window && window.postMessage && window.addEventListener) {
      var a = [];
      return window.addEventListener("message", function(b) {
        var c = b.source;
        (c === window || null === c) && "process-tick" === b.data && (b.stopPropagation(), 0 < a.length) && a.shift()();
      }, !0), function(b) {
        a.push(b);
        window.postMessage("process-tick", "*");
      };
    }
    return function(a) {
      setTimeout(a, 0);
    };
  }();
  a.title = "browser";
  a.browser = !0;
  a.env = {};
  a.argv = [];
  a.binding = function() {
    throw Error("process.binding is not supported");
  };
  a.cwd = function() {
    return "/";
  };
  a.chdir = function() {
    throw Error("process.chdir is not supported");
  };
}, {}], 23:[function(a, c, k) {
  !function(a) {
    var b;
    "undefined" == typeof k ? "function" == typeof define && "object" == typeof define.amd && define.amd ? (b = {}, define(function() {
      return b;
    })) : b = "undefined" != typeof window ? window : a : b = k;
    (function(a) {
      if (!b) {
        var b = 1E-6;
      }
      if (!c) {
        var c = "undefined" != typeof Float32Array ? Float32Array : Array;
      }
      if (!e) {
        var e = Math.random;
      }
      var f = {setMatrixArrayType:function(a) {
        c = a;
      }};
      "undefined" != typeof a && (a.glMatrix = f);
      var k = Math.PI / 180;
      f.toRadian = function(a) {
        return a * k;
      };
      var d = {create:function() {
        var a = new c(2);
        return a[0] = 0, a[1] = 0, a;
      }, clone:function(a) {
        var b = new c(2);
        return b[0] = a[0], b[1] = a[1], b;
      }, fromValues:function(a, b) {
        var d = new c(2);
        return d[0] = a, d[1] = b, d;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a;
      }, set:function(a, b, d) {
        return a[0] = b, a[1] = d, a;
      }, add:function(a, b, d) {
        return a[0] = b[0] + d[0], a[1] = b[1] + d[1], a;
      }, subtract:function(a, b, d) {
        return a[0] = b[0] - d[0], a[1] = b[1] - d[1], a;
      }};
      d.sub = d.subtract;
      d.multiply = function(a, b, d) {
        return a[0] = b[0] * d[0], a[1] = b[1] * d[1], a;
      };
      d.mul = d.multiply;
      d.divide = function(a, b, d) {
        return a[0] = b[0] / d[0], a[1] = b[1] / d[1], a;
      };
      d.div = d.divide;
      d.min = function(a, b, d) {
        return a[0] = Math.min(b[0], d[0]), a[1] = Math.min(b[1], d[1]), a;
      };
      d.max = function(a, b, d) {
        return a[0] = Math.max(b[0], d[0]), a[1] = Math.max(b[1], d[1]), a;
      };
      d.scale = function(a, b, d) {
        return a[0] = b[0] * d, a[1] = b[1] * d, a;
      };
      d.scaleAndAdd = function(a, b, d, c) {
        return a[0] = b[0] + d[0] * c, a[1] = b[1] + d[1] * c, a;
      };
      d.distance = function(a, b) {
        var d = b[0] - a[0];
        a = b[1] - a[1];
        return Math.sqrt(d * d + a * a);
      };
      d.dist = d.distance;
      d.squaredDistance = function(a, b) {
        var d = b[0] - a[0];
        a = b[1] - a[1];
        return d * d + a * a;
      };
      d.sqrDist = d.squaredDistance;
      d.length = function(a) {
        var b = a[0];
        a = a[1];
        return Math.sqrt(b * b + a * a);
      };
      d.len = d.length;
      d.squaredLength = function(a) {
        var b = a[0];
        a = a[1];
        return b * b + a * a;
      };
      d.sqrLen = d.squaredLength;
      d.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a;
      };
      d.normalize = function(a, b) {
        var d = b[0], c = b[1];
        d = d * d + c * c;
        return 0 < d && (d = 1 / Math.sqrt(d), a[0] = b[0] * d, a[1] = b[1] * d), a;
      };
      d.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1];
      };
      d.cross = function(a, b, d) {
        b = b[0] * d[1] - b[1] * d[0];
        return a[0] = a[1] = 0, a[2] = b, a;
      };
      d.lerp = function(a, b, d, c) {
        var e = b[0];
        b = b[1];
        return a[0] = e + c * (d[0] - e), a[1] = b + c * (d[1] - b), a;
      };
      d.random = function(a, b) {
        b = b || 1;
        var d = 2 * e() * Math.PI;
        return a[0] = Math.cos(d) * b, a[1] = Math.sin(d) * b, a;
      };
      d.transformMat2 = function(a, b, d) {
        var c = b[0];
        b = b[1];
        return a[0] = d[0] * c + d[2] * b, a[1] = d[1] * c + d[3] * b, a;
      };
      d.transformMat2d = function(a, b, d) {
        var c = b[0];
        b = b[1];
        return a[0] = d[0] * c + d[2] * b + d[4], a[1] = d[1] * c + d[3] * b + d[5], a;
      };
      d.transformMat3 = function(a, b, d) {
        var c = b[0];
        b = b[1];
        return a[0] = d[0] * c + d[3] * b + d[6], a[1] = d[1] * c + d[4] * b + d[7], a;
      };
      d.transformMat4 = function(a, b, d) {
        var c = b[0];
        b = b[1];
        return a[0] = d[0] * c + d[4] * b + d[12], a[1] = d[1] * c + d[5] * b + d[13], a;
      };
      d.forEach = function() {
        var a = d.create();
        return function(b, d, c, e, f, h) {
          d || (d = 2);
          c || (c = 0);
          for (e = e ? Math.min(e * d + c, b.length) : b.length; e > c; c += d) {
            a[0] = b[c], a[1] = b[c + 1], f(a, a, h), b[c] = a[0], b[c + 1] = a[1];
          }
          return b;
        };
      }();
      d.str = function(a) {
        return "vec2(" + a[0] + ", " + a[1] + ")";
      };
      "undefined" != typeof a && (a.vec2 = d);
      var l = {create:function() {
        var a = new c(3);
        return a[0] = 0, a[1] = 0, a[2] = 0, a;
      }, clone:function(a) {
        var b = new c(3);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b;
      }, fromValues:function(a, b, d) {
        var e = new c(3);
        return e[0] = a, e[1] = b, e[2] = d, e;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a;
      }, set:function(a, b, d, c) {
        return a[0] = b, a[1] = d, a[2] = c, a;
      }, add:function(a, b, d) {
        return a[0] = b[0] + d[0], a[1] = b[1] + d[1], a[2] = b[2] + d[2], a;
      }, subtract:function(a, b, d) {
        return a[0] = b[0] - d[0], a[1] = b[1] - d[1], a[2] = b[2] - d[2], a;
      }};
      l.sub = l.subtract;
      l.multiply = function(a, b, d) {
        return a[0] = b[0] * d[0], a[1] = b[1] * d[1], a[2] = b[2] * d[2], a;
      };
      l.mul = l.multiply;
      l.divide = function(a, b, d) {
        return a[0] = b[0] / d[0], a[1] = b[1] / d[1], a[2] = b[2] / d[2], a;
      };
      l.div = l.divide;
      l.min = function(a, b, d) {
        return a[0] = Math.min(b[0], d[0]), a[1] = Math.min(b[1], d[1]), a[2] = Math.min(b[2], d[2]), a;
      };
      l.max = function(a, b, d) {
        return a[0] = Math.max(b[0], d[0]), a[1] = Math.max(b[1], d[1]), a[2] = Math.max(b[2], d[2]), a;
      };
      l.scale = function(a, b, d) {
        return a[0] = b[0] * d, a[1] = b[1] * d, a[2] = b[2] * d, a;
      };
      l.scaleAndAdd = function(a, b, d, c) {
        return a[0] = b[0] + d[0] * c, a[1] = b[1] + d[1] * c, a[2] = b[2] + d[2] * c, a;
      };
      l.distance = function(a, b) {
        var d = b[0] - a[0], c = b[1] - a[1];
        a = b[2] - a[2];
        return Math.sqrt(d * d + c * c + a * a);
      };
      l.dist = l.distance;
      l.squaredDistance = function(a, b) {
        var d = b[0] - a[0], c = b[1] - a[1];
        a = b[2] - a[2];
        return d * d + c * c + a * a;
      };
      l.sqrDist = l.squaredDistance;
      l.length = function(a) {
        var b = a[0], d = a[1];
        a = a[2];
        return Math.sqrt(b * b + d * d + a * a);
      };
      l.len = l.length;
      l.squaredLength = function(a) {
        var b = a[0], d = a[1];
        a = a[2];
        return b * b + d * d + a * a;
      };
      l.sqrLen = l.squaredLength;
      l.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a;
      };
      l.normalize = function(a, b) {
        var d = b[0], c = b[1], e = b[2];
        d = d * d + c * c + e * e;
        return 0 < d && (d = 1 / Math.sqrt(d), a[0] = b[0] * d, a[1] = b[1] * d, a[2] = b[2] * d), a;
      };
      l.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      };
      l.cross = function(a, b, d) {
        var c = b[0], e = b[1];
        b = b[2];
        var f = d[0], h = d[1];
        d = d[2];
        return a[0] = e * d - b * h, a[1] = b * f - c * d, a[2] = c * h - e * f, a;
      };
      l.lerp = function(a, b, d, c) {
        var e = b[0], f = b[1];
        b = b[2];
        return a[0] = e + c * (d[0] - e), a[1] = f + c * (d[1] - f), a[2] = b + c * (d[2] - b), a;
      };
      l.random = function(a, b) {
        b = b || 1;
        var d = 2 * e() * Math.PI, c = 2 * e() - 1, f = Math.sqrt(1 - c * c) * b;
        return a[0] = Math.cos(d) * f, a[1] = Math.sin(d) * f, a[2] = c * b, a;
      };
      l.transformMat4 = function(a, b, d) {
        var c = b[0], e = b[1];
        b = b[2];
        return a[0] = d[0] * c + d[4] * e + d[8] * b + d[12], a[1] = d[1] * c + d[5] * e + d[9] * b + d[13], a[2] = d[2] * c + d[6] * e + d[10] * b + d[14], a;
      };
      l.transformMat3 = function(a, b, d) {
        var c = b[0], e = b[1];
        b = b[2];
        return a[0] = c * d[0] + e * d[3] + b * d[6], a[1] = c * d[1] + e * d[4] + b * d[7], a[2] = c * d[2] + e * d[5] + b * d[8], a;
      };
      l.transformQuat = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = d[0];
        var h = d[1], l = d[2];
        d = d[3];
        var k = d * c + h * f - l * e, p = d * e + l * c - b * f, m = d * f + b * e - h * c;
        c = -b * c - h * e - l * f;
        return a[0] = k * d + c * -b + p * -l - m * -h, a[1] = p * d + c * -h + m * -b - k * -l, a[2] = m * d + c * -l + k * -h - p * -b, a;
      };
      l.rotateX = function(a, b, d, c) {
        var e = [], f = [];
        return e[0] = b[0] - d[0], e[1] = b[1] - d[1], e[2] = b[2] - d[2], f[0] = e[0], f[1] = e[1] * Math.cos(c) - e[2] * Math.sin(c), f[2] = e[1] * Math.sin(c) + e[2] * Math.cos(c), a[0] = f[0] + d[0], a[1] = f[1] + d[1], a[2] = f[2] + d[2], a;
      };
      l.rotateY = function(a, b, d, c) {
        var e = [], f = [];
        return e[0] = b[0] - d[0], e[1] = b[1] - d[1], e[2] = b[2] - d[2], f[0] = e[2] * Math.sin(c) + e[0] * Math.cos(c), f[1] = e[1], f[2] = e[2] * Math.cos(c) - e[0] * Math.sin(c), a[0] = f[0] + d[0], a[1] = f[1] + d[1], a[2] = f[2] + d[2], a;
      };
      l.rotateZ = function(a, b, d, c) {
        var e = [], f = [];
        return e[0] = b[0] - d[0], e[1] = b[1] - d[1], e[2] = b[2] - d[2], f[0] = e[0] * Math.cos(c) - e[1] * Math.sin(c), f[1] = e[0] * Math.sin(c) + e[1] * Math.cos(c), f[2] = e[2], a[0] = f[0] + d[0], a[1] = f[1] + d[1], a[2] = f[2] + d[2], a;
      };
      l.forEach = function() {
        var a = l.create();
        return function(b, d, c, e, f, h) {
          d || (d = 3);
          c || (c = 0);
          for (e = e ? Math.min(e * d + c, b.length) : b.length; e > c; c += d) {
            a[0] = b[c], a[1] = b[c + 1], a[2] = b[c + 2], f(a, a, h), b[c] = a[0], b[c + 1] = a[1], b[c + 2] = a[2];
          }
          return b;
        };
      }();
      l.str = function(a) {
        return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
      };
      "undefined" != typeof a && (a.vec3 = l);
      var v = {create:function() {
        var a = new c(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0, a;
      }, clone:function(a) {
        var b = new c(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, fromValues:function(a, b, d, e) {
        var f = new c(4);
        return f[0] = a, f[1] = b, f[2] = d, f[3] = e, f;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, set:function(a, b, d, c, e) {
        return a[0] = b, a[1] = d, a[2] = c, a[3] = e, a;
      }, add:function(a, b, d) {
        return a[0] = b[0] + d[0], a[1] = b[1] + d[1], a[2] = b[2] + d[2], a[3] = b[3] + d[3], a;
      }, subtract:function(a, b, d) {
        return a[0] = b[0] - d[0], a[1] = b[1] - d[1], a[2] = b[2] - d[2], a[3] = b[3] - d[3], a;
      }};
      v.sub = v.subtract;
      v.multiply = function(a, b, d) {
        return a[0] = b[0] * d[0], a[1] = b[1] * d[1], a[2] = b[2] * d[2], a[3] = b[3] * d[3], a;
      };
      v.mul = v.multiply;
      v.divide = function(a, b, d) {
        return a[0] = b[0] / d[0], a[1] = b[1] / d[1], a[2] = b[2] / d[2], a[3] = b[3] / d[3], a;
      };
      v.div = v.divide;
      v.min = function(a, b, d) {
        return a[0] = Math.min(b[0], d[0]), a[1] = Math.min(b[1], d[1]), a[2] = Math.min(b[2], d[2]), a[3] = Math.min(b[3], d[3]), a;
      };
      v.max = function(a, b, d) {
        return a[0] = Math.max(b[0], d[0]), a[1] = Math.max(b[1], d[1]), a[2] = Math.max(b[2], d[2]), a[3] = Math.max(b[3], d[3]), a;
      };
      v.scale = function(a, b, d) {
        return a[0] = b[0] * d, a[1] = b[1] * d, a[2] = b[2] * d, a[3] = b[3] * d, a;
      };
      v.scaleAndAdd = function(a, b, d, c) {
        return a[0] = b[0] + d[0] * c, a[1] = b[1] + d[1] * c, a[2] = b[2] + d[2] * c, a[3] = b[3] + d[3] * c, a;
      };
      v.distance = function(a, b) {
        var d = b[0] - a[0], c = b[1] - a[1], e = b[2] - a[2];
        a = b[3] - a[3];
        return Math.sqrt(d * d + c * c + e * e + a * a);
      };
      v.dist = v.distance;
      v.squaredDistance = function(a, b) {
        var d = b[0] - a[0], c = b[1] - a[1], e = b[2] - a[2];
        a = b[3] - a[3];
        return d * d + c * c + e * e + a * a;
      };
      v.sqrDist = v.squaredDistance;
      v.length = function(a) {
        var b = a[0], d = a[1], c = a[2];
        a = a[3];
        return Math.sqrt(b * b + d * d + c * c + a * a);
      };
      v.len = v.length;
      v.squaredLength = function(a) {
        var b = a[0], d = a[1], c = a[2];
        a = a[3];
        return b * b + d * d + c * c + a * a;
      };
      v.sqrLen = v.squaredLength;
      v.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = -b[3], a;
      };
      v.normalize = function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3];
        d = d * d + c * c + e * e + f * f;
        return 0 < d && (d = 1 / Math.sqrt(d), a[0] = b[0] * d, a[1] = b[1] * d, a[2] = b[2] * d, a[3] = b[3] * d), a;
      };
      v.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
      };
      v.lerp = function(a, b, d, c) {
        var e = b[0], f = b[1], h = b[2];
        b = b[3];
        return a[0] = e + c * (d[0] - e), a[1] = f + c * (d[1] - f), a[2] = h + c * (d[2] - h), a[3] = b + c * (d[3] - b), a;
      };
      v.random = function(a, b) {
        return b = b || 1, a[0] = e(), a[1] = e(), a[2] = e(), a[3] = e(), v.normalize(a, a), v.scale(a, a, b), a;
      };
      v.transformMat4 = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        return a[0] = d[0] * c + d[4] * e + d[8] * f + d[12] * b, a[1] = d[1] * c + d[5] * e + d[9] * f + d[13] * b, a[2] = d[2] * c + d[6] * e + d[10] * f + d[14] * b, a[3] = d[3] * c + d[7] * e + d[11] * f + d[15] * b, a;
      };
      v.transformQuat = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = d[0];
        var h = d[1], l = d[2];
        d = d[3];
        var k = d * c + h * f - l * e, p = d * e + l * c - b * f, m = d * f + b * e - h * c;
        c = -b * c - h * e - l * f;
        return a[0] = k * d + c * -b + p * -l - m * -h, a[1] = p * d + c * -h + m * -b - k * -l, a[2] = m * d + c * -l + k * -h - p * -b, a;
      };
      v.forEach = function() {
        var a = v.create();
        return function(b, d, c, e, f, h) {
          d || (d = 4);
          c || (c = 0);
          for (e = e ? Math.min(e * d + c, b.length) : b.length; e > c; c += d) {
            a[0] = b[c], a[1] = b[c + 1], a[2] = b[c + 2], a[3] = b[c + 3], f(a, a, h), b[c] = a[0], b[c + 1] = a[1], b[c + 2] = a[2], b[c + 3] = a[3];
          }
          return b;
        };
      }();
      v.str = function(a) {
        return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.vec4 = v);
      f = {create:function() {
        var a = new c(4);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, clone:function(a) {
        var b = new c(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var d = b[1];
          a[1] = b[2];
          a[2] = d;
        } else {
          a[0] = b[0], a[1] = b[2], a[2] = b[1], a[3] = b[3];
        }
        return a;
      }, invert:function(a, b) {
        var d = b[0], c = b[1], e = b[2];
        b = b[3];
        var f = d * b - e * c;
        return f ? (f = 1 / f, a[0] = b * f, a[1] = -c * f, a[2] = -e * f, a[3] = d * f, a) : null;
      }, adjoint:function(a, b) {
        var d = b[0];
        return a[0] = b[3], a[1] = -b[1], a[2] = -b[2], a[3] = d, a;
      }, determinant:function(a) {
        return a[0] * a[3] - a[2] * a[1];
      }, multiply:function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = d[0], l = d[1], k = d[2];
        d = d[3];
        return a[0] = c * h + f * l, a[1] = e * h + b * l, a[2] = c * k + f * d, a[3] = e * k + b * d, a;
      }};
      f.mul = f.multiply;
      f.rotate = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(d);
        d = Math.cos(d);
        return a[0] = c * d + f * h, a[1] = e * d + b * h, a[2] = c * -h + f * d, a[3] = e * -h + b * d, a;
      };
      f.scale = function(a, b, d) {
        var c = b[1], e = b[2], f = b[3], h = d[0];
        d = d[1];
        return a[0] = b[0] * h, a[1] = c * h, a[2] = e * d, a[3] = f * d, a;
      };
      f.str = function(a) {
        return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      f.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
      };
      f.LDU = function(a, b, d, c) {
        return a[2] = c[2] / c[0], d[0] = c[0], d[1] = c[1], d[3] = c[3] - a[2] * d[1], [a, b, d];
      };
      "undefined" != typeof a && (a.mat2 = f);
      f = {create:function() {
        var a = new c(6);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, clone:function(a) {
        var b = new c(6);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, invert:function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4];
        b = b[5];
        var l = d * f - c * e;
        return l ? (l = 1 / l, a[0] = f * l, a[1] = -c * l, a[2] = -e * l, a[3] = d * l, a[4] = (e * b - f * h) * l, a[5] = (c * h - d * b) * l, a) : null;
      }, determinant:function(a) {
        return a[0] * a[3] - a[1] * a[2];
      }, multiply:function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4];
        b = b[5];
        var k = d[0], m = d[1], p = d[2], n = d[3], r = d[4];
        d = d[5];
        return a[0] = c * k + f * m, a[1] = e * k + h * m, a[2] = c * p + f * n, a[3] = e * p + h * n, a[4] = c * r + f * d + l, a[5] = e * r + h * d + b, a;
      }};
      f.mul = f.multiply;
      f.rotate = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4];
        b = b[5];
        var k = Math.sin(d);
        d = Math.cos(d);
        return a[0] = c * d + f * k, a[1] = e * d + h * k, a[2] = c * -k + f * d, a[3] = e * -k + h * d, a[4] = l, a[5] = b, a;
      };
      f.scale = function(a, b, d) {
        var c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = d[0];
        d = d[1];
        return a[0] = b[0] * k, a[1] = c * k, a[2] = e * d, a[3] = f * d, a[4] = h, a[5] = l, a;
      };
      f.translate = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4];
        b = b[5];
        var k = d[0];
        d = d[1];
        return a[0] = c, a[1] = e, a[2] = f, a[3] = h, a[4] = c * k + f * d + l, a[5] = e * k + h * d + b, a;
      };
      f.str = function(a) {
        return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
      };
      f.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
      };
      "undefined" != typeof a && (a.mat2d = f);
      var w = {create:function() {
        var a = new c(9);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, fromMat4:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[4], a[4] = b[5], a[5] = b[6], a[6] = b[8], a[7] = b[9], a[8] = b[10], a;
      }, clone:function(a) {
        var b = new c(9);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var d = b[1], c = b[2], e = b[5];
          a[1] = b[3];
          a[2] = b[6];
          a[3] = d;
          a[5] = b[7];
          a[6] = c;
          a[7] = e;
        } else {
          a[0] = b[0], a[1] = b[3], a[2] = b[6], a[3] = b[1], a[4] = b[4], a[5] = b[7], a[6] = b[2], a[7] = b[5], a[8] = b[8];
        }
        return a;
      }, invert:function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = b[6], m = b[7];
        b = b[8];
        var p = b * h - l * m, n = -b * f + l * k, r = m * f - h * k, q = d * p + c * n + e * r;
        return q ? (q = 1 / q, a[0] = p * q, a[1] = (-b * c + e * m) * q, a[2] = (l * c - e * h) * q, a[3] = n * q, a[4] = (b * d - e * k) * q, a[5] = (-l * d + e * f) * q, a[6] = r * q, a[7] = (-m * d + c * k) * q, a[8] = (h * d - c * f) * q, a) : null;
      }, adjoint:function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = b[6], m = b[7];
        b = b[8];
        return a[0] = h * b - l * m, a[1] = e * m - c * b, a[2] = c * l - e * h, a[3] = l * k - f * b, a[4] = d * b - e * k, a[5] = e * f - d * l, a[6] = f * m - h * k, a[7] = c * k - d * m, a[8] = d * h - c * f, a;
      }, determinant:function(a) {
        var b = a[3], d = a[4], c = a[5], e = a[6], f = a[7], h = a[8];
        return a[0] * (h * d - c * f) + a[1] * (-h * b + c * e) + a[2] * (f * b - d * e);
      }, multiply:function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4], k = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = d[0], r = d[1], q = d[2], u = d[3], v = d[4], y = d[5], w = d[6], x = d[7];
        d = d[8];
        return a[0] = n * c + r * h + q * m, a[1] = n * e + r * l + q * p, a[2] = n * f + r * k + q * b, a[3] = u * c + v * h + y * m, a[4] = u * e + v * l + y * p, a[5] = u * f + v * k + y * b, a[6] = w * c + x * h + d * m, a[7] = w * e + x * l + d * p, a[8] = w * f + x * k + d * b, a;
      }};
      w.mul = w.multiply;
      w.translate = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4], k = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = d[0];
        d = d[1];
        return a[0] = c, a[1] = e, a[2] = f, a[3] = h, a[4] = l, a[5] = k, a[6] = n * c + d * h + m, a[7] = n * e + d * l + p, a[8] = n * f + d * k + b, a;
      };
      w.rotate = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4], k = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = Math.sin(d);
        d = Math.cos(d);
        return a[0] = d * c + n * h, a[1] = d * e + n * l, a[2] = d * f + n * k, a[3] = d * h - n * c, a[4] = d * l - n * e, a[5] = d * k - n * f, a[6] = m, a[7] = p, a[8] = b, a;
      };
      w.scale = function(a, b, d) {
        var c = d[0];
        d = d[1];
        return a[0] = c * b[0], a[1] = c * b[1], a[2] = c * b[2], a[3] = d * b[3], a[4] = d * b[4], a[5] = d * b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      };
      w.fromMat2d = function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = 0, a[3] = b[2], a[4] = b[3], a[5] = 0, a[6] = b[4], a[7] = b[5], a[8] = 1, a;
      };
      w.fromQuat = function(a, b) {
        var d = b[0], c = b[1], e = b[2];
        b = b[3];
        var f = d + d, h = c + c, l = e + e;
        d *= f;
        var k = c * f;
        c *= h;
        var m = e * f, p = e * h;
        e *= l;
        f *= b;
        h *= b;
        b *= l;
        return a[0] = 1 - c - e, a[3] = k - b, a[6] = m + h, a[1] = k + b, a[4] = 1 - d - e, a[7] = p - f, a[2] = m - h, a[5] = p + f, a[8] = 1 - d - c, a;
      };
      w.normalFromMat4 = function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = b[6], m = b[7], p = b[8], n = b[9], r = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        var x = d * l - c * h, z = d * k - e * h, N = d * m - f * h, S = c * k - e * l, O = c * m - f * l, W = e * m - f * k, J = p * v - n * u, U = p * w - r * u;
        p = p * b - q * u;
        var ea = n * w - r * v;
        n = n * b - q * v;
        r = r * b - q * w;
        return (q = x * r - z * n + N * ea + S * p - O * U + W * J) ? (q = 1 / q, a[0] = (l * r - k * n + m * ea) * q, a[1] = (k * p - h * r - m * U) * q, a[2] = (h * n - l * p + m * J) * q, a[3] = (e * n - c * r - f * ea) * q, a[4] = (d * r - e * p + f * U) * q, a[5] = (c * p - d * n - f * J) * q, a[6] = (v * W - w * O + b * S) * q, a[7] = (w * N - u * W - b * z) * q, a[8] = (u * O - v * N + b * x) * q, a) : null;
      };
      w.str = function(a) {
        return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
      };
      w.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      };
      "undefined" != typeof a && (a.mat3 = w);
      var x = {create:function() {
        var a = new c(16);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, clone:function(a) {
        var b = new c(16);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b[9] = a[9], b[10] = a[10], b[11] = a[11], b[12] = a[12], b[13] = a[13], b[14] = a[14], b[15] = a[15], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var d = b[1], c = b[2], e = b[3], f = b[6], h = b[7], l = b[11];
          a[1] = b[4];
          a[2] = b[8];
          a[3] = b[12];
          a[4] = d;
          a[6] = b[9];
          a[7] = b[13];
          a[8] = c;
          a[9] = f;
          a[11] = b[14];
          a[12] = e;
          a[13] = h;
          a[14] = l;
        } else {
          a[0] = b[0], a[1] = b[4], a[2] = b[8], a[3] = b[12], a[4] = b[1], a[5] = b[5], a[6] = b[9], a[7] = b[13], a[8] = b[2], a[9] = b[6], a[10] = b[10], a[11] = b[14], a[12] = b[3], a[13] = b[7], a[14] = b[11], a[15] = b[15];
        }
        return a;
      }, invert:function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = b[6], m = b[7], n = b[8], p = b[9], r = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        var x = d * l - c * h, z = d * k - e * h, N = d * m - f * h, S = c * k - e * l, O = c * m - f * l, W = e * m - f * k, J = n * v - p * u, U = n * w - r * u, ea = n * b - q * u, ha = p * w - r * v, V = p * b - q * v, la = r * b - q * w, ba = x * la - z * V + N * ha + S * ea - O * U + W * J;
        return ba ? (ba = 1 / ba, a[0] = (l * la - k * V + m * ha) * ba, a[1] = (e * V - c * la - f * ha) * ba, a[2] = (v * W - w * O + b * S) * ba, a[3] = (r * O - p * W - q * S) * ba, a[4] = (k * ea - h * la - m * U) * ba, a[5] = (d * la - e * ea + f * U) * ba, a[6] = (w * N - u * W - b * z) * ba, a[7] = (n * W - r * N + q * z) * ba, a[8] = (h * V - l * ea + m * J) * ba, a[9] = (c * ea - d * V - f * J) * ba, a[10] = (u * O - v * N + b * x) * ba, a[11] = (p * N - n * O - q * x) * ba, a[12] = (l * 
        U - h * ha - k * J) * ba, a[13] = (d * ha - c * U + e * J) * ba, a[14] = (v * z - u * S - w * x) * ba, a[15] = (n * S - p * z + r * x) * ba, a) : null;
      }, adjoint:function(a, b) {
        var d = b[0], c = b[1], e = b[2], f = b[3], h = b[4], l = b[5], k = b[6], m = b[7], n = b[8], p = b[9], r = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        return a[0] = l * (r * b - q * w) - p * (k * b - m * w) + v * (k * q - m * r), a[1] = -(c * (r * b - q * w) - p * (e * b - f * w) + v * (e * q - f * r)), a[2] = c * (k * b - m * w) - l * (e * b - f * w) + v * (e * m - f * k), a[3] = -(c * (k * q - m * r) - l * (e * q - f * r) + p * (e * m - f * k)), a[4] = -(h * (r * b - q * w) - n * (k * b - m * w) + u * (k * q - m * r)), a[5] = d * (r * b - q * w) - n * (e * b - f * w) + u * (e * q - f * r), a[6] = -(d * (k * b - m * w) - h * (e * b - f * 
        w) + u * (e * m - f * k)), a[7] = d * (k * q - m * r) - h * (e * q - f * r) + n * (e * m - f * k), a[8] = h * (p * b - q * v) - n * (l * b - m * v) + u * (l * q - m * p), a[9] = -(d * (p * b - q * v) - n * (c * b - f * v) + u * (c * q - f * p)), a[10] = d * (l * b - m * v) - h * (c * b - f * v) + u * (c * m - f * l), a[11] = -(d * (l * q - m * p) - h * (c * q - f * p) + n * (c * m - f * l)), a[12] = -(h * (p * w - r * v) - n * (l * w - k * v) + u * (l * r - k * p)), a[13] = d * (p * w - r * 
        v) - n * (c * w - e * v) + u * (c * r - e * p), a[14] = -(d * (l * w - k * v) - h * (c * w - e * v) + u * (c * k - e * l)), a[15] = d * (l * r - k * p) - h * (c * r - e * p) + n * (c * k - e * l), a;
      }, determinant:function(a) {
        var b = a[0], d = a[1], c = a[2], e = a[3], f = a[4], h = a[5], l = a[6], k = a[7], m = a[8], n = a[9], p = a[10], r = a[11], q = a[12], v = a[13], w = a[14];
        a = a[15];
        return (b * h - d * f) * (p * a - r * w) - (b * l - c * f) * (n * a - r * v) + (b * k - e * f) * (n * w - p * v) + (d * l - c * h) * (m * a - r * q) - (d * k - e * h) * (m * w - p * q) + (c * k - e * l) * (m * v - n * q);
      }, multiply:function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = b[4], k = b[5], m = b[6], n = b[7], p = b[8], r = b[9], q = b[10], u = b[11], v = b[12], w = b[13], y = b[14];
        b = b[15];
        var x = d[0], z = d[1], S = d[2], O = d[3];
        return a[0] = x * c + z * l + S * p + O * v, a[1] = x * e + z * k + S * r + O * w, a[2] = x * f + z * m + S * q + O * y, a[3] = x * h + z * n + S * u + O * b, x = d[4], z = d[5], S = d[6], O = d[7], a[4] = x * c + z * l + S * p + O * v, a[5] = x * e + z * k + S * r + O * w, a[6] = x * f + z * m + S * q + O * y, a[7] = x * h + z * n + S * u + O * b, x = d[8], z = d[9], S = d[10], O = d[11], a[8] = x * c + z * l + S * p + O * v, a[9] = x * e + z * k + S * r + O * w, a[10] = x * f + z * m + 
        S * q + O * y, a[11] = x * h + z * n + S * u + O * b, x = d[12], z = d[13], S = d[14], O = d[15], a[12] = x * c + z * l + S * p + O * v, a[13] = x * e + z * k + S * r + O * w, a[14] = x * f + z * m + S * q + O * y, a[15] = x * h + z * n + S * u + O * b, a;
      }};
      x.mul = x.multiply;
      x.translate = function(a, b, d) {
        var c, e, f, h, l, k, m, n, p, r, q, v, u = d[0], w = d[1];
        d = d[2];
        return b === a ? (a[12] = b[0] * u + b[4] * w + b[8] * d + b[12], a[13] = b[1] * u + b[5] * w + b[9] * d + b[13], a[14] = b[2] * u + b[6] * w + b[10] * d + b[14], a[15] = b[3] * u + b[7] * w + b[11] * d + b[15]) : (c = b[0], e = b[1], f = b[2], h = b[3], l = b[4], k = b[5], m = b[6], n = b[7], p = b[8], r = b[9], q = b[10], v = b[11], a[0] = c, a[1] = e, a[2] = f, a[3] = h, a[4] = l, a[5] = k, a[6] = m, a[7] = n, a[8] = p, a[9] = r, a[10] = q, a[11] = v, a[12] = c * u + l * w + p * d + b[12], 
        a[13] = e * u + k * w + r * d + b[13], a[14] = f * u + m * w + q * d + b[14], a[15] = h * u + n * w + v * d + b[15]), a;
      };
      x.scale = function(a, b, d) {
        var c = d[0], e = d[1];
        d = d[2];
        return a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a[3] = b[3] * c, a[4] = b[4] * e, a[5] = b[5] * e, a[6] = b[6] * e, a[7] = b[7] * e, a[8] = b[8] * d, a[9] = b[9] * d, a[10] = b[10] * d, a[11] = b[11] * d, a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      };
      x.rotate = function(a, d, c, e) {
        var f, h, l, k, m, n, p, r, q, v, u, w, y, x, z, A, S, O, W, J, U, ea, ha, V, la = e[0], ba = e[1];
        e = e[2];
        var ja = Math.sqrt(la * la + ba * ba + e * e);
        return Math.abs(ja) < b ? null : (ja = 1 / ja, la *= ja, ba *= ja, e *= ja, f = Math.sin(c), h = Math.cos(c), l = 1 - h, k = d[0], m = d[1], n = d[2], p = d[3], r = d[4], q = d[5], v = d[6], u = d[7], w = d[8], y = d[9], x = d[10], z = d[11], A = la * la * l + h, S = ba * la * l + e * f, O = e * la * l - ba * f, W = la * ba * l - e * f, J = ba * ba * l + h, U = e * ba * l + la * f, ea = la * e * l + ba * f, ha = ba * e * l - la * f, V = e * e * l + h, a[0] = k * A + r * S + w * O, a[1] = 
        m * A + q * S + y * O, a[2] = n * A + v * S + x * O, a[3] = p * A + u * S + z * O, a[4] = k * W + r * J + w * U, a[5] = m * W + q * J + y * U, a[6] = n * W + v * J + x * U, a[7] = p * W + u * J + z * U, a[8] = k * ea + r * ha + w * V, a[9] = m * ea + q * ha + y * V, a[10] = n * ea + v * ha + x * V, a[11] = p * ea + u * ha + z * V, d !== a && (a[12] = d[12], a[13] = d[13], a[14] = d[14], a[15] = d[15]), a);
      };
      x.rotateX = function(a, b, d) {
        var c = Math.sin(d);
        d = Math.cos(d);
        var e = b[4], f = b[5], h = b[6], l = b[7], k = b[8], m = b[9], n = b[10], p = b[11];
        return b !== a && (a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[4] = e * d + k * c, a[5] = f * d + m * c, a[6] = h * d + n * c, a[7] = l * d + p * c, a[8] = k * d - e * c, a[9] = m * d - f * c, a[10] = n * d - h * c, a[11] = p * d - l * c, a;
      };
      x.rotateY = function(a, b, d) {
        var c = Math.sin(d);
        d = Math.cos(d);
        var e = b[0], f = b[1], h = b[2], l = b[3], k = b[8], m = b[9], n = b[10], p = b[11];
        return b !== a && (a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = e * d - k * c, a[1] = f * d - m * c, a[2] = h * d - n * c, a[3] = l * d - p * c, a[8] = e * c + k * d, a[9] = f * c + m * d, a[10] = h * c + n * d, a[11] = l * c + p * d, a;
      };
      x.rotateZ = function(a, b, d) {
        var c = Math.sin(d);
        d = Math.cos(d);
        var e = b[0], f = b[1], h = b[2], l = b[3], k = b[4], m = b[5], n = b[6], p = b[7];
        return b !== a && (a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = e * d + k * c, a[1] = f * d + m * c, a[2] = h * d + n * c, a[3] = l * d + p * c, a[4] = k * d - e * c, a[5] = m * d - f * c, a[6] = n * d - h * c, a[7] = p * d - l * c, a;
      };
      x.fromRotationTranslation = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2], h = b[3], l = c + c, k = e + e, m = f + f;
        b = c * l;
        var n = c * k;
        c *= m;
        var p = e * k;
        e *= m;
        f *= m;
        l *= h;
        k *= h;
        h *= m;
        return a[0] = 1 - (p + f), a[1] = n + h, a[2] = c - k, a[3] = 0, a[4] = n - h, a[5] = 1 - (b + f), a[6] = e + l, a[7] = 0, a[8] = c + k, a[9] = e - l, a[10] = 1 - (b + p), a[11] = 0, a[12] = d[0], a[13] = d[1], a[14] = d[2], a[15] = 1, a;
      };
      x.fromQuat = function(a, b) {
        var d = b[0], c = b[1], e = b[2];
        b = b[3];
        var f = d + d, h = c + c, l = e + e;
        d *= f;
        var k = c * f;
        c *= h;
        var m = e * f, n = e * h;
        e *= l;
        f *= b;
        h *= b;
        b *= l;
        return a[0] = 1 - c - e, a[1] = k + b, a[2] = m - h, a[3] = 0, a[4] = k - b, a[5] = 1 - d - e, a[6] = n + f, a[7] = 0, a[8] = m + h, a[9] = n - f, a[10] = 1 - d - c, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      };
      x.frustum = function(a, b, d, c, e, f, h) {
        var l = 1 / (d - b), k = 1 / (e - c), m = 1 / (f - h);
        return a[0] = 2 * f * l, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 2 * f * k, a[6] = 0, a[7] = 0, a[8] = (d + b) * l, a[9] = (e + c) * k, a[10] = (h + f) * m, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = h * f * 2 * m, a[15] = 0, a;
      };
      x.perspective = function(a, b, d, c, e) {
        b = 1 / Math.tan(b / 2);
        var f = 1 / (c - e);
        return a[0] = b / d, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = b, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = (e + c) * f, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = 2 * e * c * f, a[15] = 0, a;
      };
      x.ortho = function(a, b, d, c, e, f, h) {
        var l = 1 / (b - d), k = 1 / (c - e), m = 1 / (f - h);
        return a[0] = -2 * l, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = -2 * k, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 2 * m, a[11] = 0, a[12] = (b + d) * l, a[13] = (e + c) * k, a[14] = (h + f) * m, a[15] = 1, a;
      };
      x.lookAt = function(a, d, c, e) {
        var f, h, l, k, m, n, p, r, q, v, u = d[0], w = d[1];
        d = d[2];
        var y = e[0], z = e[1];
        e = e[2];
        var A = c[0], N = c[1];
        c = c[2];
        return Math.abs(u - A) < b && Math.abs(w - N) < b && Math.abs(d - c) < b ? x.identity(a) : (p = u - A, r = w - N, q = d - c, v = 1 / Math.sqrt(p * p + r * r + q * q), p *= v, r *= v, q *= v, f = z * q - e * r, h = e * p - y * q, l = y * r - z * p, v = Math.sqrt(f * f + h * h + l * l), v ? (v = 1 / v, f *= v, h *= v, l *= v) : (f = 0, h = 0, l = 0), k = r * l - q * h, m = q * f - p * l, n = p * h - r * f, v = Math.sqrt(k * k + m * m + n * n), v ? (v = 1 / v, k *= v, m *= v, n *= v) : (k = 
        0, m = 0, n = 0), a[0] = f, a[1] = k, a[2] = p, a[3] = 0, a[4] = h, a[5] = m, a[6] = r, a[7] = 0, a[8] = l, a[9] = n, a[10] = q, a[11] = 0, a[12] = -(f * u + h * w + l * d), a[13] = -(k * u + m * w + n * d), a[14] = -(p * u + r * w + q * d), a[15] = 1, a);
      };
      x.str = function(a) {
        return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
      };
      x.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
      };
      "undefined" != typeof a && (a.mat4 = x);
      var z = {create:function() {
        var a = new c(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }};
      z.rotationTo = function() {
        var a = l.create(), b = l.fromValues(1, 0, 0), d = l.fromValues(0, 1, 0);
        return function(c, e, f) {
          var h = l.dot(e, f);
          return -.999999 > h ? (l.cross(a, b, e), 1E-6 > l.length(a) && l.cross(a, d, e), l.normalize(a, a), z.setAxisAngle(c, a, Math.PI), c) : .999999 < h ? (c[0] = 0, c[1] = 0, c[2] = 0, c[3] = 1, c) : (l.cross(a, e, f), c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = 1 + h, z.normalize(c, c));
        };
      }();
      z.setAxes = function() {
        var a = w.create();
        return function(b, d, c, e) {
          return a[0] = c[0], a[3] = c[1], a[6] = c[2], a[1] = e[0], a[4] = e[1], a[7] = e[2], a[2] = -d[0], a[5] = -d[1], a[8] = -d[2], z.normalize(b, z.fromMat3(b, a));
        };
      }();
      z.clone = v.clone;
      z.fromValues = v.fromValues;
      z.copy = v.copy;
      z.set = v.set;
      z.identity = function(a) {
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      };
      z.setAxisAngle = function(a, b, d) {
        d *= .5;
        var c = Math.sin(d);
        return a[0] = c * b[0], a[1] = c * b[1], a[2] = c * b[2], a[3] = Math.cos(d), a;
      };
      z.add = v.add;
      z.multiply = function(a, b, d) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = d[0], l = d[1], k = d[2];
        d = d[3];
        return a[0] = c * d + b * h + e * k - f * l, a[1] = e * d + b * l + f * h - c * k, a[2] = f * d + b * k + c * l - e * h, a[3] = b * d - c * h - e * l - f * k, a;
      };
      z.mul = z.multiply;
      z.scale = v.scale;
      z.rotateX = function(a, b, d) {
        d *= .5;
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(d);
        d = Math.cos(d);
        return a[0] = c * d + b * h, a[1] = e * d + f * h, a[2] = f * d - e * h, a[3] = b * d - c * h, a;
      };
      z.rotateY = function(a, b, d) {
        d *= .5;
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(d);
        d = Math.cos(d);
        return a[0] = c * d - f * h, a[1] = e * d + b * h, a[2] = f * d + c * h, a[3] = b * d - e * h, a;
      };
      z.rotateZ = function(a, b, d) {
        d *= .5;
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(d);
        d = Math.cos(d);
        return a[0] = c * d + e * h, a[1] = e * d - c * h, a[2] = f * d + b * h, a[3] = b * d - f * h, a;
      };
      z.calculateW = function(a, b) {
        var d = b[0], c = b[1];
        b = b[2];
        return a[0] = d, a[1] = c, a[2] = b, a[3] = -Math.sqrt(Math.abs(1 - d * d - c * c - b * b)), a;
      };
      z.dot = v.dot;
      z.lerp = v.lerp;
      z.slerp = function(a, b, d, c) {
        var e, f, h, l, k, m = b[0], n = b[1], r = b[2];
        b = b[3];
        var q = d[0], p = d[1], v = d[2];
        d = d[3];
        return f = m * q + n * p + r * v + b * d, 0 > f && (f = -f, q = -q, p = -p, v = -v, d = -d), 1E-6 < 1 - f ? (e = Math.acos(f), h = Math.sin(e), l = Math.sin((1 - c) * e) / h, k = Math.sin(c * e) / h) : (l = 1 - c, k = c), a[0] = l * m + k * q, a[1] = l * n + k * p, a[2] = l * r + k * v, a[3] = l * b + k * d, a;
      };
      z.invert = function(a, b) {
        var d = b[0], c = b[1], e = b[2];
        b = b[3];
        var f = d * d + c * c + e * e + b * b;
        f = f ? 1 / f : 0;
        return a[0] = -d * f, a[1] = -c * f, a[2] = -e * f, a[3] = b * f, a;
      };
      z.conjugate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = b[3], a;
      };
      z.length = v.length;
      z.len = z.length;
      z.squaredLength = v.squaredLength;
      z.sqrLen = z.squaredLength;
      z.normalize = v.normalize;
      z.fromMat3 = function(a, b) {
        var d = b[0] + b[4] + b[8];
        if (0 < d) {
          d = Math.sqrt(d + 1), a[3] = .5 * d, d = .5 / d, a[0] = (b[7] - b[5]) * d, a[1] = (b[2] - b[6]) * d, a[2] = (b[3] - b[1]) * d;
        } else {
          var c = 0;
          b[4] > b[0] && (c = 1);
          b[8] > b[3 * c + c] && (c = 2);
          var e = (c + 1) % 3, f = (c + 2) % 3;
          d = Math.sqrt(b[3 * c + c] - b[3 * e + e] - b[3 * f + f] + 1);
          a[c] = .5 * d;
          d = .5 / d;
          a[3] = (b[3 * f + e] - b[3 * e + f]) * d;
          a[e] = (b[3 * e + c] + b[3 * c + e]) * d;
          a[f] = (b[3 * f + c] + b[3 * c + f]) * d;
        }
        return a;
      };
      z.str = function(a) {
        return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.quat = z);
    })(b);
  }(this);
}, {}], 24:[function(a, c, k) {
  (function() {
    var a = this, e = a._, f = {}, h = Array.prototype, r = Object.prototype, q = h.push, n = h.slice, m = h.concat, d = r.toString, l = r.hasOwnProperty, v = h.forEach, w = h.map, x = h.reduce, z = h.reduceRight, p = h.filter, u = h.every, y = h.some, A = h.indexOf, B = h.lastIndexOf;
    r = Array.isArray;
    var D = Object.keys, F = Function.prototype.bind, C = function(a) {
      return a instanceof C ? a : this instanceof C ? void(this._wrapped = a) : new C(a);
    };
    "undefined" != typeof k ? ("undefined" != typeof c && c.exports && (k = c.exports = C), k._ = C) : a._ = C;
    C.VERSION = "1.4.4";
    var E = C.each = C.forEach = function(a, b, d) {
      if (null != a) {
        if (v && a.forEach === v) {
          a.forEach(b, d);
        } else {
          if (a.length === +a.length) {
            for (var c = 0, e = a.length; e > c && b.call(d, a[c], c, a) !== f; c++) {
            }
          } else {
            for (c in a) {
              if (C.has(a, c) && b.call(d, a[c], c, a) === f) {
                break;
              }
            }
          }
        }
      }
    };
    C.map = C.collect = function(a, b, d) {
      var c = [];
      return null == a ? c : w && a.map === w ? a.map(b, d) : (E(a, function(a, e, f) {
        c[c.length] = b.call(d, a, e, f);
      }), c);
    };
    C.reduce = C.foldl = C.inject = function(a, b, d, c) {
      var e = 2 < arguments.length;
      if (null == a && (a = []), x && a.reduce === x) {
        return c && (b = C.bind(b, c)), e ? a.reduce(b, d) : a.reduce(b);
      }
      if (E(a, function(a, f, h) {
        e ? d = b.call(c, d, a, f, h) : (d = a, e = !0);
      }), !e) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return d;
    };
    C.reduceRight = C.foldr = function(a, b, d, c) {
      var e = 2 < arguments.length;
      if (null == a && (a = []), z && a.reduceRight === z) {
        return c && (b = C.bind(b, c)), e ? a.reduceRight(b, d) : a.reduceRight(b);
      }
      var f = a.length;
      if (f !== +f) {
        var h = C.keys(a);
        f = h.length;
      }
      if (E(a, function(l, k, m) {
        k = h ? h[--f] : --f;
        e ? d = b.call(c, d, a[k], k, m) : (d = a[k], e = !0);
      }), !e) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return d;
    };
    C.find = C.detect = function(a, b, d) {
      var c;
      return H(a, function(a, e, f) {
        return b.call(d, a, e, f) ? (c = a, !0) : void 0;
      }), c;
    };
    C.filter = C.select = function(a, b, d) {
      var c = [];
      return null == a ? c : p && a.filter === p ? a.filter(b, d) : (E(a, function(a, e, f) {
        b.call(d, a, e, f) && (c[c.length] = a);
      }), c);
    };
    C.reject = function(a, b, d) {
      return C.filter(a, function(a, c, e) {
        return !b.call(d, a, c, e);
      }, d);
    };
    C.every = C.all = function(a, b, d) {
      b || (b = C.identity);
      var c = !0;
      return null == a ? c : u && a.every === u ? a.every(b, d) : (E(a, function(a, e, h) {
        return (c = c && b.call(d, a, e, h)) ? void 0 : f;
      }), !!c);
    };
    var H = C.some = C.any = function(a, b, d) {
      b || (b = C.identity);
      var c = !1;
      return null == a ? c : y && a.some === y ? a.some(b, d) : (E(a, function(a, e, h) {
        return c || (c = b.call(d, a, e, h)) ? f : void 0;
      }), !!c);
    };
    C.contains = C.include = function(a, b) {
      return null == a ? !1 : A && a.indexOf === A ? -1 != a.indexOf(b) : H(a, function(a) {
        return a === b;
      });
    };
    C.invoke = function(a, b) {
      var d = n.call(arguments, 2), c = C.isFunction(b);
      return C.map(a, function(a) {
        return (c ? b : a[b]).apply(a, d);
      });
    };
    C.pluck = function(a, b) {
      return C.map(a, function(a) {
        return a[b];
      });
    };
    C.where = function(a, b, d) {
      return C.isEmpty(b) ? d ? null : [] : C[d ? "find" : "filter"](a, function(a) {
        for (var d in b) {
          if (b[d] !== a[d]) {
            return !1;
          }
        }
        return !0;
      });
    };
    C.findWhere = function(a, b) {
      return C.where(a, b, !0);
    };
    C.max = function(a, b, d) {
      if (!b && C.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.max.apply(Math, a);
      }
      if (!b && C.isEmpty(a)) {
        return -1 / 0;
      }
      var c = {computed:-1 / 0, value:-1 / 0};
      return E(a, function(a, e, f) {
        e = b ? b.call(d, a, e, f) : a;
        e >= c.computed && (c = {value:a, computed:e});
      }), c.value;
    };
    C.min = function(a, b, d) {
      if (!b && C.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.min.apply(Math, a);
      }
      if (!b && C.isEmpty(a)) {
        return 1 / 0;
      }
      var c = {computed:1 / 0, value:1 / 0};
      return E(a, function(a, e, f) {
        e = b ? b.call(d, a, e, f) : a;
        e < c.computed && (c = {value:a, computed:e});
      }), c.value;
    };
    C.shuffle = function(a) {
      var b, d = 0, c = [];
      return E(a, function(a) {
        b = C.random(d++);
        c[d - 1] = c[b];
        c[b] = a;
      }), c;
    };
    var Q = function(a) {
      return C.isFunction(a) ? a : function(b) {
        return b[a];
      };
    };
    C.sortBy = function(a, b, d) {
      var c = Q(b);
      return C.pluck(C.map(a, function(a, b, e) {
        return {value:a, index:b, criteria:c.call(d, a, b, e)};
      }).sort(function(a, b) {
        var d = a.criteria, c = b.criteria;
        if (d !== c) {
          if (d > c || void 0 === d) {
            return 1;
          }
          if (c > d || void 0 === c) {
            return -1;
          }
        }
        return a.index < b.index ? -1 : 1;
      }), "value");
    };
    var K = function(a, b, d, c) {
      var e = {}, f = Q(b || C.identity);
      return E(a, function(b, h) {
        h = f.call(d, b, h, a);
        c(e, h, b);
      }), e;
    };
    C.groupBy = function(a, b, d) {
      return K(a, b, d, function(a, b, d) {
        (C.has(a, b) ? a[b] : a[b] = []).push(d);
      });
    };
    C.countBy = function(a, b, d) {
      return K(a, b, d, function(a, b) {
        C.has(a, b) || (a[b] = 0);
        a[b]++;
      });
    };
    C.sortedIndex = function(a, b, d, c) {
      d = null == d ? C.identity : Q(d);
      b = d.call(c, b);
      for (var e = 0, f = a.length; f > e;) {
        var h = e + f >>> 1;
        d.call(c, a[h]) < b ? e = h + 1 : f = h;
      }
      return e;
    };
    C.toArray = function(a) {
      return a ? C.isArray(a) ? n.call(a) : a.length === +a.length ? C.map(a, C.identity) : C.values(a) : [];
    };
    C.size = function(a) {
      return null == a ? 0 : a.length === +a.length ? a.length : C.keys(a).length;
    };
    C.first = C.head = C.take = function(a, b, d) {
      return null == a ? void 0 : null == b || d ? a[0] : n.call(a, 0, b);
    };
    C.initial = function(a, b, d) {
      return n.call(a, 0, a.length - (null == b || d ? 1 : b));
    };
    C.last = function(a, b, d) {
      return null == a ? void 0 : null == b || d ? a[a.length - 1] : n.call(a, Math.max(a.length - b, 0));
    };
    C.rest = C.tail = C.drop = function(a, b, d) {
      return n.call(a, null == b || d ? 1 : b);
    };
    C.compact = function(a) {
      return C.filter(a, C.identity);
    };
    var M = function(a, b, d) {
      return E(a, function(a) {
        C.isArray(a) ? b ? q.apply(d, a) : M(a, b, d) : d.push(a);
      }), d;
    };
    C.flatten = function(a, b) {
      return M(a, b, []);
    };
    C.without = function(a) {
      return C.difference(a, n.call(arguments, 1));
    };
    C.uniq = C.unique = function(a, b, d, c) {
      C.isFunction(b) && (c = d, d = b, b = !1);
      d = d ? C.map(a, d, c) : a;
      var e = [], f = [];
      return E(d, function(d, c) {
        (b ? c && f[f.length - 1] === d : C.contains(f, d)) || (f.push(d), e.push(a[c]));
      }), e;
    };
    C.union = function() {
      return C.uniq(m.apply(h, arguments));
    };
    C.intersection = function(a) {
      var b = n.call(arguments, 1);
      return C.filter(C.uniq(a), function(a) {
        return C.every(b, function(b) {
          return 0 <= C.indexOf(b, a);
        });
      });
    };
    C.difference = function(a) {
      var b = m.apply(h, n.call(arguments, 1));
      return C.filter(a, function(a) {
        return !C.contains(b, a);
      });
    };
    C.zip = function() {
      for (var a = n.call(arguments), b = C.max(C.pluck(a, "length")), d = Array(b), c = 0; b > c; c++) {
        d[c] = C.pluck(a, "" + c);
      }
      return d;
    };
    C.object = function(a, b) {
      if (null == a) {
        return {};
      }
      for (var d = {}, c = 0, e = a.length; e > c; c++) {
        b ? d[a[c]] = b[c] : d[a[c][0]] = a[c][1];
      }
      return d;
    };
    C.indexOf = function(a, b, d) {
      if (null == a) {
        return -1;
      }
      var c = 0, e = a.length;
      if (d) {
        if ("number" != typeof d) {
          return c = C.sortedIndex(a, b), a[c] === b ? c : -1;
        }
        c = 0 > d ? Math.max(0, e + d) : d;
      }
      if (A && a.indexOf === A) {
        return a.indexOf(b, d);
      }
      for (; e > c; c++) {
        if (a[c] === b) {
          return c;
        }
      }
      return -1;
    };
    C.lastIndexOf = function(a, b, d) {
      if (null == a) {
        return -1;
      }
      var c = null != d;
      if (B && a.lastIndexOf === B) {
        return c ? a.lastIndexOf(b, d) : a.lastIndexOf(b);
      }
      for (d = c ? d : a.length; d--;) {
        if (a[d] === b) {
          return d;
        }
      }
      return -1;
    };
    C.range = function(a, b, d) {
      1 >= arguments.length && (b = a || 0, a = 0);
      d = arguments[2] || 1;
      for (var c = Math.max(Math.ceil((b - a) / d), 0), e = 0, f = Array(c); c > e;) {
        f[e++] = a, a += d;
      }
      return f;
    };
    C.bind = function(a, b) {
      if (a.bind === F && F) {
        return F.apply(a, n.call(arguments, 1));
      }
      var d = n.call(arguments, 2);
      return function() {
        return a.apply(b, d.concat(n.call(arguments)));
      };
    };
    C.partial = function(a) {
      var b = n.call(arguments, 1);
      return function() {
        return a.apply(this, b.concat(n.call(arguments)));
      };
    };
    C.bindAll = function(a) {
      var b = n.call(arguments, 1);
      return 0 === b.length && (b = C.functions(a)), E(b, function(b) {
        a[b] = C.bind(a[b], a);
      }), a;
    };
    C.memoize = function(a, b) {
      var d = {};
      return b || (b = C.identity), function() {
        var c = b.apply(this, arguments);
        return C.has(d, c) ? d[c] : d[c] = a.apply(this, arguments);
      };
    };
    C.delay = function(a, b) {
      var d = n.call(arguments, 2);
      return setTimeout(function() {
        return a.apply(null, d);
      }, b);
    };
    C.defer = function(a) {
      return C.delay.apply(C, [a, 1].concat(n.call(arguments, 1)));
    };
    C.throttle = function(a, b) {
      var d, c, e, f, h = 0, l = function() {
        h = new Date;
        e = null;
        f = a.apply(d, c);
      };
      return function() {
        var k = new Date, m = b - (k - h);
        return d = this, c = arguments, 0 >= m ? (clearTimeout(e), e = null, h = k, f = a.apply(d, c)) : e || (e = setTimeout(l, m)), f;
      };
    };
    C.debounce = function(a, b, d) {
      var c, e;
      return function() {
        var f = this, h = arguments, l = d && !c;
        return clearTimeout(c), c = setTimeout(function() {
          c = null;
          d || (e = a.apply(f, h));
        }, b), l && (e = a.apply(f, h)), e;
      };
    };
    C.once = function(a) {
      var b, d = !1;
      return function() {
        return d ? b : (d = !0, b = a.apply(this, arguments), a = null, b);
      };
    };
    C.wrap = function(a, b) {
      return function() {
        var d = [a];
        return q.apply(d, arguments), b.apply(this, d);
      };
    };
    C.compose = function() {
      var a = arguments;
      return function() {
        for (var b = arguments, d = a.length - 1; 0 <= d; d--) {
          b = [a[d].apply(this, b)];
        }
        return b[0];
      };
    };
    C.after = function(a, b) {
      return 0 >= a ? b() : function() {
        return 1 > --a ? b.apply(this, arguments) : void 0;
      };
    };
    C.keys = D || function(a) {
      if (a !== Object(a)) {
        throw new TypeError("Invalid object");
      }
      var b = [], d;
      for (d in a) {
        C.has(a, d) && (b[b.length] = d);
      }
      return b;
    };
    C.values = function(a) {
      var b = [], d;
      for (d in a) {
        C.has(a, d) && b.push(a[d]);
      }
      return b;
    };
    C.pairs = function(a) {
      var b = [], d;
      for (d in a) {
        C.has(a, d) && b.push([d, a[d]]);
      }
      return b;
    };
    C.invert = function(a) {
      var b = {}, d;
      for (d in a) {
        C.has(a, d) && (b[a[d]] = d);
      }
      return b;
    };
    C.functions = C.methods = function(a) {
      var b = [], d;
      for (d in a) {
        C.isFunction(a[d]) && b.push(d);
      }
      return b.sort();
    };
    C.extend = function(a) {
      return E(n.call(arguments, 1), function(b) {
        if (b) {
          for (var d in b) {
            a[d] = b[d];
          }
        }
      }), a;
    };
    C.pick = function(a) {
      var b = {}, d = m.apply(h, n.call(arguments, 1));
      return E(d, function(d) {
        d in a && (b[d] = a[d]);
      }), b;
    };
    C.omit = function(a) {
      var b = {}, d = m.apply(h, n.call(arguments, 1)), c;
      for (c in a) {
        C.contains(d, c) || (b[c] = a[c]);
      }
      return b;
    };
    C.defaults = function(a) {
      return E(n.call(arguments, 1), function(b) {
        if (b) {
          for (var d in b) {
            null == a[d] && (a[d] = b[d]);
          }
        }
      }), a;
    };
    C.clone = function(a) {
      return C.isObject(a) ? C.isArray(a) ? a.slice() : C.extend({}, a) : a;
    };
    C.tap = function(a, b) {
      return b(a), a;
    };
    var L = function(a, b, c, e) {
      if (a === b) {
        return 0 !== a || 1 / a == 1 / b;
      }
      if (null == a || null == b) {
        return a === b;
      }
      a instanceof C && (a = a._wrapped);
      b instanceof C && (b = b._wrapped);
      var f = d.call(a);
      if (f != d.call(b)) {
        return !1;
      }
      switch(f) {
        case "[object String]":
          return a == String(b);
        case "[object Number]":
          return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a == +b;
        case "[object RegExp]":
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
      }
      if ("object" != typeof a || "object" != typeof b) {
        return !1;
      }
      for (var h = c.length; h--;) {
        if (c[h] == a) {
          return e[h] == b;
        }
      }
      c.push(a);
      e.push(b);
      h = 0;
      var l = !0;
      if ("[object Array]" == f) {
        if (h = a.length, l = h == b.length) {
          for (; h-- && (l = L(a[h], b[h], c, e));) {
          }
        }
      } else {
        f = a.constructor;
        var k = b.constructor;
        if (f !== k && !(C.isFunction(f) && f instanceof f && C.isFunction(k) && k instanceof k)) {
          return !1;
        }
        for (var m in a) {
          if (C.has(a, m) && (h++, !(l = C.has(b, m) && L(a[m], b[m], c, e)))) {
            break;
          }
        }
        if (l) {
          for (m in b) {
            if (C.has(b, m) && !h--) {
              break;
            }
          }
          l = !h;
        }
      }
      return c.pop(), e.pop(), l;
    };
    C.isEqual = function(a, b) {
      return L(a, b, [], []);
    };
    C.isEmpty = function(a) {
      if (null == a) {
        return !0;
      }
      if (C.isArray(a) || C.isString(a)) {
        return 0 === a.length;
      }
      for (var b in a) {
        if (C.has(a, b)) {
          return !1;
        }
      }
      return !0;
    };
    C.isElement = function(a) {
      return !(!a || 1 !== a.nodeType);
    };
    C.isArray = r || function(a) {
      return "[object Array]" == d.call(a);
    };
    C.isObject = function(a) {
      return a === Object(a);
    };
    E("Arguments Function String Number Date RegExp".split(" "), function(a) {
      C["is" + a] = function(b) {
        return d.call(b) == "[object " + a + "]";
      };
    });
    C.isArguments(arguments) || (C.isArguments = function(a) {
      return !(!a || !C.has(a, "callee"));
    });
    "function" != typeof/./ && (C.isFunction = function(a) {
      return "function" == typeof a;
    });
    C.isFinite = function(a) {
      return isFinite(a) && !isNaN(parseFloat(a));
    };
    C.isNaN = function(a) {
      return C.isNumber(a) && a != +a;
    };
    C.isBoolean = function(a) {
      return !0 === a || !1 === a || "[object Boolean]" == d.call(a);
    };
    C.isNull = function(a) {
      return null === a;
    };
    C.isUndefined = function(a) {
      return void 0 === a;
    };
    C.has = function(a, b) {
      return l.call(a, b);
    };
    C.noConflict = function() {
      return a._ = e, this;
    };
    C.identity = function(a) {
      return a;
    };
    C.times = function(a, b, d) {
      for (var c = Array(a), e = 0; a > e; e++) {
        c[e] = b.call(d, e);
      }
      return c;
    };
    C.random = function(a, b) {
      return null == b && (b = a, a = 0), a + Math.floor(Math.random() * (b - a + 1));
    };
    var I = {escape:{"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "/":"&#x2F;"}};
    I.unescape = C.invert(I.escape);
    var P = {escape:new RegExp("[" + C.keys(I.escape).join("") + "]", "g"), unescape:new RegExp("(" + C.keys(I.unescape).join("|") + ")", "g")};
    C.each(["escape", "unescape"], function(a) {
      C[a] = function(b) {
        return null == b ? "" : ("" + b).replace(P[a], function(b) {
          return I[a][b];
        });
      };
    });
    C.result = function(a, b) {
      if (null == a) {
        return null;
      }
      b = a[b];
      return C.isFunction(b) ? b.call(a) : b;
    };
    C.mixin = function(a) {
      E(C.functions(a), function(b) {
        var d = C[b] = a[b];
        C.prototype[b] = function() {
          var a = [this._wrapped];
          return q.apply(a, arguments), S.call(this, d.apply(C, a));
        };
      });
    };
    var T = 0;
    C.uniqueId = function(a) {
      var b = ++T + "";
      return a ? a + b : b;
    };
    C.templateSettings = {evaluate:/<%([\s\S]+?)%>/g, interpolate:/<%=([\s\S]+?)%>/g, escape:/<%-([\s\S]+?)%>/g};
    var R = /(.)^/, aa = {"'":"'", "\\":"\\", "\r":"r", "\n":"n", "\t":"t", "\u2028":"u2028", "\u2029":"u2029"}, N = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    C.template = function(a, b, d) {
      d = C.defaults({}, d, C.templateSettings);
      var c = new RegExp([(d.escape || R).source, (d.interpolate || R).source, (d.evaluate || R).source].join("|") + "|$", "g"), e = 0, f = "__p+='";
      a.replace(c, function(b, d, c, h, l) {
        return f += a.slice(e, l).replace(N, function(a) {
          return "\\" + aa[a];
        }), d && (f += "'+\n((__t=(" + d + "))==null?'':_.escape(__t))+\n'"), c && (f += "'+\n((__t=(" + c + "))==null?'':__t)+\n'"), h && (f += "';\n" + h + "\n__p+='"), e = l + b.length, b;
      });
      f += "';\n";
      d.variable || (f = "with(obj||{}){\n" + f + "}\n");
      f = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + f + "return __p;\n";
      try {
        var h = new Function(d.variable || "obj", "_", f);
      } catch (la) {
        throw la.source = f, la;
      }
      if (b) {
        return h(b, C);
      }
      b = function(a) {
        return h.call(this, a, C);
      };
      return b.source = "function(" + (d.variable || "obj") + "){\n" + f + "}", b;
    };
    C.chain = function(a) {
      return C(a).chain();
    };
    var S = function(a) {
      return this._chain ? C(a).chain() : a;
    };
    C.mixin(C);
    E("pop push reverse shift sort splice unshift".split(" "), function(a) {
      var b = h[a];
      C.prototype[a] = function() {
        var d = this._wrapped;
        return b.apply(d, arguments), "shift" != a && "splice" != a || 0 !== d.length || delete d[0], S.call(this, d);
      };
    });
    E(["concat", "join", "slice"], function(a) {
      var b = h[a];
      C.prototype[a] = function() {
        return S.call(this, b.apply(this._wrapped, arguments));
      };
    });
    C.extend(C.prototype, {chain:function() {
      return this._chain = !0, this;
    }, value:function() {
      return this._wrapped;
    }});
  }).call(this);
}, {}], 25:[function(a) {
  "undefined" != typeof window && "function" != typeof window.requestAnimationFrame && (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
    setTimeout(a, 1E3 / 60);
  });
  Leap = a("../lib/index");
}, {"../lib/index":11}]}, {}, [25]);
var __extends = this && this.__extends || function(a, c) {
  function k() {
    this.constructor = a;
  }
  for (var b in c) {
    c.hasOwnProperty(b) && (a[b] = c[b]);
  }
  a.prototype = null === c ? Object.create(c) : (k.prototype = c.prototype, new k);
}, spine;
(function(a) {
  var c = function() {
    function a(a, b, c) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      if (null == b) {
        throw Error("timelines cannot be null.");
      }
      this.name = a;
      this.timelines = b;
      this.duration = c;
    }
    a.prototype.apply = function(a, b, c, e, f, h, k, n) {
      if (null == a) {
        throw Error("skeleton cannot be null.");
      }
      e && 0 != this.duration && (c %= this.duration, 0 < b && (b %= this.duration));
      e = this.timelines;
      for (var d = 0, l = e.length; d < l; d++) {
        e[d].apply(a, b, c, f, h, k, n);
      }
    };
    a.binarySearch = function(a, b, c) {
      void 0 === c && (c = 1);
      var d = 0, e = a.length / c - 2;
      if (0 == e) {
        return c;
      }
      for (var f = e >>> 1;;) {
        a[(f + 1) * c] <= b ? d = f + 1 : e = f;
        if (d == e) {
          return (d + 1) * c;
        }
        f = d + e >>> 1;
      }
    };
    a.linearSearch = function(a, b, c) {
      for (var d = 0, e = a.length - c; d <= e; d += c) {
        if (a[d] > b) {
          return d;
        }
      }
      return -1;
    };
    return a;
  }();
  a.Animation = c;
  (function(a) {
    a[a.setup = 0] = "setup";
    a[a.current = 1] = "current";
    a[a.currentLayered = 2] = "currentLayered";
  })(a.MixPose || (a.MixPose = {}));
  var k = a.MixPose;
  (function(a) {
    a[a["in"] = 0] = "in";
    a[a.out = 1] = "out";
  })(a.MixDirection || (a.MixDirection = {}));
  var b = a.MixDirection;
  (function(a) {
    a[a.rotate = 0] = "rotate";
    a[a.translate = 1] = "translate";
    a[a.scale = 2] = "scale";
    a[a.shear = 3] = "shear";
    a[a.attachment = 4] = "attachment";
    a[a.color = 5] = "color";
    a[a.deform = 6] = "deform";
    a[a.event = 7] = "event";
    a[a.drawOrder = 8] = "drawOrder";
    a[a.ikConstraint = 9] = "ikConstraint";
    a[a.transformConstraint = 10] = "transformConstraint";
    a[a.pathConstraintPosition = 11] = "pathConstraintPosition";
    a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
    a[a.pathConstraintMix = 13] = "pathConstraintMix";
    a[a.twoColor = 14] = "twoColor";
  })(a.TimelineType || (a.TimelineType = {}));
  var e = a.TimelineType, f = function() {
    function b(c) {
      if (0 >= c) {
        throw Error("frameCount must be > 0: " + c);
      }
      this.curves = a.Utils.newFloatArray((c - 1) * b.BEZIER_SIZE);
    }
    b.prototype.getFrameCount = function() {
      return this.curves.length / b.BEZIER_SIZE + 1;
    };
    b.prototype.setLinear = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.LINEAR;
    };
    b.prototype.setStepped = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.STEPPED;
    };
    b.prototype.getCurveType = function(a) {
      a *= b.BEZIER_SIZE;
      if (a == this.curves.length) {
        return b.LINEAR;
      }
      a = this.curves[a];
      return a == b.LINEAR ? b.LINEAR : a == b.STEPPED ? b.STEPPED : b.BEZIER;
    };
    b.prototype.setCurve = function(a, d, c, e, f) {
      var h = .03 * (2 * -d + e), l = .03 * (2 * -c + f);
      e = .006 * (3 * (d - e) + 1);
      f = .006 * (3 * (c - f) + 1);
      var k = 2 * h + e, m = 2 * l + f;
      d = .3 * d + h + .16666667 * e;
      c = .3 * c + l + .16666667 * f;
      a *= b.BEZIER_SIZE;
      l = this.curves;
      l[a++] = b.BEZIER;
      h = d;
      for (var n = c, r = a + b.BEZIER_SIZE - 1; a < r; a += 2) {
        l[a] = h, l[a + 1] = n, d += k, c += m, k += e, m += f, h += d, n += c;
      }
    };
    b.prototype.getCurvePercent = function(c, d) {
      d = a.MathUtils.clamp(d, 0, 1);
      var e = this.curves;
      c *= b.BEZIER_SIZE;
      var f = e[c];
      if (f == b.LINEAR) {
        return d;
      }
      if (f == b.STEPPED) {
        return 0;
      }
      c++;
      f = 0;
      for (var h = c, k = c + b.BEZIER_SIZE - 1; c < k; c += 2) {
        if (f = e[c], f >= d) {
          return c == h ? k = h = 0 : (h = e[c - 2], k = e[c - 1]), k + (e[c + 1] - k) * (d - h) / (f - h);
        }
      }
      e = e[c - 1];
      return e + (1 - e) * (d - f) / (1 - f);
    };
    b.LINEAR = 0;
    b.STEPPED = 1;
    b.BEZIER = 2;
    b.BEZIER_SIZE = 19;
    return b;
  }();
  a.CurveTimeline = f;
  var h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d << 1);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.rotate << 24) + this.boneIndex;
    };
    f.prototype.setFrame = function(a, b, c) {
      a <<= 1;
      this.frames[a] = b;
      this.frames[a + f.ROTATION] = c;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (e < b[0]) {
        switch(n) {
          case k.setup:
            a.rotation = a.data.rotation;
            break;
          case k.current:
            n = a.data.rotation - a.rotation, a.rotation += (n - 360 * (16384 - (16384.499999999996 - n / 360 | 0))) * m;
        }
      } else {
        if (e >= b[b.length - f.ENTRIES]) {
          n == k.setup ? a.rotation = a.data.rotation + b[b.length + f.PREV_ROTATION] * m : (n = a.data.rotation + b[b.length + f.PREV_ROTATION] - a.rotation, a.rotation += (n - 360 * (16384 - (16384.499999999996 - n / 360 | 0))) * m);
        } else {
          r = c.binarySearch(b, e, f.ENTRIES);
          h = b[r + f.PREV_ROTATION];
          var d = b[r];
          e = this.getCurvePercent((r >> 1) - 1, 1 - (e - d) / (b[r + f.PREV_TIME] - d));
          b = b[r + f.ROTATION] - h;
          b = h + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * e;
          n == k.setup ? a.rotation = a.data.rotation + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m : (b = a.data.rotation + b - a.rotation, a.rotation += (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m);
        }
      }
    };
    f.ENTRIES = 2;
    f.PREV_TIME = -2;
    f.PREV_ROTATION = -1;
    f.ROTATION = 1;
    return f;
  }(f);
  a.RotateTimeline = h;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.translate << 24) + this.boneIndex;
    };
    f.prototype.setFrame = function(a, b, c, e) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.X] = c;
      this.frames[a + f.Y] = e;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (e < b[0]) {
        switch(n) {
          case k.setup:
            a.x = a.data.x;
            a.y = a.data.y;
            break;
          case k.current:
            a.x += (a.data.x - a.x) * m, a.y += (a.data.y - a.y) * m;
        }
      } else {
        if (e >= b[b.length - f.ENTRIES]) {
          h = b[b.length + f.PREV_X], r = b[b.length + f.PREV_Y];
        } else {
          var d = c.binarySearch(b, e, f.ENTRIES);
          h = b[d + f.PREV_X];
          r = b[d + f.PREV_Y];
          var l = b[d];
          e = this.getCurvePercent(d / f.ENTRIES - 1, 1 - (e - l) / (b[d + f.PREV_TIME] - l));
          h += (b[d + f.X] - h) * e;
          r += (b[d + f.Y] - r) * e;
        }
        n == k.setup ? (a.x = a.data.x + h * m, a.y = a.data.y + r * m) : (a.x += (a.data.x + h - a.x) * m, a.y += (a.data.y + r - a.y) * m);
      }
    };
    f.ENTRIES = 3;
    f.PREV_TIME = -3;
    f.PREV_X = -2;
    f.PREV_Y = -1;
    f.X = 1;
    f.Y = 2;
    return f;
  }(f);
  a.TranslateTimeline = h;
  var r = function(f) {
    function h(a) {
      f.call(this, a);
    }
    __extends(h, f);
    h.prototype.getPropertyId = function() {
      return (e.scale << 24) + this.boneIndex;
    };
    h.prototype.apply = function(d, e, f, m, n, r, q) {
      var l = this.frames;
      d = d.bones[this.boneIndex];
      if (f < l[0]) {
        switch(r) {
          case k.setup:
            d.scaleX = d.data.scaleX;
            d.scaleY = d.data.scaleY;
            break;
          case k.current:
            d.scaleX += (d.data.scaleX - d.scaleX) * n, d.scaleY += (d.data.scaleY - d.scaleY) * n;
        }
      } else {
        if (f >= l[l.length - h.ENTRIES]) {
          e = l[l.length + h.PREV_X] * d.data.scaleX, m = l[l.length + h.PREV_Y] * d.data.scaleY;
        } else {
          var p = c.binarySearch(l, f, h.ENTRIES);
          e = l[p + h.PREV_X];
          m = l[p + h.PREV_Y];
          var v = l[p];
          f = this.getCurvePercent(p / h.ENTRIES - 1, 1 - (f - v) / (l[p + h.PREV_TIME] - v));
          e = (e + (l[p + h.X] - e) * f) * d.data.scaleX;
          m = (m + (l[p + h.Y] - m) * f) * d.data.scaleY;
        }
        1 == n ? (d.scaleX = e, d.scaleY = m) : (r == k.setup ? (r = d.data.scaleX, f = d.data.scaleY) : (r = d.scaleX, f = d.scaleY), q == b.out ? (e = Math.abs(e) * a.MathUtils.signum(r), m = Math.abs(m) * a.MathUtils.signum(f)) : (r = Math.abs(r) * a.MathUtils.signum(e), f = Math.abs(f) * a.MathUtils.signum(m)), d.scaleX = r + (e - r) * n, d.scaleY = f + (m - f) * n);
      }
    };
    return h;
  }(h);
  a.ScaleTimeline = r;
  h = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (e.shear << 24) + this.boneIndex;
    };
    b.prototype.apply = function(a, e, f, h, m, n, r) {
      e = this.frames;
      a = a.bones[this.boneIndex];
      if (f < e[0]) {
        switch(n) {
          case k.setup:
            a.shearX = a.data.shearX;
            a.shearY = a.data.shearY;
            break;
          case k.current:
            a.shearX += (a.data.shearX - a.shearX) * m, a.shearY += (a.data.shearY - a.shearY) * m;
        }
      } else {
        if (f >= e[e.length - b.ENTRIES]) {
          h = e[e.length + b.PREV_X], r = e[e.length + b.PREV_Y];
        } else {
          var d = c.binarySearch(e, f, b.ENTRIES);
          h = e[d + b.PREV_X];
          r = e[d + b.PREV_Y];
          var l = e[d];
          f = this.getCurvePercent(d / b.ENTRIES - 1, 1 - (f - l) / (e[d + b.PREV_TIME] - l));
          h += (e[d + b.X] - h) * f;
          r += (e[d + b.Y] - r) * f;
        }
        n == k.setup ? (a.shearX = a.data.shearX + h * m, a.shearY = a.data.shearY + r * m) : (a.shearX += (a.data.shearX + h - a.shearX) * m, a.shearY += (a.data.shearY + r - a.shearY) * m);
      }
    };
    return b;
  }(h);
  a.ShearTimeline = h;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.color << 24) + this.slotIndex;
    };
    f.prototype.setFrame = function(a, b, c, e, h, k) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.R] = c;
      this.frames[a + f.G] = e;
      this.frames[a + f.B] = h;
      this.frames[a + f.A] = k;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      a = a.slots[this.slotIndex];
      var d = this.frames;
      if (e < d[0]) {
        switch(n) {
          case k.setup:
            a.color.setFromColor(a.data.color);
            break;
          case k.current:
            e = a.color, n = a.data.color, e.add((n.r - e.r) * m, (n.g - e.g) * m, (n.b - e.b) * m, (n.a - e.a) * m);
        }
      } else {
        if (e >= d[d.length - f.ENTRIES]) {
          e = d.length;
          b = d[e + f.PREV_R];
          h = d[e + f.PREV_G];
          r = d[e + f.PREV_B];
          var l = d[e + f.PREV_A];
        } else {
          var q = c.binarySearch(d, e, f.ENTRIES);
          b = d[q + f.PREV_R];
          h = d[q + f.PREV_G];
          r = d[q + f.PREV_B];
          l = d[q + f.PREV_A];
          var p = d[q];
          e = this.getCurvePercent(q / f.ENTRIES - 1, 1 - (e - p) / (d[q + f.PREV_TIME] - p));
          b += (d[q + f.R] - b) * e;
          h += (d[q + f.G] - h) * e;
          r += (d[q + f.B] - r) * e;
          l += (d[q + f.A] - l) * e;
        }
        1 == m ? a.color.set(b, h, r, l) : (e = a.color, n == k.setup && e.setFromColor(a.data.color), e.add((b - e.r) * m, (h - e.g) * m, (r - e.b) * m, (l - e.a) * m));
      }
    };
    f.ENTRIES = 5;
    f.PREV_TIME = -5;
    f.PREV_R = -4;
    f.PREV_G = -3;
    f.PREV_B = -2;
    f.PREV_A = -1;
    f.R = 1;
    f.G = 2;
    f.B = 3;
    f.A = 4;
    return f;
  }(f);
  a.ColorTimeline = h;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.twoColor << 24) + this.slotIndex;
    };
    f.prototype.setFrame = function(a, b, c, e, h, k, m, n, r) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.R] = c;
      this.frames[a + f.G] = e;
      this.frames[a + f.B] = h;
      this.frames[a + f.A] = k;
      this.frames[a + f.R2] = m;
      this.frames[a + f.G2] = n;
      this.frames[a + f.B2] = r;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      a = a.slots[this.slotIndex];
      var d = this.frames;
      if (e < d[0]) {
        switch(n) {
          case k.setup:
            a.color.setFromColor(a.data.color);
            a.darkColor.setFromColor(a.data.darkColor);
            break;
          case k.current:
            e = a.color, d = a.darkColor, n = a.data.color, a = a.data.darkColor, e.add((n.r - e.r) * m, (n.g - e.g) * m, (n.b - e.b) * m, (n.a - e.a) * m), d.add((a.r - d.r) * m, (a.g - d.g) * m, (a.b - d.b) * m, 0);
        }
      } else {
        if (e >= d[d.length - f.ENTRIES]) {
          e = d.length;
          b = d[e + f.PREV_R];
          h = d[e + f.PREV_G];
          r = d[e + f.PREV_B];
          var l = d[e + f.PREV_A];
          var q = d[e + f.PREV_R2];
          var p = d[e + f.PREV_G2];
          var v = d[e + f.PREV_B2];
        } else {
          var w = c.binarySearch(d, e, f.ENTRIES);
          b = d[w + f.PREV_R];
          h = d[w + f.PREV_G];
          r = d[w + f.PREV_B];
          l = d[w + f.PREV_A];
          q = d[w + f.PREV_R2];
          p = d[w + f.PREV_G2];
          v = d[w + f.PREV_B2];
          var x = d[w];
          e = this.getCurvePercent(w / f.ENTRIES - 1, 1 - (e - x) / (d[w + f.PREV_TIME] - x));
          b += (d[w + f.R] - b) * e;
          h += (d[w + f.G] - h) * e;
          r += (d[w + f.B] - r) * e;
          l += (d[w + f.A] - l) * e;
          q += (d[w + f.R2] - q) * e;
          p += (d[w + f.G2] - p) * e;
          v += (d[w + f.B2] - v) * e;
        }
        1 == m ? (a.color.set(b, h, r, l), a.darkColor.set(q, p, v, 1)) : (e = a.color, d = a.darkColor, n == k.setup && (e.setFromColor(a.data.color), d.setFromColor(a.data.darkColor)), e.add((b - e.r) * m, (h - e.g) * m, (r - e.b) * m, (l - e.a) * m), d.add((q - d.r) * m, (p - d.g) * m, (v - d.b) * m, 0));
      }
    };
    f.ENTRIES = 8;
    f.PREV_TIME = -8;
    f.PREV_R = -7;
    f.PREV_G = -6;
    f.PREV_B = -5;
    f.PREV_A = -4;
    f.PREV_R2 = -3;
    f.PREV_G2 = -2;
    f.PREV_B2 = -1;
    f.R = 1;
    f.G = 2;
    f.B = 3;
    f.A = 4;
    f.R2 = 5;
    f.G2 = 6;
    f.B2 = 7;
    return f;
  }(f);
  a.TwoColorTimeline = h;
  h = function() {
    function f(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.attachmentNames = Array(b);
    }
    f.prototype.getPropertyId = function() {
      return (e.attachment << 24) + this.slotIndex;
    };
    f.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    f.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.attachmentNames[a] = c;
    };
    f.prototype.apply = function(a, d, e, f, h, n, r) {
      d = a.slots[this.slotIndex];
      r == b.out && n == k.setup ? (e = d.data.attachmentName, d.setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e))) : (r = this.frames, e < r[0] ? n == k.setup && (e = d.data.attachmentName, d.setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e))) : (e = e >= r[r.length - 1] ? r.length - 1 : c.binarySearch(r, e, 1) - 1, e = this.attachmentNames[e], a.slots[this.slotIndex].setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e))));
    };
    return f;
  }();
  a.AttachmentTimeline = h;
  var q = null;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d);
      this.frameVertices = Array(d);
      null == q && (q = a.Utils.newFloatArray(64));
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.deform << 27) + +this.attachment.id + this.slotIndex;
    };
    f.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.frameVertices[a] = c;
    };
    f.prototype.apply = function(b, e, f, h, m, n, r) {
      b = b.slots[this.slotIndex];
      var d = b.getAttachment();
      if (d instanceof a.VertexAttachment && d.applyDeform(this.attachment)) {
        e = b.attachmentVertices;
        0 == e.length && (m = 1);
        r = this.frameVertices;
        b = r[0].length;
        var l = this.frames;
        if (f < l[0]) {
          switch(n) {
            case k.setup:
              e.length = 0;
              break;
            case k.current:
              if (1 == m) {
                e.length = 0;
              } else {
                if (e = a.Utils.setArraySize(e, b), null == d.bones) {
                  for (n = d.vertices, h = 0; h < b; h++) {
                    e[h] += (n[h] - e[h]) * m;
                  }
                } else {
                  for (m = 1 - m, h = 0; h < b; h++) {
                    e[h] *= m;
                  }
                }
              }
          }
        } else {
          if (e = a.Utils.setArraySize(e, b), f >= l[l.length - 1]) {
            if (h = r[l.length - 1], 1 == m) {
              a.Utils.arrayCopy(h, 0, e, 0, b);
            } else {
              if (n == k.setup) {
                if (null == d.bones) {
                  for (r = d.vertices, f = 0; f < b; f++) {
                    n = r[f], e[f] = n + (h[f] - n) * m;
                  }
                } else {
                  for (n = 0; n < b; n++) {
                    e[n] = h[n] * m;
                  }
                }
              } else {
                for (n = 0; n < b; n++) {
                  e[n] += (h[n] - e[n]) * m;
                }
              }
            }
          } else {
            var q = c.binarySearch(l, f);
            h = r[q - 1];
            r = r[q];
            var p = l[q];
            f = this.getCurvePercent(q - 1, 1 - (f - p) / (l[q - 1] - p));
            if (1 == m) {
              for (m = 0; m < b; m++) {
                d = h[m], e[m] = d + (r[m] - d) * f;
              }
            } else {
              if (n == k.setup) {
                if (null == d.bones) {
                  for (l = d.vertices, q = 0; q < b; q++) {
                    d = h[q], n = l[q], e[q] = n + (d + (r[q] - d) * f - n) * m;
                  }
                } else {
                  for (n = 0; n < b; n++) {
                    d = h[n], e[n] = (d + (r[n] - d) * f) * m;
                  }
                }
              } else {
                for (n = 0; n < b; n++) {
                  d = h[n], e[n] += (d + (r[n] - d) * f - e[n]) * m;
                }
              }
            }
          }
        }
      }
    };
    return f;
  }(f);
  a.DeformTimeline = h;
  h = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.events = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return e.event << 24;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, b) {
      this.frames[a] = b.time;
      this.events[a] = b;
    };
    b.prototype.apply = function(a, b, e, f, h, k, n) {
      if (null != f) {
        var d = this.frames, l = this.frames.length;
        if (b > e) {
          this.apply(a, b, Number.MAX_VALUE, f, h, k, n), b = -1;
        } else {
          if (b >= d[l - 1]) {
            return;
          }
        }
        if (!(e < d[0])) {
          if (b < d[0]) {
            a = 0;
          } else {
            for (a = c.binarySearch(d, b), b = d[a]; 0 < a && d[a - 1] == b;) {
              a--;
            }
          }
          for (; a < l && e >= d[a]; a++) {
            f.push(this.events[a]);
          }
        }
      }
    };
    return b;
  }();
  a.EventTimeline = h;
  h = function() {
    function f(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.drawOrders = Array(b);
    }
    f.prototype.getPropertyId = function() {
      return e.drawOrder << 24;
    };
    f.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    f.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.drawOrders[a] = c;
    };
    f.prototype.apply = function(e, d, f, h, n, r, q) {
      d = e.drawOrder;
      h = e.slots;
      if (q == b.out && r == k.setup) {
        a.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
      } else {
        if (q = this.frames, f < q[0]) {
          r == k.setup && a.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
        } else {
          if (e = f >= q[q.length - 1] ? q.length - 1 : c.binarySearch(q, f) - 1, e = this.drawOrders[e], null == e) {
            a.Utils.arrayCopy(h, 0, d, 0, h.length);
          } else {
            for (f = 0, r = e.length; f < r; f++) {
              d[f] = h[e[f]];
            }
          }
        }
      }
    };
    return f;
  }();
  a.DrawOrderTimeline = h;
  h = function(f) {
    function h(b) {
      f.call(this, b);
      this.frames = a.Utils.newFloatArray(b * h.ENTRIES);
    }
    __extends(h, f);
    h.prototype.getPropertyId = function() {
      return (e.ikConstraint << 24) + this.ikConstraintIndex;
    };
    h.prototype.setFrame = function(a, b, c, e) {
      a *= h.ENTRIES;
      this.frames[a] = b;
      this.frames[a + h.MIX] = c;
      this.frames[a + h.BEND_DIRECTION] = e;
    };
    h.prototype.apply = function(a, e, f, m, n, r, q) {
      e = this.frames;
      a = a.ikConstraints[this.ikConstraintIndex];
      if (f < e[0]) {
        switch(r) {
          case k.setup:
            a.mix = a.data.mix;
            a.bendDirection = a.data.bendDirection;
            break;
          case k.current:
            a.mix += (a.data.mix - a.mix) * n, a.bendDirection = a.data.bendDirection;
        }
      } else {
        if (f >= e[e.length - h.ENTRIES]) {
          r == k.setup ? (a.mix = a.data.mix + (e[e.length + h.PREV_MIX] - a.data.mix) * n, a.bendDirection = q == b.out ? a.data.bendDirection : e[e.length + h.PREV_BEND_DIRECTION]) : (a.mix += (e[e.length + h.PREV_MIX] - a.mix) * n, q == b.in && (a.bendDirection = e[e.length + h.PREV_BEND_DIRECTION]));
        } else {
          m = c.binarySearch(e, f, h.ENTRIES);
          var d = e[m + h.PREV_MIX], l = e[m];
          f = this.getCurvePercent(m / h.ENTRIES - 1, 1 - (f - l) / (e[m + h.PREV_TIME] - l));
          r == k.setup ? (a.mix = a.data.mix + (d + (e[m + h.MIX] - d) * f - a.data.mix) * n, a.bendDirection = q == b.out ? a.data.bendDirection : e[m + h.PREV_BEND_DIRECTION]) : (a.mix += (d + (e[m + h.MIX] - d) * f - a.mix) * n, q == b.in && (a.bendDirection = e[m + h.PREV_BEND_DIRECTION]));
        }
      }
    };
    h.ENTRIES = 3;
    h.PREV_TIME = -3;
    h.PREV_MIX = -2;
    h.PREV_BEND_DIRECTION = -1;
    h.MIX = 1;
    h.BEND_DIRECTION = 2;
    return h;
  }(f);
  a.IkConstraintTimeline = h;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.transformConstraint << 24) + this.transformConstraintIndex;
    };
    f.prototype.setFrame = function(a, b, c, e, h, k) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.ROTATE] = c;
      this.frames[a + f.TRANSLATE] = e;
      this.frames[a + f.SCALE] = h;
      this.frames[a + f.SHEAR] = k;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      b = this.frames;
      a = a.transformConstraints[this.transformConstraintIndex];
      if (e < b[0]) {
        switch(e = a.data, n) {
          case k.setup:
            a.rotateMix = e.rotateMix;
            a.translateMix = e.translateMix;
            a.scaleMix = e.scaleMix;
            a.shearMix = e.shearMix;
            break;
          case k.current:
            a.rotateMix += (e.rotateMix - a.rotateMix) * m, a.translateMix += (e.translateMix - a.translateMix) * m, a.scaleMix += (e.scaleMix - a.scaleMix) * m, a.shearMix += (e.shearMix - a.shearMix) * m;
        }
      } else {
        if (e >= b[b.length - f.ENTRIES]) {
          e = b.length;
          h = b[e + f.PREV_ROTATE];
          r = b[e + f.PREV_TRANSLATE];
          var d = b[e + f.PREV_SCALE];
          var l = b[e + f.PREV_SHEAR];
        } else {
          var q = c.binarySearch(b, e, f.ENTRIES);
          h = b[q + f.PREV_ROTATE];
          r = b[q + f.PREV_TRANSLATE];
          d = b[q + f.PREV_SCALE];
          l = b[q + f.PREV_SHEAR];
          var p = b[q];
          e = this.getCurvePercent(q / f.ENTRIES - 1, 1 - (e - p) / (b[q + f.PREV_TIME] - p));
          h += (b[q + f.ROTATE] - h) * e;
          r += (b[q + f.TRANSLATE] - r) * e;
          d += (b[q + f.SCALE] - d) * e;
          l += (b[q + f.SHEAR] - l) * e;
        }
        n == k.setup ? (e = a.data, a.rotateMix = e.rotateMix + (h - e.rotateMix) * m, a.translateMix = e.translateMix + (r - e.translateMix) * m, a.scaleMix = e.scaleMix + (d - e.scaleMix) * m, a.shearMix = e.shearMix + (l - e.shearMix) * m) : (a.rotateMix += (h - a.rotateMix) * m, a.translateMix += (r - a.translateMix) * m, a.scaleMix += (d - a.scaleMix) * m, a.shearMix += (l - a.shearMix) * m);
      }
    };
    f.ENTRIES = 5;
    f.PREV_TIME = -5;
    f.PREV_ROTATE = -4;
    f.PREV_TRANSLATE = -3;
    f.PREV_SCALE = -2;
    f.PREV_SHEAR = -1;
    f.ROTATE = 1;
    f.TRANSLATE = 2;
    f.SCALE = 3;
    f.SHEAR = 4;
    return f;
  }(f);
  a.TransformConstraintTimeline = h;
  h = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.pathConstraintPosition << 24) + this.pathConstraintIndex;
    };
    f.prototype.setFrame = function(a, b, c) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.VALUE] = c;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (e < b[0]) {
        switch(n) {
          case k.setup:
            a.position = a.data.position;
            break;
          case k.current:
            a.position += (a.data.position - a.position) * m;
        }
      } else {
        if (e >= b[b.length - f.ENTRIES]) {
          h = b[b.length + f.PREV_VALUE];
        } else {
          r = c.binarySearch(b, e, f.ENTRIES);
          h = b[r + f.PREV_VALUE];
          var d = b[r];
          e = this.getCurvePercent(r / f.ENTRIES - 1, 1 - (e - d) / (b[r + f.PREV_TIME] - d));
          h += (b[r + f.VALUE] - h) * e;
        }
        a.position = n == k.setup ? a.data.position + (h - a.data.position) * m : a.position + (h - a.position) * m;
      }
    };
    f.ENTRIES = 2;
    f.PREV_TIME = -2;
    f.PREV_VALUE = -1;
    f.VALUE = 1;
    return f;
  }(f);
  a.PathConstraintPositionTimeline = h;
  h = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (e.pathConstraintSpacing << 24) + this.pathConstraintIndex;
    };
    b.prototype.apply = function(a, e, f, h, m, n, r) {
      e = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (f < e[0]) {
        switch(n) {
          case k.setup:
            a.spacing = a.data.spacing;
            break;
          case k.current:
            a.spacing += (a.data.spacing - a.spacing) * m;
        }
      } else {
        if (f >= e[e.length - b.ENTRIES]) {
          h = e[e.length + b.PREV_VALUE];
        } else {
          r = c.binarySearch(e, f, b.ENTRIES);
          h = e[r + b.PREV_VALUE];
          var d = e[r];
          f = this.getCurvePercent(r / b.ENTRIES - 1, 1 - (f - d) / (e[r + b.PREV_TIME] - d));
          h += (e[r + b.VALUE] - h) * f;
        }
        a.spacing = n == k.setup ? a.data.spacing + (h - a.data.spacing) * m : a.spacing + (h - a.spacing) * m;
      }
    };
    return b;
  }(h);
  a.PathConstraintSpacingTimeline = h;
  f = function(b) {
    function f(d) {
      b.call(this, d);
      this.frames = a.Utils.newFloatArray(d * f.ENTRIES);
    }
    __extends(f, b);
    f.prototype.getPropertyId = function() {
      return (e.pathConstraintMix << 24) + this.pathConstraintIndex;
    };
    f.prototype.setFrame = function(a, b, c, e) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.ROTATE] = c;
      this.frames[a + f.TRANSLATE] = e;
    };
    f.prototype.apply = function(a, b, e, h, m, n, r) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (e < b[0]) {
        switch(n) {
          case k.setup:
            a.rotateMix = a.data.rotateMix;
            a.translateMix = a.data.translateMix;
            break;
          case k.current:
            a.rotateMix += (a.data.rotateMix - a.rotateMix) * m, a.translateMix += (a.data.translateMix - a.translateMix) * m;
        }
      } else {
        if (e >= b[b.length - f.ENTRIES]) {
          h = b[b.length + f.PREV_ROTATE], r = b[b.length + f.PREV_TRANSLATE];
        } else {
          var d = c.binarySearch(b, e, f.ENTRIES);
          h = b[d + f.PREV_ROTATE];
          r = b[d + f.PREV_TRANSLATE];
          var l = b[d];
          e = this.getCurvePercent(d / f.ENTRIES - 1, 1 - (e - l) / (b[d + f.PREV_TIME] - l));
          h += (b[d + f.ROTATE] - h) * e;
          r += (b[d + f.TRANSLATE] - r) * e;
        }
        n == k.setup ? (a.rotateMix = a.data.rotateMix + (h - a.data.rotateMix) * m, a.translateMix = a.data.translateMix + (r - a.data.translateMix) * m) : (a.rotateMix += (h - a.rotateMix) * m, a.translateMix += (r - a.translateMix) * m);
      }
    };
    f.ENTRIES = 3;
    f.PREV_TIME = -3;
    f.PREV_ROTATE = -2;
    f.PREV_TRANSLATE = -1;
    f.ROTATE = 1;
    f.TRANSLATE = 2;
    return f;
  }(f);
  a.PathConstraintMixTimeline = f;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(c) {
      this.tracks = [];
      this.events = [];
      this.listeners = [];
      this.queue = new b(this);
      this.propertyIDs = new a.IntSet;
      this.mixingTo = [];
      this.animationsChanged = !1;
      this.timeScale = 1;
      this.trackEntryPool = new a.Pool(function() {
        return new k;
      });
      this.data = c;
    }
    c.prototype.update = function(a) {
      a *= this.timeScale;
      for (var b = this.tracks, c = 0, e = b.length; c < e; c++) {
        var d = b[c];
        if (null != d) {
          d.animationLast = d.nextAnimationLast;
          d.trackLast = d.nextTrackLast;
          var f = a * d.timeScale;
          if (0 < d.delay) {
            d.delay -= f;
            if (0 < d.delay) {
              continue;
            }
            f = -d.delay;
            d.delay = 0;
          }
          var h = d.next;
          if (null != h) {
            var k = d.trackLast - h.delay;
            if (0 <= k) {
              h.delay = 0;
              h.trackTime = k + a * h.timeScale;
              d.trackTime += f;
              for (this.setCurrent(c, h, !0); null != h.mixingFrom;) {
                h.mixTime += f, h = h.mixingFrom;
              }
              continue;
            }
          } else {
            if (d.trackLast >= d.trackEnd && null == d.mixingFrom) {
              b[c] = null;
              this.queue.end(d);
              this.disposeNext(d);
              continue;
            }
          }
          if (null != d.mixingFrom && this.updateMixingFrom(d, a)) {
            for (h = d.mixingFrom, d.mixingFrom = null; null != h;) {
              this.queue.end(h), h = h.mixingFrom;
            }
          }
          d.trackTime += f;
        }
      }
      this.queue.drain();
    };
    c.prototype.updateMixingFrom = function(a, b) {
      var c = a.mixingFrom;
      if (null == c) {
        return !0;
      }
      var e = this.updateMixingFrom(c, b);
      if (0 < a.mixTime && (a.mixTime >= a.mixDuration || 0 == a.timeScale)) {
        if (0 == c.totalAlpha || 0 == a.mixDuration) {
          a.mixingFrom = c.mixingFrom, a.interruptAlpha = c.interruptAlpha, this.queue.end(c);
        }
        return e;
      }
      c.animationLast = c.nextAnimationLast;
      c.trackLast = c.nextTrackLast;
      c.trackTime += b * c.timeScale;
      a.mixTime += b * a.timeScale;
      return !1;
    };
    c.prototype.apply = function(b) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      this.animationsChanged && this._animationsChanged();
      for (var e = this.events, f = this.tracks, h = !1, d = 0, l = f.length; d < l; d++) {
        var k = f[d];
        if (!(null == k || 0 < k.delay)) {
          h = !0;
          var r = 0 == d ? a.MixPose.current : a.MixPose.currentLayered, x = k.alpha;
          null != k.mixingFrom ? x *= this.applyMixingFrom(k, b, r) : k.trackTime >= k.trackEnd && null == k.next && (x = 0);
          var z = k.animationLast, p = k.getAnimationTime(), u = k.animation.timelines.length, y = k.animation.timelines;
          if (1 == x) {
            for (var A = 0; A < u; A++) {
              y[A].apply(b, z, p, e, 1, a.MixPose.setup, a.MixDirection.in);
            }
          } else {
            var B = k.timelineData, D = 0 == k.timelinesRotation.length;
            D && a.Utils.setArraySize(k.timelinesRotation, u << 1, null);
            var F = k.timelinesRotation;
            for (A = 0; A < u; A++) {
              var C = y[A], E = B[A] >= c.FIRST ? a.MixPose.setup : r;
              C instanceof a.RotateTimeline ? this.applyRotateTimeline(C, b, p, x, E, F, A << 1, D) : C.apply(b, z, p, e, x, E, a.MixDirection.in);
            }
          }
          this.queueEvents(k, p);
          e.length = 0;
          k.nextAnimationLast = p;
          k.nextTrackLast = k.trackTime;
        }
      }
      this.queue.drain();
      return h;
    };
    c.prototype.applyMixingFrom = function(b, e, f) {
      var h = b.mixingFrom;
      null != h.mixingFrom && this.applyMixingFrom(h, e, f);
      if (0 == b.mixDuration) {
        var d = 1;
      } else {
        d = b.mixTime / b.mixDuration, 1 < d && (d = 1);
      }
      var l = d < h.eventThreshold ? this.events : null, k = d < h.attachmentThreshold, n = d < h.drawOrderThreshold, r = h.animationLast, q = h.getAnimationTime(), p = h.animation.timelines.length, u = h.animation.timelines, y = h.timelineData, A = h.timelineDipMix, B = 0 == h.timelinesRotation.length;
      B && a.Utils.setArraySize(h.timelinesRotation, p << 1, null);
      for (var D = h.timelinesRotation, F, C = h.alpha * b.interruptAlpha, E = C * (1 - d), H, Q = h.totalAlpha = 0; Q < p; Q++) {
        var K = u[Q];
        switch(y[Q]) {
          case c.SUBSEQUENT:
            if (!k && K instanceof a.AttachmentTimeline) {
              continue;
            }
            if (!n && K instanceof a.DrawOrderTimeline) {
              continue;
            }
            F = f;
            H = E;
            break;
          case c.FIRST:
            F = a.MixPose.setup;
            H = E;
            break;
          case c.DIP:
            F = a.MixPose.setup;
            H = C;
            break;
          default:
            F = a.MixPose.setup;
            H = C;
            var M = A[Q];
            H *= Math.max(0, 1 - M.mixTime / M.mixDuration);
        }
        h.totalAlpha += H;
        K instanceof a.RotateTimeline ? this.applyRotateTimeline(K, e, q, H, F, D, Q << 1, B) : K.apply(e, r, q, l, H, F, a.MixDirection.out);
      }
      0 < b.mixDuration && this.queueEvents(h, q);
      this.events.length = 0;
      h.nextAnimationLast = q;
      h.nextTrackLast = h.trackTime;
      return d;
    };
    c.prototype.applyRotateTimeline = function(b, c, e, f, d, h, k, w) {
      w && (h[k] = 0);
      if (1 == f) {
        b.apply(c, 0, e, null, 1, d, a.MixDirection.in);
      } else {
        var l = b.frames;
        c = c.bones[b.boneIndex];
        if (e < l[0]) {
          d == a.MixPose.setup && (c.rotation = c.data.rotation);
        } else {
          if (e >= l[l.length - a.RotateTimeline.ENTRIES]) {
            l = c.data.rotation + l[l.length + a.RotateTimeline.PREV_ROTATION];
          } else {
            var m = a.Animation.binarySearch(l, e, a.RotateTimeline.ENTRIES), n = l[m + a.RotateTimeline.PREV_ROTATION], r = l[m];
            b = b.getCurvePercent((m >> 1) - 1, 1 - (e - r) / (l[m + a.RotateTimeline.PREV_TIME] - r));
            l = l[m + a.RotateTimeline.ROTATION] - n;
            l = n + (l - 360 * (16384 - (16384.499999999996 - l / 360 | 0))) * b + c.data.rotation;
            l -= 360 * (16384 - (16384.499999999996 - l / 360 | 0));
          }
          d = d == a.MixPose.setup ? c.data.rotation : c.rotation;
          l -= d;
          0 == l ? e = h[k] : (l -= 360 * (16384 - (16384.499999999996 - l / 360 | 0)), w ? (w = 0, e = l) : (w = h[k], e = h[k + 1]), n = 0 < l, b = 0 <= w, a.MathUtils.signum(e) != a.MathUtils.signum(l) && 90 >= Math.abs(e) && (180 < Math.abs(w) && (w += 360 * a.MathUtils.signum(w)), b = n), e = l + w - w % 360, b != n && (e += 360 * a.MathUtils.signum(w)), h[k] = e);
          h[k + 1] = l;
          d += e * f;
          c.rotation = d - 360 * (16384 - (16384.499999999996 - d / 360 | 0));
        }
      }
    };
    c.prototype.queueEvents = function(a, b) {
      for (var c = a.animationStart, e = a.animationEnd, d = e - c, f = a.trackLast % d, h = this.events, k = 0, r = h.length; k < r; k++) {
        var q = h[k];
        if (q.time < f) {
          break;
        }
        q.time > e || this.queue.event(a, q);
      }
      for ((a.loop ? f > a.trackTime % d : b >= e && a.animationLast < e) && this.queue.complete(a); k < r; k++) {
        h[k].time < c || this.queue.event(a, h[k]);
      }
    };
    c.prototype.clearTracks = function() {
      var a = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var b = 0, c = this.tracks.length; b < c; b++) {
        this.clearTrack(b);
      }
      this.tracks.length = 0;
      this.queue.drainDisabled = a;
      this.queue.drain();
    };
    c.prototype.clearTrack = function(a) {
      if (!(a >= this.tracks.length) && (a = this.tracks[a], null != a)) {
        this.queue.end(a);
        this.disposeNext(a);
        for (var b = a;;) {
          var c = b.mixingFrom;
          if (null == c) {
            break;
          }
          this.queue.end(c);
          b.mixingFrom = null;
          b = c;
        }
        this.tracks[a.trackIndex] = null;
        this.queue.drain();
      }
    };
    c.prototype.setCurrent = function(a, b, c) {
      var e = this.expandToIndex(a);
      this.tracks[a] = b;
      null != e && (c && this.queue.interrupt(e), b.mixingFrom = e, b.mixTime = 0, null != e.mixingFrom && 0 < e.mixDuration && (b.interruptAlpha *= Math.min(1, e.mixTime / e.mixDuration)), e.timelinesRotation.length = 0);
      this.queue.start(b);
    };
    c.prototype.setAnimation = function(a, b, c) {
      var e = this.data.skeletonData.findAnimation(b);
      if (null == e) {
        throw Error("Animation not found: " + b);
      }
      return this.setAnimationWith(a, e, c);
    };
    c.prototype.setAnimationWith = function(a, b, c) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var e = !0, d = this.expandToIndex(a);
      null != d && (-1 == d.nextTrackLast ? (this.tracks[a] = d.mixingFrom, this.queue.interrupt(d), this.queue.end(d), this.disposeNext(d), d = d.mixingFrom, e = !1) : this.disposeNext(d));
      b = this.trackEntry(a, b, c, d);
      this.setCurrent(a, b, e);
      this.queue.drain();
      return b;
    };
    c.prototype.addAnimation = function(a, b, c, e) {
      var d = this.data.skeletonData.findAnimation(b);
      if (null == d) {
        throw Error("Animation not found: " + b);
      }
      return this.addAnimationWith(a, d, c, e);
    };
    c.prototype.addAnimationWith = function(a, b, c, e) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var d = this.expandToIndex(a);
      if (null != d) {
        for (; null != d.next;) {
          d = d.next;
        }
      }
      c = this.trackEntry(a, b, c, d);
      null == d ? (this.setCurrent(a, c, !0), this.queue.drain()) : (d.next = c, 0 >= e && (a = d.animationEnd - d.animationStart, e = 0 != a ? e + (a * (1 + (d.trackTime / a | 0)) - this.data.getMix(d.animation, b)) : 0));
      c.delay = e;
      return c;
    };
    c.prototype.setEmptyAnimation = function(a, b) {
      a = this.setAnimationWith(a, c.emptyAnimation, !1);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    c.prototype.addEmptyAnimation = function(a, b, e) {
      0 >= e && (e -= b);
      a = this.addAnimationWith(a, c.emptyAnimation, !1, e);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    c.prototype.setEmptyAnimations = function(a) {
      var b = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var c = 0, e = this.tracks.length; c < e; c++) {
        var d = this.tracks[c];
        null != d && this.setEmptyAnimation(d.trackIndex, a);
      }
      this.queue.drainDisabled = b;
      this.queue.drain();
    };
    c.prototype.expandToIndex = function(b) {
      if (b < this.tracks.length) {
        return this.tracks[b];
      }
      a.Utils.ensureArrayCapacity(this.tracks, b - this.tracks.length + 1, null);
      this.tracks.length = b + 1;
      return null;
    };
    c.prototype.trackEntry = function(a, b, c, e) {
      var d = this.trackEntryPool.obtain();
      d.trackIndex = a;
      d.animation = b;
      d.loop = c;
      d.eventThreshold = 0;
      d.attachmentThreshold = 0;
      d.drawOrderThreshold = 0;
      d.animationStart = 0;
      d.animationEnd = b.duration;
      d.animationLast = -1;
      d.nextAnimationLast = -1;
      d.delay = 0;
      d.trackTime = 0;
      d.trackLast = -1;
      d.nextTrackLast = -1;
      d.trackEnd = Number.MAX_VALUE;
      d.timeScale = 1;
      d.alpha = 1;
      d.interruptAlpha = 1;
      d.mixTime = 0;
      d.mixDuration = null == e ? 0 : this.data.getMix(e.animation, b);
      return d;
    };
    c.prototype.disposeNext = function(a) {
      for (var b = a.next; null != b;) {
        this.queue.dispose(b), b = b.next;
      }
      a.next = null;
    };
    c.prototype._animationsChanged = function() {
      this.animationsChanged = !1;
      var a = this.propertyIDs;
      a.clear();
      for (var b = this.mixingTo, c = 0, e = this.tracks.length; c < e; c++) {
        var d = this.tracks[c];
        null != d && d.setTimelineData(null, b, a);
      }
    };
    c.prototype.getCurrent = function(a) {
      return a >= this.tracks.length ? null : this.tracks[a];
    };
    c.prototype.addListener = function(a) {
      if (null == a) {
        throw Error("listener cannot be null.");
      }
      this.listeners.push(a);
    };
    c.prototype.removeListener = function(a) {
      a = this.listeners.indexOf(a);
      0 <= a && this.listeners.splice(a, 1);
    };
    c.prototype.clearListeners = function() {
      this.listeners.length = 0;
    };
    c.prototype.clearListenerNotifications = function() {
      this.queue.clear();
    };
    c.emptyAnimation = new a.Animation("<empty>", [], 0);
    c.SUBSEQUENT = 0;
    c.FIRST = 1;
    c.DIP = 2;
    c.DIP_MIX = 3;
    return c;
  }();
  a.AnimationState = c;
  var k = function() {
    function b() {
      this.timelineData = [];
      this.timelineDipMix = [];
      this.timelinesRotation = [];
    }
    b.prototype.reset = function() {
      this.listener = this.animation = this.mixingFrom = this.next = null;
      this.timelineData.length = 0;
      this.timelineDipMix.length = 0;
      this.timelinesRotation.length = 0;
    };
    b.prototype.setTimelineData = function(b, e, f) {
      null != b && e.push(b);
      var h = null != this.mixingFrom ? this.mixingFrom.setTimelineData(this, e, f) : this;
      null != b && e.pop();
      var d = e.length - 1, l = this.animation.timelines, k = this.animation.timelines.length, n = a.Utils.setArraySize(this.timelineData, k);
      this.timelineDipMix.length = 0;
      var r = a.Utils.setArraySize(this.timelineDipMix, k), q = 0;
      a: for (; q < k; q++) {
        var p = l[q].getPropertyId();
        if (f.add(p)) {
          if (null != b && b.hasTimeline(p)) {
            for (var u = d; 0 <= u; u--) {
              var y = e[u];
              if (!y.hasTimeline(p) && 0 < y.mixDuration) {
                n[q] = c.DIP_MIX;
                r[q] = y;
                continue a;
              }
            }
            n[q] = c.DIP;
          } else {
            n[q] = c.FIRST;
          }
        } else {
          n[q] = c.SUBSEQUENT;
        }
      }
      return h;
    };
    b.prototype.hasTimeline = function(a) {
      for (var b = this.animation.timelines, c = 0, e = b.length; c < e; c++) {
        if (b[c].getPropertyId() == a) {
          return !0;
        }
      }
      return !1;
    };
    b.prototype.getAnimationTime = function() {
      if (this.loop) {
        var a = this.animationEnd - this.animationStart;
        return 0 == a ? this.animationStart : this.trackTime % a + this.animationStart;
      }
      return Math.min(this.trackTime + this.animationStart, this.animationEnd);
    };
    b.prototype.setAnimationLast = function(a) {
      this.nextAnimationLast = this.animationLast = a;
    };
    b.prototype.isComplete = function() {
      return this.trackTime >= this.animationEnd - this.animationStart;
    };
    b.prototype.resetRotationDirections = function() {
      this.timelinesRotation.length = 0;
    };
    return b;
  }();
  a.TrackEntry = k;
  var b = function() {
    function a(a) {
      this.objects = [];
      this.drainDisabled = !1;
      this.animState = a;
    }
    a.prototype.start = function(a) {
      this.objects.push(e.start);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.interrupt = function(a) {
      this.objects.push(e.interrupt);
      this.objects.push(a);
    };
    a.prototype.end = function(a) {
      this.objects.push(e.end);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.dispose = function(a) {
      this.objects.push(e.dispose);
      this.objects.push(a);
    };
    a.prototype.complete = function(a) {
      this.objects.push(e.complete);
      this.objects.push(a);
    };
    a.prototype.event = function(a, b) {
      this.objects.push(e.event);
      this.objects.push(a);
      this.objects.push(b);
    };
    a.prototype.drain = function() {
      if (!this.drainDisabled) {
        this.drainDisabled = !0;
        for (var a = this.objects, b = this.animState.listeners, c = 0; c < a.length; c += 2) {
          var f = a[c + 1];
          switch(a[c]) {
            case e.start:
              null != f.listener && f.listener.start && f.listener.start(f);
              for (var d = 0; d < b.length; d++) {
                b[d].start && b[d].start(f);
              }
              break;
            case e.interrupt:
              null != f.listener && f.listener.interrupt && f.listener.interrupt(f);
              for (d = 0; d < b.length; d++) {
                b[d].interrupt && b[d].interrupt(f);
              }
              break;
            case e.end:
              for (null != f.listener && f.listener.end && f.listener.end(f), d = 0; d < b.length; d++) {
                b[d].end && b[d].end(f);
              }
            case e.dispose:
              null != f.listener && f.listener.dispose && f.listener.dispose(f);
              for (d = 0; d < b.length; d++) {
                b[d].dispose && b[d].dispose(f);
              }
              this.animState.trackEntryPool.free(f);
              break;
            case e.complete:
              null != f.listener && f.listener.complete && f.listener.complete(f);
              for (d = 0; d < b.length; d++) {
                b[d].complete && b[d].complete(f);
              }
              break;
            case e.event:
              var h = a[c++ + 2];
              null != f.listener && f.listener.event && f.listener.event(f, h);
              for (d = 0; d < b.length; d++) {
                b[d].event && b[d].event(f, h);
              }
          }
        }
        this.clear();
        this.drainDisabled = !1;
      }
    };
    a.prototype.clear = function() {
      this.objects.length = 0;
    };
    return a;
  }();
  a.EventQueue = b;
  (function(a) {
    a[a.start = 0] = "start";
    a[a.interrupt = 1] = "interrupt";
    a[a.end = 2] = "end";
    a[a.dispose = 3] = "dispose";
    a[a.complete = 4] = "complete";
    a[a.event = 5] = "event";
  })(a.EventType || (a.EventType = {}));
  var e = a.EventType, f = function() {
    function a() {
    }
    a.prototype.start = function(a) {
    };
    a.prototype.interrupt = function(a) {
    };
    a.prototype.end = function(a) {
    };
    a.prototype.dispose = function(a) {
    };
    a.prototype.complete = function(a) {
    };
    a.prototype.event = function(a, b) {
    };
    return a;
  }();
  a.AnimationStateAdapter2 = f;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this.animationToMixTime = {};
      this.defaultMix = 0;
      if (null == a) {
        throw Error("skeletonData cannot be null.");
      }
      this.skeletonData = a;
    }
    a.prototype.setMix = function(a, c, f) {
      var b = this.skeletonData.findAnimation(a);
      if (null == b) {
        throw Error("Animation not found: " + a);
      }
      a = this.skeletonData.findAnimation(c);
      if (null == a) {
        throw Error("Animation not found: " + c);
      }
      this.setMixWith(b, a, f);
    };
    a.prototype.setMixWith = function(a, c, f) {
      if (null == a) {
        throw Error("from cannot be null.");
      }
      if (null == c) {
        throw Error("to cannot be null.");
      }
      this.animationToMixTime[a.name + c.name] = f;
    };
    a.prototype.getMix = function(a, c) {
      a = this.animationToMixTime[a.name + c.name];
      return void 0 === a ? this.defaultMix : a;
    };
    return a;
  }();
  a.AnimationStateData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a, c) {
      void 0 === c && (c = "");
      this.assets = {};
      this.errors = {};
      this.loaded = this.toLoad = 0;
      this.textureLoader = a;
      this.pathPrefix = c;
    }
    a.prototype.loadText = function(a, c, f) {
      var b = this;
      void 0 === c && (c = null);
      void 0 === f && (f = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var e = new XMLHttpRequest;
      e.onreadystatechange = function() {
        e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? (b.assets[a] = e.responseText, c && c(a, e.responseText)) : (b.errors[a] = "Couldn't load text " + a + ": status " + e.status + ", " + e.responseText, f && f(a, "Couldn't load text " + a + ": status " + e.status + ", " + e.responseText)), b.toLoad--, b.loaded++);
      };
      e.open("GET", a, !0);
      e.send();
    };
    a.prototype.loadTexture = function(a, c, f) {
      var b = this;
      void 0 === c && (c = null);
      void 0 === f && (f = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var e = new Image;
      e.crossOrigin = "anonymous";
      e.onload = function(f) {
        f = b.textureLoader(e);
        b.assets[a] = f;
        b.toLoad--;
        b.loaded++;
        c && c(a, e);
      };
      e.onerror = function(c) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        f && f(a, "Couldn't load image " + a);
      };
      e.src = a;
    };
    a.prototype.loadTextureData = function(a, c, f, h) {
      var b = this;
      void 0 === f && (f = null);
      void 0 === h && (h = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var e = new Image;
      e.onload = function(c) {
        c = b.textureLoader(e);
        b.assets[a] = c;
        b.toLoad--;
        b.loaded++;
        f && f(a, e);
      };
      e.onerror = function(c) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        h && h(a, "Couldn't load image " + a);
      };
      e.src = c;
    };
    a.prototype.get = function(a) {
      a = this.pathPrefix + a;
      return this.assets[a];
    };
    a.prototype.remove = function(a) {
      a = this.pathPrefix + a;
      var b = this.assets[a];
      b.dispose && b.dispose();
      this.assets[a] = null;
    };
    a.prototype.removeAll = function() {
      for (var a in this.assets) {
        var c = this.assets[a];
        c.dispose && c.dispose();
      }
      this.assets = {};
    };
    a.prototype.isLoadingComplete = function() {
      return 0 == this.toLoad;
    };
    a.prototype.getToLoad = function() {
      return this.toLoad;
    };
    a.prototype.getLoaded = function() {
      return this.loaded;
    };
    a.prototype.dispose = function() {
      this.removeAll();
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.AssetManager = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a) {
      this.atlas = a;
    }
    c.prototype.newRegionAttachment = function(b, c, f) {
      b = this.atlas.findRegion(f);
      if (null == b) {
        throw Error("Region not found in atlas: " + f + " (region attachment: " + c + ")");
      }
      b.renderObject = b;
      c = new a.RegionAttachment(c);
      c.setRegion(b);
      return c;
    };
    c.prototype.newMeshAttachment = function(b, c, f) {
      b = this.atlas.findRegion(f);
      if (null == b) {
        throw Error("Region not found in atlas: " + f + " (mesh attachment: " + c + ")");
      }
      b.renderObject = b;
      c = new a.MeshAttachment(c);
      c.region = b;
      return c;
    };
    c.prototype.newBoundingBoxAttachment = function(b, c) {
      return new a.BoundingBoxAttachment(c);
    };
    c.prototype.newPathAttachment = function(b, c) {
      return new a.PathAttachment(c);
    };
    c.prototype.newPointAttachment = function(b, c) {
      return new a.PointAttachment(c);
    };
    c.prototype.newClippingAttachment = function(b, c) {
      return new a.ClippingAttachment(c);
    };
    return c;
  }();
  a.AtlasAttachmentLoader = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.Attachment = c;
  c = function(a) {
    function b(c) {
      a.call(this, c);
      this.id = (b.nextID++ & 65535) << 11;
      this.worldVerticesLength = 0;
    }
    __extends(b, a);
    b.prototype.computeWorldVertices = function(a, b, c, k, q, n) {
      c = q + (c >> 1) * n;
      var e = a.bone.skeleton, d = a.attachmentVertices, f = this.vertices, h = this.bones;
      if (null == h) {
        0 < d.length && (f = d);
        a = a.bone;
        d = a.worldX;
        h = a.worldY;
        var r = a.a;
        e = a.b;
        var x = a.c;
        a = a.d;
        for (var z = b; q < c; z += 2, q += n) {
          b = f[z];
          var p = f[z + 1];
          k[q] = b * r + p * e + d;
          k[q + 1] = b * x + p * a + h;
        }
      } else {
        for (p = a = r = 0; p < b; p += 2) {
          x = h[r], r += x + 1, a += x;
        }
        z = e.bones;
        if (0 == d.length) {
          for (e = 3 * a; q < c; q += n) {
            var u = 0, y = 0;
            x = h[r++];
            for (x += r; r < x; r++, e += 3) {
              a = z[h[r]];
              b = f[e];
              p = f[e + 1];
              var A = f[e + 2];
              u += (b * a.a + p * a.b + a.worldX) * A;
              y += (b * a.c + p * a.d + a.worldY) * A;
            }
            k[q] = u;
            k[q + 1] = y;
          }
        } else {
          e = 3 * a;
          for (var B = a << 1; q < c; q += n) {
            y = u = 0;
            x = h[r++];
            for (x += r; r < x; r++, e += 3, B += 2) {
              a = z[h[r]], b = f[e] + d[B], p = f[e + 1] + d[B + 1], A = f[e + 2], u += (b * a.a + p * a.b + a.worldX) * A, y += (b * a.c + p * a.d + a.worldY) * A;
            }
            k[q] = u;
            k[q + 1] = y;
          }
        }
      }
    };
    b.prototype.applyDeform = function(a) {
      return this == a;
    };
    b.nextID = 0;
    return b;
  }(c);
  a.VertexAttachment = c;
})(spine || (spine = {}));
(function(a) {
  a = a.AttachmentType || (a.AttachmentType = {});
  a[a.Region = 0] = "Region";
  a[a.BoundingBox = 1] = "BoundingBox";
  a[a.Mesh = 2] = "Mesh";
  a[a.LinkedMesh = 3] = "LinkedMesh";
  a[a.Path = 4] = "Path";
  a[a.Point = 5] = "Point";
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.BoundingBoxAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(.2275, .2275, .8078, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.ClippingAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
      this.inheritDeform = !1;
      this.tempColor = new a.Color(0, 0, 0, 0);
    }
    __extends(b, c);
    b.prototype.updateUVs = function() {
      var b, c;
      if (null == this.region) {
        var h = b = 0;
        var k = c = 1;
      } else {
        h = this.region.u, b = this.region.v, k = this.region.u2 - h, c = this.region.v2 - b;
      }
      var q = this.regionUVs;
      if (null == this.uvs || this.uvs.length != q.length) {
        this.uvs = a.Utils.newFloatArray(q.length);
      }
      var n = this.uvs;
      if (this.region.rotate) {
        for (var m = 0, d = n.length; m < d; m += 2) {
          n[m] = h + q[m + 1] * k, n[m + 1] = b + c - q[m] * c;
        }
      } else {
        for (m = 0, d = n.length; m < d; m += 2) {
          n[m] = h + q[m] * k, n[m + 1] = b + q[m + 1] * c;
        }
      }
    };
    b.prototype.applyDeform = function(a) {
      return this == a || this.inheritDeform && this.parentMesh == a;
    };
    b.prototype.getParentMesh = function() {
      return this.parentMesh;
    };
    b.prototype.setParentMesh = function(a) {
      this.parentMesh = a;
      null != a && (this.bones = a.bones, this.vertices = a.vertices, this.worldVerticesLength = a.worldVerticesLength, this.regionUVs = a.regionUVs, this.triangles = a.triangles, this.hullLength = a.hullLength, this.worldVerticesLength = a.worldVerticesLength);
    };
    return b;
  }(a.VertexAttachment);
  a.MeshAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.constantSpeed = this.closed = !1;
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.PathAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(.38, .94, 0, 1);
    }
    __extends(b, c);
    b.prototype.computeWorldPosition = function(a, b) {
      b.x = this.x * a.a + this.y * a.b + a.worldX;
      b.y = this.x * a.c + this.y * a.d + a.worldY;
      return b;
    };
    b.prototype.computeWorldRotation = function(b) {
      var c = a.MathUtils.cosDeg(this.rotation), e = a.MathUtils.sinDeg(this.rotation);
      return Math.atan2(c * b.c + e * b.d, c * b.a + e * b.b) * a.MathUtils.radDeg;
    };
    return b;
  }(a.VertexAttachment);
  a.PointAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.height = this.width = this.rotation = 0;
      this.color = new a.Color(1, 1, 1, 1);
      this.offset = a.Utils.newFloatArray(8);
      this.uvs = a.Utils.newFloatArray(8);
      this.tempColor = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    b.prototype.updateOffset = function() {
      var a = this.width / this.region.originalWidth * this.scaleX, c = this.height / this.region.originalHeight * this.scaleY, h = -this.width / 2 * this.scaleX + this.region.offsetX * a, k = -this.height / 2 * this.scaleY + this.region.offsetY * c, q = h + this.region.width * a;
      a = k + this.region.height * c;
      c = this.rotation * Math.PI / 180;
      var n = Math.cos(c), m = Math.sin(c);
      c = h * n + this.x;
      h *= m;
      var d = k * n + this.y;
      k *= m;
      var l = q * n + this.x;
      q *= m;
      n = a * n + this.y;
      a *= m;
      m = this.offset;
      m[b.OX1] = c - k;
      m[b.OY1] = d + h;
      m[b.OX2] = c - a;
      m[b.OY2] = n + h;
      m[b.OX3] = l - a;
      m[b.OY3] = n + q;
      m[b.OX4] = l - k;
      m[b.OY4] = d + q;
    };
    b.prototype.setRegion = function(a) {
      this.region = a;
      var b = this.uvs;
      a.rotate ? (b[2] = a.u, b[3] = a.v2, b[4] = a.u, b[5] = a.v, b[6] = a.u2, b[7] = a.v, b[0] = a.u2, b[1] = a.v2) : (b[0] = a.u, b[1] = a.v2, b[2] = a.u, b[3] = a.v, b[4] = a.u2, b[5] = a.v, b[6] = a.u2, b[7] = a.v2);
    };
    b.prototype.computeWorldVertices = function(a, c, h, k) {
      var e = this.offset, f = a.worldX, m = a.worldY, d = a.a, l = a.b, r = a.c;
      a = a.d;
      var w = e[b.OX1];
      var x = e[b.OY1];
      c[h] = w * d + x * l + f;
      c[h + 1] = w * r + x * a + m;
      h += k;
      w = e[b.OX2];
      x = e[b.OY2];
      c[h] = w * d + x * l + f;
      c[h + 1] = w * r + x * a + m;
      h += k;
      w = e[b.OX3];
      x = e[b.OY3];
      c[h] = w * d + x * l + f;
      c[h + 1] = w * r + x * a + m;
      h += k;
      w = e[b.OX4];
      x = e[b.OY4];
      c[h] = w * d + x * l + f;
      c[h + 1] = w * r + x * a + m;
    };
    b.OX1 = 0;
    b.OY1 = 1;
    b.OX2 = 2;
    b.OY2 = 3;
    b.OX3 = 4;
    b.OY3 = 5;
    b.OX4 = 6;
    b.OY4 = 7;
    b.X1 = 0;
    b.Y1 = 1;
    b.C1R = 2;
    b.C1G = 3;
    b.C1B = 4;
    b.C1A = 5;
    b.U1 = 6;
    b.V1 = 7;
    b.X2 = 8;
    b.Y2 = 9;
    b.C2R = 10;
    b.C2G = 11;
    b.C2B = 12;
    b.C2A = 13;
    b.U2 = 14;
    b.V2 = 15;
    b.X3 = 16;
    b.Y3 = 17;
    b.C3R = 18;
    b.C3G = 19;
    b.C3B = 20;
    b.C3A = 21;
    b.U3 = 22;
    b.V3 = 23;
    b.X4 = 24;
    b.Y4 = 25;
    b.C4R = 26;
    b.C4G = 27;
    b.C4B = 28;
    b.C4A = 29;
    b.U4 = 30;
    b.V4 = 31;
    return b;
  }(a.Attachment);
  a.RegionAttachment = c;
})(spine || (spine = {}));
(function(a) {
  a = a.BlendMode || (a.BlendMode = {});
  a[a.Normal = 0] = "Normal";
  a[a.Additive = 1] = "Additive";
  a[a.Multiply = 2] = "Multiply";
  a[a.Screen = 3] = "Screen";
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c, f) {
      this.children = [];
      this.ashearY = this.ashearX = this.ascaleY = this.ascaleX = this.arotation = this.ay = this.ax = this.shearY = this.shearX = this.scaleY = this.scaleX = this.rotation = this.y = this.x = 0;
      this.appliedValid = !1;
      this.worldY = this.d = this.c = this.worldX = this.b = this.a = 0;
      this.sorted = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.skeleton = c;
      this.parent = f;
      this.setToSetupPose();
    }
    c.prototype.update = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    c.prototype.updateWorldTransform = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    c.prototype.updateWorldTransformWith = function(b, c, f, h, k, q, n) {
      this.ax = b;
      this.ay = c;
      this.arotation = f;
      this.ascaleX = h;
      this.ascaleY = k;
      this.ashearX = q;
      this.ashearY = n;
      this.appliedValid = !0;
      var e = this.parent;
      if (null == e) {
        n = f + 90 + n;
        e = a.MathUtils.cosDeg(f + q) * h;
        var d = a.MathUtils.cosDeg(n) * k;
        h *= a.MathUtils.sinDeg(f + q);
        k *= a.MathUtils.sinDeg(n);
        var l = this.skeleton;
        l.flipX && (b = -b, e = -e, d = -d);
        l.flipY && (c = -c, h = -h, k = -k);
        this.a = e;
        this.b = d;
        this.c = h;
        this.d = k;
        this.worldX = b + l.x;
        this.worldY = c + l.y;
      } else {
        l = e.a;
        var r = e.b, w = e.c, x = e.d;
        this.worldX = l * b + r * c + e.worldX;
        this.worldY = w * b + x * c + e.worldY;
        switch(this.data.transformMode) {
          case a.TransformMode.Normal:
            n = f + 90 + n;
            e = a.MathUtils.cosDeg(f + q) * h;
            d = a.MathUtils.cosDeg(n) * k;
            h *= a.MathUtils.sinDeg(f + q);
            k *= a.MathUtils.sinDeg(n);
            this.a = l * e + r * h;
            this.b = l * d + r * k;
            this.c = w * e + x * h;
            this.d = w * d + x * k;
            return;
          case a.TransformMode.OnlyTranslation:
            n = f + 90 + n;
            this.a = a.MathUtils.cosDeg(f + q) * h;
            this.b = a.MathUtils.cosDeg(n) * k;
            this.c = a.MathUtils.sinDeg(f + q) * h;
            this.d = a.MathUtils.sinDeg(n) * k;
            break;
          case a.TransformMode.NoRotationOrReflection:
            e = l * l + w * w;
            1E-4 < e ? (e = Math.abs(l * x - r * w) / e, r = w * e, x = l * e, e = Math.atan2(w, l) * a.MathUtils.radDeg) : (w = l = 0, e = 90 - Math.atan2(x, r) * a.MathUtils.radDeg);
            q = f + q - e;
            n = f + n - e + 90;
            e = a.MathUtils.cosDeg(q) * h;
            d = a.MathUtils.cosDeg(n) * k;
            h *= a.MathUtils.sinDeg(q);
            k *= a.MathUtils.sinDeg(n);
            this.a = l * e - r * h;
            this.b = l * d - r * k;
            this.c = w * e + x * h;
            this.d = w * d + x * k;
            break;
          case a.TransformMode.NoScale:
          case a.TransformMode.NoScaleOrReflection:
            e = a.MathUtils.cosDeg(f);
            d = a.MathUtils.sinDeg(f);
            f = l * e + r * d;
            b = w * e + x * d;
            e = Math.sqrt(f * f + b * b);
            1E-5 < e && (e = 1 / e);
            f *= e;
            b *= e;
            e = Math.sqrt(f * f + b * b);
            d = Math.PI / 2 + Math.atan2(b, f);
            c = Math.cos(d) * e;
            var z = Math.sin(d) * e;
            e = a.MathUtils.cosDeg(q) * h;
            d = a.MathUtils.cosDeg(90 + n) * k;
            h *= a.MathUtils.sinDeg(q);
            k *= a.MathUtils.sinDeg(90 + n);
            if (this.data.transformMode != a.TransformMode.NoScaleOrReflection ? 0 > l * x - r * w : this.skeleton.flipX != this.skeleton.flipY) {
              c = -c, z = -z;
            }
            this.a = f * e + c * h;
            this.b = f * d + c * k;
            this.c = b * e + z * h;
            this.d = b * d + z * k;
            return;
        }
        this.skeleton.flipX && (this.a = -this.a, this.b = -this.b);
        this.skeleton.flipY && (this.c = -this.c, this.d = -this.d);
      }
    };
    c.prototype.setToSetupPose = function() {
      var a = this.data;
      this.x = a.x;
      this.y = a.y;
      this.rotation = a.rotation;
      this.scaleX = a.scaleX;
      this.scaleY = a.scaleY;
      this.shearX = a.shearX;
      this.shearY = a.shearY;
    };
    c.prototype.getWorldRotationX = function() {
      return Math.atan2(this.c, this.a) * a.MathUtils.radDeg;
    };
    c.prototype.getWorldRotationY = function() {
      return Math.atan2(this.d, this.b) * a.MathUtils.radDeg;
    };
    c.prototype.getWorldScaleX = function() {
      return Math.sqrt(this.a * this.a + this.c * this.c);
    };
    c.prototype.getWorldScaleY = function() {
      return Math.sqrt(this.b * this.b + this.d * this.d);
    };
    c.prototype.updateAppliedTransform = function() {
      this.appliedValid = !0;
      var b = this.parent;
      if (null == b) {
        this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * a.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d), this.ashearX = 0, this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * a.MathUtils.radDeg;
      } else {
        var c = b.a, f = b.b, h = b.c, k = b.d, q = 1 / (c * k - f * h), n = this.worldX - b.worldX;
        b = this.worldY - b.worldY;
        this.ax = n * k * q - b * f * q;
        this.ay = b * c * q - n * h * q;
        k *= q;
        c *= q;
        f *= q;
        q *= h;
        h = k * this.a - f * this.c;
        f = k * this.b - f * this.d;
        k = c * this.c - q * this.a;
        q = c * this.d - q * this.b;
        this.ashearX = 0;
        this.ascaleX = Math.sqrt(h * h + k * k);
        1E-4 < this.ascaleX ? (c = h * q - f * k, this.ascaleY = c / this.ascaleX, this.ashearY = Math.atan2(h * f + k * q, c) * a.MathUtils.radDeg, this.arotation = Math.atan2(k, h) * a.MathUtils.radDeg) : (this.ascaleX = 0, this.ascaleY = Math.sqrt(f * f + q * q), this.ashearY = 0, this.arotation = 90 - Math.atan2(q, f) * a.MathUtils.radDeg);
      }
    };
    c.prototype.worldToLocal = function(a) {
      var b = this.a, c = this.b, h = this.c, k = this.d, q = 1 / (b * k - c * h), n = a.x - this.worldX, m = a.y - this.worldY;
      a.x = n * k * q - m * c * q;
      a.y = m * b * q - n * h * q;
      return a;
    };
    c.prototype.localToWorld = function(a) {
      var b = a.x, c = a.y;
      a.x = b * this.a + c * this.b + this.worldX;
      a.y = b * this.c + c * this.d + this.worldY;
      return a;
    };
    c.prototype.worldToLocalRotation = function(b) {
      var c = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(this.a * c - this.c * b, this.d * b - this.b * c) * a.MathUtils.radDeg;
    };
    c.prototype.localToWorldRotation = function(b) {
      var c = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(b * this.c + c * this.d, b * this.a + c * this.b) * a.MathUtils.radDeg;
    };
    c.prototype.rotateWorld = function(b) {
      var c = this.a, f = this.b, h = this.c, k = this.d, q = a.MathUtils.cosDeg(b);
      b = a.MathUtils.sinDeg(b);
      this.a = q * c - b * h;
      this.b = q * f - b * k;
      this.c = b * c + q * h;
      this.d = b * f + q * k;
      this.appliedValid = !1;
    };
    return c;
  }();
  a.Bone = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a, c, f) {
      this.rotation = this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.shearY = this.shearX = 0;
      this.transformMode = k.Normal;
      if (0 > a) {
        throw Error("index must be >= 0.");
      }
      if (null == c) {
        throw Error("name cannot be null.");
      }
      this.index = a;
      this.name = c;
      this.parent = f;
    };
  }();
  a.BoneData = c;
  (function(a) {
    a[a.Normal = 0] = "Normal";
    a[a.OnlyTranslation = 1] = "OnlyTranslation";
    a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
    a[a.NoScale = 3] = "NoScale";
    a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection";
  })(a.TransformMode || (a.TransformMode = {}));
  var k = a.TransformMode;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a, b) {
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.time = a;
      this.data = b;
    };
  }();
  a.Event = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.name = a;
    };
  }();
  a.EventData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.mix = 1;
      this.bendDirection = 0;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.mix = a.mix;
      this.bendDirection = a.bendDirection;
      this.bones = [];
      for (var b = 0; b < a.bones.length; b++) {
        this.bones.push(c.findBone(a.bones[b].name));
      }
      this.target = c.findBone(a.target.name);
    }
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      var a = this.target, c = this.bones;
      switch(c.length) {
        case 1:
          this.apply1(c[0], a.worldX, a.worldY, this.mix);
          break;
        case 2:
          this.apply2(c[0], c[1], a.worldX, a.worldY, this.bendDirection, this.mix);
      }
    };
    c.prototype.apply1 = function(b, c, f, h) {
      b.appliedValid || b.updateAppliedTransform();
      var e = b.parent, k = 1 / (e.a * e.d - e.b * e.c);
      c -= e.worldX;
      f -= e.worldY;
      e = Math.atan2((f * e.a - c * e.c) * k - b.ay, (c * e.d - f * e.b) * k - b.ax) * a.MathUtils.radDeg - b.ashearX - b.arotation;
      0 > b.ascaleX && (e += 180);
      180 < e ? e -= 360 : -180 > e && (e += 360);
      b.updateWorldTransformWith(b.ax, b.ay, b.arotation + e * h, b.ascaleX, b.ascaleY, b.ashearX, b.ashearY);
    };
    c.prototype.apply2 = function(b, c, f, h, k, q) {
      if (0 == q) {
        c.updateWorldTransform();
      } else {
        b.appliedValid || b.updateAppliedTransform();
        c.appliedValid || c.updateAppliedTransform();
        var e = b.ax, m = b.ay, d = b.ascaleX, l = b.ascaleY, r = c.ascaleX;
        if (0 > d) {
          d = -d;
          var w = 180;
          var x = -1;
        } else {
          w = 0, x = 1;
        }
        0 > l && (l = -l, x = -x);
        if (0 > r) {
          r = -r;
          var z = 180;
        } else {
          z = 0;
        }
        var p = c.ax, u = b.a, y = b.b, A = b.c, B = b.d, D = 1E-4 >= Math.abs(d - l);
        if (D) {
          var F = c.ay;
          var C = u * p + y * F + b.worldX;
          var E = A * p + B * F + b.worldY;
        } else {
          F = 0, C = u * p + b.worldX, E = A * p + b.worldY;
        }
        var H = b.parent;
        u = H.a;
        y = H.b;
        A = H.c;
        B = H.d;
        var Q = 1 / (u * B - y * A);
        f -= H.worldX;
        h -= H.worldY;
        var K = (f * B - h * y) * Q - e, M = (h * u - f * A) * Q - m;
        f = C - H.worldX;
        h = E - H.worldY;
        y = (f * B - h * y) * Q - e;
        u = (h * u - f * A) * Q - m;
        f = Math.sqrt(y * y + u * u);
        y = c.data.length * r;
        a: {
          if (D) {
            y *= d, u = (K * K + M * M - f * f - y * y) / (2 * f * y), -1 > u ? u = -1 : 1 < u && (u = 1), k *= Math.acos(u), u = f + y * u, y *= Math.sin(k), u = Math.atan2(M * u - K * y, K * u + M * y);
          } else {
            u = d * y;
            y *= l;
            h = u * u;
            r = y * y;
            D = K * K + M * M;
            K = Math.atan2(M, K);
            A = r * f * f + h * D - h * r;
            M = -2 * r * f;
            Q = r - h;
            B = M * M - 4 * Q * A;
            if (0 <= B && (B = Math.sqrt(B), 0 > M && (B = -B), B = -(M + B) / 2, M = B / Q, A /= B, A = Math.abs(M) < Math.abs(A) ? M : A, A * A <= D)) {
              h = Math.sqrt(D - A * A) * k;
              u = K - Math.atan2(h, A);
              k = Math.atan2(h / l, (A - f) / d);
              break a;
            }
            d = a.MathUtils.PI;
            M = f - u;
            Q = M * M;
            l = C = 0;
            E = f + u;
            H = E * E;
            var L = 0;
            A = -u * f / (h - r);
            -1 <= A && 1 >= A && (A = Math.acos(A), f = u * Math.cos(A) + f, h = y * Math.sin(A), B = f * f + h * h, B < Q && (d = A, Q = B, M = f, C = h), B > H && (l = A, H = B, E = f, L = h));
            D <= (Q + H) / 2 ? (u = K - Math.atan2(C * k, M), k *= d) : (u = K - Math.atan2(L * k, E), k *= l);
          }
        }
        y = Math.atan2(F, p) * x;
        A = b.arotation;
        u = (u - y) * a.MathUtils.radDeg + w - A;
        180 < u ? u -= 360 : -180 > u && (u += 360);
        b.updateWorldTransformWith(e, m, A + u * q, b.ascaleX, b.ascaleY, 0, 0);
        A = c.arotation;
        k = ((k + y) * a.MathUtils.radDeg - c.ashearX) * x + z - A;
        180 < k ? k -= 360 : -180 > k && (k += 360);
        c.updateWorldTransformWith(p, F, A + k * q, c.ascaleX, c.ascaleY, c.ashearX, c.ashearY);
      }
    };
    return c;
  }();
  a.IkConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.mix = this.bendDirection = 1;
      this.name = a;
    };
  }();
  a.IkConstraintData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.translateMix = this.rotateMix = this.spacing = this.position = 0;
      this.spaces = [];
      this.positions = [];
      this.world = [];
      this.curves = [];
      this.lengths = [];
      this.segments = [];
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.bones = [];
      for (var b = 0, e = a.bones.length; b < e; b++) {
        this.bones.push(c.findBone(a.bones[b].name));
      }
      this.target = c.findSlot(a.target.name);
      this.position = a.position;
      this.spacing = a.spacing;
      this.rotateMix = a.rotateMix;
      this.translateMix = a.translateMix;
    }
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      var b = this.target.getAttachment();
      if (b instanceof a.PathAttachment) {
        var c = this.rotateMix, f = this.translateMix, h = 0 < c;
        if (0 < f || h) {
          var k = this.data, q = k.spacingMode, n = q == a.SpacingMode.Length, m = k.rotateMode, d = m == a.RotateMode.Tangent, l = m == a.RotateMode.ChainScale, v = this.bones.length, w = d ? v : v + 1, x = this.bones, z = a.Utils.setArraySize(this.spaces, w), p = null, u = this.spacing;
          if (l || n) {
            l && (p = a.Utils.setArraySize(this.lengths, v));
            for (var y = 0, A = w - 1; y < A;) {
              var B = x[y], D = B.data.length;
              0 == D && (D = 1E-7);
              var F = D * B.a, C = D * B.c;
              B = Math.sqrt(F * F + C * C);
              l && (p[y] = B);
              z[++y] = (n ? D + u : u) * B / D;
            }
          } else {
            for (y = 1; y < w; y++) {
              z[y] = u;
            }
          }
          b = this.computeWorldPositions(b, w, d, k.positionMode == a.PositionMode.Percent, q == a.SpacingMode.Percent);
          q = b[0];
          n = b[1];
          k = k.offsetRotation;
          0 == k ? m = m == a.RotateMode.Chain : (m = !1, w = this.target.bone, k *= 0 < w.a * w.d - w.b * w.c ? a.MathUtils.degRad : -a.MathUtils.degRad);
          y = 0;
          for (w = 3; y < v; y++, w += 3) {
            B = x[y];
            B.worldX += (q - B.worldX) * f;
            B.worldY += (n - B.worldY) * f;
            F = b[w];
            C = b[w + 1];
            u = F - q;
            A = C - n;
            l && (q = p[y], 0 != q && (q = (Math.sqrt(u * u + A * A) / q - 1) * c + 1, B.a *= q, B.c *= q));
            q = F;
            n = C;
            if (h) {
              F = B.a;
              C = B.b;
              D = B.c;
              var E = B.d;
              var H = d ? b[w - 1] : 0 == z[y + 1] ? b[w + 2] : Math.atan2(A, u);
              H -= Math.atan2(D, F);
              if (m) {
                var Q = Math.cos(H);
                var K = Math.sin(H);
                var M = B.data.length;
                q += (M * (Q * F - K * D) - u) * c;
                n += (M * (K * F + Q * D) - A) * c;
              } else {
                H += k;
              }
              H > a.MathUtils.PI ? H -= a.MathUtils.PI2 : H < -a.MathUtils.PI && (H += a.MathUtils.PI2);
              H *= c;
              Q = Math.cos(H);
              K = Math.sin(H);
              B.a = Q * F - K * D;
              B.b = Q * C - K * E;
              B.c = K * F + Q * D;
              B.d = K * C + Q * E;
            }
            B.appliedValid = !1;
          }
        }
      }
    };
    c.prototype.computeWorldPositions = function(b, e, f, h, k) {
      var q = this.target, n = this.position, m = this.spaces, d = a.Utils.setArraySize(this.positions, 3 * e + 2), l = b.closed, r = b.worldVerticesLength, w = r / 6, x = c.NONE;
      if (!b.constantSpeed) {
        var z = b.lengths;
        w -= l ? 1 : 2;
        var p = z[w];
        h && (n *= p);
        if (k) {
          for (var u = 0; u < e; u++) {
            m[u] *= p;
          }
        }
        var y = a.Utils.setArraySize(this.world, 8);
        for (k = h = u = 0; u < e; u++, h += 3) {
          var A = m[u], B = n += A;
          if (l) {
            B %= p, 0 > B && (B += p), k = 0;
          } else {
            if (0 > B) {
              x != c.BEFORE && (x = c.BEFORE, b.computeWorldVertices(q, 2, 4, y, 0, 2));
              this.addBeforePosition(B, y, 0, d, h);
              continue;
            } else {
              if (B > p) {
                x != c.AFTER && (x = c.AFTER, b.computeWorldVertices(q, r - 6, 4, y, 0, 2));
                this.addAfterPosition(B - p, y, 0, d, h);
                continue;
              }
            }
          }
          for (;; k++) {
            var D = z[k];
            if (!(B > D)) {
              if (0 == k) {
                B /= D;
              } else {
                var F = z[k - 1];
                B = (B - F) / (D - F);
              }
              break;
            }
          }
          k != x && (x = k, l && k == w ? (b.computeWorldVertices(q, r - 4, 4, y, 0, 2), b.computeWorldVertices(q, 0, 4, y, 4, 2)) : b.computeWorldVertices(q, 6 * k + 2, 8, y, 0, 2));
          this.addCurvePosition(B, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], d, h, f || 0 < u && 0 == A);
        }
        return d;
      }
      l ? (r += 2, y = a.Utils.setArraySize(this.world, r), b.computeWorldVertices(q, 2, r - 4, y, 0, 2), b.computeWorldVertices(q, 0, 2, y, r - 4, 2), y[r - 2] = y[0], y[r - 1] = y[1]) : (w--, r -= 4, y = a.Utils.setArraySize(this.world, r), b.computeWorldVertices(q, 2, r, y, 0, 2));
      b = a.Utils.setArraySize(this.curves, w);
      q = 0;
      z = y[0];
      p = y[1];
      var C = D = 0, E = 0, H = 0, Q = 0, K = 0;
      u = 0;
      for (A = 2; u < w; u++, A += 6) {
        D = y[A];
        C = y[A + 1];
        E = y[A + 2];
        H = y[A + 3];
        Q = y[A + 4];
        K = y[A + 5];
        var M = .1875 * (z - 2 * D + E);
        var L = .1875 * (p - 2 * C + H);
        F = .09375 * (3 * (D - E) - z + Q);
        var I = .09375 * (3 * (C - H) - p + K);
        var P = 2 * M + F;
        var T = 2 * L + I;
        M = .75 * (D - z) + M + .16666667 * F;
        L = .75 * (C - p) + L + .16666667 * I;
        q += Math.sqrt(M * M + L * L);
        M += P;
        L += T;
        P += F;
        T += I;
        q += Math.sqrt(M * M + L * L);
        M += P;
        L += T;
        q += Math.sqrt(M * M + L * L);
        M += P + F;
        L += T + I;
        q += Math.sqrt(M * M + L * L);
        b[u] = q;
        z = Q;
        p = K;
      }
      h && (n *= q);
      if (k) {
        for (u = 0; u < e; u++) {
          m[u] *= q;
        }
      }
      w = this.segments;
      var R = 0;
      for (I = k = h = u = 0; u < e; u++, h += 3) {
        A = m[u];
        B = n += A;
        if (l) {
          B %= q, 0 > B && (B += q), k = 0;
        } else {
          if (0 > B) {
            this.addBeforePosition(B, y, 0, d, h);
            continue;
          } else {
            if (B > q) {
              this.addAfterPosition(B - q, y, r - 4, d, h);
              continue;
            }
          }
        }
        for (;; k++) {
          if (P = b[k], !(B > P)) {
            0 == k ? B /= P : (F = b[k - 1], B = (B - F) / (P - F));
            break;
          }
        }
        if (k != x) {
          x = k;
          var aa = 6 * k;
          z = y[aa];
          p = y[aa + 1];
          D = y[aa + 2];
          C = y[aa + 3];
          E = y[aa + 4];
          H = y[aa + 5];
          Q = y[aa + 6];
          K = y[aa + 7];
          M = .03 * (z - 2 * D + E);
          L = .03 * (p - 2 * C + H);
          F = .006 * (3 * (D - E) - z + Q);
          I = .006 * (3 * (C - H) - p + K);
          P = 2 * M + F;
          T = 2 * L + I;
          M = .3 * (D - z) + M + .16666667 * F;
          L = .3 * (C - p) + L + .16666667 * I;
          R = Math.sqrt(M * M + L * L);
          w[0] = R;
          for (aa = 1; 8 > aa; aa++) {
            M += P, L += T, P += F, T += I, R += Math.sqrt(M * M + L * L), w[aa] = R;
          }
          M += P;
          L += T;
          R += Math.sqrt(M * M + L * L);
          w[8] = R;
          M += P + F;
          L += T + I;
          R += Math.sqrt(M * M + L * L);
          w[9] = R;
          I = 0;
        }
        for (B *= R;; I++) {
          if (P = w[I], !(B > P)) {
            0 == I ? B /= P : (F = w[I - 1], B = I + (B - F) / (P - F));
            break;
          }
        }
        this.addCurvePosition(.1 * B, z, p, D, C, E, H, Q, K, d, h, f || 0 < u && 0 == A);
      }
      return d;
    };
    c.prototype.addBeforePosition = function(a, c, f, h, k) {
      var b = c[f], e = c[f + 1];
      c = Math.atan2(c[f + 3] - e, c[f + 2] - b);
      h[k] = b + a * Math.cos(c);
      h[k + 1] = e + a * Math.sin(c);
      h[k + 2] = c;
    };
    c.prototype.addAfterPosition = function(a, c, f, h, k) {
      var b = c[f + 2], e = c[f + 3];
      c = Math.atan2(e - c[f + 1], b - c[f]);
      h[k] = b + a * Math.cos(c);
      h[k + 1] = e + a * Math.sin(c);
      h[k + 2] = c;
    };
    c.prototype.addCurvePosition = function(a, c, f, h, k, q, n, m, d, l, v, w) {
      if (0 == a || isNaN(a)) {
        a = 1E-4;
      }
      var b = a * a, e = b * a, r = 1 - a, u = r * r, y = u * r, A = r * a, B = 3 * A;
      r *= B;
      a *= B;
      m = c * y + h * r + q * a + m * e;
      d = f * y + k * r + n * a + d * e;
      l[v] = m;
      l[v + 1] = d;
      w && (l[v + 2] = Math.atan2(d - (f * u + k * A * 2 + n * b), m - (c * u + h * A * 2 + q * b)));
    };
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    c.NONE = -1;
    c.BEFORE = -2;
    c.AFTER = -3;
    return c;
  }();
  a.PathConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.name = a;
    };
  }();
  a.PathConstraintData = c;
  (function(a) {
    a[a.Fixed = 0] = "Fixed";
    a[a.Percent = 1] = "Percent";
  })(a.PositionMode || (a.PositionMode = {}));
  (function(a) {
    a[a.Length = 0] = "Length";
    a[a.Fixed = 1] = "Fixed";
    a[a.Percent = 2] = "Percent";
  })(a.SpacingMode || (a.SpacingMode = {}));
  (function(a) {
    a[a.Tangent = 0] = "Tangent";
    a[a.Chain = 1] = "Chain";
    a[a.ChainScale = 2] = "ChainScale";
  })(a.RotateMode || (a.RotateMode = {}));
})(spine || (spine = {}));
(function() {
  Math.fround || (Math.fround = function(a) {
    return function(c) {
      return a[0] = c, a[0];
    };
  }(new Float32Array(1)));
})();
(function(a) {
  var c = function() {
    function a(a) {
      this.toLoad = [];
      this.assets = {};
      this.clientId = a;
    }
    a.prototype.loaded = function() {
      var a = 0, b;
      for (b in this.assets) {
        a++;
      }
      return a;
    };
    return a;
  }(), k = function() {
    function a(a) {
      void 0 === a && (a = "");
      this.clientAssets = {};
      this.queuedAssets = {};
      this.rawAssets = {};
      this.errors = {};
      this.pathPrefix = a;
    }
    a.prototype.queueAsset = function(a, b, h) {
      var e = this.clientAssets[a];
      if (null === e || void 0 === e) {
        e = new c(a), this.clientAssets[a] = e;
      }
      null !== b && (e.textureLoader = b);
      e.toLoad.push(h);
      if (this.queuedAssets[h] === h) {
        return !1;
      }
      this.queuedAssets[h] = h;
      return !0;
    };
    a.prototype.loadText = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var e = new XMLHttpRequest;
        e.onreadystatechange = function() {
          e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? c.rawAssets[b] = e.responseText : c.errors[b] = "Couldn't load text " + b + ": status " + e.status + ", " + e.responseText);
        };
        e.open("GET", b, !0);
        e.send();
      }
    };
    a.prototype.loadJson = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var e = new XMLHttpRequest;
        e.onreadystatechange = function() {
          e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? c.rawAssets[b] = JSON.parse(e.responseText) : c.errors[b] = "Couldn't load text " + b + ": status " + e.status + ", " + e.responseText);
        };
        e.open("GET", b, !0);
        e.send();
      }
    };
    a.prototype.loadTexture = function(a, b, c) {
      var e = this;
      c = this.pathPrefix + c;
      if (this.queueAsset(a, b, c)) {
        var f = new Image;
        f.src = c;
        f.crossOrigin = "anonymous";
        f.onload = function(a) {
          e.rawAssets[c] = f;
        };
        f.onerror = function(a) {
          e.errors[c] = "Couldn't load image " + c;
        };
      }
    };
    a.prototype.get = function(a, b) {
      b = this.pathPrefix + b;
      a = this.clientAssets[a];
      return null === a || void 0 === a ? !0 : a.assets[b];
    };
    a.prototype.updateClientAssets = function(a) {
      for (var b = 0; b < a.toLoad.length; b++) {
        var c = a.toLoad[b], e = a.assets[c];
        if (null === e || void 0 === e) {
          e = this.rawAssets[c], null !== e && void 0 !== e && (a.assets[c] = e instanceof HTMLImageElement ? a.textureLoader(e) : e);
        }
      }
    };
    a.prototype.isLoadingComplete = function(a) {
      a = this.clientAssets[a];
      if (null === a || void 0 === a) {
        return !0;
      }
      this.updateClientAssets(a);
      return a.toLoad.length == a.loaded();
    };
    a.prototype.dispose = function() {
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.SharedAssetManager = k;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b) {
      this._updateCache = [];
      this.updateCacheReset = [];
      this.time = 0;
      this.flipY = this.flipX = !1;
      this.y = this.x = 0;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.data = b;
      this.bones = [];
      for (var c = 0; c < b.bones.length; c++) {
        var f = b.bones[c];
        if (null == f.parent) {
          f = new a.Bone(f, this, null);
        } else {
          var h = this.bones[f.parent.index];
          f = new a.Bone(f, this, h);
          h.children.push(f);
        }
        this.bones.push(f);
      }
      this.slots = [];
      this.drawOrder = [];
      for (c = 0; c < b.slots.length; c++) {
        h = b.slots[c], f = this.bones[h.boneData.index], f = new a.Slot(h, f), this.slots.push(f), this.drawOrder.push(f);
      }
      this.ikConstraints = [];
      for (c = 0; c < b.ikConstraints.length; c++) {
        this.ikConstraints.push(new a.IkConstraint(b.ikConstraints[c], this));
      }
      this.transformConstraints = [];
      for (c = 0; c < b.transformConstraints.length; c++) {
        this.transformConstraints.push(new a.TransformConstraint(b.transformConstraints[c], this));
      }
      this.pathConstraints = [];
      for (c = 0; c < b.pathConstraints.length; c++) {
        this.pathConstraints.push(new a.PathConstraint(b.pathConstraints[c], this));
      }
      this.color = new a.Color(1, 1, 1, 1);
      this.updateCache();
    }
    c.prototype.updateCache = function() {
      this._updateCache.length = 0;
      this.updateCacheReset.length = 0;
      for (var a = this.bones, c = 0, f = a.length; c < f; c++) {
        a[c].sorted = !1;
      }
      f = this.ikConstraints;
      var h = this.transformConstraints, k = this.pathConstraints, q = f.length, n = h.length, m = k.length, d = q + n + m;
      c = 0;
      a: for (; c < d; c++) {
        for (var l = 0; l < q; l++) {
          var v = f[l];
          if (v.data.order == c) {
            this.sortIkConstraint(v);
            continue a;
          }
        }
        for (l = 0; l < n; l++) {
          if (v = h[l], v.data.order == c) {
            this.sortTransformConstraint(v);
            continue a;
          }
        }
        for (l = 0; l < m; l++) {
          if (v = k[l], v.data.order == c) {
            this.sortPathConstraint(v);
            continue a;
          }
        }
      }
      c = 0;
      for (f = a.length; c < f; c++) {
        this.sortBone(a[c]);
      }
    };
    c.prototype.sortIkConstraint = function(a) {
      this.sortBone(a.target);
      var b = a.bones, c = b[0];
      this.sortBone(c);
      if (1 < b.length) {
        var h = b[b.length - 1];
        -1 < this._updateCache.indexOf(h) || this.updateCacheReset.push(h);
      }
      this._updateCache.push(a);
      this.sortReset(c.children);
      b[b.length - 1].sorted = !0;
    };
    c.prototype.sortPathConstraint = function(b) {
      var c = b.target, f = c.data.index, h = c.bone;
      null != this.skin && this.sortPathConstraintAttachment(this.skin, f, h);
      null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, f, h);
      for (var k = 0, q = this.data.skins.length; k < q; k++) {
        this.sortPathConstraintAttachment(this.data.skins[k], f, h);
      }
      k = c.getAttachment();
      k instanceof a.PathAttachment && this.sortPathConstraintAttachmentWith(k, h);
      h = b.bones;
      c = h.length;
      for (k = 0; k < c; k++) {
        this.sortBone(h[k]);
      }
      this._updateCache.push(b);
      for (k = 0; k < c; k++) {
        this.sortReset(h[k].children);
      }
      for (k = 0; k < c; k++) {
        h[k].sorted = !0;
      }
    };
    c.prototype.sortTransformConstraint = function(a) {
      this.sortBone(a.target);
      var b = a.bones, c = b.length;
      if (a.data.local) {
        for (var h = 0; h < c; h++) {
          var k = b[h];
          this.sortBone(k.parent);
          -1 < this._updateCache.indexOf(k) || this.updateCacheReset.push(k);
        }
      } else {
        for (h = 0; h < c; h++) {
          this.sortBone(b[h]);
        }
      }
      this._updateCache.push(a);
      for (a = 0; a < c; a++) {
        this.sortReset(b[a].children);
      }
      for (a = 0; a < c; a++) {
        b[a].sorted = !0;
      }
    };
    c.prototype.sortPathConstraintAttachment = function(a, c, f) {
      if (a = a.attachments[c]) {
        for (var b in a) {
          this.sortPathConstraintAttachmentWith(a[b], f);
        }
      }
    };
    c.prototype.sortPathConstraintAttachmentWith = function(b, c) {
      if (b instanceof a.PathAttachment) {
        if (b = b.bones, null == b) {
          this.sortBone(c);
        } else {
          c = this.bones;
          for (var e = 0; e < b.length;) {
            var h = b[e++];
            for (h = e + h; e < h; e++) {
              this.sortBone(c[b[e]]);
            }
          }
        }
      }
    };
    c.prototype.sortBone = function(a) {
      if (!a.sorted) {
        var b = a.parent;
        null != b && this.sortBone(b);
        a.sorted = !0;
        this._updateCache.push(a);
      }
    };
    c.prototype.sortReset = function(a) {
      for (var b = 0, c = a.length; b < c; b++) {
        var h = a[b];
        h.sorted && this.sortReset(h.children);
        h.sorted = !1;
      }
    };
    c.prototype.updateWorldTransform = function() {
      for (var a = this.updateCacheReset, c = 0, f = a.length; c < f; c++) {
        var h = a[c];
        h.ax = h.x;
        h.ay = h.y;
        h.arotation = h.rotation;
        h.ascaleX = h.scaleX;
        h.ascaleY = h.scaleY;
        h.ashearX = h.shearX;
        h.ashearY = h.shearY;
        h.appliedValid = !0;
      }
      a = this._updateCache;
      c = 0;
      for (f = a.length; c < f; c++) {
        a[c].update();
      }
    };
    c.prototype.setToSetupPose = function() {
      this.setBonesToSetupPose();
      this.setSlotsToSetupPose();
    };
    c.prototype.setBonesToSetupPose = function() {
      for (var a = this.bones, c = 0, f = a.length; c < f; c++) {
        a[c].setToSetupPose();
      }
      var h = this.ikConstraints;
      c = 0;
      for (f = h.length; c < f; c++) {
        a = h[c], a.bendDirection = a.data.bendDirection, a.mix = a.data.mix;
      }
      var k = this.transformConstraints;
      c = 0;
      for (f = k.length; c < f; c++) {
        a = k[c], h = a.data, a.rotateMix = h.rotateMix, a.translateMix = h.translateMix, a.scaleMix = h.scaleMix, a.shearMix = h.shearMix;
      }
      k = this.pathConstraints;
      c = 0;
      for (f = k.length; c < f; c++) {
        a = k[c], h = a.data, a.position = h.position, a.spacing = h.spacing, a.rotateMix = h.rotateMix, a.translateMix = h.translateMix;
      }
    };
    c.prototype.setSlotsToSetupPose = function() {
      var b = this.slots;
      a.Utils.arrayCopy(b, 0, this.drawOrder, 0, b.length);
      for (var c = 0, f = b.length; c < f; c++) {
        b[c].setToSetupPose();
      }
    };
    c.prototype.getRootBone = function() {
      return 0 == this.bones.length ? null : this.bones[0];
    };
    c.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        if (b[c].data.name == a) {
          return c;
        }
      }
      return -1;
    };
    c.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        if (b[c].data.name == a) {
          return c;
        }
      }
      return -1;
    };
    c.prototype.setSkinByName = function(a) {
      var b = this.data.findSkin(a);
      if (null == b) {
        throw Error("Skin not found: " + a);
      }
      this.setSkin(b);
    };
    c.prototype.setSkin = function(a) {
      if (null != a) {
        if (null != this.skin) {
          a.attachAll(this, this.skin);
        } else {
          for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
            var k = b[c], q = k.data.attachmentName;
            null != q && (q = a.getAttachment(c, q), null != q && k.setAttachment(q));
          }
        }
      }
      this.skin = a;
    };
    c.prototype.getAttachmentByName = function(a, c) {
      return this.getAttachment(this.data.findSlotIndex(a), c);
    };
    c.prototype.getAttachment = function(a, c) {
      if (null == c) {
        throw Error("attachmentName cannot be null.");
      }
      if (null != this.skin) {
        var b = this.skin.getAttachment(a, c);
        if (null != b) {
          return b;
        }
      }
      return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(a, c) : null;
    };
    c.prototype.setAttachment = function(a, c) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, e = 0, k = b.length; e < k; e++) {
        var q = b[e];
        if (q.data.name == a) {
          b = null;
          if (null != c && (b = this.getAttachment(e, c), null == b)) {
            throw Error("Attachment not found: " + c + ", for slot: " + a);
          }
          q.setAttachment(b);
          return;
        }
      }
      throw Error("Slot not found: " + a);
    };
    c.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.getBounds = function(b, c, f) {
      if (null == b) {
        throw Error("offset cannot be null.");
      }
      if (null == c) {
        throw Error("size cannot be null.");
      }
      for (var e = this.drawOrder, k = Number.POSITIVE_INFINITY, q = Number.POSITIVE_INFINITY, n = Number.NEGATIVE_INFINITY, m = Number.NEGATIVE_INFINITY, d = 0, l = e.length; d < l; d++) {
        var v = e[d], w = null, x = v.getAttachment();
        if (x instanceof a.RegionAttachment) {
          var z = 8;
          w = a.Utils.setArraySize(f, z, 0);
          x.computeWorldVertices(v.bone, w, 0, 2);
        } else {
          x instanceof a.MeshAttachment && (z = x.worldVerticesLength, w = a.Utils.setArraySize(f, z, 0), x.computeWorldVertices(v, 0, z, w, 0, 2));
        }
        if (null != w) {
          for (v = 0, z = w.length; v < z; v += 2) {
            x = w[v];
            var p = w[v + 1];
            k = Math.min(k, x);
            q = Math.min(q, p);
            n = Math.max(n, x);
            m = Math.max(m, p);
          }
        }
      }
      b.set(k, q);
      c.set(n - k, m - q);
    };
    c.prototype.update = function(a) {
      this.time += a;
    };
    return c;
  }();
  a.Skeleton = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.maxY = this.maxX = this.minY = this.minX = 0;
      this.boundingBoxes = [];
      this.polygons = [];
      this.polygonPool = new a.Pool(function() {
        return a.Utils.newFloatArray(16);
      });
    }
    c.prototype.update = function(b, c) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      var e = this.boundingBoxes, h = this.polygons, k = this.polygonPool;
      b = b.slots;
      var q = b.length;
      e.length = 0;
      k.freeAll(h);
      for (var n = h.length = 0; n < q; n++) {
        var m = b[n], d = m.getAttachment();
        if (d instanceof a.BoundingBoxAttachment) {
          e.push(d);
          var l = k.obtain();
          l.length != d.worldVerticesLength && (l = a.Utils.newFloatArray(d.worldVerticesLength));
          h.push(l);
          d.computeWorldVertices(m, 0, d.worldVerticesLength, l, 0, 2);
        }
      }
      c ? this.aabbCompute() : (this.minY = this.minX = Number.POSITIVE_INFINITY, this.maxY = this.maxX = Number.NEGATIVE_INFINITY);
    };
    c.prototype.aabbCompute = function() {
      for (var a = Number.POSITIVE_INFINITY, c = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, h = Number.NEGATIVE_INFINITY, k = this.polygons, q = 0, n = k.length; q < n; q++) {
        var m = k[q], d = m, l = 0;
        for (m = m.length; l < m; l += 2) {
          var v = d[l], w = d[l + 1];
          a = Math.min(a, v);
          c = Math.min(c, w);
          f = Math.max(f, v);
          h = Math.max(h, w);
        }
      }
      this.minX = a;
      this.minY = c;
      this.maxX = f;
      this.maxY = h;
    };
    c.prototype.aabbContainsPoint = function(a, c) {
      return a >= this.minX && a <= this.maxX && c >= this.minY && c <= this.maxY;
    };
    c.prototype.aabbIntersectsSegment = function(a, c, f, h) {
      var b = this.minX, e = this.minY, k = this.maxX, m = this.maxY;
      if (a <= b && f <= b || c <= e && h <= e || a >= k && f >= k || c >= m && h >= m) {
        return !1;
      }
      f = (h - c) / (f - a);
      h = f * (b - a) + c;
      if (h > e && h < m) {
        return !0;
      }
      h = f * (k - a) + c;
      if (h > e && h < m) {
        return !0;
      }
      e = (e - c) / f + a;
      if (e > b && e < k) {
        return !0;
      }
      e = (m - c) / f + a;
      return e > b && e < k ? !0 : !1;
    };
    c.prototype.aabbIntersectsSkeleton = function(a) {
      return this.minX < a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY;
    };
    c.prototype.containsPoint = function(a, c) {
      for (var b = this.polygons, e = 0, k = b.length; e < k; e++) {
        if (this.containsPointPolygon(b[e], a, c)) {
          return this.boundingBoxes[e];
        }
      }
      return null;
    };
    c.prototype.containsPointPolygon = function(a, c, f) {
      for (var b = a.length, e = b - 2, k = !1, n = 0; n < b; n += 2) {
        var m = a[n + 1], d = a[e + 1];
        if (m < f && d >= f || d < f && m >= f) {
          var l = a[n];
          l + (f - m) / (d - m) * (a[e] - l) < c && (k = !k);
        }
        e = n;
      }
      return k;
    };
    c.prototype.intersectsSegment = function(a, c, f, h) {
      for (var b = this.polygons, e = 0, k = b.length; e < k; e++) {
        if (this.intersectsSegmentPolygon(b[e], a, c, f, h)) {
          return this.boundingBoxes[e];
        }
      }
      return null;
    };
    c.prototype.intersectsSegmentPolygon = function(a, c, f, h, k) {
      for (var b = a.length, e = c - h, m = f - k, d = c * k - f * h, l = a[b - 2], r = a[b - 1], w = 0; w < b; w += 2) {
        var x = a[w], z = a[w + 1], p = l * z - r * x, u = l - x, y = r - z, A = e * y - m * u;
        u = (d * u - e * p) / A;
        if ((u >= l && u <= x || u >= x && u <= l) && (u >= c && u <= h || u >= h && u <= c) && (l = (d * y - m * p) / A, (l >= r && l <= z || l >= z && l <= r) && (l >= f && l <= k || l >= k && l <= f))) {
          return !0;
        }
        l = x;
        r = z;
      }
      return !1;
    };
    c.prototype.getPolygon = function(a) {
      if (null == a) {
        throw Error("boundingBox cannot be null.");
      }
      a = this.boundingBoxes.indexOf(a);
      return -1 == a ? null : this.polygons[a];
    };
    c.prototype.getWidth = function() {
      return this.maxX - this.minX;
    };
    c.prototype.getHeight = function() {
      return this.maxY - this.minY;
    };
    return c;
  }();
  a.SkeletonBounds = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.triangulator = new a.Triangulator;
      this.clippingPolygon = [];
      this.clipOutput = [];
      this.clippedVertices = [];
      this.clippedTriangles = [];
      this.scratch = [];
    }
    c.prototype.clipStart = function(b, e) {
      if (null != this.clipAttachment) {
        return 0;
      }
      this.clipAttachment = e;
      var f = e.worldVerticesLength, h = a.Utils.setArraySize(this.clippingPolygon, f);
      e.computeWorldVertices(b, 0, f, h, 0, 2);
      b = this.clippingPolygon;
      c.makeClockwise(b);
      b = this.clippingPolygons = this.triangulator.decompose(b, this.triangulator.triangulate(b));
      e = 0;
      for (f = b.length; e < f; e++) {
        h = b[e], c.makeClockwise(h), h.push(h[0]), h.push(h[1]);
      }
      return b.length;
    };
    c.prototype.clipEndWithSlot = function(a) {
      null != this.clipAttachment && this.clipAttachment.endSlot == a.data && this.clipEnd();
    };
    c.prototype.clipEnd = function() {
      null != this.clipAttachment && (this.clippingPolygons = this.clipAttachment = null, this.clippedVertices.length = 0, this.clippedTriangles.length = 0, this.clippingPolygon.length = 0);
    };
    c.prototype.isClipping = function() {
      return null != this.clipAttachment;
    };
    c.prototype.clipTriangles = function(b, c, f, h, k, q, n, m) {
      c = this.clipOutput;
      var d = this.clippedVertices, e = this.clippedTriangles, r = this.clippingPolygons, w = this.clippingPolygons.length, x = m ? 12 : 8, z = 0;
      d.length = 0;
      var p = e.length = 0;
      a: for (; p < h; p += 3) {
        var u = f[p] << 1, y = b[u], A = b[u + 1], B = k[u], D = k[u + 1];
        u = f[p + 1] << 1;
        var F = b[u], C = b[u + 1], E = k[u], H = k[u + 1];
        u = f[p + 2] << 1;
        var Q = b[u], K = b[u + 1], M = k[u];
        u = k[u + 1];
        for (var L = 0; L < w; L++) {
          var I = d.length;
          if (this.clip(y, A, F, C, Q, K, r[L], c)) {
            var P = c.length;
            if (0 != P) {
              for (var T = C - K, R = Q - F, aa = y - Q, N = K - A, S = 1 / (T * aa + R * (A - K)), O = P >> 1, W = this.clipOutput, J = a.Utils.setArraySize(d, I + O * x), U = 0; U < P; U += 2) {
                var ea = W[U], ha = W[U + 1];
                J[I] = ea;
                J[I + 1] = ha;
                J[I + 2] = q.r;
                J[I + 3] = q.g;
                J[I + 4] = q.b;
                J[I + 5] = q.a;
                ea -= Q;
                var V = ha - K;
                ha = (T * ea + R * V) * S;
                ea = (N * ea + aa * V) * S;
                V = 1 - ha - ea;
                J[I + 6] = B * ha + E * ea + M * V;
                J[I + 7] = D * ha + H * ea + u * V;
                m && (J[I + 8] = n.r, J[I + 9] = n.g, J[I + 10] = n.b, J[I + 11] = n.a);
                I += x;
              }
              I = e.length;
              P = a.Utils.setArraySize(e, I + 3 * (O - 2));
              O--;
              for (U = 1; U < O; U++) {
                P[I] = z, P[I + 1] = z + U, P[I + 2] = z + U + 1, I += 3;
              }
              z += O + 1;
            }
          } else {
            J = a.Utils.setArraySize(d, I + 3 * x);
            J[I] = y;
            J[I + 1] = A;
            J[I + 2] = q.r;
            J[I + 3] = q.g;
            J[I + 4] = q.b;
            J[I + 5] = q.a;
            m ? (J[I + 6] = B, J[I + 7] = D, J[I + 8] = n.r, J[I + 9] = n.g, J[I + 10] = n.b, J[I + 11] = n.a, J[I + 12] = F, J[I + 13] = C, J[I + 14] = q.r, J[I + 15] = q.g, J[I + 16] = q.b, J[I + 17] = q.a, J[I + 18] = E, J[I + 19] = H, J[I + 20] = n.r, J[I + 21] = n.g, J[I + 22] = n.b, J[I + 23] = n.a, J[I + 24] = Q, J[I + 25] = K, J[I + 26] = q.r, J[I + 27] = q.g, J[I + 28] = q.b, J[I + 29] = q.a, J[I + 30] = M, J[I + 31] = u, J[I + 32] = n.r, J[I + 33] = n.g, J[I + 34] = n.b, J[I + 35] = n.a) : 
            (J[I + 6] = B, J[I + 7] = D, J[I + 8] = F, J[I + 9] = C, J[I + 10] = q.r, J[I + 11] = q.g, J[I + 12] = q.b, J[I + 13] = q.a, J[I + 14] = E, J[I + 15] = H, J[I + 16] = Q, J[I + 17] = K, J[I + 18] = q.r, J[I + 19] = q.g, J[I + 20] = q.b, J[I + 21] = q.a, J[I + 22] = M, J[I + 23] = u);
            I = e.length;
            P = a.Utils.setArraySize(e, I + 3);
            P[I] = z;
            P[I + 1] = z + 1;
            P[I + 2] = z + 2;
            z += 3;
            continue a;
          }
        }
      }
    };
    c.prototype.clip = function(a, c, f, h, k, q, n, m) {
      var b = m, e = !1;
      if (2 <= n.length % 4) {
        var r = m;
        m = this.scratch;
      } else {
        r = this.scratch;
      }
      r.length = 0;
      r.push(a);
      r.push(c);
      r.push(f);
      r.push(h);
      r.push(k);
      r.push(q);
      r.push(a);
      r.push(c);
      m.length = 0;
      c = n.length - 4;
      for (a = 0;; a += 2) {
        f = n[a];
        h = n[a + 1];
        k = n[a + 2];
        q = n[a + 3];
        for (var w = f - k, x = h - q, z = r, p = r.length - 2, u = m.length, y = 0; y < p; y += 2) {
          var A = z[y], B = z[y + 1], D = z[y + 2], F = z[y + 3], C = 0 < w * (F - q) - x * (D - k);
          if (0 < w * (B - q) - x * (A - k)) {
            if (C) {
              m.push(D);
              m.push(F);
              continue;
            }
            e = F - B;
            C = D - A;
            e = (C * (h - B) - e * (f - A)) / (e * (k - f) - C * (q - h));
            m.push(f + (k - f) * e);
            m.push(h + (q - h) * e);
          } else {
            C && (e = F - B, C = D - A, e = (C * (h - B) - e * (f - A)) / (e * (k - f) - C * (q - h)), m.push(f + (k - f) * e), m.push(h + (q - h) * e), m.push(D), m.push(F));
          }
          e = !0;
        }
        if (u == m.length) {
          return b.length = 0, !0;
        }
        m.push(m[0]);
        m.push(m[1]);
        if (a == c) {
          break;
        }
        f = m;
        m = r;
        m.length = 0;
        r = f;
      }
      if (b != m) {
        for (a = b.length = 0, n = m.length - 2; a < n; a++) {
          b[a] = m[a];
        }
      } else {
        b.length -= 2;
      }
      return e;
    };
    c.makeClockwise = function(a) {
      for (var b = a.length, c = a[b - 2] * a[1] - a[0] * a[b - 1], h, k, q, n, m = 0, d = b - 3; m < d; m += 2) {
        h = a[m], k = a[m + 1], q = a[m + 2], n = a[m + 3], c += h * n - q * k;
      }
      if (!(0 > c)) {
        for (m = 0, c = b - 2, d = b >> 1; m < d; m += 2) {
          b = a[m], h = a[m + 1], k = c - m, a[m] = a[k], a[m + 1] = a[k + 1], a[k] = b, a[k + 1] = h;
        }
      }
    };
    return c;
  }();
  a.SkeletonClipping = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a() {
      this.bones = [];
      this.slots = [];
      this.skins = [];
      this.events = [];
      this.animations = [];
      this.ikConstraints = [];
      this.transformConstraints = [];
      this.pathConstraints = [];
      this.fps = 0;
    }
    a.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    a.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    a.prototype.findSkin = function(a) {
      if (null == a) {
        throw Error("skinName cannot be null.");
      }
      for (var b = this.skins, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findEvent = function(a) {
      if (null == a) {
        throw Error("eventDataName cannot be null.");
      }
      for (var b = this.events, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findAnimation = function(a) {
      if (null == a) {
        throw Error("animationName cannot be null.");
      }
      for (var b = this.animations, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraintIndex = function(a) {
      if (null == a) {
        throw Error("pathConstraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    return a;
  }();
  a.SkeletonData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function b(a) {
      this.scale = 1;
      this.linkedMeshes = [];
      this.attachmentLoader = a;
    }
    b.prototype.readSkeletonData = function(c) {
      var e = this.scale, h = new a.SkeletonData;
      c = "string" === typeof c ? JSON.parse(c) : c;
      var k = c.skeleton;
      null != k && (h.hash = k.hash, h.version = k.spine, h.width = k.width, h.height = k.height, h.fps = k.fps, h.imagesPath = k.images);
      if (c.bones) {
        for (k = 0; k < c.bones.length; k++) {
          var q = c.bones[k], n = null, m = this.getValue(q, "parent", null);
          if (null != m && (n = h.findBone(m), null == n)) {
            throw Error("Parent bone not found: " + m);
          }
          n = new a.BoneData(h.bones.length, q.name, n);
          n.length = this.getValue(q, "length", 0) * e;
          n.x = this.getValue(q, "x", 0) * e;
          n.y = this.getValue(q, "y", 0) * e;
          n.rotation = this.getValue(q, "rotation", 0);
          n.scaleX = this.getValue(q, "scaleX", 1);
          n.scaleY = this.getValue(q, "scaleY", 1);
          n.shearX = this.getValue(q, "shearX", 0);
          n.shearY = this.getValue(q, "shearY", 0);
          n.transformMode = b.transformModeFromString(this.getValue(q, "transform", "normal"));
          h.bones.push(n);
        }
      }
      if (c.slots) {
        for (k = 0; k < c.slots.length; k++) {
          q = c.slots[k];
          var d = q.name;
          m = q.bone;
          n = h.findBone(m);
          if (null == n) {
            throw Error("Slot bone not found: " + m);
          }
          n = new a.SlotData(h.slots.length, d, n);
          m = this.getValue(q, "color", null);
          null != m && n.color.setFromString(m);
          m = this.getValue(q, "dark", null);
          null != m && (n.darkColor = new a.Color(1, 1, 1, 1), n.darkColor.setFromString(m));
          n.attachmentName = this.getValue(q, "attachment", null);
          n.blendMode = b.blendModeFromString(this.getValue(q, "blend", "normal"));
          h.slots.push(n);
        }
      }
      if (c.ik) {
        for (k = 0; k < c.ik.length; k++) {
          q = c.ik[k];
          n = new a.IkConstraintData(q.name);
          n.order = this.getValue(q, "order", 0);
          for (var l = 0; l < q.bones.length; l++) {
            m = q.bones[l];
            var v = h.findBone(m);
            if (null == v) {
              throw Error("IK bone not found: " + m);
            }
            n.bones.push(v);
          }
          m = q.target;
          n.target = h.findBone(m);
          if (null == n.target) {
            throw Error("IK target bone not found: " + m);
          }
          n.bendDirection = this.getValue(q, "bendPositive", !0) ? 1 : -1;
          n.mix = this.getValue(q, "mix", 1);
          h.ikConstraints.push(n);
        }
      }
      if (c.transform) {
        for (k = 0; k < c.transform.length; k++) {
          q = c.transform[k];
          n = new a.TransformConstraintData(q.name);
          n.order = this.getValue(q, "order", 0);
          for (l = 0; l < q.bones.length; l++) {
            m = q.bones[l];
            v = h.findBone(m);
            if (null == v) {
              throw Error("Transform constraint bone not found: " + m);
            }
            n.bones.push(v);
          }
          m = q.target;
          n.target = h.findBone(m);
          if (null == n.target) {
            throw Error("Transform constraint target bone not found: " + m);
          }
          n.local = this.getValue(q, "local", !1);
          n.relative = this.getValue(q, "relative", !1);
          n.offsetRotation = this.getValue(q, "rotation", 0);
          n.offsetX = this.getValue(q, "x", 0) * e;
          n.offsetY = this.getValue(q, "y", 0) * e;
          n.offsetScaleX = this.getValue(q, "scaleX", 0);
          n.offsetScaleY = this.getValue(q, "scaleY", 0);
          n.offsetShearY = this.getValue(q, "shearY", 0);
          n.rotateMix = this.getValue(q, "rotateMix", 1);
          n.translateMix = this.getValue(q, "translateMix", 1);
          n.scaleMix = this.getValue(q, "scaleMix", 1);
          n.shearMix = this.getValue(q, "shearMix", 1);
          h.transformConstraints.push(n);
        }
      }
      if (c.path) {
        for (k = 0; k < c.path.length; k++) {
          q = c.path[k];
          n = new a.PathConstraintData(q.name);
          n.order = this.getValue(q, "order", 0);
          for (l = 0; l < q.bones.length; l++) {
            m = q.bones[l];
            v = h.findBone(m);
            if (null == v) {
              throw Error("Transform constraint bone not found: " + m);
            }
            n.bones.push(v);
          }
          m = q.target;
          n.target = h.findSlot(m);
          if (null == n.target) {
            throw Error("Path target slot not found: " + m);
          }
          n.positionMode = b.positionModeFromString(this.getValue(q, "positionMode", "percent"));
          n.spacingMode = b.spacingModeFromString(this.getValue(q, "spacingMode", "length"));
          n.rotateMode = b.rotateModeFromString(this.getValue(q, "rotateMode", "tangent"));
          n.offsetRotation = this.getValue(q, "rotation", 0);
          n.position = this.getValue(q, "position", 0);
          n.positionMode == a.PositionMode.Fixed && (n.position *= e);
          n.spacing = this.getValue(q, "spacing", 0);
          if (n.spacingMode == a.SpacingMode.Length || n.spacingMode == a.SpacingMode.Fixed) {
            n.spacing *= e;
          }
          n.rotateMix = this.getValue(q, "rotateMix", 1);
          n.translateMix = this.getValue(q, "translateMix", 1);
          h.pathConstraints.push(n);
        }
      }
      if (c.skins) {
        for (var w in c.skins) {
          k = c.skins[w];
          e = new a.Skin(w);
          for (d in k) {
            n = h.findSlotIndex(d);
            if (-1 == n) {
              throw Error("Slot not found: " + d);
            }
            q = k[d];
            for (var x in q) {
              m = this.readAttachment(q[x], e, n, x, h), null != m && e.addAttachment(n, x, m);
            }
          }
          h.skins.push(e);
          "default" == e.name && (h.defaultSkin = e);
        }
      }
      k = 0;
      for (d = this.linkedMeshes.length; k < d; k++) {
        w = this.linkedMeshes[k];
        e = null == w.skin ? h.defaultSkin : h.findSkin(w.skin);
        if (null == e) {
          throw Error("Skin not found: " + w.skin);
        }
        x = e.getAttachment(w.slotIndex, w.parent);
        if (null == x) {
          throw Error("Parent mesh not found: " + w.parent);
        }
        w.mesh.setParentMesh(x);
        w.mesh.updateUVs();
      }
      this.linkedMeshes.length = 0;
      if (c.events) {
        for (var z in c.events) {
          d = c.events[z], n = new a.EventData(z), n.intValue = this.getValue(d, "int", 0), n.floatValue = this.getValue(d, "float", 0), n.stringValue = this.getValue(d, "string", ""), h.events.push(n);
        }
      }
      if (c.animations) {
        for (var p in c.animations) {
          this.readAnimation(c.animations[p], p, h);
        }
      }
      return h;
    };
    b.prototype.readAttachment = function(b, c, h, r, q) {
      var e = this.scale;
      r = this.getValue(b, "name", r);
      switch(this.getValue(b, "type", "region")) {
        case "region":
          q = this.getValue(b, "path", r);
          h = this.attachmentLoader.newRegionAttachment(c, r, q);
          if (null == h) {
            break;
          }
          h.path = q;
          h.x = this.getValue(b, "x", 0) * e;
          h.y = this.getValue(b, "y", 0) * e;
          h.scaleX = this.getValue(b, "scaleX", 1);
          h.scaleY = this.getValue(b, "scaleY", 1);
          h.rotation = this.getValue(b, "rotation", 0);
          h.width = b.width * e;
          h.height = b.height * e;
          e = this.getValue(b, "color", null);
          null != e && h.color.setFromString(e);
          h.updateOffset();
          return h;
        case "boundingbox":
          q = this.attachmentLoader.newBoundingBoxAttachment(c, r);
          if (null == q) {
            break;
          }
          this.readVertices(b, q, b.vertexCount << 1);
          e = this.getValue(b, "color", null);
          null != e && q.color.setFromString(e);
          return q;
        case "mesh":
        case "linkedmesh":
          q = this.getValue(b, "path", r);
          c = this.attachmentLoader.newMeshAttachment(c, r, q);
          if (null == c) {
            break;
          }
          c.path = q;
          e = this.getValue(b, "color", null);
          null != e && c.color.setFromString(e);
          e = this.getValue(b, "parent", null);
          if (null != e) {
            return c.inheritDeform = this.getValue(b, "deform", !0), this.linkedMeshes.push(new k(c, this.getValue(b, "skin", null), h, e)), c;
          }
          e = b.uvs;
          this.readVertices(b, c, e.length);
          c.triangles = b.triangles;
          c.regionUVs = e;
          c.updateUVs();
          c.hullLength = 2 * this.getValue(b, "hull", 0);
          return c;
        case "path":
          q = this.attachmentLoader.newPathAttachment(c, r);
          if (null == q) {
            break;
          }
          q.closed = this.getValue(b, "closed", !1);
          q.constantSpeed = this.getValue(b, "constantSpeed", !0);
          c = b.vertexCount;
          this.readVertices(b, q, c << 1);
          h = a.Utils.newArray(c / 3, 0);
          for (c = 0; c < b.lengths.length; c++) {
            h[c] = b.lengths[c] * e;
          }
          q.lengths = h;
          e = this.getValue(b, "color", null);
          null != e && q.color.setFromString(e);
          return q;
        case "point":
          q = this.attachmentLoader.newPointAttachment(c, r);
          if (null == q) {
            break;
          }
          q.x = this.getValue(b, "x", 0) * e;
          q.y = this.getValue(b, "y", 0) * e;
          q.rotation = this.getValue(b, "rotation", 0);
          e = this.getValue(b, "color", null);
          null != e && q.color.setFromString(e);
          return q;
        case "clipping":
          if (h = this.attachmentLoader.newClippingAttachment(c, r), null != h) {
            e = this.getValue(b, "end", null);
            if (null != e) {
              q = q.findSlot(e);
              if (null == q) {
                throw Error("Clipping end slot not found: " + e);
              }
              h.endSlot = q;
            }
            c = b.vertexCount;
            this.readVertices(b, h, c << 1);
            e = this.getValue(b, "color", null);
            null != e && h.color.setFromString(e);
            return h;
          }
      }
      return null;
    };
    b.prototype.readVertices = function(b, c, h) {
      var e = this.scale;
      c.worldVerticesLength = h;
      b = b.vertices;
      if (h == b.length) {
        var f = a.Utils.toFloatArray(b);
        if (1 != e) {
          h = 0;
          for (var k = b.length; h < k; h++) {
            f[h] *= e;
          }
        }
        c.vertices = f;
      } else {
        f = [];
        var m = [];
        h = 0;
        for (k = b.length; h < k;) {
          var d = b[h++];
          m.push(d);
          for (d = h + 4 * d; h < d; h += 4) {
            m.push(b[h]), f.push(b[h + 1] * e), f.push(b[h + 2] * e), f.push(b[h + 3]);
          }
        }
        c.bones = m;
        c.vertices = a.Utils.toFloatArray(f);
      }
    };
    b.prototype.readAnimation = function(b, c, h) {
      var e = this.scale, f = [], k = 0;
      if (b.slots) {
        for (var m in b.slots) {
          var d = b.slots[m], l = h.findSlotIndex(m);
          if (-1 == l) {
            throw Error("Slot not found: " + m);
          }
          for (var v in d) {
            var w = d[v];
            if ("attachment" == v) {
              var x = new a.AttachmentTimeline(w.length);
              x.slotIndex = l;
              for (var z = 0, p = 0; p < w.length; p++) {
                var u = w[p];
                x.setFrame(z++, u.time, u.name);
              }
              f.push(x);
              k = Math.max(k, x.frames[x.getFrameCount() - 1]);
            } else {
              if ("color" == v) {
                x = new a.ColorTimeline(w.length);
                x.slotIndex = l;
                for (p = z = 0; p < w.length; p++) {
                  u = w[p];
                  var y = new a.Color;
                  y.setFromString(u.color);
                  x.setFrame(z, u.time, y.r, y.g, y.b, y.a);
                  this.readCurve(u, x, z);
                  z++;
                }
                f.push(x);
                k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.ColorTimeline.ENTRIES]);
              } else {
                if ("twoColor" == v) {
                  x = new a.TwoColorTimeline(w.length);
                  x.slotIndex = l;
                  for (p = z = 0; p < w.length; p++) {
                    u = w[p];
                    y = new a.Color;
                    var A = new a.Color;
                    y.setFromString(u.light);
                    A.setFromString(u.dark);
                    x.setFrame(z, u.time, y.r, y.g, y.b, y.a, A.r, A.g, A.b);
                    this.readCurve(u, x, z);
                    z++;
                  }
                  f.push(x);
                  k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.TwoColorTimeline.ENTRIES]);
                } else {
                  throw Error("Invalid timeline type for a slot: " + v + " (" + m + ")");
                }
              }
            }
          }
        }
      }
      if (b.bones) {
        for (var B in b.bones) {
          d = b.bones[B];
          y = h.findBoneIndex(B);
          if (-1 == y) {
            throw Error("Bone not found: " + B);
          }
          for (v in d) {
            if (w = d[v], "rotate" === v) {
              x = new a.RotateTimeline(w.length);
              x.boneIndex = y;
              for (p = z = 0; p < w.length; p++) {
                u = w[p], x.setFrame(z, u.time, u.angle), this.readCurve(u, x, z), z++;
              }
              f.push(x);
              k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.RotateTimeline.ENTRIES]);
            } else {
              if ("translate" === v || "scale" === v || "shear" === v) {
                l = 1;
                "scale" === v ? x = new a.ScaleTimeline(w.length) : "shear" === v ? x = new a.ShearTimeline(w.length) : (x = new a.TranslateTimeline(w.length), l = e);
                x.boneIndex = y;
                for (p = z = 0; p < w.length; p++) {
                  u = w[p];
                  A = this.getValue(u, "x", 0);
                  var D = this.getValue(u, "y", 0);
                  x.setFrame(z, u.time, A * l, D * l);
                  this.readCurve(u, x, z);
                  z++;
                }
                f.push(x);
                k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.TranslateTimeline.ENTRIES]);
              } else {
                throw Error("Invalid timeline type for a bone: " + v + " (" + B + ")");
              }
            }
          }
        }
      }
      if (b.ik) {
        for (var F in b.ik) {
          d = b.ik[F];
          z = h.findIkConstraint(F);
          x = new a.IkConstraintTimeline(d.length);
          x.ikConstraintIndex = h.ikConstraints.indexOf(z);
          for (p = z = 0; p < d.length; p++) {
            u = d[p], x.setFrame(z, u.time, this.getValue(u, "mix", 1), this.getValue(u, "bendPositive", !0) ? 1 : -1), this.readCurve(u, x, z), z++;
          }
          f.push(x);
          k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.IkConstraintTimeline.ENTRIES]);
        }
      }
      if (b.transform) {
        for (F in b.transform) {
          d = b.transform[F];
          z = h.findTransformConstraint(F);
          x = new a.TransformConstraintTimeline(d.length);
          x.transformConstraintIndex = h.transformConstraints.indexOf(z);
          for (p = z = 0; p < d.length; p++) {
            u = d[p], x.setFrame(z, u.time, this.getValue(u, "rotateMix", 1), this.getValue(u, "translateMix", 1), this.getValue(u, "scaleMix", 1), this.getValue(u, "shearMix", 1)), this.readCurve(u, x, z), z++;
          }
          f.push(x);
          k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.TransformConstraintTimeline.ENTRIES]);
        }
      }
      if (b.paths) {
        for (F in b.paths) {
          d = b.paths[F];
          B = h.findPathConstraintIndex(F);
          if (-1 == B) {
            throw Error("Path constraint not found: " + F);
          }
          y = h.pathConstraints[B];
          for (v in d) {
            if (w = d[v], "position" === v || "spacing" === v) {
              l = 1;
              if ("spacing" === v) {
                if (x = new a.PathConstraintSpacingTimeline(w.length), y.spacingMode == a.SpacingMode.Length || y.spacingMode == a.SpacingMode.Fixed) {
                  l = e;
                }
              } else {
                x = new a.PathConstraintPositionTimeline(w.length), y.positionMode == a.PositionMode.Fixed && (l = e);
              }
              x.pathConstraintIndex = B;
              for (p = z = 0; p < w.length; p++) {
                u = w[p], x.setFrame(z, u.time, this.getValue(u, v, 0) * l), this.readCurve(u, x, z), z++;
              }
              f.push(x);
              k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.PathConstraintPositionTimeline.ENTRIES]);
            } else {
              if ("mix" === v) {
                x = new a.PathConstraintMixTimeline(w.length);
                x.pathConstraintIndex = B;
                for (p = z = 0; p < w.length; p++) {
                  u = w[p], x.setFrame(z, u.time, this.getValue(u, "rotateMix", 1), this.getValue(u, "translateMix", 1)), this.readCurve(u, x, z), z++;
                }
                f.push(x);
                k = Math.max(k, x.frames[(x.getFrameCount() - 1) * a.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
        }
      }
      if (b.deform) {
        for (var C in b.deform) {
          B = b.deform[C];
          y = h.findSkin(C);
          if (null == y) {
            throw Error("Skin not found: " + C);
          }
          for (m in B) {
            d = B[m];
            l = h.findSlotIndex(m);
            if (-1 == l) {
              throw Error("Slot not found: " + d.name);
            }
            for (v in d) {
              w = d[v];
              z = y.getAttachment(l, v);
              if (null == z) {
                throw Error("Deform attachment not found: " + w.name);
              }
              A = null != z.bones;
              D = z.vertices;
              var E = A ? D.length / 3 * 2 : D.length;
              x = new a.DeformTimeline(w.length);
              x.slotIndex = l;
              x.attachment = z;
              for (F = z = 0; F < w.length; F++) {
                u = w[F];
                var H = this.getValue(u, "vertices", null);
                if (null == H) {
                  var Q = A ? a.Utils.newFloatArray(E) : D;
                } else {
                  Q = a.Utils.newFloatArray(E);
                  p = this.getValue(u, "offset", 0);
                  a.Utils.arrayCopy(H, 0, Q, p, H.length);
                  if (1 != e) {
                    for (H = p + H.length; p < H; p++) {
                      Q[p] *= e;
                    }
                  }
                  if (!A) {
                    for (p = 0; p < E; p++) {
                      Q[p] += D[p];
                    }
                  }
                }
                x.setFrame(z, u.time, Q);
                this.readCurve(u, x, z);
                z++;
              }
              f.push(x);
              k = Math.max(k, x.frames[x.getFrameCount() - 1]);
            }
          }
        }
      }
      e = b.drawOrder;
      null == e && (e = b.draworder);
      if (null != e) {
        x = new a.DrawOrderTimeline(e.length);
        m = h.slots.length;
        for (F = z = 0; F < e.length; F++) {
          v = e[F];
          C = null;
          w = this.getValue(v, "offsets", null);
          if (null != w) {
            C = a.Utils.newArray(m, -1);
            u = a.Utils.newArray(m - w.length, 0);
            for (p = B = d = 0; p < w.length; p++) {
              y = w[p];
              l = h.findSlotIndex(y.slot);
              if (-1 == l) {
                throw Error("Slot not found: " + y.slot);
              }
              for (; d != l;) {
                u[B++] = d++;
              }
              C[d + y.offset] = d++;
            }
            for (; d < m;) {
              u[B++] = d++;
            }
            for (p = m - 1; 0 <= p; p--) {
              -1 == C[p] && (C[p] = u[--B]);
            }
          }
          x.setFrame(z++, v.time, C);
        }
        f.push(x);
        k = Math.max(k, x.frames[x.getFrameCount() - 1]);
      }
      if (b.events) {
        x = new a.EventTimeline(b.events.length);
        for (p = z = 0; p < b.events.length; p++) {
          e = b.events[p];
          m = h.findEvent(e.name);
          if (null == m) {
            throw Error("Event not found: " + e.name);
          }
          l = new a.Event(a.Utils.toSinglePrecision(e.time), m);
          l.intValue = this.getValue(e, "int", m.intValue);
          l.floatValue = this.getValue(e, "float", m.floatValue);
          l.stringValue = this.getValue(e, "string", m.stringValue);
          x.setFrame(z++, l);
        }
        f.push(x);
        k = Math.max(k, x.frames[x.getFrameCount() - 1]);
      }
      if (isNaN(k)) {
        throw Error("Error while parsing animation, duration is NaN");
      }
      h.animations.push(new a.Animation(c, f, k));
    };
    b.prototype.readCurve = function(a, b, c) {
      a.curve && ("stepped" === a.curve ? b.setStepped(c) : "[object Array]" === Object.prototype.toString.call(a.curve) && (a = a.curve, b.setCurve(c, a[0], a[1], a[2], a[3])));
    };
    b.prototype.getValue = function(a, b, c) {
      return void 0 !== a[b] ? a[b] : c;
    };
    b.blendModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.BlendMode.Normal;
      }
      if ("additive" == b) {
        return a.BlendMode.Additive;
      }
      if ("multiply" == b) {
        return a.BlendMode.Multiply;
      }
      if ("screen" == b) {
        return a.BlendMode.Screen;
      }
      throw Error("Unknown blend mode: " + b);
    };
    b.positionModeFromString = function(b) {
      b = b.toLowerCase();
      if ("fixed" == b) {
        return a.PositionMode.Fixed;
      }
      if ("percent" == b) {
        return a.PositionMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.spacingModeFromString = function(b) {
      b = b.toLowerCase();
      if ("length" == b) {
        return a.SpacingMode.Length;
      }
      if ("fixed" == b) {
        return a.SpacingMode.Fixed;
      }
      if ("percent" == b) {
        return a.SpacingMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.rotateModeFromString = function(b) {
      b = b.toLowerCase();
      if ("tangent" == b) {
        return a.RotateMode.Tangent;
      }
      if ("chain" == b) {
        return a.RotateMode.Chain;
      }
      if ("chainscale" == b) {
        return a.RotateMode.ChainScale;
      }
      throw Error("Unknown rotate mode: " + b);
    };
    b.transformModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.TransformMode.Normal;
      }
      if ("onlytranslation" == b) {
        return a.TransformMode.OnlyTranslation;
      }
      if ("norotationorreflection" == b) {
        return a.TransformMode.NoRotationOrReflection;
      }
      if ("noscale" == b) {
        return a.TransformMode.NoScale;
      }
      if ("noscaleorreflection" == b) {
        return a.TransformMode.NoScaleOrReflection;
      }
      throw Error("Unknown transform mode: " + b);
    };
    return b;
  }();
  a.SkeletonJson = c;
  var k = function() {
    return function(a, c, f, h) {
      this.mesh = a;
      this.skin = c;
      this.slotIndex = f;
      this.parent = h;
    };
  }();
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this.attachments = [];
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    }
    a.prototype.addAttachment = function(a, c, f) {
      if (null == f) {
        throw Error("attachment cannot be null.");
      }
      var b = this.attachments;
      a >= b.length && (b.length = a + 1);
      b[a] || (b[a] = {});
      b[a][c] = f;
    };
    a.prototype.getAttachment = function(a, c) {
      return (a = this.attachments[a]) ? a[c] : null;
    };
    a.prototype.attachAll = function(a, c) {
      for (var b = 0, e = 0; e < a.slots.length; e++) {
        var k = a.slots[e], q = k.getAttachment();
        if (q && b < c.attachments.length) {
          var n = c.attachments[b], m;
          for (m in n) {
            if (q == n[m]) {
              q = this.getAttachment(b, m);
              null != q && k.setAttachment(q);
              break;
            }
          }
        }
        b++;
      }
    };
    return a;
  }();
  a.Skin = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b, c) {
      this.attachmentVertices = [];
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("bone cannot be null.");
      }
      this.data = b;
      this.bone = c;
      this.color = new a.Color;
      this.darkColor = null == b.darkColor ? null : new a.Color;
      this.setToSetupPose();
    }
    c.prototype.getAttachment = function() {
      return this.attachment;
    };
    c.prototype.setAttachment = function(a) {
      this.attachment != a && (this.attachment = a, this.attachmentTime = this.bone.skeleton.time, this.attachmentVertices.length = 0);
    };
    c.prototype.setAttachmentTime = function(a) {
      this.attachmentTime = this.bone.skeleton.time - a;
    };
    c.prototype.getAttachmentTime = function() {
      return this.bone.skeleton.time - this.attachmentTime;
    };
    c.prototype.setToSetupPose = function() {
      this.color.setFromColor(this.data.color);
      null != this.darkColor && this.darkColor.setFromColor(this.data.darkColor);
      null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName)));
    };
    return c;
  }();
  a.Slot = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(c, b, e) {
      this.color = new a.Color(1, 1, 1, 1);
      if (0 > c) {
        throw Error("index must be >= 0.");
      }
      if (null == b) {
        throw Error("name cannot be null.");
      }
      if (null == e) {
        throw Error("boneData cannot be null.");
      }
      this.index = c;
      this.name = b;
      this.boneData = e;
    };
  }();
  a.SlotData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this._image = a;
    }
    a.prototype.getImage = function() {
      return this._image;
    };
    a.filterFromString = function(a) {
      switch(a.toLowerCase()) {
        case "nearest":
          return k.Nearest;
        case "linear":
          return k.Linear;
        case "mipmap":
          return k.MipMap;
        case "mipmapnearestnearest":
          return k.MipMapNearestNearest;
        case "mipmaplinearnearest":
          return k.MipMapLinearNearest;
        case "mipmapnearestlinear":
          return k.MipMapNearestLinear;
        case "mipmaplinearlinear":
          return k.MipMapLinearLinear;
        default:
          throw Error("Unknown texture filter " + a);
      }
    };
    a.wrapFromString = function(a) {
      switch(a.toLowerCase()) {
        case "mirroredtepeat":
          return b.MirroredRepeat;
        case "clamptoedge":
          return b.ClampToEdge;
        case "repeat":
          return b.Repeat;
        default:
          throw Error("Unknown texture wrap " + a);
      }
    };
    return a;
  }();
  a.Texture = c;
  (function(a) {
    a[a.Nearest = 9728] = "Nearest";
    a[a.Linear = 9729] = "Linear";
    a[a.MipMap = 9987] = "MipMap";
    a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
    a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
    a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
    a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
  })(a.TextureFilter || (a.TextureFilter = {}));
  var k = a.TextureFilter;
  (function(a) {
    a[a.MirroredRepeat = 33648] = "MirroredRepeat";
    a[a.ClampToEdge = 33071] = "ClampToEdge";
    a[a.Repeat = 10497] = "Repeat";
  })(a.TextureWrap || (a.TextureWrap = {}));
  var b = a.TextureWrap;
  c = function() {
    return function() {
      this.height = this.width = this.v2 = this.u2 = this.v = this.u = 0;
      this.rotate = !1;
      this.originalHeight = this.originalWidth = this.offsetY = this.offsetX = 0;
    };
  }();
  a.TextureRegion = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, b) {
      this.pages = [];
      this.regions = [];
      this.load(a, b);
    }
    c.prototype.load = function(c, f) {
      if (null == f) {
        throw Error("textureLoader cannot be null.");
      }
      c = new k(c);
      for (var h = Array(4), n = null;;) {
        var m = c.readLine();
        if (null == m) {
          break;
        }
        m = m.trim();
        if (0 == m.length) {
          n = null;
        } else {
          if (n) {
            var d = new e;
            d.name = m;
            d.page = n;
            d.rotate = "true" == c.readValue();
            c.readTuple(h);
            m = parseInt(h[0]);
            var l = parseInt(h[1]);
            c.readTuple(h);
            var r = parseInt(h[0]), w = parseInt(h[1]);
            d.u = m / n.width;
            d.v = l / n.height;
            d.rotate ? (d.u2 = (m + w) / n.width, d.v2 = (l + r) / n.height) : (d.u2 = (m + r) / n.width, d.v2 = (l + w) / n.height);
            d.x = m;
            d.y = l;
            d.width = Math.abs(r);
            d.height = Math.abs(w);
            4 == c.readTuple(h) && 4 == c.readTuple(h) && c.readTuple(h);
            d.originalWidth = parseInt(h[0]);
            d.originalHeight = parseInt(h[1]);
            c.readTuple(h);
            d.offsetX = parseInt(h[0]);
            d.offsetY = parseInt(h[1]);
            d.index = parseInt(c.readValue());
            d.texture = n.texture;
            this.regions.push(d);
          } else {
            n = new b, n.name = m, 2 == c.readTuple(h) && (n.width = parseInt(h[0]), n.height = parseInt(h[1]), c.readTuple(h)), c.readTuple(h), n.minFilter = a.Texture.filterFromString(h[0]), n.magFilter = a.Texture.filterFromString(h[1]), d = c.readValue(), n.uWrap = a.TextureWrap.ClampToEdge, n.vWrap = a.TextureWrap.ClampToEdge, "x" == d ? n.uWrap = a.TextureWrap.Repeat : "y" == d ? n.vWrap = a.TextureWrap.Repeat : "xy" == d && (n.uWrap = n.vWrap = a.TextureWrap.Repeat), n.texture = f(m), n.texture.setFilters(n.minFilter, 
            n.magFilter), n.texture.setWraps(n.uWrap, n.vWrap), n.width = n.texture.getImage().width, n.height = n.texture.getImage().height, this.pages.push(n);
          }
        }
      }
    };
    c.prototype.findRegion = function(a) {
      for (var b = 0; b < this.regions.length; b++) {
        if (this.regions[b].name == a) {
          return this.regions[b];
        }
      }
      return null;
    };
    c.prototype.dispose = function() {
      for (var a = 0; a < this.pages.length; a++) {
        this.pages[a].texture.dispose();
      }
    };
    return c;
  }();
  a.TextureAtlas = c;
  var k = function() {
    function a(a) {
      this.index = 0;
      this.lines = a.split(/\r\n|\r|\n/);
    }
    a.prototype.readLine = function() {
      return this.index >= this.lines.length ? null : this.lines[this.index++];
    };
    a.prototype.readValue = function() {
      var a = this.readLine(), b = a.indexOf(":");
      if (-1 == b) {
        throw Error("Invalid line: " + a);
      }
      return a.substring(b + 1).trim();
    };
    a.prototype.readTuple = function(a) {
      var b = this.readLine(), c = b.indexOf(":");
      if (-1 == c) {
        throw Error("Invalid line: " + b);
      }
      var e = 0;
      for (c += 1; 3 > e; e++) {
        var f = b.indexOf(",", c);
        if (-1 == f) {
          break;
        }
        a[e] = b.substr(c, f - c).trim();
        c = f + 1;
      }
      a[e] = b.substring(c).trim();
      return e + 1;
    };
    return a;
  }(), b = function() {
    return function() {
    };
  }();
  a.TextureAtlasPage = b;
  var e = function(a) {
    function b() {
      a.apply(this, arguments);
    }
    __extends(b, a);
    return b;
  }(a.TextureRegion);
  a.TextureAtlasRegion = e;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b, c) {
      this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.temp = new a.Vector2;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = b;
      this.rotateMix = b.rotateMix;
      this.translateMix = b.translateMix;
      this.scaleMix = b.scaleMix;
      this.shearMix = b.shearMix;
      this.bones = [];
      for (var e = 0; e < b.bones.length; e++) {
        this.bones.push(c.findBone(b.bones[e].name));
      }
      this.target = c.findBone(b.target.name);
    }
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      this.data.local ? this.data.relative ? this.applyRelativeLocal() : this.applyAbsoluteLocal() : this.data.relative ? this.applyRelativeWorld() : this.applyAbsoluteWorld();
    };
    c.prototype.applyAbsoluteWorld = function() {
      var b = this.rotateMix, c = this.translateMix, f = this.scaleMix, h = this.shearMix, k = this.target, q = k.a, n = k.b, m = k.c, d = k.d, l = 0 < q * d - n * m ? a.MathUtils.degRad : -a.MathUtils.degRad, v = this.data.offsetRotation * l;
      l *= this.data.offsetShearY;
      for (var w = this.bones, x = 0, z = w.length; x < z; x++) {
        var p = w[x], u = !1;
        if (0 != b) {
          var y = p.a;
          u = p.b;
          var A = p.c, B = p.d, D = Math.atan2(m, q) - Math.atan2(A, y) + v;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var F = Math.cos(D);
          D = Math.sin(D);
          p.a = F * y - D * A;
          p.b = F * u - D * B;
          p.c = D * y + F * A;
          p.d = D * u + F * B;
          u = !0;
        }
        0 != c && (u = this.temp, k.localToWorld(u.set(this.data.offsetX, this.data.offsetY)), p.worldX += (u.x - p.worldX) * c, p.worldY += (u.y - p.worldY) * c, u = !0);
        0 < f && (u = Math.sqrt(p.a * p.a + p.c * p.c), B = Math.sqrt(q * q + m * m), 1E-5 < u && (u = (u + (B - u + this.data.offsetScaleX) * f) / u), p.a *= u, p.c *= u, u = Math.sqrt(p.b * p.b + p.d * p.d), B = Math.sqrt(n * n + d * d), 1E-5 < u && (u = (u + (B - u + this.data.offsetScaleY) * f) / u), p.b *= u, p.d *= u, u = !0);
        0 < h && (u = p.b, B = p.d, y = Math.atan2(B, u), D = Math.atan2(d, n) - Math.atan2(m, q) - (y - Math.atan2(p.c, p.a)), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), D = y + (D + l) * h, u = Math.sqrt(u * u + B * B), p.b = Math.cos(D) * u, p.d = Math.sin(D) * u, u = !0);
        u && (p.appliedValid = !1);
      }
    };
    c.prototype.applyRelativeWorld = function() {
      var b = this.rotateMix, c = this.translateMix, f = this.scaleMix, h = this.shearMix, k = this.target, q = k.a, n = k.b, m = k.c, d = k.d, l = 0 < q * d - n * m ? a.MathUtils.degRad : -a.MathUtils.degRad, v = this.data.offsetRotation * l;
      l *= this.data.offsetShearY;
      for (var w = this.bones, x = 0, z = w.length; x < z; x++) {
        var p = w[x], u = !1;
        if (0 != b) {
          u = p.a;
          var y = p.b, A = p.c, B = p.d, D = Math.atan2(m, q) + v;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var F = Math.cos(D);
          D = Math.sin(D);
          p.a = F * u - D * A;
          p.b = F * y - D * B;
          p.c = D * u + F * A;
          p.d = D * y + F * B;
          u = !0;
        }
        0 != c && (u = this.temp, k.localToWorld(u.set(this.data.offsetX, this.data.offsetY)), p.worldX += u.x * c, p.worldY += u.y * c, u = !0);
        0 < f && (u = (Math.sqrt(q * q + m * m) - 1 + this.data.offsetScaleX) * f + 1, p.a *= u, p.c *= u, u = (Math.sqrt(n * n + d * d) - 1 + this.data.offsetScaleY) * f + 1, p.b *= u, p.d *= u, u = !0);
        0 < h && (D = Math.atan2(d, n) - Math.atan2(m, q), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), y = p.b, B = p.d, D = Math.atan2(B, y) + (D - a.MathUtils.PI / 2 + l) * h, u = Math.sqrt(y * y + B * B), p.b = Math.cos(D) * u, p.d = Math.sin(D) * u, u = !0);
        u && (p.appliedValid = !1);
      }
    };
    c.prototype.applyAbsoluteLocal = function() {
      var a = this.rotateMix, c = this.translateMix, f = this.scaleMix, h = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, n = 0, m = q.length; n < m; n++) {
        var d = q[n];
        d.appliedValid || d.updateAppliedTransform();
        var l = d.arotation;
        if (0 != a) {
          var v = k.arotation - l + this.data.offsetRotation;
          v -= 360 * (16384 - (16384.499999999996 - v / 360 | 0));
          l += v * a;
        }
        var w = d.ax, x = d.ay;
        0 != c && (w += (k.ax - w + this.data.offsetX) * c, x += (k.ay - x + this.data.offsetY) * c);
        var z = d.ascaleX, p = d.ascaleY;
        0 < f && (1E-5 < z && (z = (z + (k.ascaleX - z + this.data.offsetScaleX) * f) / z), 1E-5 < p && (p = (p + (k.ascaleY - p + this.data.offsetScaleY) * f) / p));
        var u = d.ashearY;
        0 < h && (v = k.ashearY - u + this.data.offsetShearY, v -= 360 * (16384 - (16384.499999999996 - v / 360 | 0)), d.shearY += v * h);
        d.updateWorldTransformWith(w, x, l, z, p, d.ashearX, u);
      }
    };
    c.prototype.applyRelativeLocal = function() {
      var a = this.rotateMix, c = this.translateMix, f = this.scaleMix, h = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, n = 0, m = q.length; n < m; n++) {
        var d = q[n];
        d.appliedValid || d.updateAppliedTransform();
        var l = d.arotation;
        0 != a && (l += (k.arotation + this.data.offsetRotation) * a);
        var v = d.ax, w = d.ay;
        0 != c && (v += (k.ax + this.data.offsetX) * c, w += (k.ay + this.data.offsetY) * c);
        var x = d.ascaleX, z = d.ascaleY;
        0 < f && (1E-5 < x && (x *= (k.ascaleX - 1 + this.data.offsetScaleX) * f + 1), 1E-5 < z && (z *= (k.ascaleY - 1 + this.data.offsetScaleY) * f + 1));
        var p = d.ashearY;
        0 < h && (p += (k.ashearY + this.data.offsetShearY) * h);
        d.updateWorldTransformWith(v, w, l, x, z, d.ashearX, p);
      }
    };
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    return c;
  }();
  a.TransformConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.offsetShearY = this.offsetScaleY = this.offsetScaleX = this.offsetY = this.offsetX = this.offsetRotation = this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.local = this.relative = !1;
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.TransformConstraintData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.convexPolygons = [];
      this.convexPolygonsIndices = [];
      this.indicesArray = [];
      this.isConcaveArray = [];
      this.triangles = [];
      this.polygonPool = new a.Pool(function() {
        return [];
      });
      this.polygonIndicesPool = new a.Pool(function() {
        return [];
      });
    }
    c.prototype.triangulate = function(a) {
      for (var b = a.length >> 1, f = this.indicesArray, h = f.length = 0; h < b; h++) {
        f[h] = h;
      }
      var k = this.isConcaveArray;
      h = k.length = 0;
      for (var q = b; h < q; ++h) {
        k[h] = c.isConcave(h, b, a, f);
      }
      q = this.triangles;
      for (q.length = 0; 3 < b;) {
        var n = b - 1;
        h = 0;
        for (var m = 1;;) {
          a: {
            if (!k[h]) {
              var d = f[n] << 1, l = f[h] << 1, v = f[m] << 1, w = a[d];
              d = a[d + 1];
              var x = a[l];
              l = a[l + 1];
              var z = a[v];
              v = a[v + 1];
              for (var p = (m + 1) % b; p != n; p = (p + 1) % b) {
                if (k[p]) {
                  var u = f[p] << 1, y = a[u];
                  u = a[u + 1];
                  if (c.positiveArea(z, v, w, d, y, u) && c.positiveArea(w, d, x, l, y, u) && c.positiveArea(x, l, z, v, y, u)) {
                    break a;
                  }
                }
              }
              break;
            }
          }
          if (0 == m) {
            do {
              if (!k[h]) {
                break;
              }
              h--;
            } while (0 < h);
            break;
          }
          n = h;
          h = m;
          m = (m + 1) % b;
        }
        q.push(f[(b + h - 1) % b]);
        q.push(f[h]);
        q.push(f[(h + 1) % b]);
        f.splice(h, 1);
        k.splice(h, 1);
        b--;
        n = (b + h - 1) % b;
        h = h == b ? 0 : h;
        k[n] = c.isConcave(n, b, a, f);
        k[h] = c.isConcave(h, b, a, f);
      }
      3 == b && (q.push(f[2]), q.push(f[0]), q.push(f[1]));
      return q;
    };
    c.prototype.decompose = function(a, e) {
      var b = this.convexPolygons;
      this.polygonPool.freeAll(b);
      b.length = 0;
      var h = this.convexPolygonsIndices;
      this.polygonIndicesPool.freeAll(h);
      h.length = 0;
      var k = this.polygonIndicesPool.obtain();
      k.length = 0;
      var q = this.polygonPool.obtain();
      q.length = 0;
      for (var n = -1, m = 0, d = 0, l = e.length; d < l; d += 3) {
        var v = e[d] << 1, w = e[d + 1] << 1, x = e[d + 2] << 1, z = a[v], p = a[v + 1], u = a[w], y = a[w + 1], A = a[x], B = a[x + 1], D = !1;
        if (n == v) {
          var F = q.length - 4;
          F = c.winding(q[F], q[F + 1], q[F + 2], q[F + 3], A, B);
          var C = c.winding(A, B, q[0], q[1], q[2], q[3]);
          F == m && C == m && (q.push(A), q.push(B), k.push(x), D = !0);
        }
        D || (0 < q.length ? (b.push(q), h.push(k)) : (this.polygonPool.free(q), this.polygonIndicesPool.free(k)), q = this.polygonPool.obtain(), q.length = 0, q.push(z), q.push(p), q.push(u), q.push(y), q.push(A), q.push(B), k = this.polygonIndicesPool.obtain(), k.length = 0, k.push(v), k.push(w), k.push(x), m = c.winding(z, p, u, y, A, B), n = v);
      }
      0 < q.length && (b.push(q), h.push(k));
      d = 0;
      for (l = b.length; d < l; d++) {
        if (k = h[d], 0 != k.length) {
          for (a = k[0], e = k[k.length - 1], q = b[d], F = q.length - 4, n = q[F], m = q[F + 1], v = q[F + 2], w = q[F + 3], x = q[0], z = q[1], p = q[2], u = q[3], y = c.winding(n, m, v, w, x, z), D = 0; D < l; D++) {
            if (D != d) {
              var E = h[D];
              if (3 == E.length) {
                F = E[0];
                C = E[1];
                var H = E[2], Q = b[D];
                A = Q[Q.length - 2];
                B = Q[Q.length - 1];
                F == a && C == e && (F = c.winding(n, m, v, w, A, B), C = c.winding(A, B, x, z, p, u), F == y && C == y && (Q.length = 0, E.length = 0, q.push(A), q.push(B), k.push(H), n = v, m = w, v = A, w = B, D = 0));
              }
            }
          }
        }
      }
      for (d = b.length - 1; 0 <= d; d--) {
        q = b[d], 0 == q.length && (b.splice(d, 1), this.polygonPool.free(q), k = h[d], h.splice(d, 1), this.polygonIndicesPool.free(k));
      }
      return b;
    };
    c.isConcave = function(a, c, f, h) {
      var b = h[(c + a - 1) % c] << 1, e = h[a] << 1;
      a = h[(a + 1) % c] << 1;
      return !this.positiveArea(f[b], f[b + 1], f[e], f[e + 1], f[a], f[a + 1]);
    };
    c.positiveArea = function(a, c, f, h, k, q) {
      return 0 <= a * (q - h) + f * (c - q) + k * (h - c);
    };
    c.winding = function(a, c, f, h, k, q) {
      f -= a;
      h -= c;
      return 0 <= k * h - q * f + f * c - a * h ? 1 : -1;
    };
    return c;
  }();
  a.Triangulator = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a() {
      this.array = [];
    }
    a.prototype.add = function(a) {
      var b = this.contains(a);
      this.array[a | 0] = a | 0;
      return !b;
    };
    a.prototype.contains = function(a) {
      return void 0 != this.array[a | 0];
    };
    a.prototype.remove = function(a) {
      this.array[a | 0] = void 0;
    };
    a.prototype.clear = function() {
      this.array.length = 0;
    };
    return a;
  }();
  a.IntSet = c;
  c = function() {
    function a(a, c, f, h) {
      void 0 === a && (a = 0);
      void 0 === c && (c = 0);
      void 0 === f && (f = 0);
      void 0 === h && (h = 0);
      this.r = a;
      this.g = c;
      this.b = f;
      this.a = h;
    }
    a.prototype.set = function(a, c, f, h) {
      this.r = a;
      this.g = c;
      this.b = f;
      this.a = h;
      this.clamp();
      return this;
    };
    a.prototype.setFromColor = function(a) {
      this.r = a.r;
      this.g = a.g;
      this.b = a.b;
      this.a = a.a;
      return this;
    };
    a.prototype.setFromString = function(a) {
      a = "#" == a.charAt(0) ? a.substr(1) : a;
      this.r = parseInt(a.substr(0, 2), 16) / 255;
      this.g = parseInt(a.substr(2, 2), 16) / 255;
      this.b = parseInt(a.substr(4, 2), 16) / 255;
      this.a = (8 != a.length ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
      return this;
    };
    a.prototype.add = function(a, c, f, h) {
      this.r += a;
      this.g += c;
      this.b += f;
      this.a += h;
      this.clamp();
      return this;
    };
    a.prototype.clamp = function() {
      0 > this.r ? this.r = 0 : 1 < this.r && (this.r = 1);
      0 > this.g ? this.g = 0 : 1 < this.g && (this.g = 1);
      0 > this.b ? this.b = 0 : 1 < this.b && (this.b = 1);
      0 > this.a ? this.a = 0 : 1 < this.a && (this.a = 1);
      return this;
    };
    a.WHITE = new a(1, 1, 1, 1);
    a.RED = new a(1, 0, 0, 1);
    a.GREEN = new a(0, 1, 0, 1);
    a.BLUE = new a(0, 0, 1, 1);
    a.MAGENTA = new a(1, 0, 1, 1);
    return a;
  }();
  a.Color = c;
  c = function() {
    function a() {
    }
    a.clamp = function(a, c, f) {
      return a < c ? c : a > f ? f : a;
    };
    a.cosDeg = function(b) {
      return Math.cos(b * a.degRad);
    };
    a.sinDeg = function(b) {
      return Math.sin(b * a.degRad);
    };
    a.signum = function(a) {
      return 0 < a ? 1 : 0 > a ? -1 : 0;
    };
    a.toInt = function(a) {
      return 0 < a ? Math.floor(a) : Math.ceil(a);
    };
    a.cbrt = function(a) {
      var b = Math.pow(Math.abs(a), 1 / 3);
      return 0 > a ? -b : b;
    };
    a.randomTriangular = function(b, c) {
      return a.randomTriangularWith(b, c, .5 * (b + c));
    };
    a.randomTriangularWith = function(a, c, f) {
      var b = Math.random(), e = c - a;
      return b <= (f - a) / e ? a + Math.sqrt(b * e * (f - a)) : c - Math.sqrt((1 - b) * e * (c - f));
    };
    a.PI = 3.1415927;
    a.PI2 = 2 * a.PI;
    a.radiansToDegrees = 180 / a.PI;
    a.radDeg = a.radiansToDegrees;
    a.degreesToRadians = a.PI / 180;
    a.degRad = a.degreesToRadians;
    return a;
  }();
  a.MathUtils = c;
  c = function() {
    function a() {
    }
    a.prototype.apply = function(a, c, f) {
      return a + (c - a) * this.applyInternal(f);
    };
    return a;
  }();
  a.Interpolation = c;
  c = function(a) {
    function b(b) {
      a.call(this);
      this.power = 2;
      this.power = b;
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return .5 >= a ? Math.pow(2 * a, this.power) / 2 : Math.pow(2 * (a - 1), this.power) / (0 == this.power % 2 ? -2 : 2) + 1;
    };
    return b;
  }(c);
  a.Pow = c;
  c = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return Math.pow(a - 1, this.power) * (0 == this.power % 2 ? -1 : 1) + 1;
    };
    return b;
  }(c);
  a.PowOut = c;
  c = function() {
    function a() {
    }
    a.arrayCopy = function(a, c, f, h, k) {
      for (var b = c; b < c + k; b++, h++) {
        f[h] = a[b];
      }
    };
    a.setArraySize = function(a, c, f) {
      void 0 === f && (f = 0);
      var b = a.length;
      if (b == c) {
        return a;
      }
      a.length = c;
      if (b < c) {
        for (; b < c; b++) {
          a[b] = f;
        }
      }
      return a;
    };
    a.ensureArrayCapacity = function(b, c, f) {
      void 0 === f && (f = 0);
      return b.length >= c ? b : a.setArraySize(b, c, f);
    };
    a.newArray = function(a, c) {
      for (var b = Array(a), e = 0; e < a; e++) {
        b[e] = c;
      }
      return b;
    };
    a.newFloatArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Float32Array(b);
      }
      b = Array(b);
      for (var c = 0; c < b.length; c++) {
        b[c] = 0;
      }
      return b;
    };
    a.newShortArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Int16Array(b);
      }
      b = Array(b);
      for (var c = 0; c < b.length; c++) {
        b[c] = 0;
      }
      return b;
    };
    a.toFloatArray = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? new Float32Array(b) : b;
    };
    a.toSinglePrecision = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? Math.fround(b) : b;
    };
    a.SUPPORTS_TYPED_ARRAYS = "undefined" !== typeof Float32Array;
    return a;
  }();
  a.Utils = c;
  c = function() {
    function a() {
    }
    a.logBones = function(a) {
      for (var b = 0; b < a.bones.length; b++) {
        var c = a.bones[b];
        console.log(c.data.name + ", " + c.a + ", " + c.b + ", " + c.c + ", " + c.d + ", " + c.worldX + ", " + c.worldY);
      }
    };
    return a;
  }();
  a.DebugUtils = c;
  c = function() {
    function a(a) {
      this.items = [];
      this.instantiator = a;
    }
    a.prototype.obtain = function() {
      return 0 < this.items.length ? this.items.pop() : this.instantiator();
    };
    a.prototype.free = function(a) {
      a.reset && a.reset();
      this.items.push(a);
    };
    a.prototype.freeAll = function(a) {
      for (var b = 0; b < a.length; b++) {
        a[b].reset && a[b].reset(), this.items[b] = a[b];
      }
    };
    a.prototype.clear = function() {
      this.items.length = 0;
    };
    return a;
  }();
  a.Pool = c;
  c = function() {
    function a(a, c) {
      void 0 === a && (a = 0);
      void 0 === c && (c = 0);
      this.x = a;
      this.y = c;
    }
    a.prototype.set = function(a, c) {
      this.x = a;
      this.y = c;
      return this;
    };
    a.prototype.length = function() {
      var a = this.x, c = this.y;
      return Math.sqrt(a * a + c * c);
    };
    a.prototype.normalize = function() {
      var a = this.length();
      0 != a && (this.x /= a, this.y /= a);
      return this;
    };
    return a;
  }();
  a.Vector2 = c;
  c = function() {
    function a() {
      this.maxDelta = .064;
      this.totalTime = this.delta = this.framesPerSecond = 0;
      this.lastTime = Date.now() / 1E3;
      this.frameTime = this.frameCount = 0;
    }
    a.prototype.update = function() {
      var a = Date.now() / 1E3;
      this.delta = a - this.lastTime;
      this.frameTime += this.delta;
      this.totalTime += this.delta;
      this.delta > this.maxDelta && (this.delta = this.maxDelta);
      this.lastTime = a;
      this.frameCount++;
      1 < this.frameTime && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameCount = this.frameTime = 0);
    };
    return a;
  }();
  a.TimeKeeper = c;
  c = function() {
    function a(a) {
      void 0 === a && (a = 32);
      this.mean = this.lastValue = this.addedValues = 0;
      this.dirty = !0;
      this.values = Array(a);
    }
    a.prototype.hasEnoughData = function() {
      return this.addedValues >= this.values.length;
    };
    a.prototype.addValue = function(a) {
      this.addedValues < this.values.length && this.addedValues++;
      this.values[this.lastValue++] = a;
      this.lastValue > this.values.length - 1 && (this.lastValue = 0);
      this.dirty = !0;
    };
    a.prototype.getMean = function() {
      if (this.hasEnoughData()) {
        if (this.dirty) {
          for (var a = 0, c = 0; c < this.values.length; c++) {
            a += this.values[c];
          }
          this.mean = a / this.values.length;
          this.dirty = !1;
        }
        return this.mean;
      }
      return 0;
    };
    return a;
  }();
  a.WindowedMean = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.jitterY = this.jitterX = 0;
      this.jitterX = a;
      this.jitterY = c;
    }
    c.prototype.begin = function(a) {
    };
    c.prototype.transform = function(b, c, f, h) {
      b.x += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
      b.y += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
    };
    c.prototype.end = function() {
    };
    return c;
  }();
  a.JitterEffect = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a) {
      this.worldY = this.worldX = this.angle = this.radius = this.centerY = this.centerX = 0;
      this.radius = a;
    }
    c.prototype.begin = function(a) {
      this.worldX = a.x + this.centerX;
      this.worldY = a.y + this.centerY;
    };
    c.prototype.transform = function(b, e, f, h) {
      h = this.angle * a.MathUtils.degreesToRadians;
      e = b.x - this.worldX;
      f = b.y - this.worldY;
      var k = Math.sqrt(e * e + f * f);
      k < this.radius && (k = c.interpolation.apply(0, h, (this.radius - k) / this.radius), h = Math.cos(k), k = Math.sin(k), b.x = h * e - k * f + this.worldX, b.y = k * e + h * f + this.worldY);
    };
    c.prototype.end = function() {
    };
    c.interpolation = new a.PowOut(2);
    return c;
  }();
  a.SwirlEffect = c;
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(a) {
      function b(b) {
        void 0 === b && (b = "");
        a.call(this, function(a) {
          return new c.ThreeJsTexture(a);
        }, b);
      }
      __extends(b, a);
      return b;
    }(a.AssetManager);
    c.AssetManager = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(a) {
    var c = function() {
      function a(b, c) {
        void 0 === c && (c = 10920);
        this.indicesLength = this.verticesLength = 0;
        if (10920 < c) {
          throw Error("Can't have more than 10920 triangles per batch: " + c);
        }
        var e = this.vertices = new Float32Array(c * a.VERTEX_SIZE);
        c = this.indices = new Uint16Array(3 * c);
        this.mesh = b;
        var f = new THREE.BufferGeometry;
        e = this.vertexBuffer = new THREE.InterleavedBuffer(e, a.VERTEX_SIZE);
        e.dynamic = !0;
        f.addAttribute("position", new THREE.InterleavedBufferAttribute(e, 3, 0, !1));
        f.addAttribute("color", new THREE.InterleavedBufferAttribute(e, 4, 3, !1));
        f.addAttribute("uv", new THREE.InterleavedBufferAttribute(e, 2, 7, !1));
        f.setIndex(new THREE.BufferAttribute(c, 1));
        f.getIndex().dynamic = !0;
        f.drawRange.start = 0;
        f.drawRange.count = 0;
        b.geometry = f;
      }
      a.prototype.begin = function() {
        this.indicesLength = this.verticesLength = 0;
      };
      a.prototype.batch = function(b, c, h, k, q) {
        void 0 === q && (q = 0);
        for (var e = this.verticesLength / a.VERTEX_SIZE, f = this.vertices, d = this.verticesLength, l = 0; l < c;) {
          f[d++] = b[l++], f[d++] = b[l++], f[d++] = q, f[d++] = b[l++], f[d++] = b[l++], f[d++] = b[l++], f[d++] = b[l++], f[d++] = b[l++], f[d++] = b[l++];
        }
        this.verticesLength = d;
        b = this.indices;
        d = this.indicesLength;
        for (l = 0; l < k; d++, l++) {
          b[d] = h[l] + e;
        }
        this.indicesLength += k;
      };
      a.prototype.end = function() {
        this.vertexBuffer.needsUpdate = !0;
        this.vertexBuffer.updateRange.offset = 0;
        this.vertexBuffer.updateRange.count = this.verticesLength;
        var a = this.mesh.geometry;
        a.getIndex().needsUpdate = !0;
        a.getIndex().updateRange.offset = 0;
        a.getIndex().updateRange.count = this.indicesLength;
        a.drawRange.start = 0;
        a.drawRange.count = this.indicesLength;
      };
      a.VERTEX_SIZE = 9;
      return a;
    }();
    a.MeshBatcher = c;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(b) {
      function e(e) {
        b.call(this);
        this.tempPos = new a.Vector2;
        this.tempUv = new a.Vector2;
        this.tempLight = new a.Color;
        this.tempDark = new a.Color;
        this.zOffset = .1;
        this.clipper = new a.SkeletonClipping;
        this.vertices = a.Utils.newFloatArray(1024);
        this.tempColor = new a.Color;
        this.skeleton = new a.Skeleton(e);
        e = new a.AnimationStateData(e);
        this.state = new a.AnimationState(e);
        e = this.material = new THREE.MeshBasicMaterial;
        e.side = THREE.DoubleSide;
        e.transparent = !0;
        e.alphaTest = .5;
        this.batcher = new c.MeshBatcher(this);
      }
      __extends(e, b);
      e.prototype.update = function(a) {
        var b = this.state, c = this.skeleton;
        b.update(a);
        b.apply(c);
        c.updateWorldTransform();
        this.updateGeometry();
      };
      e.prototype.updateGeometry = function() {
        var b = this.tempPos, c = this.tempUv, k = this.tempLight, q = this.tempDark, n = this.clipper, m = this.skeleton.drawOrder, d = this.batcher;
        d.begin();
        for (var l = 0, v = this.zOffset, w = 0, x = m.length; w < x; w++) {
          var z = n.isClipping() ? 2 : e.VERTEX_SIZE, p = m[w];
          var u = p.getAttachment();
          if (u instanceof a.RegionAttachment) {
            var y = u;
            var A = y.color;
            u = this.vertices;
            var B = 4 * z;
            y.computeWorldVertices(p.bone, u, 0, z);
            var D = e.QUAD_TRIANGLES;
            var F = y.uvs;
            y = y.region.renderObject.texture;
          } else {
            if (u instanceof a.MeshAttachment) {
              y = u, A = y.color, u = this.vertices, B = (y.worldVerticesLength >> 1) * z, B > u.length && (u = this.vertices = a.Utils.newFloatArray(B)), y.computeWorldVertices(p, 0, y.worldVerticesLength, u, 0, z), D = y.triangles, F = y.uvs, y = y.region.renderObject.texture;
            } else {
              u instanceof a.ClippingAttachment && n.clipStart(p, u);
              continue;
            }
          }
          if (null != y) {
            if (!this.material.map) {
              var C = this.material;
              C.map = y.texture;
              C.needsUpdate = !0;
            }
            y = p.bone.skeleton.color;
            C = p.color;
            p = this.tempColor;
            p.set(y.r * C.r * A.r, y.g * C.g * A.g, y.b * C.b * A.b, y.a * C.a * A.a);
            if (n.isClipping()) {
              n.clipTriangles(u, B, D, D.length, F, p, null, !1);
              u = n.clippedVertices;
              D = n.clippedTriangles;
              if (null != this.vertexEffect) {
                for (C = this.vertexEffect, A = u, y = 0, F = u.length; y < F; y += z) {
                  b.x = A[y], b.y = A[y + 1], k.setFromColor(p), q.set(0, 0, 0, 0), c.x = A[y + 6], c.y = A[y + 7], C.transform(b, c, k, q), A[y] = b.x, A[y + 1] = b.y, A[y + 2] = k.r, A[y + 3] = k.g, A[y + 4] = k.b, A[y + 5] = k.a, A[y + 6] = c.x, A[y + 7] = c.y;
                }
              }
              d.batch(u, u.length, D, D.length, l);
            } else {
              A = u;
              if (null != this.vertexEffect) {
                C = this.vertexEffect;
                for (var E = y = 0, H = B; y < H; y += z, E += 2) {
                  b.x = A[y], b.y = A[y + 1], k.setFromColor(p), q.set(0, 0, 0, 0), c.x = F[E], c.y = F[E + 1], C.transform(b, c, k, q), A[y] = b.x, A[y + 1] = b.y, A[y + 2] = k.r, A[y + 3] = k.g, A[y + 4] = k.b, A[y + 5] = k.a, A[y + 6] = c.x, A[y + 7] = c.y;
                }
              } else {
                for (y = 2, E = 0, C = B; y < C; y += z, E += 2) {
                  A[y] = p.r, A[y + 1] = p.g, A[y + 2] = p.b, A[y + 3] = p.a, A[y + 4] = F[E], A[y + 5] = F[E + 1];
                }
              }
              d.batch(u, B, D, D.length, l);
            }
            l += v;
          }
        }
        d.end();
      };
      e.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
      e.VERTEX_SIZE = 8;
      return e;
    }(THREE.Mesh);
    c.SkeletonMesh = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(b) {
      function c(a) {
        b.call(this, a);
        this.texture = new THREE.Texture(a);
        this.texture.flipY = !1;
        this.texture.needsUpdate = !0;
      }
      __extends(c, b);
      c.prototype.setFilters = function(a, b) {
        this.texture.minFilter = c.toThreeJsTextureFilter(a);
        this.texture.magFilter = c.toThreeJsTextureFilter(b);
      };
      c.prototype.setWraps = function(a, b) {
        this.texture.wrapS = c.toThreeJsTextureWrap(a);
        this.texture.wrapT = c.toThreeJsTextureWrap(b);
      };
      c.prototype.dispose = function() {
        this.texture.dispose();
      };
      c.toThreeJsTextureFilter = function(b) {
        if (b === a.TextureFilter.Linear) {
          return THREE.LinearFilter;
        }
        if (b === a.TextureFilter.MipMap) {
          return THREE.LinearMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapLinearNearest) {
          return THREE.LinearMipMapNearestFilter;
        }
        if (b === a.TextureFilter.MipMapNearestLinear) {
          return THREE.NearestMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapNearestNearest) {
          return THREE.NearestMipMapNearestFilter;
        }
        if (b === a.TextureFilter.Nearest) {
          return THREE.NearestFilter;
        }
        throw Error("Unknown texture filter: " + b);
      };
      c.toThreeJsTextureWrap = function(b) {
        if (b === a.TextureWrap.ClampToEdge) {
          return THREE.ClampToEdgeWrapping;
        }
        if (b === a.TextureWrap.MirroredRepeat) {
          return THREE.MirroredRepeatWrapping;
        }
        if (b === a.TextureWrap.Repeat) {
          return THREE.RepeatWrapping;
        }
        throw Error("Unknown texture wrap: " + b);
      };
      return c;
    }(a.Texture);
    c.ThreeJsTexture = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  "object" === typeof exports && "undefined" !== typeof module ? module.exports = a() : "function" === typeof define && define.amd ? define([], a) : ("undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this).opentype = a();
})(function() {
  return function e(c, k, b) {
    function f(q, n) {
      if (!k[q]) {
        if (!c[q]) {
          var m = "function" == typeof require && require;
          if (!n && m) {
            return m(q, !0);
          }
          if (h) {
            return h(q, !0);
          }
          n = Error("Cannot find module '" + q + "'");
          throw n.code = "MODULE_NOT_FOUND", n;
        }
        n = k[q] = {exports:{}};
        c[q][0].call(n.exports, function(b) {
          var d = c[q][1][b];
          return f(d ? d : b);
        }, n, n.exports, e, c, k, b);
      }
      return k[q].exports;
    }
    for (var h = "function" == typeof require && require, r = 0; r < b.length; r++) {
      f(b[r]);
    }
    return f;
  }({1:[function(c, k, b) {
    function e() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function f(b, c) {
      this.source = b;
      this.bitcount = this.tag = this.sourceIndex = 0;
      this.dest = c;
      this.destLen = 0;
      this.ltree = new e;
      this.dtree = new e;
    }
    function h(b, c, d, e) {
      var f;
      for (f = 0; d > f; ++f) {
        b[f] = 0;
      }
      for (f = 0; 30 - d > f; ++f) {
        b[f + d] = f / d | 0;
      }
      d = e;
      for (f = 0; 30 > f; ++f) {
        c[f] = d, d += 1 << b[f];
      }
    }
    function r(b, c, d, e) {
      var f, h;
      for (f = 0; 16 > f; ++f) {
        b.table[f] = 0;
      }
      for (f = 0; e > f; ++f) {
        b.table[c[d + f]]++;
      }
      for (f = h = b.table[0] = 0; 16 > f; ++f) {
        B[f] = h, h += b.table[f];
      }
      for (f = 0; e > f; ++f) {
        c[d + f] && (b.trans[B[c[d + f]]++] = f);
      }
    }
    function q(b, c, d) {
      if (!c) {
        return d;
      }
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var e = b.tag & 65535 >>> 16 - c;
      return b.tag >>>= c, b.bitcount -= c, e + d;
    }
    function n(b, c) {
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var d = 0, e = 0, f = 0, h = b.tag;
      do {
        e = 2 * e + (1 & h), h >>>= 1, ++f, d += c.table[f], e -= c.table[f];
      } while (0 <= e);
      return b.tag = h, b.bitcount -= f, c.trans[d + e];
    }
    function m(b, c, e) {
      for (;;) {
        var f = n(b, c);
        if (256 === f) {
          return d;
        }
        if (256 > f) {
          b.dest[b.destLen++] = f;
        } else {
          var h;
          f -= 257;
          f = q(b, w[f], x[f]);
          var k = n(b, e);
          for (h = k = b.destLen - q(b, z[k], p[k]); k + f > h; ++h) {
            b.dest[b.destLen++] = b.dest[h];
          }
        }
      }
    }
    var d = 0, l = new e, v = new e, w = new Uint8Array(30), x = new Uint16Array(30), z = new Uint8Array(30), p = new Uint16Array(30), u = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), y = new e, A = new Uint8Array(320), B = new Uint16Array(16);
    (function(b, c) {
      var d;
      for (d = 0; 7 > d; ++d) {
        b.table[d] = 0;
      }
      b.table[7] = 24;
      b.table[8] = 152;
      b.table[9] = 112;
      for (d = 0; 24 > d; ++d) {
        b.trans[d] = 256 + d;
      }
      for (d = 0; 144 > d; ++d) {
        b.trans[24 + d] = d;
      }
      for (d = 0; 8 > d; ++d) {
        b.trans[168 + d] = 280 + d;
      }
      for (d = 0; 112 > d; ++d) {
        b.trans[176 + d] = 144 + d;
      }
      for (d = 0; 5 > d; ++d) {
        c.table[d] = 0;
      }
      c.table[5] = 32;
      for (d = 0; 32 > d; ++d) {
        c.trans[d] = d;
      }
    })(l, v);
    h(w, x, 4, 3);
    h(z, p, 2, 1);
    w[28] = 0;
    x[28] = 258;
    k.exports = function(b, c) {
      b = new f(b, c);
      do {
        c = b;
        c.bitcount-- || (c.tag = c.source[c.sourceIndex++], c.bitcount = 7);
        var e = 1 & c.tag;
        switch(c = (c.tag >>>= 1, e), q(b, 2, 0)) {
          case 0:
            var h, k = h = void 0;
            for (e = b; 8 < e.bitcount;) {
              e.sourceIndex--, e.bitcount -= 8;
            }
            if (k = e.source[e.sourceIndex + 1], k = 256 * k + e.source[e.sourceIndex], h = e.source[e.sourceIndex + 3], h = 256 * h + e.source[e.sourceIndex + 2], k !== (65535 & ~h)) {
              e = -3;
            } else {
              e.sourceIndex += 4;
              for (h = k; h; --h) {
                e.dest[e.destLen++] = e.source[e.sourceIndex++];
              }
              e = (e.bitcount = 0, d);
            }
            break;
          case 1:
            e = m(b, l, v);
            break;
          case 2:
            var p;
            k = b;
            var w = b.ltree, x = b.dtree;
            h = q(k, 5, 257);
            e = q(k, 5, 1);
            var z = q(k, 4, 4);
            for (p = 0; 19 > p; ++p) {
              A[p] = 0;
            }
            for (p = 0; z > p; ++p) {
              var B = q(k, 3, 0);
              A[u[p]] = B;
            }
            r(y, A, 0, 19);
            for (p = 0; h + e > p;) {
              switch(z = n(k, y), z) {
                case 16:
                  B = A[p - 1];
                  for (z = q(k, 2, 3); z; --z) {
                    A[p++] = B;
                  }
                  break;
                case 17:
                  for (z = q(k, 3, 3); z; --z) {
                    A[p++] = 0;
                  }
                  break;
                case 18:
                  for (z = q(k, 7, 11); z; --z) {
                    A[p++] = 0;
                  }
                  break;
                default:
                  A[p++] = z;
              }
            }
            r(w, A, 0, h);
            r(x, A, h, e);
            e = m(b, b.ltree, b.dtree);
            break;
          default:
            e = -3;
        }
        if (e !== d) {
          throw Error("Data error");
        }
      } while (!c);
      return b.destLen < b.dest.length ? "function" == typeof b.dest.slice ? b.dest.slice(0, b.destLen) : b.dest.subarray(0, b.destLen) : b.dest;
    };
  }, {}], 2:[function(c, k, b) {
    b.fail = function(b) {
      throw Error(b);
    };
    b.argument = function(c, f) {
      c || b.fail(f);
    };
    b.assert = b.argument;
  }, {}], 3:[function(c, k, b) {
    b.line = function(b, c, h, k, q) {
      b.beginPath();
      b.moveTo(c, h);
      b.lineTo(k, q);
      b.stroke();
    };
  }, {}], 4:[function(c, k, b) {
    function e(b) {
      this.font = b;
    }
    function f(b) {
      this.cmap = b;
    }
    function h(b, c) {
      this.encoding = b;
      this.charset = c;
    }
    function r(c) {
      var e;
      switch(c.version) {
        case 1:
          this.names = b.standardNames.slice();
          break;
        case 2:
          this.names = Array(c.numberOfGlyphs);
          for (e = 0; e < c.numberOfGlyphs; e++) {
            this.names[e] = c.glyphNameIndex[e] < b.standardNames.length ? b.standardNames[c.glyphNameIndex[e]] : c.names[c.glyphNameIndex[e] - b.standardNames.length];
          }
          break;
        case 2.5:
          this.names = Array(c.numberOfGlyphs);
          for (e = 0; e < c.numberOfGlyphs; e++) {
            this.names[e] = b.standardNames[e + c.glyphNameIndex[e]];
          }
          break;
        case 3:
          this.names = [];
      }
    }
    e.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      var c = this.font.glyphs;
      if (!c) {
        return null;
      }
      for (var e = 0; e < c.length; e += 1) {
        for (var d = c.get(e), f = 0; f < d.unicodes.length; f += 1) {
          if (d.unicodes[f] === b) {
            return e;
          }
        }
      }
    };
    f.prototype.charToGlyphIndex = function(b) {
      return this.cmap.glyphIndexMap[b.charCodeAt(0)] || 0;
    };
    h.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      return this.charset.indexOf(this.encoding[b]);
    };
    r.prototype.nameToGlyphIndex = function(b) {
      return this.names.indexOf(b);
    };
    r.prototype.glyphIndexToName = function(b) {
      return this.names[b];
    };
    b.cffStandardStrings = ".notdef;space;exclam;quotedbl;numbersign;dollar;percent;ampersand;quoteright;parenleft;parenright;asterisk;plus;comma;hyphen;period;slash;zero;one;two;three;four;five;six;seven;eight;nine;colon;semicolon;less;equal;greater;question;at;A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;bracketleft;backslash;bracketright;asciicircum;underscore;quoteleft;a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;braceleft;bar;braceright;asciitilde;exclamdown;cent;sterling;fraction;yen;florin;section;currency;quotesingle;quotedblleft;guillemotleft;guilsinglleft;guilsinglright;fi;fl;endash;dagger;daggerdbl;periodcentered;paragraph;bullet;quotesinglbase;quotedblbase;quotedblright;guillemotright;ellipsis;perthousand;questiondown;grave;acute;circumflex;tilde;macron;breve;dotaccent;dieresis;ring;cedilla;hungarumlaut;ogonek;caron;emdash;AE;ordfeminine;Lslash;Oslash;OE;ordmasculine;ae;dotlessi;lslash;oslash;oe;germandbls;onesuperior;logicalnot;mu;trademark;Eth;onehalf;plusminus;Thorn;onequarter;divide;brokenbar;degree;thorn;threequarters;twosuperior;registered;minus;eth;multiply;threesuperior;copyright;Aacute;Acircumflex;Adieresis;Agrave;Aring;Atilde;Ccedilla;Eacute;Ecircumflex;Edieresis;Egrave;Iacute;Icircumflex;Idieresis;Igrave;Ntilde;Oacute;Ocircumflex;Odieresis;Ograve;Otilde;Scaron;Uacute;Ucircumflex;Udieresis;Ugrave;Yacute;Ydieresis;Zcaron;aacute;acircumflex;adieresis;agrave;aring;atilde;ccedilla;eacute;ecircumflex;edieresis;egrave;iacute;icircumflex;idieresis;igrave;ntilde;oacute;ocircumflex;odieresis;ograve;otilde;scaron;uacute;ucircumflex;udieresis;ugrave;yacute;ydieresis;zcaron;exclamsmall;Hungarumlautsmall;dollaroldstyle;dollarsuperior;ampersandsmall;Acutesmall;parenleftsuperior;parenrightsuperior;266 ff;onedotenleader;zerooldstyle;oneoldstyle;twooldstyle;threeoldstyle;fouroldstyle;fiveoldstyle;sixoldstyle;sevenoldstyle;eightoldstyle;nineoldstyle;commasuperior;threequartersemdash;periodsuperior;questionsmall;asuperior;bsuperior;centsuperior;dsuperior;esuperior;isuperior;lsuperior;msuperior;nsuperior;osuperior;rsuperior;ssuperior;tsuperior;ff;ffi;ffl;parenleftinferior;parenrightinferior;Circumflexsmall;hyphensuperior;Gravesmall;Asmall;Bsmall;Csmall;Dsmall;Esmall;Fsmall;Gsmall;Hsmall;Ismall;Jsmall;Ksmall;Lsmall;Msmall;Nsmall;Osmall;Psmall;Qsmall;Rsmall;Ssmall;Tsmall;Usmall;Vsmall;Wsmall;Xsmall;Ysmall;Zsmall;colonmonetary;onefitted;rupiah;Tildesmall;exclamdownsmall;centoldstyle;Lslashsmall;Scaronsmall;Zcaronsmall;Dieresissmall;Brevesmall;Caronsmall;Dotaccentsmall;Macronsmall;figuredash;hypheninferior;Ogoneksmall;Ringsmall;Cedillasmall;questiondownsmall;oneeighth;threeeighths;fiveeighths;seveneighths;onethird;twothirds;zerosuperior;foursuperior;fivesuperior;sixsuperior;sevensuperior;eightsuperior;ninesuperior;zeroinferior;oneinferior;twoinferior;threeinferior;fourinferior;fiveinferior;sixinferior;seveninferior;eightinferior;nineinferior;centinferior;dollarinferior;periodinferior;commainferior;Agravesmall;Aacutesmall;Acircumflexsmall;Atildesmall;Adieresissmall;Aringsmall;AEsmall;Ccedillasmall;Egravesmall;Eacutesmall;Ecircumflexsmall;Edieresissmall;Igravesmall;Iacutesmall;Icircumflexsmall;Idieresissmall;Ethsmall;Ntildesmall;Ogravesmall;Oacutesmall;Ocircumflexsmall;Otildesmall;Odieresissmall;OEsmall;Oslashsmall;Ugravesmall;Uacutesmall;Ucircumflexsmall;Udieresissmall;Yacutesmall;Thornsmall;Ydieresissmall;001.000;001.001;001.002;001.003;Black;Bold;Book;Light;Medium;Regular;Roman;Semibold".split(";");
    b.cffStandardEncoding = "                                space exclam quotedbl numbersign dollar percent ampersand quoteright parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde                                   exclamdown cent sterling fraction yen florin section currency quotesingle quotedblleft guillemotleft guilsinglleft guilsinglright fi fl  endash dagger daggerdbl periodcentered  paragraph bullet quotesinglbase quotedblbase quotedblright guillemotright ellipsis perthousand  questiondown  grave acute circumflex tilde macron breve dotaccent dieresis  ring cedilla  hungarumlaut ogonek caron emdash                 AE  ordfeminine     Lslash Oslash OE ordmasculine      ae    dotlessi   lslash oslash oe germandbls".split(" ");
    b.cffExpertEncoding = "                                space exclamsmall Hungarumlautsmall  dollaroldstyle dollarsuperior ampersandsmall Acutesmall parenleftsuperior parenrightsuperior twodotenleader onedotenleader comma hyphen period fraction zerooldstyle oneoldstyle twooldstyle threeoldstyle fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle nineoldstyle colon semicolon commasuperior threequartersemdash periodsuperior questionsmall  asuperior bsuperior centsuperior dsuperior esuperior   isuperior   lsuperior msuperior nsuperior osuperior   rsuperior ssuperior tsuperior  ff fi fl ffi ffl parenleftinferior  parenrightinferior Circumflexsmall hyphensuperior Gravesmall Asmall Bsmall Csmall Dsmall Esmall Fsmall Gsmall Hsmall Ismall Jsmall Ksmall Lsmall Msmall Nsmall Osmall Psmall Qsmall Rsmall Ssmall Tsmall Usmall Vsmall Wsmall Xsmall Ysmall Zsmall colonmonetary onefitted rupiah Tildesmall                                   exclamdownsmall centoldstyle Lslashsmall   Scaronsmall Zcaronsmall Dieresissmall Brevesmall Caronsmall  Dotaccentsmall   Macronsmall   figuredash hypheninferior   Ogoneksmall Ringsmall Cedillasmall    onequarter onehalf threequarters questiondownsmall oneeighth threeeighths fiveeighths seveneighths onethird twothirds   zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior centinferior dollarinferior periodinferior commainferior Agravesmall Aacutesmall Acircumflexsmall Atildesmall Adieresissmall Aringsmall AEsmall Ccedillasmall Egravesmall Eacutesmall Ecircumflexsmall Edieresissmall Igravesmall Iacutesmall Icircumflexsmall Idieresissmall Ethsmall Ntildesmall Ogravesmall Oacutesmall Ocircumflexsmall Otildesmall Odieresissmall OEsmall Oslashsmall Ugravesmall Uacutesmall Ucircumflexsmall Udieresissmall Yacutesmall Thornsmall Ydieresissmall".split(" ");
    b.standardNames = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(" ");
    b.DefaultEncoding = e;
    b.CmapEncoding = f;
    b.CffEncoding = h;
    b.GlyphNames = r;
    b.addGlyphNames = function(b) {
      for (var c, e = b.tables.cmap.glyphIndexMap, d = Object.keys(e), f = 0; f < d.length; f += 1) {
        var h = d[f];
        c = b.glyphs.get(e[h]);
        c.addUnicode(parseInt(h));
      }
      for (f = 0; f < b.glyphs.length; f += 1) {
        c = b.glyphs.get(f), b.cffEncoding ? c.name = b.cffEncoding.charset[f] : b.glyphNames.names && (c.name = b.glyphNames.glyphIndexToName(f));
      }
    };
  }, {}], 5:[function(c, k, b) {
    function e(b) {
      b = b || {};
      b.empty || (m.checkArgument(b.familyName, "When creating a new Font object, familyName is required."), m.checkArgument(b.styleName, "When creating a new Font object, styleName is required."), m.checkArgument(b.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), m.checkArgument(b.ascender, "When creating a new Font object, ascender is required."), m.checkArgument(b.descender, "When creating a new Font object, descender is required."), m.checkArgument(0 > b.descender, "Descender should be negative (e.g. -512)."), 
      this.names = {fontFamily:{en:b.familyName || " "}, fontSubfamily:{en:b.styleName || " "}, fullName:{en:b.fullName || b.familyName + " " + b.styleName}, postScriptName:{en:b.postScriptName || b.familyName + b.styleName}, designer:{en:b.designer || " "}, designerURL:{en:b.designerURL || " "}, manufacturer:{en:b.manufacturer || " "}, manufacturerURL:{en:b.manufacturerURL || " "}, license:{en:b.license || " "}, licenseURL:{en:b.licenseURL || " "}, version:{en:b.version || "Version 0.1"}, description:{en:b.description || 
      " "}, copyright:{en:b.copyright || " "}, trademark:{en:b.trademark || " "}}, this.unitsPerEm = b.unitsPerEm || 1E3, this.ascender = b.ascender, this.descender = b.descender, this.createdTimestamp = b.createdTimestamp, this.tables = {os2:{usWeightClass:b.weightClass || this.usWeightClasses.MEDIUM, usWidthClass:b.widthClass || this.usWidthClasses.MEDIUM, fsSelection:b.fsSelection || this.fsSelectionValues.REGULAR}});
      this.supported = !0;
      this.glyphs = new q.GlyphSet(this, b.glyphs || []);
      this.encoding = new r.DefaultEncoding(this);
      this.substitution = new n(this);
      this.tables = this.tables || {};
    }
    var f = c("./path"), h = c("./tables/sfnt"), r = c("./encoding"), q = c("./glyphset"), n = c("./substitution"), m = c("./util");
    e.prototype.hasChar = function(b) {
      return null !== this.encoding.charToGlyphIndex(b);
    };
    e.prototype.charToGlyphIndex = function(b) {
      return this.encoding.charToGlyphIndex(b);
    };
    e.prototype.charToGlyph = function(b) {
      b = this.charToGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    e.prototype.stringToGlyphs = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        c.push(this.charToGlyph(b[d]));
      }
      return c;
    };
    e.prototype.nameToGlyphIndex = function(b) {
      return this.glyphNames.nameToGlyphIndex(b);
    };
    e.prototype.nameToGlyph = function(b) {
      b = this.nametoGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    e.prototype.glyphIndexToName = function(b) {
      return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(b) : "";
    };
    e.prototype.getKerningValue = function(b, c) {
      b = b.index || b;
      c = c.index || c;
      var d = this.getGposKerningValue;
      return d ? d(b, c) : this.kerningPairs[b + "," + c] || 0;
    };
    e.prototype.forEachGlyph = function(b, c, e, f, h, k) {
      c = void 0 !== c ? c : 0;
      e = void 0 !== e ? e : 0;
      f = void 0 !== f ? f : 72;
      h = h || {};
      var d = void 0 === h.kerning ? !0 : h.kerning, l = 1 / this.unitsPerEm * f;
      b = this.stringToGlyphs(b);
      for (var m = 0; m < b.length; m += 1) {
        var n = b[m];
        if (k(n, c, e, f, h), n.advanceWidth && (c += n.advanceWidth * l), d && m < b.length - 1) {
          n = this.getKerningValue(n, b[m + 1]), c += n * l;
        }
      }
    };
    e.prototype.getPath = function(b, c, e, h, k) {
      var d = new f.Path;
      return this.forEachGlyph(b, c, e, h, k, function(b, c, e, f) {
        b = b.getPath(c, e, f);
        d.extend(b);
      }), d;
    };
    e.prototype.getPaths = function(b, c, e, f, h) {
      var d = [];
      return this.forEachGlyph(b, c, e, f, h, function(b, c, e, f) {
        b = b.getPath(c, e, f);
        d.push(b);
      }), d;
    };
    e.prototype.draw = function(b, c, e, f, h, k) {
      this.getPath(c, e, f, h, k).draw(b);
    };
    e.prototype.drawPoints = function(b, c, e, f, h, k) {
      this.forEachGlyph(c, e, f, h, k, function(c, d, e, f) {
        c.drawPoints(b, d, e, f);
      });
    };
    e.prototype.drawMetrics = function(b, c, e, f, h, k) {
      this.forEachGlyph(c, e, f, h, k, function(c, d, e, f) {
        c.drawMetrics(b, d, e, f);
      });
    };
    e.prototype.getEnglishName = function(b) {
      return (b = this.names[b]) ? b.en : void 0;
    };
    e.prototype.validate = function() {
      function b(b) {
        var d = e.getEnglishName(b);
        d && 0 < d.trim().length || c.push("No English " + b + " specified.");
      }
      var c = [], e = this;
      b("fontFamily");
      b("weightName");
      b("manufacturer");
      b("copyright");
      b("version");
      0 < this.unitsPerEm || c.push("No unitsPerEm specified.");
    };
    e.prototype.toTables = function() {
      return h.fontToTable(this);
    };
    e.prototype.toBuffer = function() {
      return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
    };
    e.prototype.toArrayBuffer = function() {
      for (var b = this.toTables().encode(), c = new ArrayBuffer(b.length), e = new Uint8Array(c), f = 0; f < b.length; f++) {
        e[f] = b[f];
      }
      return c;
    };
    e.prototype.download = function() {
      var b = this.getEnglishName("fontFamily"), e = this.getEnglishName("fontSubfamily"), f = b.replace(/\s/g, "") + "-" + e + ".otf", h = this.toArrayBuffer();
      m.isBrowser() ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, h.byteLength, function(b) {
        b.root.getFile(f, {create:!0}, function(b) {
          b.createWriter(function(c) {
            var d = new DataView(h);
            d = new Blob([d], {type:"font/opentype"});
            c.write(d);
            c.addEventListener("writeend", function() {
              location.href = b.toURL();
            }, !1);
          });
        });
      }, function(b) {
        throw Error(b.name + ": " + b.message);
      })) : (b = c("fs"), e = m.arrayBufferToNodeBuffer(h), b.writeFileSync(f, e));
    };
    e.prototype.fsSelectionValues = {ITALIC:1, UNDERSCORE:2, NEGATIVE:4, OUTLINED:8, STRIKEOUT:16, BOLD:32, REGULAR:64, USER_TYPO_METRICS:128, WWS:256, OBLIQUE:512};
    e.prototype.usWidthClasses = {ULTRA_CONDENSED:1, EXTRA_CONDENSED:2, CONDENSED:3, SEMI_CONDENSED:4, MEDIUM:5, SEMI_EXPANDED:6, EXPANDED:7, EXTRA_EXPANDED:8, ULTRA_EXPANDED:9};
    e.prototype.usWeightClasses = {THIN:100, EXTRA_LIGHT:200, LIGHT:300, NORMAL:400, MEDIUM:500, SEMI_BOLD:600, BOLD:700, EXTRA_BOLD:800, BLACK:900};
    b.Font = e;
  }, {"./encoding":4, "./glyphset":7, "./path":11, "./substitution":12, "./tables/sfnt":31, "./util":33, fs:void 0}], 6:[function(c, k, b) {
    function e(b, c) {
      var d = c || {commands:[]};
      return {configurable:!0, get:function() {
        return "function" == typeof d && (d = d()), d;
      }, set:function(b) {
        d = b;
      }};
    }
    function f(b) {
      this.bindConstructorValues(b);
    }
    var h = c("./check"), r = c("./draw"), q = c("./path");
    f.prototype.bindConstructorValues = function(b) {
      this.index = b.index || 0;
      this.name = b.name || null;
      this.unicode = b.unicode || void 0;
      this.unicodes = b.unicodes || void 0 !== b.unicode ? [b.unicode] : [];
      b.xMin && (this.xMin = b.xMin);
      b.yMin && (this.yMin = b.yMin);
      b.xMax && (this.xMax = b.xMax);
      b.yMax && (this.yMax = b.yMax);
      b.advanceWidth && (this.advanceWidth = b.advanceWidth);
      Object.defineProperty(this, "path", e(this, b.path));
    };
    f.prototype.addUnicode = function(b) {
      0 === this.unicodes.length && (this.unicode = b);
      this.unicodes.push(b);
    };
    f.prototype.getPath = function(b, c, d, e) {
      b = void 0 !== b ? b : 0;
      c = void 0 !== c ? c : 0;
      e = void 0 !== e ? e : {xScale:1, yScale:1};
      var f = 1 / this.path.unitsPerEm * (void 0 !== d ? d : 72);
      d = e.xScale * f;
      e = e.yScale * f;
      f = new q.Path;
      for (var h = this.path.commands, k = 0; k < h.length; k += 1) {
        var l = h[k];
        "M" === l.type ? f.moveTo(b + l.x * d, c + -l.y * e) : "L" === l.type ? f.lineTo(b + l.x * d, c + -l.y * e) : "Q" === l.type ? f.quadraticCurveTo(b + l.x1 * d, c + -l.y1 * e, b + l.x * d, c + -l.y * e) : "C" === l.type ? f.curveTo(b + l.x1 * d, c + -l.y1 * e, b + l.x2 * d, c + -l.y2 * e, b + l.x * d, c + -l.y * e) : "Z" === l.type && f.closePath();
      }
      return f;
    };
    f.prototype.getContours = function() {
      if (void 0 === this.points) {
        return [];
      }
      for (var b = [], c = [], d = 0; d < this.points.length; d += 1) {
        var e = this.points[d];
        c.push(e);
        e.lastPointOfContour && (b.push(c), c = []);
      }
      return h.argument(0 === c.length, "There are still points left in the current contour."), b;
    };
    f.prototype.getMetrics = function() {
      for (var b = this.path.commands, c = [], d = [], e = 0; e < b.length; e += 1) {
        var f = b[e];
        "Z" !== f.type && (c.push(f.x), d.push(f.y));
        "Q" !== f.type && "C" !== f.type || (c.push(f.x1), d.push(f.y1));
        "C" === f.type && (c.push(f.x2), d.push(f.y2));
      }
      b = {xMin:Math.min.apply(null, c), yMin:Math.min.apply(null, d), xMax:Math.max.apply(null, c), yMax:Math.max.apply(null, d), leftSideBearing:this.leftSideBearing};
      return isFinite(b.xMin) || (b.xMin = 0), isFinite(b.xMax) || (b.xMax = this.advanceWidth), isFinite(b.yMin) || (b.yMin = 0), isFinite(b.yMax) || (b.yMax = 0), b.rightSideBearing = this.advanceWidth - b.leftSideBearing - (b.xMax - b.xMin), b;
    };
    f.prototype.draw = function(b, c, d, e, f) {
      this.getPath(c, d, e, f).draw(b);
    };
    f.prototype.drawPoints = function(b, c, d, e) {
      function f(c, d, e, f) {
        var h = 2 * Math.PI;
        b.beginPath();
        for (var k = 0; k < c.length; k += 1) {
          b.moveTo(d + c[k].x * f, e + c[k].y * f), b.arc(d + c[k].x * f, e + c[k].y * f, 2, 0, h, !1);
        }
        b.closePath();
        b.fill();
      }
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : 0;
      e = 1 / this.path.unitsPerEm * (void 0 !== e ? e : 24);
      for (var h = [], k = [], l = this.path, m = 0; m < l.commands.length; m += 1) {
        var n = l.commands[m];
        void 0 !== n.x && h.push({x:n.x, y:-n.y});
        void 0 !== n.x1 && k.push({x:n.x1, y:-n.y1});
        void 0 !== n.x2 && k.push({x:n.x2, y:-n.y2});
      }
      b.fillStyle = "blue";
      f(h, c, d, e);
      b.fillStyle = "red";
      f(k, c, d, e);
    };
    f.prototype.drawMetrics = function(b, c, d, e) {
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : 0;
      e = 1 / this.path.unitsPerEm * (void 0 !== e ? e : 24);
      b.lineWidth = 1;
      b.strokeStyle = "black";
      r.line(b, c, -1E4, c, 1E4);
      r.line(b, -1E4, d, 1E4, d);
      var f = this.xMin || 0, h = this.yMin || 0, k = this.xMax || 0, l = this.yMax || 0, m = this.advanceWidth || 0;
      b.strokeStyle = "blue";
      r.line(b, c + f * e, -1E4, c + f * e, 1E4);
      r.line(b, c + k * e, -1E4, c + k * e, 1E4);
      r.line(b, -1E4, d + -h * e, 1E4, d + -h * e);
      r.line(b, -1E4, d + -l * e, 1E4, d + -l * e);
      b.strokeStyle = "green";
      r.line(b, c + m * e, -1E4, c + m * e, 1E4);
    };
    b.Glyph = f;
  }, {"./check":2, "./draw":3, "./path":11}], 7:[function(c, k, b) {
    function e(b, c, e) {
      Object.defineProperty(b, c, {get:function() {
        return b.path, b[e];
      }, set:function(c) {
        b[e] = c;
      }, enumerable:!0, configurable:!0});
    }
    function f(b, c) {
      if (this.font = b, this.glyphs = {}, Array.isArray(c)) {
        for (b = 0; b < c.length; b++) {
          this.glyphs[b] = c[b];
        }
      }
      this.length = c && c.length || 0;
    }
    var h = c("./glyph");
    f.prototype.get = function(b) {
      return "function" == typeof this.glyphs[b] && (this.glyphs[b] = this.glyphs[b]()), this.glyphs[b];
    };
    f.prototype.push = function(b, c) {
      this.glyphs[b] = c;
      this.length++;
    };
    b.GlyphSet = f;
    b.glyphLoader = function(b, c) {
      return new h.Glyph({index:c, font:b});
    };
    b.ttfGlyphLoader = function(b, c, f, k, d, l) {
      return function() {
        var m = new h.Glyph({index:c, font:b});
        return m.path = function() {
          f(m, k, d);
          var c = l(b.glyphs, m);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, e(m, "xMin", "_xMin"), e(m, "xMax", "_xMax"), e(m, "yMin", "_yMin"), e(m, "yMax", "_yMax"), m;
      };
    };
    b.cffGlyphLoader = function(b, c, e, f) {
      return function() {
        var d = new h.Glyph({index:c, font:b});
        return d.path = function() {
          var c = e(b, d, f);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, d;
      };
    };
  }, {"./glyph":6}], 8:[function(c, k, b) {
    function e(b, c) {
      for (var e = 0, f = b.length - 1; f >= e;) {
        var h = e + f >>> 1, d = b[h].tag;
        if (d === c) {
          return h;
        }
        c > d ? e = h + 1 : f = h - 1;
      }
      return -e - 1;
    }
    var f = c("./check");
    k.exports = {searchTag:e, binSearch:function(b, c) {
      for (var e = 0, f = b.length - 1; f >= e;) {
        var h = e + f >>> 1, d = b[h];
        if (d === c) {
          return h;
        }
        c > d ? e = h + 1 : f = h - 1;
      }
      return -e - 1;
    }, getScriptNames:function() {
      var b = this.getGsubTable();
      return b ? b.scripts.map(function(b) {
        return b.tag;
      }) : [];
    }, getScriptTable:function(b, c) {
      var f = this.getGsubTable(c);
      if (f) {
        c = f.scripts;
        f = e(f.scripts, b);
        if (0 <= f) {
          return c[f].script;
        }
        b = {tag:b, script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}};
        return c.splice(-1 - f, 0, b.script), b;
      }
    }, getLangSysTable:function(b, c, f) {
      if (b = this.getScriptTable(b, f)) {
        if ("DFLT" === c) {
          return b.defaultLangSys;
        }
        var h = e(b.langSysRecords, c);
        if (0 <= h) {
          return b.langSysRecords[h].langSys;
        }
        if (f) {
          return c = {tag:c, langSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}}, b.langSysRecords.splice(-1 - h, 0, c), c.langSys;
        }
      }
    }, getFeatureTable:function(b, c, e, k) {
      if (b = this.getLangSysTable(b, c, k)) {
        var h;
        b = b.featureIndexes;
        c = this.font.tables.gsub.features;
        for (var d = 0; d < b.length; d++) {
          if (h = c[b[d]], h.tag === e) {
            return h.feature;
          }
        }
        if (k) {
          return k = c.length, f.assert(0 === k || e >= c[k - 1].tag, "Features must be added in alphabetical order."), h = {tag:e, feature:{params:0, lookupListIndexes:[]}}, c.push(h), b.push(k), h.feature;
        }
      }
    }, getLookupTable:function(b, c, e, f, k) {
      if (b = this.getFeatureTable(b, c, e, k)) {
        var d;
        b = b.lookupListIndexes;
        c = this.font.tables.gsub.lookups;
        for (e = 0; e < b.length; e++) {
          if (d = c[b[e]], d.lookupType === f) {
            return d;
          }
        }
        if (k) {
          return d = {lookupType:f, lookupFlag:0, subtables:[], markFilteringSet:void 0}, f = c.length, c.push(d), b.push(f), d;
        }
      }
    }, expandCoverage:function(b) {
      if (1 === b.format) {
        return b.glyphs;
      }
      var c = [];
      b = b.ranges;
      for (var e = 0; b > e; e++) {
        var f = b[e], h = f.end;
        for (f = f.start; h >= f; f++) {
          c.push(f);
        }
      }
      return c;
    }};
  }, {"./check":2}], 9:[function(c, k, b) {
    function e(b, d) {
      c("fs").readFile(b, function(b, c) {
        return b ? d(b.message) : void d(null, w.nodeBufferToArrayBuffer(c));
      });
    }
    function f(b, c) {
      var d = new XMLHttpRequest;
      d.open("get", b, !0);
      d.responseType = "arraybuffer";
      d.onload = function() {
        return 200 !== d.status ? c("Font could not be loaded: " + d.statusText) : c(null, d.response);
      };
      d.send();
    }
    function h(b, c) {
      for (var d = [], e = 12, f = 0; c > f; f += 1) {
        var h = l.getTag(b, e), k = l.getULong(b, e + 4), m = l.getULong(b, e + 8), n = l.getULong(b, e + 12);
        d.push({tag:h, checksum:k, offset:m, length:n, compression:!1});
        e += 16;
      }
      return d;
    }
    function r(b, c) {
      if ("WOFF" === c.compression) {
        b = new Uint8Array(b.buffer, c.offset + 2, c.compressedLength - 2);
        var d = new Uint8Array(c.originalLength);
        if (n(b, d), d.byteLength !== c.originalLength) {
          throw Error("Decompression error: " + c.tag + " decompressed length doesn't match recorded length");
        }
        return {data:new DataView(d.buffer, 0), offset:0};
      }
      return {data:b, offset:c.offset};
    }
    function q(b) {
      var c = new d.Font({empty:!0});
      b = new DataView(b, 0);
      var e = l.getTag(b, 0);
      if (e === String.fromCharCode(0, 1, 0, 0)) {
        c.outlinesFormat = "truetype";
        e = l.getUShort(b, 4);
        var f = h(b, e);
      } else {
        if ("OTTO" === e) {
          c.outlinesFormat = "cff", e = l.getUShort(b, 4), f = h(b, e);
        } else {
          if ("wOFF" !== e) {
            throw Error("Unsupported OpenType signature " + e);
          }
          f = l.getTag(b, 4);
          if (f === String.fromCharCode(0, 1, 0, 0)) {
            c.outlinesFormat = "truetype";
          } else {
            if ("OTTO" !== f) {
              throw Error("Unsupported OpenType flavor " + e);
            }
            c.outlinesFormat = "cff";
          }
          f = e = l.getUShort(b, 12);
          for (var k = [], n = 44, q = 0; f > q; q += 1) {
            var v = l.getTag(b, n), w = l.getULong(b, n + 4), P = l.getULong(b, n + 8), ea = l.getULong(b, n + 12);
            k.push({tag:v, offset:w, compression:ea > P ? "WOFF" : !1, compressedLength:P, originalLength:ea});
            n += 20;
          }
          f = k;
        }
      }
      for (k = 0; e > k; k += 1) {
        switch(n = f[k], n.tag) {
          case "cmap":
            n = r(b, n);
            c.tables.cmap = x.parse(n.data, n.offset);
            c.encoding = new m.CmapEncoding(c.tables.cmap);
            break;
          case "fvar":
            var ha = n;
            break;
          case "head":
            n = r(b, n);
            c.tables.head = B.parse(n.data, n.offset);
            c.unitsPerEm = c.tables.head.unitsPerEm;
            var V = c.tables.head.indexToLocFormat;
            break;
          case "hhea":
            n = r(b, n);
            c.tables.hhea = D.parse(n.data, n.offset);
            c.ascender = c.tables.hhea.ascender;
            c.descender = c.tables.hhea.descender;
            c.numberOfHMetrics = c.tables.hhea.numberOfHMetrics;
            break;
          case "hmtx":
            var la = n;
            break;
          case "ltag":
            n = r(b, n);
            var ba = E.parse(n.data, n.offset);
            break;
          case "maxp":
            n = r(b, n);
            c.tables.maxp = Q.parse(n.data, n.offset);
            c.numGlyphs = c.tables.maxp.numGlyphs;
            break;
          case "name":
            var ja = n;
            break;
          case "OS/2":
            n = r(b, n);
            c.tables.os2 = M.parse(n.data, n.offset);
            break;
          case "post":
            n = r(b, n);
            c.tables.post = L.parse(n.data, n.offset);
            c.glyphNames = new m.GlyphNames(c.tables.post);
            break;
          case "glyf":
            var pa = n;
            break;
          case "loca":
            var oa = n;
            break;
          case "CFF ":
            var ma = n;
            break;
          case "kern":
            var ua = n;
            break;
          case "GPOS":
            var Da = n;
            break;
          case "GSUB":
            var Pa = n;
            break;
          case "meta":
            var Ba = n;
        }
      }
      ja = r(b, ja);
      if (c.tables.name = K.parse(ja.data, ja.offset, ba), c.names = c.tables.name, pa && oa) {
        V = 0 === V, oa = r(b, oa), oa = H.parse(oa.data, oa.offset, c.numGlyphs, V), pa = r(b, pa), c.glyphs = u.parse(pa.data, pa.offset, oa, c);
      } else {
        if (!ma) {
          throw Error("Font doesn't contain TrueType or CFF outlines.");
        }
        pa = r(b, ma);
        z.parse(pa.data, pa.offset, c);
      }
      la = r(b, la);
      (F.parse(la.data, la.offset, c.numberOfHMetrics, c.numGlyphs, c.glyphs), m.addGlyphNames(c), ua) ? (ua = r(b, ua), c.kerningPairs = C.parse(ua.data, ua.offset)) : c.kerningPairs = {};
      Da && (Da = r(b, Da), y.parse(Da.data, Da.offset, c));
      Pa && (Pa = r(b, Pa), c.tables.gsub = A.parse(Pa.data, Pa.offset));
      ha && (ha = r(b, ha), c.tables.fvar = p.parse(ha.data, ha.offset, c.names));
      Ba && (Ba = r(b, Ba), c.tables.meta = I.parse(Ba.data, Ba.offset), c.metas = c.tables.meta);
      return c;
    }
    var n = c("tiny-inflate"), m = c("./encoding"), d = c("./font");
    k = c("./glyph");
    var l = c("./parse"), v = c("./path"), w = c("./util"), x = c("./tables/cmap"), z = c("./tables/cff"), p = c("./tables/fvar"), u = c("./tables/glyf"), y = c("./tables/gpos"), A = c("./tables/gsub"), B = c("./tables/head"), D = c("./tables/hhea"), F = c("./tables/hmtx"), C = c("./tables/kern"), E = c("./tables/ltag"), H = c("./tables/loca"), Q = c("./tables/maxp"), K = c("./tables/name"), M = c("./tables/os2"), L = c("./tables/post"), I = c("./tables/meta");
    b._parse = l;
    b.Font = d.Font;
    b.Glyph = k.Glyph;
    b.Path = v.Path;
    b.parse = q;
    b.load = function(b, c) {
      ("undefined" == typeof window ? e : f)(b, function(b, d) {
        if (b) {
          return c(b);
        }
        try {
          var e = q(d);
        } catch (S) {
          return c(S, null);
        }
        return c(null, e);
      });
    };
    b.loadSync = function(b) {
      b = c("fs").readFileSync(b);
      return q(w.nodeBufferToArrayBuffer(b));
    };
  }, {"./encoding":4, "./font":5, "./glyph":6, "./parse":10, "./path":11, "./tables/cff":14, "./tables/cmap":15, "./tables/fvar":16, "./tables/glyf":17, "./tables/gpos":18, "./tables/gsub":19, "./tables/head":20, "./tables/hhea":21, "./tables/hmtx":22, "./tables/kern":23, "./tables/loca":24, "./tables/ltag":25, "./tables/maxp":26, "./tables/meta":27, "./tables/name":28, "./tables/os2":29, "./tables/post":30, "./util":33, fs:void 0, "tiny-inflate":1}], 10:[function(c, k, b) {
    function e(b, c) {
      return b.getUint16(c, !1);
    }
    function f(b, c) {
      this.data = b;
      this.offset = c;
      this.relativeOffset = 0;
    }
    var h = c("./check");
    b.getByte = function(b, c) {
      return b.getUint8(c);
    };
    b.getCard8 = b.getByte;
    b.getUShort = b.getCard16 = e;
    b.getShort = function(b, c) {
      return b.getInt16(c, !1);
    };
    b.getULong = function(b, c) {
      return b.getUint32(c, !1);
    };
    b.getFixed = function(b, c) {
      var d = b.getInt16(c, !1);
      b = b.getUint16(c + 2, !1);
      return d + b / 65535;
    };
    b.getTag = function(b, c) {
      for (var d = "", e = c; c + 4 > e; e += 1) {
        d += String.fromCharCode(b.getInt8(e));
      }
      return d;
    };
    b.getOffset = function(b, c, d) {
      for (var e = 0, f = 0; d > f; f += 1) {
        e <<= 8, e += b.getUint8(c + f);
      }
      return e;
    };
    b.getBytes = function(b, c, d) {
      for (var e = []; d > c; c += 1) {
        e.push(b.getUint8(c));
      }
      return e;
    };
    b.bytesToString = function(b) {
      for (var c = "", d = 0; d < b.length; d += 1) {
        c += String.fromCharCode(b[d]);
      }
      return c;
    };
    var r = {"byte":1, uShort:2, "short":2, uLong:4, fixed:4, longDateTime:8, tag:4};
    f.prototype.parseByte = function() {
      var b = this.data.getUint8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    f.prototype.parseChar = function() {
      var b = this.data.getInt8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    f.prototype.parseCard8 = f.prototype.parseByte;
    f.prototype.parseUShort = function() {
      var b = this.data.getUint16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseCard16 = f.prototype.parseUShort;
    f.prototype.parseSID = f.prototype.parseUShort;
    f.prototype.parseOffset16 = f.prototype.parseUShort;
    f.prototype.parseShort = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseF2Dot14 = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseULong = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    f.prototype.parseFixed = function() {
      var c = b.getFixed(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    f.prototype.parseString = function(b) {
      var c = this.data, d = this.offset + this.relativeOffset, e = "";
      this.relativeOffset += b;
      for (var f = 0; b > f; f++) {
        e += String.fromCharCode(c.getUint8(d + f));
      }
      return e;
    };
    f.prototype.parseTag = function() {
      return this.parseString(4);
    };
    f.prototype.parseLongDateTime = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset + 4);
      return c -= 2082844800, this.relativeOffset += 8, c;
    };
    f.prototype.parseVersion = function() {
      var b = e(this.data, this.offset + this.relativeOffset), c = e(this.data, this.offset + this.relativeOffset + 2);
      return this.relativeOffset += 4, b + c / 4096 / 10;
    };
    f.prototype.skip = function(b, c) {
      void 0 === c && (c = 1);
      this.relativeOffset += r[b] * c;
    };
    f.prototype.parseOffset16List = f.prototype.parseUShortList = function(b) {
      void 0 === b && (b = this.parseUShort());
      for (var c = Array(b), d = this.data, e = this.offset + this.relativeOffset, f = 0; b > f; f++) {
        c[f] = d.getUint16(e), e += 2;
      }
      return this.relativeOffset += 2 * b, c;
    };
    f.prototype.parseList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var d = Array(b), e = 0; b > e; e++) {
        d[e] = c.call(this);
      }
      return d;
    };
    f.prototype.parseRecordList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var d = Array(b), e = Object.keys(c), f = 0; b > f; f++) {
        for (var h = {}, k = 0; k < e.length; k++) {
          var m = e[k];
          h[m] = c[m].call(this);
        }
        d[f] = h;
      }
      return d;
    };
    f.prototype.parseStruct = function(b) {
      if ("function" == typeof b) {
        return b.call(this);
      }
      for (var c = Object.keys(b), d = {}, e = 0; e < c.length; e++) {
        var f = c[e];
        d[f] = b[f].call(this);
      }
      return d;
    };
    f.prototype.parsePointer = function(b) {
      var c = this.parseOffset16();
      return 0 < c ? (new f(this.data, this.offset + c)).parseStruct(b) : void 0;
    };
    f.prototype.parseListOfLists = function(b) {
      for (var c = this.parseOffset16List(), d = c.length, e = this.relativeOffset, f = Array(d), h = 0; d > h; h++) {
        var k = c[h];
        if (0 !== k) {
          if (this.relativeOffset = k, b) {
            for (var n = this.parseOffset16List(), p = Array(n.length), q = 0; q < n.length; q++) {
              this.relativeOffset = k + n[q], p[q] = b.call(this);
            }
            f[h] = p;
          } else {
            f[h] = this.parseUShortList();
          }
        } else {
          f[h] = void 0;
        }
      }
      return this.relativeOffset = e, f;
    };
    f.prototype.parseCoverage = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort(), d = this.parseUShort();
      if (1 === c) {
        return {format:1, glyphs:this.parseUShortList(d)};
      }
      if (2 === c) {
        b = Array(d);
        for (c = 0; d > c; c++) {
          b[c] = {start:this.parseUShort(), end:this.parseUShort(), index:this.parseUShort()};
        }
        return {format:2, ranges:b};
      }
      h.assert(!1, "0x" + b.toString(16) + ": Coverage format must be 1 or 2.");
    };
    f.prototype.parseClassDef = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {format:1, startGlyph:this.parseUShort(), classes:this.parseUShortList()} : 2 === c ? {format:2, ranges:this.parseRecordList({start:f.uShort, end:f.uShort, classId:f.uShort})} : void h.assert(!1, "0x" + b.toString(16) + ": ClassDef format must be 1 or 2.");
    };
    f.list = function(b, c) {
      return function() {
        return this.parseList(b, c);
      };
    };
    f.recordList = function(b, c) {
      return function() {
        return this.parseRecordList(b, c);
      };
    };
    f.pointer = function(b) {
      return function() {
        return this.parsePointer(b);
      };
    };
    f.tag = f.prototype.parseTag;
    f.byte = f.prototype.parseByte;
    f.uShort = f.offset16 = f.prototype.parseUShort;
    f.uShortList = f.prototype.parseUShortList;
    f.struct = f.prototype.parseStruct;
    f.coverage = f.prototype.parseCoverage;
    f.classDef = f.prototype.parseClassDef;
    var q = {reserved:f.uShort, reqFeatureIndex:f.uShort, featureIndexes:f.uShortList};
    f.prototype.parseScriptList = function() {
      return this.parsePointer(f.recordList({tag:f.tag, script:f.pointer({defaultLangSys:f.pointer(q), langSysRecords:f.recordList({tag:f.tag, langSys:f.pointer(q)})})}));
    };
    f.prototype.parseFeatureList = function() {
      return this.parsePointer(f.recordList({tag:f.tag, feature:f.pointer({featureParams:f.offset16, lookupListIndexes:f.uShortList})}));
    };
    f.prototype.parseLookupList = function(b) {
      return this.parsePointer(f.list(f.pointer(function() {
        var c = this.parseUShort();
        h.argument(1 <= c && 8 >= c, "GSUB lookup type " + c + " unknown.");
        var d = this.parseUShort(), e = 16 & d;
        return {lookupType:c, lookupFlag:d, subtables:this.parseList(f.pointer(b[c])), markFilteringSet:e ? this.parseUShort() : void 0};
      })));
    };
    b.Parser = f;
  }, {"./check":2}], 11:[function(c, k, b) {
    function e() {
      this.commands = [];
      this.fill = "black";
      this.stroke = null;
      this.strokeWidth = 1;
    }
    e.prototype.moveTo = function(b, c) {
      this.commands.push({type:"M", x:b, y:c});
    };
    e.prototype.lineTo = function(b, c) {
      this.commands.push({type:"L", x:b, y:c});
    };
    e.prototype.curveTo = e.prototype.bezierCurveTo = function(b, c, e, k, n, m) {
      this.commands.push({type:"C", x1:b, y1:c, x2:e, y2:k, x:n, y:m});
    };
    e.prototype.quadTo = e.prototype.quadraticCurveTo = function(b, c, e, k) {
      this.commands.push({type:"Q", x1:b, y1:c, x:e, y:k});
    };
    e.prototype.close = e.prototype.closePath = function() {
      this.commands.push({type:"Z"});
    };
    e.prototype.extend = function(b) {
      b.commands && (b = b.commands);
      Array.prototype.push.apply(this.commands, b);
    };
    e.prototype.draw = function(b) {
      b.beginPath();
      for (var c = 0; c < this.commands.length; c += 1) {
        var e = this.commands[c];
        "M" === e.type ? b.moveTo(e.x, e.y) : "L" === e.type ? b.lineTo(e.x, e.y) : "C" === e.type ? b.bezierCurveTo(e.x1, e.y1, e.x2, e.y2, e.x, e.y) : "Q" === e.type ? b.quadraticCurveTo(e.x1, e.y1, e.x, e.y) : "Z" === e.type && b.closePath();
      }
      this.fill && (b.fillStyle = this.fill, b.fill());
      this.stroke && (b.strokeStyle = this.stroke, b.lineWidth = this.strokeWidth, b.stroke());
    };
    e.prototype.toPathData = function(b) {
      function c() {
        for (var c = "", d = 0; d < arguments.length; d += 1) {
          var e = arguments[d];
          0 <= e && 0 < d && (c += " ");
          c += Math.round(e) === e ? "" + Math.round(e) : e.toFixed(b);
        }
        return c;
      }
      b = void 0 !== b ? b : 2;
      for (var e = "", f = 0; f < this.commands.length; f += 1) {
        var k = this.commands[f];
        "M" === k.type ? e += "M" + c(k.x, k.y) : "L" === k.type ? e += "L" + c(k.x, k.y) : "C" === k.type ? e += "C" + c(k.x1, k.y1, k.x2, k.y2, k.x, k.y) : "Q" === k.type ? e += "Q" + c(k.x1, k.y1, k.x, k.y) : "Z" === k.type && (e += "Z");
      }
      return e;
    };
    e.prototype.toSVG = function(b) {
      var c = '<path d="';
      return c += this.toPathData(b), c += '"', this.fill && "black" !== this.fill && (c += null === this.fill ? ' fill="none"' : ' fill="' + this.fill + '"'), this.stroke && (c += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), c + "/>";
    };
    b.Path = e;
  }, {}], 12:[function(c, k, b) {
    function e(b, c, e) {
      b = b.subtables;
      for (var f = 0; f < b.length; f++) {
        var h = b[f];
        if (h.substFormat === c) {
          return h;
        }
      }
      return e ? (b.push(e), e) : void 0;
    }
    var f = c("./check");
    c = c("./layout");
    b = function(b) {
      this.font = b;
    };
    b.prototype = c;
    b.prototype.getGsubTable = function(b) {
      var c = this.font.tables.gsub;
      return !c && b && (this.font.tables.gsub = c = {version:1, scripts:[{tag:"DFLT", script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}}], features:[], lookups:[]}), c;
    };
    b.prototype.getSingle = function(b, c, e) {
      var f = [];
      b = this.getLookupTable(c, e, b, 1);
      if (!b) {
        return f;
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        e = this.expandCoverage(h.coverage);
        if (1 === h.substFormat) {
          var d = h.deltaGlyphId;
          for (h = 0; h < e.length; h++) {
            var k = e[h];
            f.push({sub:k, by:k + d});
          }
        } else {
          for (d = h.substitute, h = 0; h < e.length; h++) {
            f.push({sub:e[h], by:d[h]});
          }
        }
      }
      return f;
    };
    b.prototype.getAlternates = function(b, c, e) {
      var f = [];
      b = this.getLookupTable(c, e, b, 3);
      if (!b) {
        return f;
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        e = this.expandCoverage(h.coverage);
        h = h.alternateSets;
        for (var d = 0; d < e.length; d++) {
          f.push({sub:e[d], by:h[d]});
        }
      }
      return f;
    };
    b.prototype.getLigatures = function(b, c, e) {
      var f = [];
      b = this.getLookupTable(c, e, b, 4);
      if (!b) {
        return [];
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        e = this.expandCoverage(h.coverage);
        h = h.ligatureSets;
        for (var d = 0; d < e.length; d++) {
          for (var k = e[d], q = h[d], r = 0; r < q.length; r++) {
            var x = q[r];
            f.push({sub:[k].concat(x.components), by:x.ligGlyph});
          }
        }
      }
      return f;
    };
    b.prototype.addSingle = function(b, c, k, n) {
      b = this.getLookupTable(k, n, b, 1, !0);
      b = e(b, 2, {substFormat:2, coverage:{format:1, glyphs:[]}, substitute:[]});
      f.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = c.sub;
      n = this.binSearch(b.coverage.glyphs, k);
      0 > n && (n = -1 - n, b.coverage.glyphs.splice(n, 0, k), b.substitute.splice(n, 0, 0));
      b.substitute[n] = c.by;
    };
    b.prototype.addAlternate = function(b, c, k, n) {
      b = this.getLookupTable(k, n, b, 3, !0);
      b = e(b, 1, {substFormat:1, coverage:{format:1, glyphs:[]}, alternateSets:[]});
      f.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = c.sub;
      n = this.binSearch(b.coverage.glyphs, k);
      0 > n && (n = -1 - n, b.coverage.glyphs.splice(n, 0, k), b.alternateSets.splice(n, 0, 0));
      b.alternateSets[n] = c.by;
    };
    b.prototype.addLigature = function(b, c, e, k) {
      b = this.getLookupTable(e || "DFLT", k || "DFLT", b, 4, !0);
      (e = b.subtables[0]) || (e = {substFormat:1, coverage:{format:1, glyphs:[]}, ligatureSets:[]}, b.subtables[0] = e);
      f.assert(1 === e.coverage.format, "Ligature: unable to modify coverage table format " + e.coverage.format);
      k = c.sub[0];
      b = c.sub.slice(1);
      c = {ligGlyph:c.by, components:b};
      var h = this.binSearch(e.coverage.glyphs, k);
      if (0 <= h) {
        e = e.ligatureSets[h];
        for (k = 0; k < e.length; k++) {
          a: {
            h = e[k].components;
            var d = h.length;
            if (d !== b.length) {
              h = !1;
            } else {
              for (var l = 0; d > l; l++) {
                if (h[l] !== b[l]) {
                  h = !1;
                  break a;
                }
              }
              h = !0;
            }
          }
          if (h) {
            return;
          }
        }
        e.push(c);
      } else {
        h = -1 - h, e.coverage.glyphs.splice(h, 0, k), e.ligatureSets.splice(h, 0, [c]);
      }
    };
    b.prototype.getFeature = function(b, c, e) {
      if (c = c || "DFLT", e = e || "DFLT", /ss\d\d/.test(b)) {
        return this.getSingle(b, c, e);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return this.getSingle(b, c, e).concat(this.getAlternates(b, c, e));
        case "dlig":
        case "liga":
        case "rlig":
          return this.getLigatures(b, c, e);
      }
    };
    b.prototype.add = function(b, c, e, f) {
      if (e = e || "DFLT", f = f || "DFLT", /ss\d\d/.test(b)) {
        return this.addSingle(b, c, e, f);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return "number" == typeof c.by ? this.addSingle(b, c, e, f) : this.addAlternate(b, c, e, f);
        case "dlig":
        case "liga":
        case "rlig":
          return this.addLigature(b, c, e, f);
      }
    };
    k.exports = b;
  }, {"./check":2, "./layout":8}], 13:[function(c, k, b) {
    function e(b, c, d) {
      var e;
      for (e = 0; e < c.length; e += 1) {
        var f = c[e];
        this[f.name] = f.value;
      }
      if (this.tableName = b, this.fields = c, d) {
        for (b = Object.keys(d), e = 0; e < b.length; e += 1) {
          c = b[e], f = d[c], void 0 !== this[c] && (this[c] = f);
        }
      }
    }
    function f(b, c, d) {
      void 0 === d && (d = c.length);
      var e = Array(c.length + 1);
      e[0] = {name:b + "Count", type:"USHORT", value:d};
      for (d = 0; d < c.length; d++) {
        e[d + 1] = {name:b + d, type:"USHORT", value:c[d]};
      }
      return e;
    }
    function h(b, c, d) {
      var e = c.length, f = Array(e + 1);
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (var h = 0; e > h; h++) {
        f[h + 1] = {name:b + h, type:"TABLE", value:d(c[h], h)};
      }
      return f;
    }
    function r(b, c, d) {
      var e = c.length, f = [];
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (b = 0; e > b; b++) {
        f = f.concat(d(c[b], b));
      }
      return f;
    }
    function q(b) {
      1 === b.format ? e.call(this, "coverageTable", [{name:"coverageFormat", type:"USHORT", value:1}].concat(f("glyph", b.glyphs))) : l.assert(!1, "Can't create coverage table format 2 yet.");
    }
    function n(b) {
      e.call(this, "scriptListTable", r("scriptRecord", b, function(b, c) {
        var d = b.script, h = d.defaultLangSys;
        return l.assert(!!h, "Unable to write GSUB: script " + b.tag + " has no default language system."), [{name:"scriptTag" + c, type:"TAG", value:b.tag}, {name:"script" + c, type:"TABLE", value:new e("scriptTable", [{name:"defaultLangSys", type:"TABLE", value:new e("defaultLangSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:h.reqFeatureIndex}].concat(f("featureIndex", h.featureIndexes)))}].concat(r("langSys", d.langSysRecords, function(b, c) {
          var d = b.langSys;
          return [{name:"langSysTag" + c, type:"TAG", value:b.tag}, {name:"langSys" + c, type:"TABLE", value:new e("langSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:d.reqFeatureIndex}].concat(f("featureIndex", d.featureIndexes)))}];
        })))}];
      }));
    }
    function m(b) {
      e.call(this, "featureListTable", r("featureRecord", b, function(b, c) {
        var d = b.feature;
        return [{name:"featureTag" + c, type:"TAG", value:b.tag}, {name:"feature" + c, type:"TABLE", value:new e("featureTable", [{name:"featureParams", type:"USHORT", value:d.featureParams}].concat(f("lookupListIndex", d.lookupListIndexes)))}];
      }));
    }
    function d(b, c) {
      e.call(this, "lookupListTable", h("lookup", b, function(b) {
        var d = c[b.lookupType];
        return l.assert(!!d, "Unable to write GSUB lookup type " + b.lookupType + " tables."), new e("lookupTable", [{name:"lookupType", type:"USHORT", value:b.lookupType}, {name:"lookupFlag", type:"USHORT", value:b.lookupFlag}].concat(h("subtable", b.subtables, d)));
      }));
    }
    var l = c("./check"), v = c("./types").encode, w = c("./types").sizeOf;
    e.prototype.encode = function() {
      return v.TABLE(this);
    };
    e.prototype.sizeOf = function() {
      return w.TABLE(this);
    };
    q.prototype = Object.create(e.prototype);
    q.prototype.constructor = q;
    n.prototype = Object.create(e.prototype);
    n.prototype.constructor = n;
    m.prototype = Object.create(e.prototype);
    m.prototype.constructor = m;
    d.prototype = Object.create(e.prototype);
    d.prototype.constructor = d;
    b.Record = b.Table = e;
    b.Coverage = q;
    b.ScriptList = n;
    b.FeatureList = m;
    b.LookupList = d;
    b.ushortList = f;
    b.tableList = h;
    b.recordList = r;
  }, {"./check":2, "./types":32}], 14:[function(c, k, b) {
    function e(b, c) {
      if (b === c) {
        return !0;
      }
      if (Array.isArray(b) && Array.isArray(c)) {
        if (b.length !== c.length) {
          return !1;
        }
        for (var d = 0; d < b.length; d += 1) {
          if (!e(b[d], c[d])) {
            return !1;
          }
        }
        return !0;
      }
      return !1;
    }
    function f(b, c, d) {
      var e, f = [], h = [];
      var k = u.getCard16(b, c);
      if (0 !== k) {
        var l = u.getByte(b, c + 2);
        var m = c + (k + 1) * l + 2;
        var n = c + 3;
        for (e = 0; k + 1 > e; e += 1) {
          f.push(u.getOffset(b, n, l)), n += l;
        }
        k = m + f[k];
      } else {
        k = c + 2;
      }
      for (e = 0; e < f.length - 1; e += 1) {
        l = u.getBytes(b, m + f[e], m + f[e + 1]), d && (l = d(l)), h.push(l);
      }
      return {objects:h, startOffset:c, endOffset:k};
    }
    function h(b, c) {
      var d, e, f, h;
      if (28 === c) {
        return d = b.parseByte(), e = b.parseByte(), d << 8 | e;
      }
      if (29 === c) {
        return d = b.parseByte(), e = b.parseByte(), f = b.parseByte(), h = b.parseByte(), d << 24 | e << 16 | f << 8 | h;
      }
      if (30 === c) {
        c = "";
        for (d = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];;) {
          f = b.parseByte();
          e = f >> 4;
          f &= 15;
          if (15 === e) {
            break;
          }
          if (c += d[e], 15 === f) {
            break;
          }
          c += d[f];
        }
        return parseFloat(c);
      }
      if (32 <= c && 246 >= c) {
        return c - 139;
      }
      if (247 <= c && 250 >= c) {
        return d = b.parseByte(), 256 * (c - 247) + d + 108;
      }
      if (251 <= c && 254 >= c) {
        return d = b.parseByte(), 256 * -(c - 251) - d - 108;
      }
      throw Error("Invalid b0 " + c);
    }
    function r(b, c, d) {
      var e = new u.Parser(b, void 0 !== c ? c : 0);
      c = [];
      var f = [];
      for (d = void 0 !== d ? d : b.length; e.relativeOffset < d;) {
        b = e.parseByte(), 21 >= b ? (12 === b && (b = 1200 + e.parseByte()), c.push([b, f]), f = []) : f.push(h(e, b));
      }
      d = {};
      for (b = 0; b < c.length; b += 1) {
        e = c[b][0];
        f = c[b][1];
        if (f = 1 === f.length ? f[0] : f, d.hasOwnProperty(e)) {
          throw Error("Object " + d + " already has key " + e);
        }
        d[e] = f;
      }
      return d;
    }
    function q(b, c) {
      return 390 >= c ? z.cffStandardStrings[c] : b[c - 391];
    }
    function n(b, c, d) {
      for (var e = {}, f = 0; f < c.length; f += 1) {
        var h = c[f], k = b[h.op];
        void 0 === k && (k = void 0 !== h.value ? h.value : null);
        "SID" === h.type && (k = q(d, k));
        e[h.name] = k;
      }
      return e;
    }
    function m(b, c, d) {
      function e(b, c) {
        w && p.closePath();
        p.moveTo(b, c);
        w = !0;
      }
      function f() {
        0 !== q.length % 2 && !v && (u = q.shift() + b.nominalWidthX);
        r += q.length >> 1;
        q.length = 0;
        v = !0;
      }
      function h(d) {
        for (var y, A, B, C, D, F, E, L, I, H, P = 0; P < d.length;) {
          switch(D = d[P], P += 1, D) {
            case 1:
              f();
              break;
            case 3:
              f();
              break;
            case 4:
              1 < q.length && !v && (u = q.shift() + b.nominalWidthX, v = !0);
              z += q.pop();
              e(x, z);
              break;
            case 5:
              for (; 0 < q.length;) {
                x += q.shift(), z += q.shift(), p.lineTo(x, z);
              }
              break;
            case 6:
              for (; 0 < q.length && (x += q.shift(), p.lineTo(x, z), 0 !== q.length);) {
                z += q.shift(), p.lineTo(x, z);
              }
              break;
            case 7:
              for (; 0 < q.length && (z += q.shift(), p.lineTo(x, z), 0 !== q.length);) {
                x += q.shift(), p.lineTo(x, z);
              }
              break;
            case 8:
              for (; 0 < q.length;) {
                k = x + q.shift(), l = z + q.shift(), m = k + q.shift(), n = l + q.shift(), x = m + q.shift(), z = n + q.shift(), p.curveTo(k, l, m, n, x, z);
              }
              break;
            case 10:
              D = q.pop() + b.subrsBias;
              (D = b.subrs[D]) && h(D);
              break;
            case 11:
              return;
            case 12:
              switch(D = d[P], P += 1, D) {
                case 35:
                  k = x + q.shift();
                  l = z + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  F = n + q.shift();
                  E = D + q.shift();
                  L = F + q.shift();
                  I = E + q.shift();
                  H = L + q.shift();
                  x = I + q.shift();
                  z = H + q.shift();
                  q.shift();
                  p.curveTo(k, l, m, n, D, F);
                  p.curveTo(E, L, I, H, x, z);
                  break;
                case 34:
                  k = x + q.shift();
                  l = z;
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  F = n;
                  E = D + q.shift();
                  L = n;
                  I = E + q.shift();
                  H = z;
                  x = I + q.shift();
                  p.curveTo(k, l, m, n, D, F);
                  p.curveTo(E, L, I, H, x, z);
                  break;
                case 36:
                  k = x + q.shift();
                  l = z + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  F = n;
                  E = D + q.shift();
                  L = n;
                  I = E + q.shift();
                  H = L + q.shift();
                  x = I + q.shift();
                  p.curveTo(k, l, m, n, D, F);
                  p.curveTo(E, L, I, H, x, z);
                  break;
                case 37:
                  k = x + q.shift();
                  l = z + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  F = n + q.shift();
                  E = D + q.shift();
                  L = F + q.shift();
                  I = E + q.shift();
                  H = L + q.shift();
                  Math.abs(I - x) > Math.abs(H - z) ? x = I + q.shift() : z = H + q.shift();
                  p.curveTo(k, l, m, n, D, F);
                  p.curveTo(E, L, I, H, x, z);
                  break;
                default:
                  console.log("Glyph " + c.index + ": unknown operator 1200" + D), q.length = 0;
              }break;
            case 14:
              0 < q.length && !v && (u = q.shift() + b.nominalWidthX, v = !0);
              w && (p.closePath(), w = !1);
              break;
            case 18:
              f();
              break;
            case 19:
            case 20:
              f();
              P += r + 7 >> 3;
              break;
            case 21:
              2 < q.length && !v && (u = q.shift() + b.nominalWidthX, v = !0);
              z += q.pop();
              x += q.pop();
              e(x, z);
              break;
            case 22:
              1 < q.length && !v && (u = q.shift() + b.nominalWidthX, v = !0);
              x += q.pop();
              e(x, z);
              break;
            case 23:
              f();
              break;
            case 24:
              for (; 2 < q.length;) {
                k = x + q.shift(), l = z + q.shift(), m = k + q.shift(), n = l + q.shift(), x = m + q.shift(), z = n + q.shift(), p.curveTo(k, l, m, n, x, z);
              }
              x += q.shift();
              z += q.shift();
              p.lineTo(x, z);
              break;
            case 25:
              for (; 6 < q.length;) {
                x += q.shift(), z += q.shift(), p.lineTo(x, z);
              }
              k = x + q.shift();
              l = z + q.shift();
              m = k + q.shift();
              n = l + q.shift();
              x = m + q.shift();
              z = n + q.shift();
              p.curveTo(k, l, m, n, x, z);
              break;
            case 26:
              for (q.length % 2 && (x += q.shift()); 0 < q.length;) {
                k = x, l = z + q.shift(), m = k + q.shift(), n = l + q.shift(), x = m, z = n + q.shift(), p.curveTo(k, l, m, n, x, z);
              }
              break;
            case 27:
              for (q.length % 2 && (z += q.shift()); 0 < q.length;) {
                k = x + q.shift(), l = z, m = k + q.shift(), n = l + q.shift(), x = m + q.shift(), z = n, p.curveTo(k, l, m, n, x, z);
              }
              break;
            case 28:
              y = d[P];
              A = d[P + 1];
              q.push((y << 24 | A << 16) >> 16);
              P += 2;
              break;
            case 29:
              D = q.pop() + b.gsubrsBias;
              (D = b.gsubrs[D]) && h(D);
              break;
            case 30:
              for (; 0 < q.length && (k = x, l = z + q.shift(), m = k + q.shift(), n = l + q.shift(), x = m + q.shift(), z = n + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, x, z), 0 !== q.length);) {
                k = x + q.shift(), l = z, m = k + q.shift(), n = l + q.shift(), z = n + q.shift(), x = m + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, x, z);
              }
              break;
            case 31:
              for (; 0 < q.length && (k = x + q.shift(), l = z, m = k + q.shift(), n = l + q.shift(), z = n + q.shift(), x = m + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, x, z), 0 !== q.length);) {
                k = x, l = z + q.shift(), m = k + q.shift(), n = l + q.shift(), x = m + q.shift(), z = n + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, x, z);
              }
              break;
            default:
              32 > D ? console.log("Glyph " + c.index + ": unknown operator " + D) : 247 > D ? q.push(D - 139) : 251 > D ? (y = d[P], P += 1, q.push(256 * (D - 247) + y + 108)) : 255 > D ? (y = d[P], P += 1, q.push(256 * -(D - 251) - y - 108)) : (y = d[P], A = d[P + 1], B = d[P + 2], C = d[P + 3], P += 4, q.push((y << 24 | A << 16 | B << 8 | C) / 65536));
          }
        }
      }
      var k, l, m, n, p = new y.Path, q = [], r = 0, v = !1, u = b.defaultWidthX, w = !1, x = 0, z = 0;
      return h(d), c.advanceWidth = u, p;
    }
    function d(b) {
      return 1240 > b.length ? 107 : 33900 > b.length ? 1131 : 32768;
    }
    function l(b, c) {
      var d, e = z.cffStandardStrings.indexOf(b);
      return e = c.indexOf(b), 0 <= e ? d = e + z.cffStandardStrings.length : (d = z.cffStandardStrings.length + c.length, c.push(b)), d;
    }
    function v(b, c, d) {
      for (var f = {}, h = 0; h < b.length; h += 1) {
        var k = b[h], m = c[k.name];
        void 0 === m || e(m, k.value) || ("SID" === k.type && (m = l(m, d)), f[k.op] = {name:k.name, type:k.type, value:m});
      }
      return f;
    }
    function w(b, c) {
      var d = new A.Record("Top DICT", [{name:"dict", type:"DICT", value:{}}]);
      return d.dict = v(B, b, c), d;
    }
    function x(b) {
      var c = new A.Record("Top DICT INDEX", [{name:"topDicts", type:"INDEX", value:[]}]);
      return c.topDicts = [{name:"topDict_0", type:"TABLE", value:b}], c;
    }
    var z = c("../encoding"), p = c("../glyphset"), u = c("../parse"), y = c("../path"), A = c("../table"), B = [{name:"version", op:0, type:"SID"}, {name:"notice", op:1, type:"SID"}, {name:"copyright", op:1200, type:"SID"}, {name:"fullName", op:2, type:"SID"}, {name:"familyName", op:3, type:"SID"}, {name:"weight", op:4, type:"SID"}, {name:"isFixedPitch", op:1201, type:"number", value:0}, {name:"italicAngle", op:1202, type:"number", value:0}, {name:"underlinePosition", op:1203, type:"number", value:-100}, 
    {name:"underlineThickness", op:1204, type:"number", value:50}, {name:"paintType", op:1205, type:"number", value:0}, {name:"charstringType", op:1206, type:"number", value:2}, {name:"fontMatrix", op:1207, type:"real real real real real real".split(" "), value:[.001, 0, 0, .001, 0, 0]}, {name:"uniqueId", op:13, type:"number"}, {name:"fontBBox", op:5, type:["number", "number", "number", "number"], value:[0, 0, 0, 0]}, {name:"strokeWidth", op:1208, type:"number", value:0}, {name:"xuid", op:14, type:[], 
    value:null}, {name:"charset", op:15, type:"offset", value:0}, {name:"encoding", op:16, type:"offset", value:0}, {name:"charStrings", op:17, type:"offset", value:0}, {name:"private", op:18, type:["number", "offset"], value:[0, 0]}], D = [{name:"subrs", op:19, type:"offset", value:0}, {name:"defaultWidthX", op:20, type:"number", value:0}, {name:"nominalWidthX", op:21, type:"number", value:0}];
    b.parse = function(b, c, e) {
      e.tables.cff = {};
      var h = {};
      h = (h.formatMajor = u.getCard8(b, c), h.formatMinor = u.getCard8(b, c + 1), h.size = u.getCard8(b, c + 2), h.offsetSize = u.getCard8(b, c + 3), h.startOffset = c, h.endOffset = c + 4, h);
      h = f(b, h.endOffset, u.bytesToString);
      h = f(b, h.endOffset);
      var k = f(b, h.endOffset, u.bytesToString), l = f(b, k.endOffset);
      e.gsubrs = l.objects;
      e.gsubrsBias = d(e.gsubrs);
      l = new DataView((new Uint8Array(h.objects[0])).buffer);
      h = k.objects;
      l = r(l, 0, l.byteLength);
      l = n(l, B, h);
      e.tables.cff.topDict = l;
      h = c + l["private"][1];
      var v = k.objects;
      var w = r(b, h, l["private"][0]);
      v = n(w, D, v);
      (e.defaultWidthX = v.defaultWidthX, e.nominalWidthX = v.nominalWidthX, 0 !== v.subrs) ? (h = f(b, h + v.subrs), e.subrs = h.objects, e.subrsBias = d(e.subrs)) : (e.subrs = [], e.subrsBias = 0);
      h = f(b, c + l.charStrings);
      e.nGlyphs = h.objects.length;
      v = e.nGlyphs;
      w = k.objects;
      var y = new u.Parser(b, c + l.charset);
      --v;
      k = [".notdef"];
      var x = y.parseCard8();
      if (0 === x) {
        for (x = 0; v > x; x += 1) {
          var A = y.parseSID();
          k.push(q(w, A));
        }
      } else {
        if (1 === x) {
          for (; k.length <= v;) {
            A = y.parseSID();
            var C = y.parseCard8();
            for (x = 0; C >= x; x += 1) {
              k.push(q(w, A)), A += 1;
            }
          }
        } else {
          if (2 !== x) {
            throw Error("Unknown charset format " + x);
          }
          for (; k.length <= v;) {
            for (A = y.parseSID(), C = y.parseCard16(), x = 0; C >= x; x += 1) {
              k.push(q(w, A)), A += 1;
            }
          }
        }
      }
      if (0 === l.encoding) {
        b = new z.CffEncoding(z.cffStandardEncoding, k);
      } else {
        if (1 === l.encoding) {
          b = new z.CffEncoding(z.cffExpertEncoding, k);
        } else {
          v = {};
          b = new u.Parser(b, c + l.encoding);
          c = b.parseCard8();
          if (0 === c) {
            for (w = b.parseCard8(), c = 0; w > c; c += 1) {
              l = b.parseCard8(), v[l] = c;
            }
          } else {
            if (1 !== c) {
              throw Error("Unknown encoding format " + c);
            }
            w = b.parseCard8();
            l = 1;
            for (c = 0; w > c; c += 1) {
              for (y = b.parseCard8(), x = b.parseCard8(), A = y; y + x >= A; A += 1) {
                v[A] = l, l += 1;
              }
            }
          }
          b = new z.CffEncoding(v, k);
        }
      }
      e.cffEncoding = b;
      e.encoding = e.encoding || e.cffEncoding;
      e.glyphs = new p.GlyphSet(e);
      for (b = 0; b < e.nGlyphs; b += 1) {
        e.glyphs.push(b, p.cffGlyphLoader(e, b, m, h.objects[b]));
      }
    };
    b.make = function(b, c) {
      var d = new A.Table("CFF ", [{name:"header", type:"RECORD"}, {name:"nameIndex", type:"RECORD"}, {name:"topDictIndex", type:"RECORD"}, {name:"stringIndex", type:"RECORD"}, {name:"globalSubrIndex", type:"RECORD"}, {name:"charsets", type:"RECORD"}, {name:"charStringsIndex", type:"RECORD"}, {name:"privateDict", type:"RECORD"}]), e = 1 / c.unitsPerEm;
      e = {version:c.version, fullName:c.fullName, familyName:c.familyName, weight:c.weightName, fontBBox:c.fontBBox || [0, 0, 0, 0], fontMatrix:[e, 0, 0, e, 0, 0], charset:999, encoding:0, charStrings:999, "private":[0, 999]};
      for (var f = [], h = 1; h < b.length; h += 1) {
        var k = b.get(h);
        f.push(k.name);
      }
      k = [];
      d.header = new A.Record("Header", [{name:"major", type:"Card8", value:1}, {name:"minor", type:"Card8", value:0}, {name:"hdrSize", type:"Card8", value:4}, {name:"major", type:"Card8", value:1}]);
      c = [c.postScriptName];
      h = new A.Record("Name INDEX", [{name:"names", type:"INDEX", value:[]}]);
      h.names = [];
      for (var m = 0; m < c.length; m += 1) {
        h.names.push({name:"name_" + m, type:"NAME", value:c[m]});
      }
      d.nameIndex = h;
      c = w(e, k);
      d.topDictIndex = x(c);
      d.globalSubrIndex = new A.Record("Global Subr INDEX", [{name:"subrs", type:"INDEX", value:[]}]);
      h = new A.Record("Charsets", [{name:"format", type:"Card8", value:0}]);
      for (m = 0; m < f.length; m += 1) {
        var n = l(f[m], k);
        h.fields.push({name:"glyph_" + m, type:"SID", value:n});
      }
      d.charsets = h;
      f = new A.Record("CharStrings INDEX", [{name:"charStrings", type:"INDEX", value:[]}]);
      for (h = 0; h < b.length; h += 1) {
        m = b.get(h);
        n = [];
        var q = m.path;
        n.push({name:"width", type:"NUMBER", value:m.advanceWidth});
        for (var p = 0, r = 0, u = 0; u < q.commands.length; u += 1) {
          var y = q.commands[u];
          if ("Q" === y.type) {
            var z = 1 / 3, B = 2 / 3;
            y = {type:"C", x:y.x, y:y.y, x1:z * p + B * y.x1, y1:z * r + B * y.y1, x2:z * y.x + B * y.x1, y2:z * y.y + B * y.y1};
          }
          if ("M" === y.type) {
            p = Math.round(y.x - p), r = Math.round(y.y - r), n.push({name:"dx", type:"NUMBER", value:p}), n.push({name:"dy", type:"NUMBER", value:r}), n.push({name:"rmoveto", type:"OP", value:21}), p = Math.round(y.x), r = Math.round(y.y);
          } else {
            if ("L" === y.type) {
              p = Math.round(y.x - p), r = Math.round(y.y - r), n.push({name:"dx", type:"NUMBER", value:p}), n.push({name:"dy", type:"NUMBER", value:r}), n.push({name:"rlineto", type:"OP", value:5}), p = Math.round(y.x), r = Math.round(y.y);
            } else {
              if ("C" === y.type) {
                z = Math.round(y.x1 - p);
                B = Math.round(y.y1 - r);
                var C = Math.round(y.x2 - y.x1), F = Math.round(y.y2 - y.y1);
                p = Math.round(y.x - y.x2);
                r = Math.round(y.y - y.y2);
                n.push({name:"dx1", type:"NUMBER", value:z});
                n.push({name:"dy1", type:"NUMBER", value:B});
                n.push({name:"dx2", type:"NUMBER", value:C});
                n.push({name:"dy2", type:"NUMBER", value:F});
                n.push({name:"dx", type:"NUMBER", value:p});
                n.push({name:"dy", type:"NUMBER", value:r});
                n.push({name:"rrcurveto", type:"OP", value:8});
                p = Math.round(y.x);
                r = Math.round(y.y);
              }
            }
          }
        }
        n = (n.push({name:"endchar", type:"OP", value:14}), n);
        f.charStrings.push({name:m.name, type:"CHARSTRING", value:n});
      }
      d.charStringsIndex = f;
      b = new A.Record("Private DICT", [{name:"dict", type:"DICT", value:{}}]);
      b = (b.dict = v(D, {}, k), b);
      d.privateDict = b;
      b = new A.Record("String INDEX", [{name:"strings", type:"INDEX", value:[]}]);
      b.strings = [];
      for (f = 0; f < k.length; f += 1) {
        b.strings.push({name:"string_" + f, type:"STRING", value:k[f]});
      }
      d.stringIndex = b;
      b = d.header.sizeOf() + d.nameIndex.sizeOf() + d.topDictIndex.sizeOf() + d.stringIndex.sizeOf() + d.globalSubrIndex.sizeOf();
      return e.charset = b, e.encoding = 0, e.charStrings = e.charset + d.charsets.sizeOf(), e.private[1] = e.charStrings + d.charStringsIndex.sizeOf(), c = w(e, k), d.topDictIndex = x(c), d;
    };
  }, {"../encoding":4, "../glyphset":7, "../parse":10, "../path":11, "../table":13}], 15:[function(c, k, b) {
    function e(b, c, e) {
      b.segments.push({end:c, start:c, delta:-(c - e), offset:0});
    }
    var f = c("../check"), h = c("../parse"), r = c("../table");
    b.parse = function(b, c) {
      var e, d = {};
      d.version = h.getUShort(b, c);
      f.argument(0 === d.version, "cmap table version should be 0.");
      d.numTables = h.getUShort(b, c + 2);
      var k = -1;
      for (e = d.numTables - 1; 0 <= e; --e) {
        var n = h.getUShort(b, c + 4 + 8 * e), q = h.getUShort(b, c + 4 + 8 * e + 2);
        if (3 === n && (0 === q || 1 === q || 10 === q)) {
          k = h.getULong(b, c + 4 + 8 * e + 4);
          break;
        }
      }
      if (-1 === k) {
        return null;
      }
      e = new h.Parser(b, c + k);
      if (d.format = e.parseUShort(), 12 === d.format) {
        e.parseUShort();
        d.length = e.parseULong();
        d.language = e.parseULong();
        var r;
        d.groupCount = r = e.parseULong();
        d.glyphIndexMap = {};
        for (b = 0; r > b; b += 1) {
          for (q = e.parseULong(), k = e.parseULong(), n = e.parseULong(); k >= q; q += 1) {
            d.glyphIndexMap[q] = n, n++;
          }
        }
      } else {
        if (4 !== d.format) {
          throw Error("Only format 4 and 12 cmap tables are supported.");
        }
        var z = k;
        d.length = e.parseUShort();
        d.language = e.parseUShort();
        d.segCount = k = e.parseUShort() >> 1;
        e.skip("uShort", 3);
        d.glyphIndexMap = {};
        e = new h.Parser(b, c + z + 14);
        n = new h.Parser(b, c + z + 16 + 2 * k);
        q = new h.Parser(b, c + z + 16 + 4 * k);
        var p = new h.Parser(b, c + z + 16 + 6 * k);
        z = c + z + 16 + 8 * k;
        for (c = 0; k - 1 > c; c += 1) {
          for (var u = e.parseUShort(), y = n.parseUShort(), A = q.parseShort(), B = p.parseUShort(), D = y; u >= D; D += 1) {
            0 !== B ? (z = p.offset + p.relativeOffset - 2, z += B, z += 2 * (D - y), r = h.getUShort(b, z), 0 !== r && (r = r + A & 65535)) : r = D + A & 65535, d.glyphIndexMap[D] = r;
          }
        }
      }
      return d;
    };
    b.make = function(b) {
      var c, f = new r.Table("cmap", [{name:"version", type:"USHORT", value:0}, {name:"numTables", type:"USHORT", value:1}, {name:"platformID", type:"USHORT", value:3}, {name:"encodingID", type:"USHORT", value:1}, {name:"offset", type:"ULONG", value:12}, {name:"format", type:"USHORT", value:4}, {name:"length", type:"USHORT", value:0}, {name:"language", type:"USHORT", value:0}, {name:"segCountX2", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", 
      value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      f.segments = [];
      for (c = 0; c < b.length; c += 1) {
        for (var d = b.get(c), h = 0; h < d.unicodes.length; h += 1) {
          e(f, d.unicodes[h], c);
        }
        f.segments = f.segments.sort(function(b, c) {
          return b.start - c.start;
        });
      }
      f.segments.push({end:65535, start:65535, delta:1, offset:0});
      b = f.segments.length;
      f.segCountX2 = 2 * b;
      f.searchRange = 2 * Math.pow(2, Math.floor(Math.log(b) / Math.log(2)));
      f.entrySelector = Math.log(f.searchRange / 2) / Math.log(2);
      f.rangeShift = f.segCountX2 - f.searchRange;
      d = [];
      h = [];
      var k = [], q = [], x = [];
      for (c = 0; b > c; c += 1) {
        var z = f.segments[c];
        d = d.concat({name:"end_" + c, type:"USHORT", value:z.end});
        h = h.concat({name:"start_" + c, type:"USHORT", value:z.start});
        k = k.concat({name:"idDelta_" + c, type:"SHORT", value:z.delta});
        q = q.concat({name:"idRangeOffset_" + c, type:"USHORT", value:z.offset});
        void 0 !== z.glyphId && (x = x.concat({name:"glyph_" + c, type:"USHORT", value:z.glyphId}));
      }
      return f.fields = f.fields.concat(d), f.fields.push({name:"reservedPad", type:"USHORT", value:0}), f.fields = f.fields.concat(h), f.fields = f.fields.concat(k), f.fields = f.fields.concat(q), f.fields = f.fields.concat(x), f.length = 2 * d.length + 16 + 2 * h.length + 2 * k.length + 2 * q.length + 2 * x.length, f;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 16:[function(c, k, b) {
    function e(b, c) {
      var d = JSON.stringify(b), e = 256, f;
      for (f in c) {
        var h = parseInt(f);
        if (h && !(256 > h)) {
          if (JSON.stringify(c[f]) === d) {
            return h;
          }
          h >= e && (e = h + 1);
        }
      }
      return c[e] = b, e;
    }
    function f(b, c, d) {
      d = e(c.name, d);
      return [{name:"tag_" + b, type:"TAG", value:c.tag}, {name:"minValue_" + b, type:"FIXED", value:c.minValue << 16}, {name:"defaultValue_" + b, type:"FIXED", value:c.defaultValue << 16}, {name:"maxValue_" + b, type:"FIXED", value:c.maxValue << 16}, {name:"flags_" + b, type:"USHORT", value:0}, {name:"nameID_" + b, type:"USHORT", value:d}];
    }
    function h(b, c, d) {
      var e = {};
      b = new m.Parser(b, c);
      return e.tag = b.parseTag(), e.minValue = b.parseFixed(), e.defaultValue = b.parseFixed(), e.maxValue = b.parseFixed(), b.skip("uShort", 1), e.name = d[b.parseUShort()] || {}, e;
    }
    function r(b, c, d, f) {
      f = e(c.name, f);
      f = [{name:"nameID_" + b, type:"USHORT", value:f}, {name:"flags_" + b, type:"USHORT", value:0}];
      for (var h = 0; h < d.length; ++h) {
        var k = d[h].tag;
        f.push({name:"axis_" + b + " " + k, type:"FIXED", value:c.coordinates[k] << 16});
      }
      return f;
    }
    function q(b, c, d, e) {
      var f = {};
      b = new m.Parser(b, c);
      f.name = e[b.parseUShort()] || {};
      b.skip("uShort", 1);
      f.coordinates = {};
      for (e = 0; e < d.length; ++e) {
        f.coordinates[d[e].tag] = b.parseFixed();
      }
      return f;
    }
    var n = c("../check"), m = c("../parse"), d = c("../table");
    b.make = function(b, c) {
      var e = new d.Table("fvar", [{name:"version", type:"ULONG", value:65536}, {name:"offsetToData", type:"USHORT", value:0}, {name:"countSizePairs", type:"USHORT", value:2}, {name:"axisCount", type:"USHORT", value:b.axes.length}, {name:"axisSize", type:"USHORT", value:20}, {name:"instanceCount", type:"USHORT", value:b.instances.length}, {name:"instanceSize", type:"USHORT", value:4 + 4 * b.axes.length}]);
      e.offsetToData = e.sizeOf();
      for (var h = 0; h < b.axes.length; h++) {
        e.fields = e.fields.concat(f(h, b.axes[h], c));
      }
      for (h = 0; h < b.instances.length; h++) {
        e.fields = e.fields.concat(r(h, b.instances[h], b.axes, c));
      }
      return e;
    };
    b.parse = function(b, c, d) {
      var e = new m.Parser(b, c), f = e.parseULong();
      n.argument(65536 === f, "Unsupported fvar table version.");
      var k = e.parseOffset16();
      e.skip("uShort", 1);
      var l = e.parseUShort(), r = e.parseUShort();
      f = e.parseUShort();
      e = e.parseUShort();
      for (var v = [], w = 0; l > w; w++) {
        v.push(h(b, c + k + w * r, d));
      }
      w = [];
      c = c + k + l * r;
      for (k = 0; f > k; k++) {
        w.push(q(b, c + k * e, v, d));
      }
      return {axes:v, instances:w};
    };
  }, {"../check":2, "../parse":10, "../table":13}], 17:[function(c, k, b) {
    function e(b, c, d, e, f) {
      var h;
      return 0 < (c & e) ? (h = b.parseByte(), 0 === (c & f) && (h = -h), h = d + h) : h = 0 < (c & f) ? d : d + b.parseShort(), h;
    }
    function f(b, c, d) {
      c = new m.Parser(c, d);
      b.numberOfContours = c.parseShort();
      b._xMin = c.parseShort();
      b._yMin = c.parseShort();
      b._xMax = c.parseShort();
      b._yMax = c.parseShort();
      var f;
      if (0 < b.numberOfContours) {
        var h, k = b.endPointIndices = [];
        for (h = 0; h < b.numberOfContours; h += 1) {
          k.push(c.parseUShort());
        }
        b.instructionLength = c.parseUShort();
        b.instructions = [];
        for (h = 0; h < b.instructionLength; h += 1) {
          b.instructions.push(c.parseByte());
        }
        var l = k[k.length - 1] + 1;
        d = [];
        for (h = 0; l > h; h += 1) {
          if (f = c.parseByte(), d.push(f), 0 < (8 & f)) {
            for (var n = c.parseByte(), r = 0; n > r; r += 1) {
              d.push(f), h += 1;
            }
          }
        }
        if (q.argument(d.length === l, "Bad flags."), 0 < k.length) {
          r = [];
          if (0 < l) {
            for (h = 0; l > h; h += 1) {
              f = d[h], n = {}, n.onCurve = !!(1 & f), n.lastPointOfContour = 0 <= k.indexOf(h), r.push(n);
            }
            for (h = k = 0; l > h; h += 1) {
              f = d[h], n = r[h], n.x = e(c, f, k, 2, 16), k = n.x;
            }
            for (h = k = 0; l > h; h += 1) {
              f = d[h], n = r[h], n.y = e(c, f, k, 4, 32), k = n.y;
            }
          }
          b.points = r;
        } else {
          b.points = [];
        }
      } else {
        if (0 === b.numberOfContours) {
          b.points = [];
        } else {
          for (b.isComposite = !0, b.points = [], b.components = [], f = !0; f;) {
            d = c.parseUShort(), f = {glyphIndex:c.parseUShort(), xScale:1, scale01:0, scale10:0, yScale:1, dx:0, dy:0}, 0 < (1 & d) ? 0 < (2 & d) ? (f.dx = c.parseShort(), f.dy = c.parseShort()) : f.matchedPoints = [c.parseUShort(), c.parseUShort()] : 0 < (2 & d) ? (f.dx = c.parseChar(), f.dy = c.parseChar()) : f.matchedPoints = [c.parseByte(), c.parseByte()], 0 < (8 & d) ? f.xScale = f.yScale = c.parseF2Dot14() : 0 < (64 & d) ? (f.xScale = c.parseF2Dot14(), f.yScale = c.parseF2Dot14()) : 0 < (128 & 
            d) && (f.xScale = c.parseF2Dot14(), f.scale01 = c.parseF2Dot14(), f.scale10 = c.parseF2Dot14(), f.yScale = c.parseF2Dot14()), b.components.push(f), f = !!(32 & d);
          }
        }
      }
    }
    function h(b, c) {
      for (var d = [], e = 0; e < b.length; e += 1) {
        var f = b[e];
        d.push({x:c.xScale * f.x + c.scale01 * f.y + c.dx, y:c.scale10 * f.x + c.yScale * f.y + c.dy, onCurve:f.onCurve, lastPointOfContour:f.lastPointOfContour});
      }
      return d;
    }
    function r(b, c) {
      if (c.isComposite) {
        for (var e = 0; e < c.components.length; e += 1) {
          var f = c.components[e], k = b.get(f.glyphIndex);
          if (k.getPath(), k.points) {
            if (void 0 === f.matchedPoints) {
              k = h(k.points, f);
            } else {
              if (f.matchedPoints[0] > c.points.length - 1 || f.matchedPoints[1] > k.points.length - 1) {
                throw Error("Matched points out of range in " + c.name);
              }
              var l = c.points[f.matchedPoints[0]], m = k.points[f.matchedPoints[1]];
              f = {xScale:f.xScale, scale01:f.scale01, scale10:f.scale10, yScale:f.yScale, dx:0, dy:0};
              m = h([m], f)[0];
              f.dx = l.x - m.x;
              f.dy = l.y - m.y;
              k = h(k.points, f);
            }
            c.points = c.points.concat(k);
          }
        }
      }
      var n;
      c = c.points;
      b = new d.Path;
      if (c) {
        e = [];
        k = [];
        for (l = 0; l < c.length; l += 1) {
          m = c[l], k.push(m), m.lastPointOfContour && (e.push(k), k = []);
        }
        c = (q.argument(0 === k.length, "There are still points left in the current contour."), e);
        for (e = 0; e < c.length; e += 1) {
          var r;
          k = c[e];
          l = k[0];
          m = k[k.length - 1];
          l.onCurve ? (n = null, r = !0) : (l = m.onCurve ? m : {x:(l.x + m.x) / 2, y:(l.y + m.y) / 2}, n = l, r = !1);
          b.moveTo(l.x, l.y);
          for (f = r ? 1 : 0; f < k.length; f += 1) {
            var v = k[f], D = 0 === f ? l : k[f - 1];
            if (D.onCurve && v.onCurve) {
              b.lineTo(v.x, v.y);
            } else {
              if (D.onCurve && !v.onCurve) {
                n = v;
              } else {
                if (D.onCurve || v.onCurve) {
                  if (D.onCurve || !v.onCurve) {
                    throw Error("Invalid state.");
                  }
                  b.quadraticCurveTo(n.x, n.y, v.x, v.y);
                  n = null;
                } else {
                  b.quadraticCurveTo(D.x, D.y, (D.x + v.x) / 2, (D.y + v.y) / 2), n = v;
                }
              }
            }
          }
          l !== m && (n ? b.quadraticCurveTo(n.x, n.y, l.x, l.y) : b.lineTo(l.x, l.y));
        }
        n = (b.closePath(), b);
      } else {
        n = b;
      }
      return n;
    }
    var q = c("../check"), n = c("../glyphset"), m = c("../parse"), d = c("../path");
    b.parse = function(b, c, d, e) {
      var h, k = new n.GlyphSet(e);
      for (h = 0; h < d.length - 1; h += 1) {
        var l = d[h];
        l !== d[h + 1] ? k.push(h, n.ttfGlyphLoader(e, h, f, b, c + l, r)) : k.push(h, n.glyphLoader(e, h));
      }
      return k;
    };
  }, {"../check":2, "../glyphset":7, "../parse":10, "../path":11}], 18:[function(c, k, b) {
    function e(b, c) {
      b = new m.Parser(b, c);
      c = b.parseUShort();
      for (var d = [], e = 0; c > e; e++) {
        d[b.parseTag()] = {offset:b.parseUShort()};
      }
      return d;
    }
    function f(b, c) {
      b = new m.Parser(b, c);
      var d = b.parseUShort();
      c = b.parseUShort();
      if (1 === d) {
        return b.parseUShortList(c);
      }
      if (2 === d) {
        for (d = []; c--;) {
          for (var e = b.parseUShort(), f = b.parseUShort(), h = b.parseUShort(); f >= e; e++) {
            d[h++] = e;
          }
        }
        return d;
      }
    }
    function h(b, c) {
      b = new m.Parser(b, c);
      c = b.parseUShort();
      if (1 === c) {
        var d = b.parseUShort();
        c = b.parseUShort();
        var e = b.parseUShortList(c);
        return function(b) {
          return e[b - d] || 0;
        };
      }
      if (2 === c) {
        c = b.parseUShort();
        for (var f = [], h = [], k = [], l = 0; c > l; l++) {
          f[l] = b.parseUShort(), h[l] = b.parseUShort(), k[l] = b.parseUShort();
        }
        return function(b) {
          for (var c = 0, d = f.length - 1; d > c;) {
            var e = c + d + 1 >> 1;
            b < f[e] ? d = e - 1 : c = e;
          }
          return f[c] <= b && b <= h[c] ? k[c] || 0 : 0;
        };
      }
    }
    function r(b, c) {
      var d, e = new m.Parser(b, c), k = e.parseUShort(), l = e.parseUShort();
      l = f(b, c + l);
      var n = e.parseUShort(), q = e.parseUShort();
      if (4 === n && 0 === q) {
        var r = {};
        if (1 === k) {
          b = e.parseUShort();
          var A = [];
          c = e.parseOffset16List(b);
          for (k = 0; b > k; k++) {
            var B = c[k], D = r[B];
            if (!D) {
              for (D = {}, e.relativeOffset = B, B = e.parseUShort(); B--;) {
                var F = e.parseUShort();
                n && (d = e.parseShort());
                q && e.parseShort();
                D[F] = d;
              }
            }
            A[l[k]] = D;
          }
          return function(b, c) {
            return (b = A[b]) ? b[c] : void 0;
          };
        }
        if (2 === k) {
          D = e.parseUShort();
          B = e.parseUShort();
          r = e.parseUShort();
          k = e.parseUShort();
          var C = h(b, c + D), E = h(b, c + B), H = [];
          for (b = 0; r > b; b++) {
            for (c = H[b] = [], D = 0; k > D; D++) {
              n && (d = e.parseShort()), q && e.parseShort(), c[D] = d;
            }
          }
          var Q = {};
          for (b = 0; b < l.length; b++) {
            Q[l[b]] = 1;
          }
          return function(b, c) {
            if (Q[b]) {
              return b = C(b), c = E(c), (b = H[b]) ? b[c] : void 0;
            }
          };
        }
      }
    }
    function q(b, c) {
      var d = new m.Parser(b, c), e = d.parseUShort(), f = d.parseUShort(), h = 16 & f, k = d.parseUShort(), l = d.parseOffset16List(k);
      d = {lookupType:e, lookupFlag:f, markFilteringSet:h ? d.parseUShort() : -1};
      if (2 === e) {
        var n = [];
        for (e = 0; k > e; e++) {
          n.push(r(b, c + l[e]));
        }
        d.getKerningValue = function(b, c) {
          for (var d = n.length; d--;) {
            var e = n[d](b, c);
            if (void 0 !== e) {
              return e;
            }
          }
          return 0;
        };
      }
      return d;
    }
    var n = c("../check"), m = c("../parse");
    b.parse = function(b, c, f) {
      var d = new m.Parser(b, c), h = d.parseFixed();
      n.argument(1 === h, "Unsupported GPOS table version.");
      e(b, c + d.parseUShort());
      e(b, c + d.parseUShort());
      var k = d.parseUShort();
      d.relativeOffset = k;
      h = d.parseUShort();
      d = d.parseOffset16List(h);
      c += k;
      for (k = 0; h > k; k++) {
        var l = q(b, c + d[k]);
        2 !== l.lookupType || f.getGposKerningValue || (f.getGposKerningValue = l.getKerningValue);
      }
    };
  }, {"../check":2, "../parse":10}], 19:[function(c, k, b) {
    var e = c("../check"), f = c("../parse").Parser, h = Array(9), r = c("../table");
    h[1] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(f.coverage), deltaGlyphId:this.parseUShort()} : 2 === c ? {substFormat:2, coverage:this.parsePointer(f.coverage), substitute:this.parseOffset16List()} : void e.assert(!1, "0x" + b.toString(16) + ": lookup type 1 format must be 1 or 2.");
    };
    h[2] = function() {
      var b = this.parseUShort();
      return e.argument(1 === b, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), sequences:this.parseListOfLists()};
    };
    h[3] = function() {
      var b = this.parseUShort();
      return e.argument(1 === b, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), alternateSets:this.parseListOfLists()};
    };
    h[4] = function() {
      var b = this.parseUShort();
      return e.argument(1 === b, "GSUB ligature table identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), ligatureSets:this.parseListOfLists(function() {
        return {ligGlyph:this.parseUShort(), components:this.parseUShortList(this.parseUShort() - 1)};
      })};
    };
    var q = {sequenceIndex:f.uShort, lookupListIndex:f.uShort};
    h[5] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      if (1 === c) {
        return {substFormat:c, coverage:this.parsePointer(f.coverage), ruleSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {input:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (2 === c) {
        return {substFormat:c, coverage:this.parsePointer(f.coverage), classDef:this.parsePointer(f.classDef), classSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {classes:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (3 === c) {
        b = this.parseUShort();
        var h = this.parseUShort();
        return {substFormat:c, coverages:this.parseList(b, f.pointer(f.coverage)), lookupRecords:this.parseRecordList(h, q)};
      }
      e.assert(!1, "0x" + b.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
    };
    h[6] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(f.coverage), chainRuleSets:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 2 === c ? {substFormat:2, coverage:this.parsePointer(f.coverage), backtrackClassDef:this.parsePointer(f.classDef), inputClassDef:this.parsePointer(f.classDef), lookaheadClassDef:this.parsePointer(f.classDef), chainClassSet:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 3 === c ? {substFormat:3, backtrackCoverage:this.parseList(f.pointer(f.coverage)), inputCoverage:this.parseList(f.pointer(f.coverage)), lookaheadCoverage:this.parseList(f.pointer(f.coverage)), lookupRecords:this.parseRecordList(q)} : void e.assert(!1, "0x" + b.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
    };
    h[7] = function() {
      var b = this.parseUShort();
      e.argument(1 === b, "GSUB Extension Substitution subtable identifier-format must be 1");
      b = this.parseUShort();
      var c = new f(this.data, this.offset + this.parseULong());
      return {substFormat:1, lookupType:b, extension:h[b].call(c)};
    };
    h[8] = function() {
      var b = this.parseUShort();
      return e.argument(1 === b, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), backtrackCoverage:this.parseList(f.pointer(f.coverage)), lookaheadCoverage:this.parseList(f.pointer(f.coverage)), substitutes:this.parseUShortList()};
    };
    var n = Array(9);
    n[1] = function(b) {
      return 1 === b.substFormat ? new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}, {name:"deltaGlyphID", type:"USHORT", value:b.deltaGlyphId}]) : new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:2}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.ushortList("substitute", b.substitute)));
    };
    n[3] = function(b) {
      return e.assert(1 === b.substFormat, "Lookup type 3 substFormat must be 1."), new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.tableList("altSet", b.alternateSets, function(b) {
        return new r.Table("alternateSetTable", r.ushortList("alternate", b));
      })));
    };
    n[4] = function(b) {
      return e.assert(1 === b.substFormat, "Lookup type 4 substFormat must be 1."), new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.tableList("ligSet", b.ligatureSets, function(b) {
        return new r.Table("ligatureSetTable", r.tableList("ligature", b, function(b) {
          return new r.Table("ligatureTable", [{name:"ligGlyph", type:"USHORT", value:b.ligGlyph}].concat(r.ushortList("component", b.components, b.components.length + 1)));
        }));
      })));
    };
    b.parse = function(b, c) {
      b = new f(b, c || 0);
      c = b.parseVersion();
      return e.argument(1 === c, "Unsupported GSUB table version."), {version:c, scripts:b.parseScriptList(), features:b.parseFeatureList(), lookups:b.parseLookupList(h)};
    };
    b.make = function(b) {
      return new r.Table("GSUB", [{name:"version", type:"ULONG", value:65536}, {name:"scripts", type:"TABLE", value:new r.ScriptList(b.scripts)}, {name:"features", type:"TABLE", value:new r.FeatureList(b.features)}, {name:"lookups", type:"TABLE", value:new r.LookupList(b.lookups, n)}]);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 20:[function(c, k, b) {
    var e = c("../check"), f = c("../parse"), h = c("../table");
    b.parse = function(b, c) {
      var h = {};
      b = new f.Parser(b, c);
      return h.version = b.parseVersion(), h.fontRevision = Math.round(1E3 * b.parseFixed()) / 1E3, h.checkSumAdjustment = b.parseULong(), h.magicNumber = b.parseULong(), e.argument(1594834165 === h.magicNumber, "Font header has wrong magic number."), h.flags = b.parseUShort(), h.unitsPerEm = b.parseUShort(), h.created = b.parseLongDateTime(), h.modified = b.parseLongDateTime(), h.xMin = b.parseShort(), h.yMin = b.parseShort(), h.xMax = b.parseShort(), h.yMax = b.parseShort(), h.macStyle = b.parseUShort(), 
      h.lowestRecPPEM = b.parseUShort(), h.fontDirectionHint = b.parseShort(), h.indexToLocFormat = b.parseShort(), h.glyphDataFormat = b.parseShort(), h;
    };
    b.make = function(b) {
      var c = Math.round((new Date).getTime() / 1E3) + 2082844800, e = c;
      return b.createdTimestamp && (e = b.createdTimestamp + 2082844800), new h.Table("head", [{name:"version", type:"FIXED", value:65536}, {name:"fontRevision", type:"FIXED", value:65536}, {name:"checkSumAdjustment", type:"ULONG", value:0}, {name:"magicNumber", type:"ULONG", value:1594834165}, {name:"flags", type:"USHORT", value:0}, {name:"unitsPerEm", type:"USHORT", value:1E3}, {name:"created", type:"LONGDATETIME", value:e}, {name:"modified", type:"LONGDATETIME", value:c}, {name:"xMin", type:"SHORT", 
      value:0}, {name:"yMin", type:"SHORT", value:0}, {name:"xMax", type:"SHORT", value:0}, {name:"yMax", type:"SHORT", value:0}, {name:"macStyle", type:"USHORT", value:0}, {name:"lowestRecPPEM", type:"USHORT", value:0}, {name:"fontDirectionHint", type:"SHORT", value:2}, {name:"indexToLocFormat", type:"SHORT", value:0}, {name:"glyphDataFormat", type:"SHORT", value:0}], b);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 21:[function(c, k, b) {
    var e = c("../parse"), f = c("../table");
    b.parse = function(b, c) {
      var f = {};
      b = new e.Parser(b, c);
      return f.version = b.parseVersion(), f.ascender = b.parseShort(), f.descender = b.parseShort(), f.lineGap = b.parseShort(), f.advanceWidthMax = b.parseUShort(), f.minLeftSideBearing = b.parseShort(), f.minRightSideBearing = b.parseShort(), f.xMaxExtent = b.parseShort(), f.caretSlopeRise = b.parseShort(), f.caretSlopeRun = b.parseShort(), f.caretOffset = b.parseShort(), b.relativeOffset += 8, f.metricDataFormat = b.parseShort(), f.numberOfHMetrics = b.parseUShort(), f;
    };
    b.make = function(b) {
      return new f.Table("hhea", [{name:"version", type:"FIXED", value:65536}, {name:"ascender", type:"FWORD", value:0}, {name:"descender", type:"FWORD", value:0}, {name:"lineGap", type:"FWORD", value:0}, {name:"advanceWidthMax", type:"UFWORD", value:0}, {name:"minLeftSideBearing", type:"FWORD", value:0}, {name:"minRightSideBearing", type:"FWORD", value:0}, {name:"xMaxExtent", type:"FWORD", value:0}, {name:"caretSlopeRise", type:"SHORT", value:1}, {name:"caretSlopeRun", type:"SHORT", value:0}, {name:"caretOffset", 
      type:"SHORT", value:0}, {name:"reserved1", type:"SHORT", value:0}, {name:"reserved2", type:"SHORT", value:0}, {name:"reserved3", type:"SHORT", value:0}, {name:"reserved4", type:"SHORT", value:0}, {name:"metricDataFormat", type:"SHORT", value:0}, {name:"numberOfHMetrics", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 22:[function(c, k, b) {
    var e = c("../parse"), f = c("../table");
    b.parse = function(b, c, f, k, m) {
      var d, h;
      b = new e.Parser(b, c);
      for (c = 0; k > c; c += 1) {
        f > c && (d = b.parseUShort(), h = b.parseShort());
        var n = m.get(c);
        n.advanceWidth = d;
        n.leftSideBearing = h;
      }
    };
    b.make = function(b) {
      for (var c = new f.Table("hmtx", []), e = 0; e < b.length; e += 1) {
        var h = b.get(e), k = h.leftSideBearing || 0;
        c.fields.push({name:"advanceWidth_" + e, type:"USHORT", value:h.advanceWidth || 0});
        c.fields.push({name:"leftSideBearing_" + e, type:"SHORT", value:k});
      }
      return c;
    };
  }, {"../parse":10, "../table":13}], 23:[function(c, k, b) {
    var e = c("../check"), f = c("../parse");
    b.parse = function(b, c) {
      var h = {};
      b = new f.Parser(b, c);
      c = b.parseUShort();
      e.argument(0 === c, "Unsupported kern table version.");
      b.skip("uShort", 1);
      c = b.parseUShort();
      e.argument(0 === c, "Unsupported kern sub-table version.");
      b.skip("uShort", 2);
      c = b.parseUShort();
      b.skip("uShort", 3);
      for (var k = 0; c > k; k += 1) {
        var m = b.parseUShort(), d = b.parseUShort(), l = b.parseShort();
        h[m + "," + d] = l;
      }
      return h;
    };
  }, {"../check":2, "../parse":10}], 24:[function(c, k, b) {
    var e = c("../parse");
    b.parse = function(b, c, k, q) {
      b = new e.Parser(b, c);
      c = q ? b.parseUShort : b.parseULong;
      for (var f = [], h = 0; k + 1 > h; h += 1) {
        var d = c.call(b);
        q && (d *= 2);
        f.push(d);
      }
      return f;
    };
  }, {"../parse":10}], 25:[function(c, k, b) {
    var e = c("../check"), f = c("../parse"), h = c("../table");
    b.make = function(b) {
      for (var c = new h.Table("ltag", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"numTags", type:"ULONG", value:b.length}]), e = "", f = 12 + 4 * b.length, d = 0; d < b.length; ++d) {
        var k = e.indexOf(b[d]);
        0 > k && (k = e.length, e += b[d]);
        c.fields.push({name:"offset " + d, type:"USHORT", value:f + k});
        c.fields.push({name:"length " + d, type:"USHORT", value:b[d].length});
      }
      return c.fields.push({name:"stringPool", type:"CHARARRAY", value:e}), c;
    };
    b.parse = function(b, c) {
      var h = new f.Parser(b, c), k = h.parseULong();
      e.argument(1 === k, "Unsupported ltag table version.");
      h.skip("uLong", 1);
      k = h.parseULong();
      for (var d = [], l = 0; k > l; l++) {
        for (var q = "", r = c + h.parseUShort(), x = h.parseUShort(), z = r; r + x > z; ++z) {
          q += String.fromCharCode(b.getInt8(z));
        }
        d.push(q);
      }
      return d;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 26:[function(c, k, b) {
    var e = c("../parse"), f = c("../table");
    b.parse = function(b, c) {
      var f = {};
      b = new e.Parser(b, c);
      return f.version = b.parseVersion(), f.numGlyphs = b.parseUShort(), 1 === f.version && (f.maxPoints = b.parseUShort(), f.maxContours = b.parseUShort(), f.maxCompositePoints = b.parseUShort(), f.maxCompositeContours = b.parseUShort(), f.maxZones = b.parseUShort(), f.maxTwilightPoints = b.parseUShort(), f.maxStorage = b.parseUShort(), f.maxFunctionDefs = b.parseUShort(), f.maxInstructionDefs = b.parseUShort(), f.maxStackElements = b.parseUShort(), f.maxSizeOfInstructions = b.parseUShort(), f.maxComponentElements = 
      b.parseUShort(), f.maxComponentDepth = b.parseUShort()), f;
    };
    b.make = function(b) {
      return new f.Table("maxp", [{name:"version", type:"FIXED", value:20480}, {name:"numGlyphs", type:"USHORT", value:b}]);
    };
  }, {"../parse":10, "../table":13}], 27:[function(c, k, b) {
    var e = c("../types").decode, f = c("../check"), h = c("../parse"), r = c("../table");
    b.parse = function(b, c) {
      var k = new h.Parser(b, c), d = k.parseULong();
      f.argument(1 === d, "Unsupported META table version.");
      k.parseULong();
      k.parseULong();
      d = k.parseULong();
      for (var l = {}, n = 0; d > n; n++) {
        var q = k.parseTag(), r = k.parseULong(), z = k.parseULong();
        r = e.UTF8(b, c + r, z);
        l[q] = r;
      }
      return l;
    };
    b.make = function(b) {
      var c = Object.keys(b).length, e = "", d = 16 + 12 * c;
      c = new r.Table("meta", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"offset", type:"ULONG", value:d}, {name:"numTags", type:"ULONG", value:c}]);
      for (var f in b) {
        var h = e.length;
        e += b[f];
        c.fields.push({name:"tag " + f, type:"TAG", value:f});
        c.fields.push({name:"offset " + f, type:"ULONG", value:d + h});
        c.fields.push({name:"length " + f, type:"ULONG", value:b[f].length});
      }
      return c.fields.push({name:"stringPool", type:"CHARARRAY", value:e}), c;
    };
  }, {"../check":2, "../parse":10, "../table":13, "../types":32}], 28:[function(c, k, b) {
    function e(b, c, d) {
      switch(b) {
        case 0:
          return z;
        case 1:
          return u[d] || p[c];
        case 3:
          if (1 === c || 10 === c) {
            return z;
          }
      }
    }
    function f(b) {
      var c = {}, d;
      for (d in b) {
        c[b[d]] = parseInt(d);
      }
      return c;
    }
    function h(b, c, e, f, h, k) {
      return new d.Record("NameRecord", [{name:"platformID", type:"USHORT", value:b}, {name:"encodingID", type:"USHORT", value:c}, {name:"languageID", type:"USHORT", value:e}, {name:"nameID", type:"USHORT", value:f}, {name:"length", type:"USHORT", value:h}, {name:"offset", type:"USHORT", value:k}]);
    }
    function r(b, c) {
      a: {
        var d = b.length;
        var e = c.length - d + 1, f = 0;
        b: for (; e > f; f++) {
          for (; e > f;) {
            for (var h = 0; d > h; h++) {
              if (c[f + h] !== b[h]) {
                continue b;
              }
            }
            d = f;
            break a;
          }
        }
        d = -1;
      }
      if (0 > d) {
        for (d = c.length, e = 0, f = b.length; f > e; ++e) {
          c.push(b[e]);
        }
      }
      return d;
    }
    k = c("../types");
    var q = k.decode, n = k.encode, m = c("../parse"), d = c("../table"), l = "copyright fontFamily fontSubfamily uniqueID fullName version postScriptName trademark manufacturer designer description manufacturerURL designerURL license licenseURL reserved preferredFamily preferredSubfamily compatibleFullName sampleText postScriptFindFontName wwsFamily wwsSubfamily".split(" "), v = {0:"en", 1:"fr", 2:"de", 3:"it", 4:"nl", 5:"sv", 6:"es", 7:"da", 8:"pt", 9:"no", 10:"he", 11:"ja", 12:"ar", 13:"fi", 14:"el", 
    15:"is", 16:"mt", 17:"tr", 18:"hr", 19:"zh-Hant", 20:"ur", 21:"hi", 22:"th", 23:"ko", 24:"lt", 25:"pl", 26:"hu", 27:"es", 28:"lv", 29:"se", 30:"fo", 31:"fa", 32:"ru", 33:"zh", 34:"nl-BE", 35:"ga", 36:"sq", 37:"ro", 38:"cz", 39:"sk", 40:"si", 41:"yi", 42:"sr", 43:"mk", 44:"bg", 45:"uk", 46:"be", 47:"uz", 48:"kk", 49:"az-Cyrl", 50:"az-Arab", 51:"hy", 52:"ka", 53:"mo", 54:"ky", 55:"tg", 56:"tk", 57:"mn-CN", 58:"mn", 59:"ps", 60:"ks", 61:"ku", 62:"sd", 63:"bo", 64:"ne", 65:"sa", 66:"mr", 67:"bn", 
    68:"as", 69:"gu", 70:"pa", 71:"or", 72:"ml", 73:"kn", 74:"ta", 75:"te", 76:"si", 77:"my", 78:"km", 79:"lo", 80:"vi", 81:"id", 82:"tl", 83:"ms", 84:"ms-Arab", 85:"am", 86:"ti", 87:"om", 88:"so", 89:"sw", 90:"rw", 91:"rn", 92:"ny", 93:"mg", 94:"eo", 128:"cy", 129:"eu", 130:"ca", 131:"la", 132:"qu", 133:"gn", 134:"ay", 135:"tt", 136:"ug", 137:"dz", 138:"jv", 139:"su", 140:"gl", 141:"af", 142:"br", 143:"iu", 144:"gd", 145:"gv", 146:"ga", 147:"to", 148:"el-polyton", 149:"kl", 150:"az", 151:"nn"}, 
    w = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:5, 11:1, 12:4, 13:0, 14:6, 15:0, 16:0, 17:0, 18:0, 19:2, 20:4, 21:9, 22:21, 23:3, 24:29, 25:29, 26:29, 27:29, 28:29, 29:0, 30:0, 31:4, 32:7, 33:25, 34:0, 35:0, 36:0, 37:0, 38:29, 39:29, 40:0, 41:5, 42:7, 43:7, 44:7, 45:7, 46:7, 47:7, 48:7, 49:7, 50:4, 51:24, 52:23, 53:7, 54:7, 55:7, 56:7, 57:27, 58:7, 59:4, 60:4, 61:4, 62:4, 63:26, 64:9, 65:9, 66:9, 67:13, 68:13, 69:11, 70:10, 71:12, 72:17, 73:16, 74:14, 75:15, 76:18, 77:19, 78:20, 79:22, 
    80:30, 81:0, 82:0, 83:0, 84:4, 85:28, 86:28, 87:28, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:7, 136:4, 137:26, 138:0, 139:0, 140:0, 141:0, 142:0, 143:28, 144:0, 145:0, 146:0, 147:0, 148:6, 149:0, 150:0, 151:0}, x = {1078:"af", 1052:"sq", 1156:"gsw", 1118:"am", 5121:"ar-DZ", 15361:"ar-BH", 3073:"ar", 2049:"ar-IQ", 11265:"ar-JO", 13313:"ar-KW", 12289:"ar-LB", 4097:"ar-LY", 6145:"ary", 8193:"ar-OM", 16385:"ar-QA", 1025:"ar-SA", 10241:"ar-SY", 
    7169:"aeb", 14337:"ar-AE", 9217:"ar-YE", 1067:"hy", 1101:"as", 2092:"az-Cyrl", 1068:"az", 1133:"ba", 1069:"eu", 1059:"be", 2117:"bn", 1093:"bn-IN", 8218:"bs-Cyrl", 5146:"bs", 1150:"br", 1026:"bg", 1027:"ca", 3076:"zh-HK", 5124:"zh-MO", 2052:"zh", 4100:"zh-SG", 1028:"zh-TW", 1155:"co", 1050:"hr", 4122:"hr-BA", 1029:"cs", 1030:"da", 1164:"prs", 1125:"dv", 2067:"nl-BE", 1043:"nl", 3081:"en-AU", 10249:"en-BZ", 4105:"en-CA", 9225:"en-029", 16393:"en-IN", 6153:"en-IE", 8201:"en-JM", 17417:"en-MY", 
    5129:"en-NZ", 13321:"en-PH", 18441:"en-SG", 7177:"en-ZA", 11273:"en-TT", 2057:"en-GB", 1033:"en", 12297:"en-ZW", 1061:"et", 1080:"fo", 1124:"fil", 1035:"fi", 2060:"fr-BE", 3084:"fr-CA", 1036:"fr", 5132:"fr-LU", 6156:"fr-MC", 4108:"fr-CH", 1122:"fy", 1110:"gl", 1079:"ka", 3079:"de-AT", 1031:"de", 5127:"de-LI", 4103:"de-LU", 2055:"de-CH", 1032:"el", 1135:"kl", 1095:"gu", 1128:"ha", 1037:"he", 1081:"hi", 1038:"hu", 1039:"is", 1136:"ig", 1057:"id", 1117:"iu", 2141:"iu-Latn", 2108:"ga", 1076:"xh", 
    1077:"zu", 1040:"it", 2064:"it-CH", 1041:"ja", 1099:"kn", 1087:"kk", 1107:"km", 1158:"quc", 1159:"rw", 1089:"sw", 1111:"kok", 1042:"ko", 1088:"ky", 1108:"lo", 1062:"lv", 1063:"lt", 2094:"dsb", 1134:"lb", 1071:"mk", 2110:"ms-BN", 1086:"ms", 1100:"ml", 1082:"mt", 1153:"mi", 1146:"arn", 1102:"mr", 1148:"moh", 1104:"mn", 2128:"mn-CN", 1121:"ne", 1044:"nb", 2068:"nn", 1154:"oc", 1096:"or", 1123:"ps", 1045:"pl", 1046:"pt", 2070:"pt-PT", 1094:"pa", 1131:"qu-BO", 2155:"qu-EC", 3179:"qu", 1048:"ro", 1047:"rm", 
    1049:"ru", 9275:"smn", 4155:"smj-NO", 5179:"smj", 3131:"se-FI", 1083:"se", 2107:"se-SE", 8251:"sms", 6203:"sma-NO", 7227:"sms", 1103:"sa", 7194:"sr-Cyrl-BA", 3098:"sr", 6170:"sr-Latn-BA", 2074:"sr-Latn", 1132:"nso", 1074:"tn", 1115:"si", 1051:"sk", 1060:"sl", 11274:"es-AR", 16394:"es-BO", 13322:"es-CL", 9226:"es-CO", 5130:"es-CR", 7178:"es-DO", 12298:"es-EC", 17418:"es-SV", 4106:"es-GT", 18442:"es-HN", 2058:"es-MX", 19466:"es-NI", 6154:"es-PA", 15370:"es-PY", 10250:"es-PE", 20490:"es-PR", 3082:"es", 
    1034:"es", 21514:"es-US", 14346:"es-UY", 8202:"es-VE", 2077:"sv-FI", 1053:"sv", 1114:"syr", 1064:"tg", 2143:"tzm", 1097:"ta", 1092:"tt", 1098:"te", 1054:"th", 1105:"bo", 1055:"tr", 1090:"tk", 1152:"ug", 1058:"uk", 1070:"hsb", 1056:"ur", 2115:"uz-Cyrl", 1091:"uz", 1066:"vi", 1106:"cy", 1160:"wo", 1157:"sah", 1144:"ii", 1130:"yo"}, z = "utf-16", p = {0:"macintosh", 1:"x-mac-japanese", 2:"x-mac-chinesetrad", 3:"x-mac-korean", 6:"x-mac-greek", 7:"x-mac-cyrillic", 9:"x-mac-devanagai", 10:"x-mac-gurmukhi", 
    11:"x-mac-gujarati", 12:"x-mac-oriya", 13:"x-mac-bengali", 14:"x-mac-tamil", 15:"x-mac-telugu", 16:"x-mac-kannada", 17:"x-mac-malayalam", 18:"x-mac-sinhalese", 19:"x-mac-burmese", 20:"x-mac-khmer", 21:"x-mac-thai", 22:"x-mac-lao", 23:"x-mac-georgian", 24:"x-mac-armenian", 25:"x-mac-chinesesimp", 26:"x-mac-tibetan", 27:"x-mac-mongolian", 28:"x-mac-ethiopic", 29:"x-mac-ce", 30:"x-mac-vietnamese", 31:"x-mac-extarabic"}, u = {15:"x-mac-icelandic", 17:"x-mac-turkish", 18:"x-mac-croatian", 24:"x-mac-ce", 
    25:"x-mac-ce", 26:"x-mac-ce", 27:"x-mac-ce", 28:"x-mac-ce", 30:"x-mac-icelandic", 37:"x-mac-romanian", 38:"x-mac-ce", 39:"x-mac-ce", 40:"x-mac-ce", 143:"x-mac-inuit", 146:"x-mac-gaelic"};
    b.parse = function(b, c, d) {
      var f = {};
      c = new m.Parser(b, c);
      for (var h = c.parseUShort(), k = c.parseUShort(), n = c.offset + c.parseUShort(), p = 0; k > p; p++) {
        var r = c.parseUShort(), u = c.parseUShort(), y = c.parseUShort(), w = c.parseUShort();
        w = l[w] || w;
        var A = c.parseUShort(), B = c.parseUShort();
        a: {
          switch(r) {
            case 0:
              if (65535 === y) {
                var T = "und";
                break a;
              }
              if (d) {
                T = d[y];
                break a;
              }
              break;
            case 1:
              T = v[y];
              break a;
            case 3:
              T = x[y];
              break a;
          }
          T = void 0;
        }
        r = e(r, u, y);
        void 0 !== r && void 0 !== T && (r = r === z ? q.UTF16(b, n + B, A) : q.MACSTRING(b, n + B, A, r)) && (u = f[w], void 0 === u && (u = f[w] = {}), u[T] = r);
      }
      return 1 === h && c.parseUShort(), f;
    };
    b.make = function(b, c) {
      var k, m = [], q = {}, p = f(l);
      for (y in b) {
        var u = p[y];
        if (void 0 === u && (u = y), k = parseInt(u), isNaN(k)) {
          throw Error('Name table entry "' + y + '" does not exist, see nameTableNames for complete list.');
        }
        q[k] = b[y];
        m.push(k);
      }
      var y = f(v);
      u = f(x);
      b = [];
      p = [];
      for (var z = 0; z < m.length; z++) {
        k = m[z];
        var A = q[k], M;
        for (M in A) {
          var L = A[M], I = 1, P = y[M], T = w[P], R = e(I, T, P);
          R = n.MACSTRING(L, R);
          void 0 === R && (I = 0, P = c.indexOf(M), 0 > P && (P = c.length, c.push(M)), T = 4, R = n.UTF16(L));
          var aa = r(R, p);
          b.push(h(I, T, P, k, R.length, aa));
          I = u[M];
          void 0 !== I && (L = n.UTF16(L), P = r(L, p), b.push(h(3, 1, I, k, L.length, P)));
        }
      }
      b.sort(function(b, c) {
        return b.platformID - c.platformID || b.encodingID - c.encodingID || b.languageID - c.languageID || b.nameID - c.nameID;
      });
      c = new d.Table("name", [{name:"format", type:"USHORT", value:0}, {name:"count", type:"USHORT", value:b.length}, {name:"stringOffset", type:"USHORT", value:6 + 12 * b.length}]);
      for (k = 0; k < b.length; k++) {
        c.fields.push({name:"record_" + k, type:"RECORD", value:b[k]});
      }
      return c.fields.push({name:"strings", type:"LITERAL", value:p}), c;
    };
  }, {"../parse":10, "../table":13, "../types":32}], 29:[function(c, k, b) {
    var e = c("../parse"), f = c("../table"), h = [{begin:0, end:127}, {begin:128, end:255}, {begin:256, end:383}, {begin:384, end:591}, {begin:592, end:687}, {begin:688, end:767}, {begin:768, end:879}, {begin:880, end:1023}, {begin:11392, end:11519}, {begin:1024, end:1279}, {begin:1328, end:1423}, {begin:1424, end:1535}, {begin:42240, end:42559}, {begin:1536, end:1791}, {begin:1984, end:2047}, {begin:2304, end:2431}, {begin:2432, end:2559}, {begin:2560, end:2687}, {begin:2688, end:2815}, {begin:2816, 
    end:2943}, {begin:2944, end:3071}, {begin:3072, end:3199}, {begin:3200, end:3327}, {begin:3328, end:3455}, {begin:3584, end:3711}, {begin:3712, end:3839}, {begin:4256, end:4351}, {begin:6912, end:7039}, {begin:4352, end:4607}, {begin:7680, end:7935}, {begin:7936, end:8191}, {begin:8192, end:8303}, {begin:8304, end:8351}, {begin:8352, end:8399}, {begin:8400, end:8447}, {begin:8448, end:8527}, {begin:8528, end:8591}, {begin:8592, end:8703}, {begin:8704, end:8959}, {begin:8960, end:9215}, {begin:9216, 
    end:9279}, {begin:9280, end:9311}, {begin:9312, end:9471}, {begin:9472, end:9599}, {begin:9600, end:9631}, {begin:9632, end:9727}, {begin:9728, end:9983}, {begin:9984, end:10175}, {begin:12288, end:12351}, {begin:12352, end:12447}, {begin:12448, end:12543}, {begin:12544, end:12591}, {begin:12592, end:12687}, {begin:43072, end:43135}, {begin:12800, end:13055}, {begin:13056, end:13311}, {begin:44032, end:55215}, {begin:55296, end:57343}, {begin:67840, end:67871}, {begin:19968, end:40959}, {begin:57344, 
    end:63743}, {begin:12736, end:12783}, {begin:64256, end:64335}, {begin:64336, end:65023}, {begin:65056, end:65071}, {begin:65040, end:65055}, {begin:65104, end:65135}, {begin:65136, end:65279}, {begin:65280, end:65519}, {begin:65520, end:65535}, {begin:3840, end:4095}, {begin:1792, end:1871}, {begin:1920, end:1983}, {begin:3456, end:3583}, {begin:4096, end:4255}, {begin:4608, end:4991}, {begin:5024, end:5119}, {begin:5120, end:5759}, {begin:5760, end:5791}, {begin:5792, end:5887}, {begin:6016, 
    end:6143}, {begin:6144, end:6319}, {begin:10240, end:10495}, {begin:40960, end:42127}, {begin:5888, end:5919}, {begin:66304, end:66351}, {begin:66352, end:66383}, {begin:66560, end:66639}, {begin:118784, end:119039}, {begin:119808, end:120831}, {begin:1044480, end:1048573}, {begin:65024, end:65039}, {begin:917504, end:917631}, {begin:6400, end:6479}, {begin:6480, end:6527}, {begin:6528, end:6623}, {begin:6656, end:6687}, {begin:11264, end:11359}, {begin:11568, end:11647}, {begin:19904, end:19967}, 
    {begin:43008, end:43055}, {begin:65536, end:65663}, {begin:65856, end:65935}, {begin:66432, end:66463}, {begin:66464, end:66527}, {begin:66640, end:66687}, {begin:66688, end:66735}, {begin:67584, end:67647}, {begin:68096, end:68191}, {begin:119552, end:119647}, {begin:73728, end:74751}, {begin:119648, end:119679}, {begin:7040, end:7103}, {begin:7168, end:7247}, {begin:7248, end:7295}, {begin:43136, end:43231}, {begin:43264, end:43311}, {begin:43312, end:43359}, {begin:43520, end:43615}, {begin:65936, 
    end:65999}, {begin:66E3, end:66047}, {begin:66208, end:66271}, {begin:127024, end:127135}];
    b.unicodeRanges = h;
    b.getUnicodeRange = function(b) {
      for (var c = 0; c < h.length; c += 1) {
        var e = h[c];
        if (b >= e.begin && b < e.end) {
          return c;
        }
      }
      return -1;
    };
    b.parse = function(b, c) {
      var f = {};
      b = new e.Parser(b, c);
      f.version = b.parseUShort();
      f.xAvgCharWidth = b.parseShort();
      f.usWeightClass = b.parseUShort();
      f.usWidthClass = b.parseUShort();
      f.fsType = b.parseUShort();
      f.ySubscriptXSize = b.parseShort();
      f.ySubscriptYSize = b.parseShort();
      f.ySubscriptXOffset = b.parseShort();
      f.ySubscriptYOffset = b.parseShort();
      f.ySuperscriptXSize = b.parseShort();
      f.ySuperscriptYSize = b.parseShort();
      f.ySuperscriptXOffset = b.parseShort();
      f.ySuperscriptYOffset = b.parseShort();
      f.yStrikeoutSize = b.parseShort();
      f.yStrikeoutPosition = b.parseShort();
      f.sFamilyClass = b.parseShort();
      f.panose = [];
      for (c = 0; 10 > c; c++) {
        f.panose[c] = b.parseByte();
      }
      return f.ulUnicodeRange1 = b.parseULong(), f.ulUnicodeRange2 = b.parseULong(), f.ulUnicodeRange3 = b.parseULong(), f.ulUnicodeRange4 = b.parseULong(), f.achVendID = String.fromCharCode(b.parseByte(), b.parseByte(), b.parseByte(), b.parseByte()), f.fsSelection = b.parseUShort(), f.usFirstCharIndex = b.parseUShort(), f.usLastCharIndex = b.parseUShort(), f.sTypoAscender = b.parseShort(), f.sTypoDescender = b.parseShort(), f.sTypoLineGap = b.parseShort(), f.usWinAscent = b.parseUShort(), f.usWinDescent = 
      b.parseUShort(), 1 <= f.version && (f.ulCodePageRange1 = b.parseULong(), f.ulCodePageRange2 = b.parseULong()), 2 <= f.version && (f.sxHeight = b.parseShort(), f.sCapHeight = b.parseShort(), f.usDefaultChar = b.parseUShort(), f.usBreakChar = b.parseUShort(), f.usMaxContent = b.parseUShort()), f;
    };
    b.make = function(b) {
      return new f.Table("OS/2", [{name:"version", type:"USHORT", value:3}, {name:"xAvgCharWidth", type:"SHORT", value:0}, {name:"usWeightClass", type:"USHORT", value:0}, {name:"usWidthClass", type:"USHORT", value:0}, {name:"fsType", type:"USHORT", value:0}, {name:"ySubscriptXSize", type:"SHORT", value:650}, {name:"ySubscriptYSize", type:"SHORT", value:699}, {name:"ySubscriptXOffset", type:"SHORT", value:0}, {name:"ySubscriptYOffset", type:"SHORT", value:140}, {name:"ySuperscriptXSize", type:"SHORT", 
      value:650}, {name:"ySuperscriptYSize", type:"SHORT", value:699}, {name:"ySuperscriptXOffset", type:"SHORT", value:0}, {name:"ySuperscriptYOffset", type:"SHORT", value:479}, {name:"yStrikeoutSize", type:"SHORT", value:49}, {name:"yStrikeoutPosition", type:"SHORT", value:258}, {name:"sFamilyClass", type:"SHORT", value:0}, {name:"bFamilyType", type:"BYTE", value:0}, {name:"bSerifStyle", type:"BYTE", value:0}, {name:"bWeight", type:"BYTE", value:0}, {name:"bProportion", type:"BYTE", value:0}, {name:"bContrast", 
      type:"BYTE", value:0}, {name:"bStrokeVariation", type:"BYTE", value:0}, {name:"bArmStyle", type:"BYTE", value:0}, {name:"bLetterform", type:"BYTE", value:0}, {name:"bMidline", type:"BYTE", value:0}, {name:"bXHeight", type:"BYTE", value:0}, {name:"ulUnicodeRange1", type:"ULONG", value:0}, {name:"ulUnicodeRange2", type:"ULONG", value:0}, {name:"ulUnicodeRange3", type:"ULONG", value:0}, {name:"ulUnicodeRange4", type:"ULONG", value:0}, {name:"achVendID", type:"CHARARRAY", value:"XXXX"}, {name:"fsSelection", 
      type:"USHORT", value:0}, {name:"usFirstCharIndex", type:"USHORT", value:0}, {name:"usLastCharIndex", type:"USHORT", value:0}, {name:"sTypoAscender", type:"SHORT", value:0}, {name:"sTypoDescender", type:"SHORT", value:0}, {name:"sTypoLineGap", type:"SHORT", value:0}, {name:"usWinAscent", type:"USHORT", value:0}, {name:"usWinDescent", type:"USHORT", value:0}, {name:"ulCodePageRange1", type:"ULONG", value:0}, {name:"ulCodePageRange2", type:"ULONG", value:0}, {name:"sxHeight", type:"SHORT", value:0}, 
      {name:"sCapHeight", type:"SHORT", value:0}, {name:"usDefaultChar", type:"USHORT", value:0}, {name:"usBreakChar", type:"USHORT", value:0}, {name:"usMaxContext", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 30:[function(c, k, b) {
    var e = c("../encoding"), f = c("../parse"), h = c("../table");
    b.parse = function(b, c) {
      var h = {};
      c = new f.Parser(b, c);
      switch(h.version = c.parseVersion(), h.italicAngle = c.parseFixed(), h.underlinePosition = c.parseShort(), h.underlineThickness = c.parseShort(), h.isFixedPitch = c.parseULong(), h.minMemType42 = c.parseULong(), h.maxMemType42 = c.parseULong(), h.minMemType1 = c.parseULong(), h.maxMemType1 = c.parseULong(), h.version) {
        case 1:
          h.names = e.standardNames.slice();
          break;
        case 2:
          h.numberOfGlyphs = c.parseUShort();
          h.glyphNameIndex = Array(h.numberOfGlyphs);
          for (b = 0; b < h.numberOfGlyphs; b++) {
            h.glyphNameIndex[b] = c.parseUShort();
          }
          h.names = [];
          for (b = 0; b < h.numberOfGlyphs; b++) {
            if (h.glyphNameIndex[b] >= e.standardNames.length) {
              var k = c.parseChar();
              h.names.push(c.parseString(k));
            }
          }
          break;
        case 2.5:
          for (h.numberOfGlyphs = c.parseUShort(), h.offset = Array(h.numberOfGlyphs), b = 0; b < h.numberOfGlyphs; b++) {
            h.offset[b] = c.parseChar();
          }
      }
      return h;
    };
    b.make = function() {
      return new h.Table("post", [{name:"version", type:"FIXED", value:196608}, {name:"italicAngle", type:"FIXED", value:0}, {name:"underlinePosition", type:"FWORD", value:0}, {name:"underlineThickness", type:"FWORD", value:0}, {name:"isFixedPitch", type:"ULONG", value:0}, {name:"minMemType42", type:"ULONG", value:0}, {name:"maxMemType42", type:"ULONG", value:0}, {name:"minMemType1", type:"ULONG", value:0}, {name:"maxMemType1", type:"ULONG", value:0}]);
    };
  }, {"../encoding":4, "../parse":10, "../table":13}], 31:[function(c, k, b) {
    function e(b) {
      for (; 0 !== b.length % 4;) {
        b.push(0);
      }
      for (var c = 0, d = 0; d < b.length; d += 4) {
        c += (b[d] << 24) + (b[d + 1] << 16) + (b[d + 2] << 8) + b[d + 3];
      }
      return c % Math.pow(2, 32);
    }
    function f(b, c, d, e) {
      return new n.Record("Table Record", [{name:"tag", type:"TAG", value:void 0 !== b ? b : ""}, {name:"checkSum", type:"ULONG", value:void 0 !== c ? c : 0}, {name:"offset", type:"ULONG", value:void 0 !== d ? d : 0}, {name:"length", type:"ULONG", value:void 0 !== e ? e : 0}]);
    }
    function h(b) {
      var c = new n.Table("sfnt", [{name:"version", type:"TAG", value:"OTTO"}, {name:"numTables", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      c.tables = b;
      c.numTables = b.length;
      var d = Math.pow(2, Math.log(c.numTables) / Math.log(2) | 0);
      c.searchRange = 16 * d;
      c.entrySelector = Math.log(d) / Math.log(2) | 0;
      c.rangeShift = 16 * c.numTables - c.searchRange;
      d = [];
      for (var h = [], k = c.sizeOf() + f().sizeOf() * c.numTables; 0 !== k % 4;) {
        k += 1, h.push({name:"padding", type:"BYTE", value:0});
      }
      for (var l = 0; l < b.length; l += 1) {
        var m = b[l];
        q.argument(4 === m.tableName.length, "Table name" + m.tableName + " is invalid.");
        var p = m.sizeOf(), r = f(m.tableName, e(m.encode()), k, p);
        d.push({name:r.tag + " Table Record", type:"RECORD", value:r});
        h.push({name:m.tableName + " table", type:"RECORD", value:m});
        k += p;
        for (q.argument(!isNaN(k), "Something went wrong calculating the offset."); 0 !== k % 4;) {
          k += 1, h.push({name:"padding", type:"BYTE", value:0});
        }
      }
      return d.sort(function(b, c) {
        return b.value.tag > c.value.tag ? 1 : -1;
      }), c.fields = c.fields.concat(d), c.fields = c.fields.concat(h), c;
    }
    function r(b, c, d) {
      for (var e = 0; e < c.length; e += 1) {
        var f = b.charToGlyphIndex(c[e]);
        if (0 < f) {
          return b.glyphs.get(f).getMetrics();
        }
      }
      return d;
    }
    var q = c("../check"), n = c("../table"), m = c("./cmap"), d = c("./cff"), l = c("./head"), v = c("./hhea"), w = c("./hmtx"), x = c("./ltag"), z = c("./maxp"), p = c("./name"), u = c("./os2"), y = c("./post"), A = c("./gsub"), B = c("./meta");
    b.computeCheckSum = e;
    b.make = h;
    b.fontToTable = function(b) {
      for (var c, f = [], k = [], n = [], q = [], D = [], M = [], L = [], I = 0, P = 0, T = 0, R = 0, aa = 0, N = 0; N < b.glyphs.length; N += 1) {
        var S = b.glyphs.get(N), O = 0 | S.unicode;
        if (isNaN(S.advanceWidth)) {
          throw Error("Glyph " + S.name + " (" + N + "): advanceWidth is not a number.");
        }
        (c > O || void 0 === c) && 0 < O && (c = O);
        O > I && (I = O);
        O = u.getUnicodeRange(O);
        if (32 > O) {
          P |= 1 << O;
        } else {
          if (64 > O) {
            T |= 1 << O - 32;
          } else {
            if (96 > O) {
              R |= 1 << O - 64;
            } else {
              if (!(123 > O)) {
                throw Error("Unicode ranges bits > 123 are reserved for internal usage");
              }
              aa |= 1 << O - 96;
            }
          }
        }
        ".notdef" !== S.name && (O = S.getMetrics(), f.push(O.xMin), k.push(O.yMin), n.push(O.xMax), q.push(O.yMax), M.push(O.leftSideBearing), L.push(O.rightSideBearing), D.push(S.advanceWidth));
      }
      N = Math.min.apply(null, f);
      k = Math.min.apply(null, k);
      n = Math.max.apply(null, n);
      q = Math.max.apply(null, q);
      f = Math.max.apply(null, D);
      for (O = S = 0; O < D.length; O += 1) {
        S += D[O];
      }
      N = {xMin:N, yMin:k, xMax:n, yMax:q, advanceWidthMax:f, advanceWidthAvg:S / D.length, minLeftSideBearing:Math.min.apply(null, M), maxLeftSideBearing:Math.max.apply(null, M), minRightSideBearing:Math.min.apply(null, L)};
      N.ascender = b.ascender;
      N.descender = b.descender;
      D = l.make({flags:3, unitsPerEm:b.unitsPerEm, xMin:N.xMin, yMin:N.yMin, xMax:N.xMax, yMax:N.yMax, lowestRecPPEM:3, createdTimestamp:b.createdTimestamp});
      M = v.make({ascender:N.ascender, descender:N.descender, advanceWidthMax:N.advanceWidthMax, minLeftSideBearing:N.minLeftSideBearing, minRightSideBearing:N.minRightSideBearing, xMaxExtent:N.maxLeftSideBearing + (N.xMax - N.xMin), numberOfHMetrics:b.glyphs.length});
      L = z.make(b.glyphs.length);
      c = u.make({xAvgCharWidth:Math.round(N.advanceWidthAvg), usWeightClass:b.tables.os2.usWeightClass, usWidthClass:b.tables.os2.usWidthClass, usFirstCharIndex:c, usLastCharIndex:I, ulUnicodeRange1:P, ulUnicodeRange2:T, ulUnicodeRange3:R, ulUnicodeRange4:aa, fsSelection:b.tables.os2.fsSelection, sTypoAscender:N.ascender, sTypoDescender:N.descender, sTypoLineGap:0, usWinAscent:N.yMax, usWinDescent:Math.abs(N.yMin), ulCodePageRange1:1, sxHeight:r(b, "xyvw", {yMax:Math.round(N.ascender / 2)}).yMax, 
      sCapHeight:r(b, "HIKLEFJMNTZBDPRAGOQSUVWXY", N).yMax, usDefaultChar:b.hasChar(" ") ? 32 : 0, usBreakChar:b.hasChar(" ") ? 32 : 0});
      I = w.make(b.glyphs);
      P = m.make(b.glyphs);
      T = b.getEnglishName("fontFamily");
      R = b.getEnglishName("fontSubfamily");
      aa = T + " " + R;
      (q = b.getEnglishName("postScriptName")) || (q = T.replace(/\s/g, "") + "-" + R);
      n = {};
      for (var W in b.names) {
        n[W] = b.names[W];
      }
      n.uniqueID || (n.uniqueID = {en:b.getEnglishName("manufacturer") + ":" + aa});
      n.postScriptName || (n.postScriptName = {en:q});
      n.preferredFamily || (n.preferredFamily = b.names.fontFamily);
      n.preferredSubfamily || (n.preferredSubfamily = b.names.fontSubfamily);
      k = [];
      W = p.make(n, k);
      n = 0 < k.length ? x.make(k) : void 0;
      k = y.make();
      R = d.make(b.glyphs, {version:b.getEnglishName("version"), fullName:aa, familyName:T, weightName:R, postScriptName:q, unitsPerEm:b.unitsPerEm, fontBBox:[0, N.yMin, N.ascender, N.advanceWidthMax]});
      T = b.metas && 0 < Object.keys(b.metas).length ? B.make(b.metas) : void 0;
      W = [D, M, L, c, W, P, k, R, I];
      n && W.push(n);
      b.tables.gsub && W.push(A.make(b.tables.gsub));
      T && W.push(T);
      b = h(W);
      W = b.encode();
      W = e(W);
      c = b.fields;
      I = !1;
      for (N = 0; N < c.length; N += 1) {
        if ("head table" === c[N].name) {
          c[N].value.checkSumAdjustment = 2981146554 - W;
          I = !0;
          break;
        }
      }
      if (!I) {
        throw Error("Could not find head table with checkSum to adjust.");
      }
      return b;
    };
  }, {"../check":2, "../table":13, "./cff":14, "./cmap":15, "./gsub":19, "./head":20, "./hhea":21, "./hmtx":22, "./ltag":25, "./maxp":26, "./meta":27, "./name":28, "./os2":29, "./post":30}], 32:[function(c, k, b) {
    function e(b) {
      return function() {
        return b;
      };
    }
    var f = c("./check");
    c = {};
    var h = {}, r = {};
    h.BYTE = function(b) {
      return f.argument(0 <= b && 255 >= b, "Byte value should be between 0 and 255."), [b];
    };
    r.BYTE = e(1);
    h.CHAR = function(b) {
      return [b.charCodeAt(0)];
    };
    r.CHAR = e(1);
    h.CHARARRAY = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        c[d] = b.charCodeAt(d);
      }
      return c;
    };
    r.CHARARRAY = function(b) {
      return b.length;
    };
    h.USHORT = function(b) {
      return [b >> 8 & 255, 255 & b];
    };
    r.USHORT = e(2);
    h.SHORT = function(b) {
      return 32768 <= b && (b = -(65536 - b)), [b >> 8 & 255, 255 & b];
    };
    r.SHORT = e(2);
    h.UINT24 = function(b) {
      return [b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.UINT24 = e(3);
    h.ULONG = function(b) {
      return [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.ULONG = e(4);
    h.LONG = function(b) {
      return 2147483648 <= b && (b = -(4294967296 - b)), [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.LONG = e(4);
    h.FIXED = h.ULONG;
    r.FIXED = r.ULONG;
    h.FWORD = h.SHORT;
    r.FWORD = r.SHORT;
    h.UFWORD = h.USHORT;
    r.UFWORD = r.USHORT;
    h.LONGDATETIME = function(b) {
      return [0, 0, 0, 0, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.LONGDATETIME = e(8);
    h.TAG = function(b) {
      return f.argument(4 === b.length, "Tag should be exactly 4 ASCII characters."), [b.charCodeAt(0), b.charCodeAt(1), b.charCodeAt(2), b.charCodeAt(3)];
    };
    r.TAG = e(4);
    h.Card8 = h.BYTE;
    r.Card8 = r.BYTE;
    h.Card16 = h.USHORT;
    r.Card16 = r.USHORT;
    h.OffSize = h.BYTE;
    r.OffSize = r.BYTE;
    h.SID = h.USHORT;
    r.SID = r.USHORT;
    h.NUMBER = function(b) {
      return -107 <= b && 107 >= b ? [b + 139] : 108 <= b && 1131 >= b ? (b -= 108, [(b >> 8) + 247, 255 & b]) : -1131 <= b && -108 >= b ? (b = -b - 108, [(b >> 8) + 251, 255 & b]) : -32768 <= b && 32767 >= b ? h.NUMBER16(b) : h.NUMBER32(b);
    };
    r.NUMBER = function(b) {
      return h.NUMBER(b).length;
    };
    h.NUMBER16 = function(b) {
      return [28, b >> 8 & 255, 255 & b];
    };
    r.NUMBER16 = e(3);
    h.NUMBER32 = function(b) {
      return [29, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.NUMBER32 = e(5);
    h.REAL = function(b) {
      var c = b.toString(), d = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(c);
      d && (c = parseFloat("1e" + ((d[2] ? +d[2] : 0) + d[1].length)), c = (Math.round(b * c) / c).toString());
      var e = "";
      b = 0;
      for (d = c.length; d > b; b += 1) {
        var f = c[b];
        e += "e" === f ? "-" === c[++b] ? "c" : "b" : "." === f ? "a" : "-" === f ? "e" : f;
      }
      e += 1 & e.length ? "f" : "ff";
      c = [30];
      b = 0;
      for (d = e.length; d > b; b += 2) {
        c.push(parseInt(e.substr(b, 2), 16));
      }
      return c;
    };
    r.REAL = function(b) {
      return h.REAL(b).length;
    };
    h.NAME = h.CHARARRAY;
    r.NAME = r.CHARARRAY;
    h.STRING = h.CHARARRAY;
    r.STRING = r.CHARARRAY;
    c.UTF8 = function(b, c, d) {
      for (var e = [], f = 0; d > f; f++, c += 1) {
        e[f] = b.getUint8(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    c.UTF16 = function(b, c, d) {
      var e = [];
      d /= 2;
      for (var f = 0; d > f; f++, c += 2) {
        e[f] = b.getUint16(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    h.UTF16 = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        var e = b.charCodeAt(d);
        c[c.length] = e >> 8 & 255;
        c[c.length] = 255 & e;
      }
      return c;
    };
    r.UTF16 = function(b) {
      return 2 * b.length;
    };
    var q = {"x-mac-croatian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u0160\u2122\u00b4\u00a8\u2260\u017d\u00d8\u221e\u00b1\u2264\u2265\u2206\u00b5\u2202\u2211\u220f\u0161\u222b\u00aa\u00ba\u03a9\u017e\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u0106\u00ab\u010c\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u0110\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\uf8ff\u00a9\u2044\u20ac\u2039\u203a\u00c6\u00bb\u2013\u00b7\u201a\u201e\u2030\u00c2\u0107\u00c1\u010d\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u0111\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u03c0\u00cb\u02da\u00b8\u00ca\u00e6\u02c7", 
    "x-mac-cyrillic":"\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\u2020\u00b0\u0490\u00a3\u00a7\u2022\u00b6\u0406\u00ae\u00a9\u2122\u0402\u0452\u2260\u0403\u0453\u221e\u00b1\u2264\u2265\u0456\u00b5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040a\u045a\u0458\u0405\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u040b\u045b\u040c\u045c\u0455\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u201e\u040e\u045e\u040f\u045f\u2116\u0401\u0451\u044f\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e", 
    "x-mac-gaelic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u1e02\u00b1\u2264\u2265\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u00e6\u00f8\u1e41\u1e56\u1e57\u027c\u0192\u017f\u1e60\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u1e61\u1e9b\u00ff\u0178\u1e6a\u20ac\u2039\u203a\u0176\u0177\u1e6b\u00b7\u1ef2\u1ef3\u204a\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u2663\u00d2\u00da\u00db\u00d9\u0131\u00dd\u00fd\u0174\u0175\u1e84\u1e85\u1e80\u1e81\u1e82\u1e83", 
    "x-mac-greek":"\u00c4\u00b9\u00b2\u00c9\u00b3\u00d6\u00dc\u0385\u00e0\u00e2\u00e4\u0384\u00a8\u00e7\u00e9\u00e8\u00ea\u00eb\u00a3\u2122\u00ee\u00ef\u2022\u00bd\u2030\u00f4\u00f6\u00a6\u20ac\u00f9\u00fb\u00fc\u2020\u0393\u0394\u0398\u039b\u039e\u03a0\u00df\u00ae\u00a9\u03a3\u03aa\u00a7\u2260\u00b0\u00b7\u0391\u00b1\u2264\u2265\u00a5\u0392\u0395\u0396\u0397\u0399\u039a\u039c\u03a6\u03ab\u03a8\u03a9\u03ac\u039d\u00ac\u039f\u03a1\u2248\u03a4\u00ab\u00bb\u2026\u00a0\u03a5\u03a7\u0386\u0388\u0153\u2013\u2015\u201c\u201d\u2018\u2019\u00f7\u0389\u038a\u038c\u038e\u03ad\u03ae\u03af\u03cc\u038f\u03cd\u03b1\u03b2\u03c8\u03b4\u03b5\u03c6\u03b3\u03b7\u03b9\u03be\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03ce\u03c1\u03c3\u03c4\u03b8\u03c9\u03c2\u03c7\u03c5\u03b6\u03ca\u03cb\u0390\u03b0\u00ad", 
    "x-mac-icelandic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u00dd\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u00d0\u00f0\u00de\u00fe\u00fd\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-inuit":"\u1403\u1404\u1405\u1406\u140a\u140b\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144e\u144f\u1450\u1451\u1455\u1456\u1466\u146d\u146e\u146f\u1470\u1472\u1473\u1483\u148b\u148c\u148d\u148e\u1490\u1491\u00b0\u14a1\u14a5\u14a6\u2022\u00b6\u14a7\u00ae\u00a9\u2122\u14a8\u14aa\u14ab\u14bb\u14c2\u14c3\u14c4\u14c5\u14c7\u14c8\u14d0\u14ef\u14f0\u14f1\u14f2\u14f4\u14f5\u1505\u14d5\u14d6\u14d7\u14d8\u14da\u14db\u14ea\u1528\u1529\u152a\u152b\u152d\u2026\u00a0\u152e\u153e\u1555\u1556\u1557\u2013\u2014\u201c\u201d\u2018\u2019\u1558\u1559\u155a\u155d\u1546\u1547\u1548\u1549\u154b\u154c\u1550\u157f\u1580\u1581\u1582\u1583\u1584\u1585\u158f\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15a0\u15a1\u15a2\u15a3\u15a4\u15a5\u15a6\u157c\u0141\u0142", 
    "x-mac-ce":"\u00c4\u0100\u0101\u00c9\u0104\u00d6\u00dc\u00e1\u0105\u010c\u00e4\u010d\u0106\u0107\u00e9\u0179\u017a\u010e\u00ed\u010f\u0112\u0113\u0116\u00f3\u0117\u00f4\u00f6\u00f5\u00fa\u011a\u011b\u00fc\u2020\u00b0\u0118\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u0119\u00a8\u2260\u0123\u012e\u012f\u012a\u2264\u2265\u012b\u0136\u2202\u2211\u0142\u013b\u013c\u013d\u013e\u0139\u013a\u0145\u0146\u0143\u00ac\u221a\u0144\u0147\u2206\u00ab\u00bb\u2026\u00a0\u0148\u0150\u00d5\u0151\u014c\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u014d\u0154\u0155\u0158\u2039\u203a\u0159\u0156\u0157\u0160\u201a\u201e\u0161\u015a\u015b\u00c1\u0164\u0165\u00cd\u017d\u017e\u016a\u00d3\u00d4\u016b\u016e\u00da\u016f\u0170\u0171\u0172\u0173\u00dd\u00fd\u0137\u017b\u0141\u017c\u0122\u02c7", 
    macintosh:"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-romanian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u0102\u0218\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u0103\u0219\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\u021a\u021b\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-turkish":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u011e\u011f\u0130\u0131\u015e\u015f\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\uf8a0\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7"};
    c.MACSTRING = function(b, c, d, e) {
      e = q[e];
      if (void 0 !== e) {
        for (var f = "", h = 0; d > h; h++) {
          var k = b.getUint8(c + h);
          f += 127 >= k ? String.fromCharCode(k) : e[127 & k];
        }
        return f;
      }
    };
    var n = "function" == typeof WeakMap && new WeakMap, m;
    h.MACSTRING = function(b, c) {
      a: {
        if (!m) {
          for (d in m = {}, q) {
            m[d] = new String(d);
          }
        }
        var d = m[c];
        if (void 0 !== d) {
          if (n) {
            var e = n.get(d);
            if (void 0 !== e) {
              d = e;
              break a;
            }
          }
          c = q[c];
          if (void 0 !== c) {
            e = {};
            for (var f = 0; f < c.length; f++) {
              e[c.charCodeAt(f)] = f + 128;
            }
            d = (n && n.set(d, e), e);
            break a;
          }
        }
        d = void 0;
      }
      if (void 0 !== d) {
        c = [];
        for (e = 0; e < b.length; e++) {
          f = b.charCodeAt(e);
          if (128 <= f && (f = d[f], void 0 === f)) {
            return;
          }
          c[e] = f;
        }
        return c;
      }
    };
    r.MACSTRING = function(b, c) {
      b = h.MACSTRING(b, c);
      return void 0 !== b ? b.length : 0;
    };
    h.INDEX = function(b) {
      var c, d = 1, e = [d], f = [];
      for (c = 0; c < b.length; c += 1) {
        var k = h.OBJECT(b[c]);
        Array.prototype.push.apply(f, k);
        d += k.length;
        e.push(d);
      }
      if (0 === f.length) {
        return [0, 0];
      }
      k = [];
      d = 1 + Math.floor(Math.log(d) / Math.log(2)) / 8 | 0;
      var l = [void 0, h.BYTE, h.USHORT, h.UINT24, h.ULONG][d];
      for (c = 0; c < e.length; c += 1) {
        var m = l(e[c]);
        Array.prototype.push.apply(k, m);
      }
      return Array.prototype.concat(h.Card16(b.length), h.OffSize(d), k, f);
    };
    r.INDEX = function(b) {
      return h.INDEX(b).length;
    };
    h.DICT = function(b) {
      for (var c = [], d = Object.keys(b), e = d.length, f = 0; e > f; f += 1) {
        var k = parseInt(d[f], 0), l = b[k];
        c = c.concat(h.OPERAND(l.value, l.type));
        c = c.concat(h.OPERATOR(k));
      }
      return c;
    };
    r.DICT = function(b) {
      return h.DICT(b).length;
    };
    h.OPERATOR = function(b) {
      return 1200 > b ? [b] : [12, b - 1200];
    };
    h.OPERAND = function(b, c) {
      var d = [];
      if (Array.isArray(c)) {
        for (var e = 0; e < c.length; e += 1) {
          f.argument(b.length === c.length, "Not enough arguments given for type" + c), d = d.concat(h.OPERAND(b[e], c[e]));
        }
      } else {
        if ("SID" === c) {
          d = d.concat(h.NUMBER(b));
        } else {
          if ("offset" === c) {
            d = d.concat(h.NUMBER32(b));
          } else {
            if ("number" === c) {
              d = d.concat(h.NUMBER(b));
            } else {
              if ("real" !== c) {
                throw Error("Unknown operand type " + c);
              }
              d = d.concat(h.REAL(b));
            }
          }
        }
      }
      return d;
    };
    h.OP = h.BYTE;
    r.OP = r.BYTE;
    var d = "function" == typeof WeakMap && new WeakMap;
    h.CHARSTRING = function(b) {
      if (d) {
        var c = d.get(b);
        if (void 0 !== c) {
          return c;
        }
      }
      c = [];
      for (var e = b.length, f = 0; e > f; f += 1) {
        var k = b[f];
        c = c.concat(h[k.type](k.value));
      }
      return d && d.set(b, c), c;
    };
    r.CHARSTRING = function(b) {
      return h.CHARSTRING(b).length;
    };
    h.OBJECT = function(b) {
      var c = h[b.type];
      return f.argument(void 0 !== c, "No encoding function for type " + b.type), c(b.value);
    };
    r.OBJECT = function(b) {
      var c = r[b.type];
      return f.argument(void 0 !== c, "No sizeOf function for type " + b.type), c(b.value);
    };
    h.TABLE = function(b) {
      var c, d = [], e = b.fields.length, k = [], l = [];
      for (c = 0; e > c; c += 1) {
        var m = b.fields[c], n = h[m.type];
        f.argument(void 0 !== n, "No encoding function for field type " + m.type + " (" + m.name + ")");
        var q = b[m.name];
        void 0 === q && (q = m.value);
        n = n(q);
        "TABLE" === m.type ? (l.push(d.length), d = d.concat([0, 0]), k.push(n)) : d = d.concat(n);
      }
      for (c = 0; c < k.length; c += 1) {
        e = l[c], m = d.length, f.argument(65536 > m, "Table " + b.tableName + " too big."), d[e] = m >> 8, d[e + 1] = 255 & m, d = d.concat(k[c]);
      }
      return d;
    };
    r.TABLE = function(b) {
      for (var c = 0, d = b.fields.length, e = 0; d > e; e += 1) {
        var h = b.fields[e], k = r[h.type];
        f.argument(void 0 !== k, "No sizeOf function for field type " + h.type + " (" + h.name + ")");
        var l = b[h.name];
        void 0 === l && (l = h.value);
        c += k(l);
        "TABLE" === h.type && (c += 2);
      }
      return c;
    };
    h.RECORD = h.TABLE;
    r.RECORD = r.TABLE;
    h.LITERAL = function(b) {
      return b;
    };
    r.LITERAL = function(b) {
      return b.length;
    };
    b.decode = c;
    b.encode = h;
    b.sizeOf = r;
  }, {"./check":2}], 33:[function(c, k, b) {
    b.isBrowser = function() {
      return "undefined" != typeof window;
    };
    b.isNode = function() {
      return "undefined" == typeof window;
    };
    b.nodeBufferToArrayBuffer = function(b) {
      for (var c = new ArrayBuffer(b.length), e = new Uint8Array(c), k = 0; k < b.length; ++k) {
        e[k] = b[k];
      }
      return c;
    };
    b.arrayBufferToNodeBuffer = function(b) {
      var c = new Buffer(b.byteLength);
      b = new Uint8Array(b);
      for (var e = 0; e < c.length; ++e) {
        c[e] = b[e];
      }
      return c;
    };
    b.checkArgument = function(b, c) {
      if (!b) {
        throw c;
      }
    };
  }, {}]}, {}, [9])(9);
});
!function(a, c) {
  "object" == typeof exports && "object" == typeof module ? module.exports = c() : "function" == typeof define && define.amd ? define("chevrotain", [], c) : "object" == typeof exports ? exports.chevrotain = c() : a.chevrotain = c();
}("undefined" != typeof self ? self : this, function() {
  return function(a) {
    function c(b) {
      if (k[b]) {
        return k[b].exports;
      }
      var e = k[b] = {i:b, l:!1, exports:{}};
      return a[b].call(e.exports, e, e.exports, c), e.l = !0, e.exports;
    }
    var k = {};
    return c.m = a, c.c = k, c.d = function(a, e, f) {
      c.o(a, e) || Object.defineProperty(a, e, {enumerable:!0, get:f});
    }, c.r = function(a) {
      $jscomp.initSymbol();
      $jscomp.initSymbol();
      $jscomp.initSymbol();
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, {value:"Module"});
      Object.defineProperty(a, "__esModule", {value:!0});
    }, c.t = function(a, e) {
      if ((1 & e && (a = c(a)), 8 & e) || 4 & e && "object" == typeof a && a && a.__esModule) {
        return a;
      }
      var b = Object.create(null);
      if (c.r(b), Object.defineProperty(b, "default", {enumerable:!0, value:a}), 2 & e && "string" != typeof a) {
        for (var h in a) {
          c.d(b, h, function(b) {
            return a[b];
          }.bind(null, h));
        }
      }
      return b;
    }, c.n = function(a) {
      var b = a && a.__esModule ? function() {
        return a.default;
      } : function() {
        return a;
      };
      return c.d(b, "a", b), b;
    }, c.o = function(a, c) {
      return Object.prototype.hasOwnProperty.call(a, c);
    }, c.p = "", c(c.s = 18);
  }([function(a, c, k) {
    function b(a) {
      return a && 0 === a.length;
    }
    function e(a) {
      return null == a ? [] : Object.keys(a);
    }
    function f(a) {
      for (var b = [], c = Object.keys(a), d = 0; d < c.length; d++) {
        b.push(a[c[d]]);
      }
      return b;
    }
    function h(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        Array.isArray(d) ? b = b.concat(h(d)) : b.push(d);
      }
      return b;
    }
    function r(a, b) {
      if (Array.isArray(a)) {
        for (var c = 0; c < a.length; c++) {
          b.call(null, a[c], c);
        }
      } else {
        if (!p(a)) {
          throw Error("non exhaustive match");
        }
        var d = e(a);
        for (c = 0; c < d.length; c++) {
          var f = d[c];
          b.call(null, a[f], f);
        }
      }
    }
    function q(a) {
      return void 0 === a;
    }
    function n(a, b) {
      var c = [];
      if (Array.isArray(a)) {
        for (var d = 0; d < a.length; d++) {
          var e = a[d];
          b.call(null, e) && c.push(e);
        }
      }
      return c;
    }
    function m(a, b) {
      return n(a, function(a) {
        return !b(a);
      });
    }
    function d(a, b) {
      return !!p(a) && a.hasOwnProperty(b);
    }
    function l(a, b) {
      return void 0 !== x(a, function(a) {
        return a === b;
      });
    }
    function v(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push(a[c]);
      }
      return b;
    }
    function w(a) {
      var b = {}, c;
      for (c in a) {
        Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
      }
      return b;
    }
    function x(a, b) {
      for (var c = 0; c < a.length; c++) {
        var d = a[c];
        if (b.call(null, d)) {
          return d;
        }
      }
    }
    function z(a, b, c) {
      var d = Array.isArray(a), h = d ? a : f(a);
      a = d ? [] : e(a);
      for (var k = 0; k < h.length; k++) {
        c = b.call(null, c, h[k], d ? k : a[k]);
      }
      return c;
    }
    function p(a) {
      return a instanceof Object;
    }
    function u(a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
      for (c = 0; c < b.length; c++) {
        var f = b[c];
        if (!q(f)) {
          for (var h = e(f), k = 0; k < h.length; k++) {
            var l = h[k];
            d(a, l) || (a[l] = f[l]);
          }
        }
      }
      return a;
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    c.isEmpty = b;
    c.keys = e;
    c.values = f;
    c.mapValues = function(a, b) {
      for (var c = [], d = e(a), f = 0; f < d.length; f++) {
        var h = d[f];
        c.push(b.call(null, a[h], h));
      }
      return c;
    };
    c.map = function(a, b) {
      for (var c = [], d = 0; d < a.length; d++) {
        c.push(b.call(null, a[d], d));
      }
      return c;
    };
    c.flatten = h;
    c.first = function(a) {
      return b(a) ? void 0 : a[0];
    };
    c.last = function(a) {
      var b = a && a.length;
      return b ? a[b - 1] : void 0;
    };
    c.forEach = r;
    c.isString = function(a) {
      return "string" == typeof a;
    };
    c.isUndefined = q;
    c.isFunction = function(a) {
      return a instanceof Function;
    };
    c.drop = function(a, b) {
      return void 0 === b && (b = 1), a.slice(b, a.length);
    };
    c.dropRight = function(a, b) {
      return void 0 === b && (b = 1), a.slice(0, a.length - b);
    };
    c.filter = n;
    c.reject = m;
    c.pick = function(a, b) {
      for (var c = Object.keys(a), d = {}, e = 0; e < c.length; e++) {
        var f = c[e], h = a[f];
        b(h) && (d[f] = h);
      }
      return d;
    };
    c.has = d;
    c.contains = l;
    c.cloneArr = v;
    c.cloneObj = w;
    c.find = x;
    c.findAll = function(a, b) {
      for (var c = [], d = 0; d < a.length; d++) {
        var e = a[d];
        b.call(null, e) && c.push(e);
      }
      return c;
    };
    c.reduce = z;
    c.compact = function(a) {
      return m(a, function(a) {
        return null == a;
      });
    };
    c.uniq = function(a, b) {
      void 0 === b && (b = function(a) {
        return a;
      });
      var c = [];
      return z(a, function(a, d) {
        var e = b(d);
        return l(c, e) ? a : (c.push(e), a.concat(d));
      }, []);
    };
    c.partial = function(a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
      b = [null].concat(b);
      return Function.bind.apply(a, b);
    };
    c.isArray = function(a) {
      return Array.isArray(a);
    };
    c.isRegExp = function(a) {
      return a instanceof RegExp;
    };
    c.isObject = p;
    c.every = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (!b(a[c], c)) {
          return !1;
        }
      }
      return !0;
    };
    c.difference = function(a, b) {
      return m(a, function(a) {
        return l(b, a);
      });
    };
    c.some = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (b(a[c])) {
          return !0;
        }
      }
      return !1;
    };
    c.indexOf = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (a[c] === b) {
          return c;
        }
      }
      return -1;
    };
    c.sortBy = function(a, b) {
      a = v(a);
      return a.sort(function(a, c) {
        return b(a) - b(c);
      }), a;
    };
    c.zipObject = function(a, b) {
      if (a.length !== b.length) {
        throw Error("can't zipObject with different number of keys and values!");
      }
      for (var c = {}, d = 0; d < a.length; d++) {
        c[a[d]] = b[d];
      }
      return c;
    };
    c.assign = function(a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
      for (c = 0; c < b.length; c++) {
        for (var d = b[c], f = e(d), h = 0; h < f.length; h++) {
          var k = f[h];
          a[k] = d[k];
        }
      }
      return a;
    };
    c.assignNoOverwrite = u;
    c.defaults = function() {
      for (var a = [], b = 0; b < arguments.length; b++) {
        a[b] = arguments[b];
      }
      return u.apply(null, [{}].concat(a));
    };
    c.groupBy = function(a, b) {
      var c = {};
      return r(a, function(a) {
        var d = b(a), e = c[d];
        e ? e.push(a) : c[d] = [a];
      }), c;
    };
    c.merge = function(a, b) {
      a = w(a);
      for (var c = e(b), d = 0; d < c.length; d++) {
        var f = c[d];
        a[f] = b[f];
      }
      return a;
    };
    c.NOOP = function() {
    };
    c.IDENTITY = function(a) {
      return a;
    };
    c.packArray = function(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        b.push(void 0 !== d ? d : void 0);
      }
      return b;
    };
    c.PRINT_ERROR = function(a) {
      console && console.error && console.error("Error: " + a);
    };
    c.PRINT_WARNING = function(a) {
      console && console.warn && console.warn("Warning: " + a);
    };
    c.isES2015MapSupported = function() {
      return "function" == typeof Map;
    };
    c.applyMixins = function(a, b) {
      b.forEach(function(b) {
        var c = b.prototype;
        Object.getOwnPropertyNames(c).forEach(function(d) {
          if ("constructor" !== d) {
            var e = Object.getOwnPropertyDescriptor(c, d);
            e && (e.get || e.set) ? Object.defineProperty(a.prototype, d, e) : a.prototype[d] = b.prototype[d];
          }
        });
      });
    };
    c.toFastProperties = function(a) {
      function b() {
      }
      b.prototype = a;
      new b;
      return a;
    };
  }, function(a, c, k) {
    function b(a) {
      function c(a) {
        return h.map(a, b);
      }
      if (a instanceof q) {
        return {type:"NonTerminal", name:a.nonTerminalName, idx:a.idx};
      }
      if (a instanceof m) {
        return {type:"Flat", definition:c(a.definition)};
      }
      if (a instanceof d) {
        return {type:"Option", idx:a.idx, definition:c(a.definition)};
      }
      if (a instanceof l) {
        return {type:"RepetitionMandatory", name:a.name, idx:a.idx, definition:c(a.definition)};
      }
      if (a instanceof v) {
        return {type:"RepetitionMandatoryWithSeparator", name:a.name, idx:a.idx, separator:b(new p({terminalType:a.separator})), definition:c(a.definition)};
      }
      if (a instanceof x) {
        return {type:"RepetitionWithSeparator", name:a.name, idx:a.idx, separator:b(new p({terminalType:a.separator})), definition:c(a.definition)};
      }
      if (a instanceof w) {
        return {type:"Repetition", name:a.name, idx:a.idx, definition:c(a.definition)};
      }
      if (a instanceof z) {
        return {type:"Alternation", name:a.name, idx:a.idx, definition:c(a.definition)};
      }
      if (a instanceof p) {
        var e = {type:"Terminal", name:r.tokenName(a.terminalType), label:r.tokenLabel(a.terminalType), idx:a.idx}, f = a.terminalType.PATTERN;
        return a.terminalType.PATTERN && (e.pattern = h.isRegExp(f) ? f.source : f), e;
      }
      if (a instanceof n) {
        return {type:"Rule", name:a.name, orgText:a.orgText, definition:c(a.definition)};
      }
      throw Error("non exhaustive match");
    }
    var e, f = this && this.__extends || (e = function(a, b) {
      return (e = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      e(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var h = k(0), r = k(2);
    a = function() {
      function a(a) {
        this.definition = a;
      }
      return a.prototype.accept = function(a) {
        a.visit(this);
        h.forEach(this.definition, function(b) {
          b.accept(a);
        });
      }, a;
    }();
    c.AbstractProduction = a;
    var q = function(a) {
      function b(b) {
        var c = a.call(this, []) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), Object.defineProperty(b.prototype, "definition", {get:function() {
        return void 0 !== this.referencedRule ? this.referencedRule.definition : [];
      }, set:function(a) {
      }, enumerable:!0, configurable:!0}), b.prototype.accept = function(a) {
        a.visit(this);
      }, b;
    }(a);
    c.NonTerminal = q;
    var n = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.orgText = "", h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.Rule = n;
    var m = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.Flat = m;
    var d = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.Option = d;
    var l = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.RepetitionMandatory = l;
    var v = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.RepetitionMandatoryWithSeparator = v;
    var w = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.Repetition = w;
    var x = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.RepetitionWithSeparator = x;
    var z = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, h.assign(c, h.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    c.Alternation = z;
    var p = function() {
      function a(a) {
        this.idx = 1;
        h.assign(this, h.pick(a, function(a) {
          return void 0 !== a;
        }));
      }
      return a.prototype.accept = function(a) {
        a.visit(this);
      }, a;
    }();
    c.Terminal = p;
    c.serializeGrammar = function(a) {
      return h.map(a, b);
    };
    c.serializeProduction = b;
  }, function(a, c, k) {
    function b(a) {
      return h.isString(a.LABEL) && "" !== a.LABEL;
    }
    function e(a) {
      return h.isObject(a) && a.hasOwnProperty("tokenName") && h.isString(a.tokenName) ? a.tokenName : r.functionName(a);
    }
    function f(a) {
      var b = a.name, c = a.pattern, e = {};
      r.defineNameProp(e, b) || (e.tokenName = b);
      h.isUndefined(c) || (e.PATTERN = c);
      if (h.has(a, "parent")) {
        throw "The parent property is no longer supported.\nSee: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.";
      }
      h.has(a, "categories") && (e.CATEGORIES = a.categories);
      q.augmentTokenTypes([e]);
      h.has(a, "label") && (e.LABEL = a.label);
      h.has(a, "group") && (e.GROUP = a.group);
      h.has(a, "pop_mode") && (e.POP_MODE = a.pop_mode);
      h.has(a, "push_mode") && (e.PUSH_MODE = a.push_mode);
      h.has(a, "longer_alt") && (e.LONGER_ALT = a.longer_alt);
      h.has(a, "line_breaks") && (e.LINE_BREAKS = a.line_breaks);
      h.has(a, "start_chars_hint") && (e.START_CHARS_HINT = a.start_chars_hint);
      return e;
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var h = k(0), r = k(4);
    a = k(15);
    var q = k(7);
    c.tokenLabel = function(a) {
      return b(a) ? a.LABEL : e(a);
    };
    c.hasTokenLabel = b;
    c.tokenName = e;
    c.createToken = f;
    c.EOF = f({name:"EOF", pattern:a.Lexer.NA});
    q.augmentTokenTypes([c.EOF]);
    c.createTokenInstance = function(a, b, c, e, f, h, k, q) {
      return {image:b, startOffset:c, endOffset:e, startLine:f, endLine:h, startColumn:k, endColumn:q, tokenTypeIdx:a.tokenTypeIdx, tokenType:a};
    };
    c.tokenMatcher = function(a, b) {
      return q.tokenStructuredMatcher(a, b);
    };
  }, function(a, c, k) {
    var b, e = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function d() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var f = k(4), h = k(0), r = k(26), q = k(2), n = k(23), m = k(16), d = k(10), l = k(24);
    a = k(25);
    var v = k(31), w = k(32), x = k(34), z = k(35), p = k(36), u = k(37);
    k = k(38);
    c.END_OF_FILE = q.createTokenInstance(q.EOF, "", NaN, NaN, NaN, NaN, NaN, NaN);
    Object.freeze(c.END_OF_FILE);
    c.DEFAULT_PARSER_CONFIG = Object.freeze({recoveryEnabled:!1, maxLookahead:4, ignoredIssues:{}, dynamicTokensEnabled:!1, outputCst:!0, errorMessageProvider:d.defaultParserErrorProvider, serializedGrammar:null});
    c.DEFAULT_RULE_CONFIG = Object.freeze({recoveryValueFunc:function() {
    }, resyncEnabled:!0});
    (function(a) {
      a[a.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME";
      a[a.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME";
      a[a.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE";
      a[a.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS";
      a[a.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF";
      a[a.LEFT_RECURSION = 5] = "LEFT_RECURSION";
      a[a.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT";
      a[a.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS";
      a[a.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
      a[a.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME";
      a[a.INVALID_NESTED_RULE_NAME = 10] = "INVALID_NESTED_RULE_NAME";
      a[a.DUPLICATE_NESTED_NAME = 11] = "DUPLICATE_NESTED_NAME";
      a[a.NO_NON_EMPTY_LOOKAHEAD = 12] = "NO_NON_EMPTY_LOOKAHEAD";
      a[a.AMBIGUOUS_PREFIX_ALTS = 13] = "AMBIGUOUS_PREFIX_ALTS";
      a[a.TOO_MANY_ALTS = 14] = "TOO_MANY_ALTS";
    })(c.ParserDefinitionErrorType || (c.ParserDefinitionErrorType = {}));
    c.EMPTY_ALT = function(a) {
      return void 0 === a && (a = void 0), function() {
        return a;
      };
    };
    q = function() {
      function a(a, b) {
        void 0 === b && (b = c.DEFAULT_PARSER_CONFIG);
        this.ignoredIssues = c.DEFAULT_PARSER_CONFIG.ignoredIssues;
        this.definitionErrors = [];
        this.selfAnalysisDone = !1;
        this.initErrorHandler(b);
        this.initLexerAdapter();
        this.initLooksAhead(b);
        this.initRecognizerEngine(a, b);
        this.initRecoverable(b);
        this.initTreeBuilder(b);
        this.initContentAssist();
        this.ignoredIssues = h.has(b, "ignoredIssues") ? b.ignoredIssues : c.DEFAULT_PARSER_CONFIG.ignoredIssues;
        h.toFastProperties(this);
      }
      return a.performSelfAnalysis = function(a) {
        a.performSelfAnalysis();
      }, a.prototype.performSelfAnalysis = function() {
        var b, c = this;
        this.selfAnalysisDone = !0;
        var e = f.classNameFromInstance(this), k = this.gastProductionsCache;
        if (this.serializedGrammar) {
          var q = n.deserializeGrammar(this.serializedGrammar, this.tokensMap);
          h.forEach(q, function(a) {
            c.gastProductionsCache.put(a.name, a);
          });
        }
        q = l.resolveGrammar({rules:k.values()});
        if (this.definitionErrors.push.apply(this.definitionErrors, q), h.isEmpty(q)) {
          e = l.validateGrammar({rules:k.values(), maxLookahead:this.maxLookahead, tokenTypes:h.values(this.tokensMap), ignoredIssues:this.ignoredIssues, errMsgProvider:d.defaultGrammarValidatorErrorProvider, grammarName:e}), this.definitionErrors.push.apply(this.definitionErrors, e);
        }
        h.isEmpty(this.definitionErrors) && (this.resyncFollows = r.computeAllProdsFollows(k.values()));
        if (this.allRuleNames = m.analyzeCst(k.values(), this.fullRuleNameToShort).allRuleNames, !a.DEFER_DEFINITION_ERRORS_HANDLING && !h.isEmpty(this.definitionErrors)) {
          throw b = h.map(this.definitionErrors, function(a) {
            return a.message;
          }), Error("Parser Definition Errors detected:\n " + b.join("\n-------------------------------\n"));
        }
      }, a.DEFER_DEFINITION_ERRORS_HANDLING = !1, a;
    }();
    c.Parser = q;
    h.applyMixins(q, [a.Recoverable, v.LooksAhead, w.TreeBuilder, x.LexerAdapter, p.RecognizerEngine, z.RecognizerApi, u.ErrorHandler, k.ContentAssist]);
    a = function(a) {
      function b(b, d) {
        void 0 === d && (d = c.DEFAULT_PARSER_CONFIG);
        d = h.cloneObj(d);
        return d.outputCst = !0, a.call(this, b, d) || this;
      }
      return e(b, a), b;
    }(q);
    c.CstParser = a;
    a = function(a) {
      function b(b, d) {
        void 0 === d && (d = c.DEFAULT_PARSER_CONFIG);
        d = h.cloneObj(d);
        return d.outputCst = !1, a.call(this, b, d) || this;
      }
      return e(b, a), b;
    }(q);
    c.EmbeddedActionsParser = a;
  }, function(a, c, k) {
    function b(a) {
      return a.name || a.toString().match(f)[1];
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var e = k(0);
    c.classNameFromInstance = function(a) {
      return b(a.constructor);
    };
    var f = /^\s*function\s*(\S*)\s*\(/;
    c.functionName = b;
    c.defineNameProp = function(a, b) {
      var c = Object.getOwnPropertyDescriptor(a, "name");
      return !(!e.isUndefined(c) && !c.configurable || (Object.defineProperty(a, "name", {enumerable:!1, configurable:!0, writable:!1, value:b}), 0));
    };
    a = function() {
      function a() {
        this._state = {};
      }
      return a.prototype.keys = function() {
        return e.keys(this._state);
      }, a.prototype.values = function() {
        return e.values(this._state);
      }, a.prototype.put = function(a, b) {
        this._state[a] = b;
      }, a.prototype.putAll = function(a) {
        this._state = e.assign(this._state, a._state);
      }, a.prototype.get = function(a) {
        return this._state[a];
      }, a.prototype.containsKey = function(a) {
        return e.has(this._state, a);
      }, a.prototype.clear = function() {
        this._state = {};
      }, a;
    }();
    c.HashTable = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.visit = function(a) {
        if (a instanceof b.NonTerminal) {
          return this.visitNonTerminal(a);
        }
        if (a instanceof b.Flat) {
          return this.visitFlat(a);
        }
        if (a instanceof b.Option) {
          return this.visitOption(a);
        }
        if (a instanceof b.RepetitionMandatory) {
          return this.visitRepetitionMandatory(a);
        }
        if (a instanceof b.RepetitionMandatoryWithSeparator) {
          return this.visitRepetitionMandatoryWithSeparator(a);
        }
        if (a instanceof b.RepetitionWithSeparator) {
          return this.visitRepetitionWithSeparator(a);
        }
        if (a instanceof b.Repetition) {
          return this.visitRepetition(a);
        }
        if (a instanceof b.Alternation) {
          return this.visitAlternation(a);
        }
        if (a instanceof b.Terminal) {
          return this.visitTerminal(a);
        }
        if (a instanceof b.Rule) {
          return this.visitRule(a);
        }
        throw Error("non exhaustive match");
      }, a.prototype.visitNonTerminal = function(a) {
      }, a.prototype.visitFlat = function(a) {
      }, a.prototype.visitOption = function(a) {
      }, a.prototype.visitRepetition = function(a) {
      }, a.prototype.visitRepetitionMandatory = function(a) {
      }, a.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
      }, a.prototype.visitRepetitionWithSeparator = function(a) {
      }, a.prototype.visitAlternation = function(a) {
      }, a.prototype.visitTerminal = function(a) {
      }, a.prototype.visitRule = function(a) {
      }, a;
    }();
    c.GAstVisitor = a;
  }, function(a, c, k) {
    function b(a, b, c) {
      this.name = "MismatchedTokenException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    function e(a, b, c) {
      this.name = "NoViableAltException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    function f(a, b) {
      this.name = "NotAllInputParsedException";
      this.message = a;
      this.token = b;
      this.resyncedTokens = [];
    }
    function h(a, b, c) {
      this.name = "EarlyExitException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var r = k(0), q = ["MismatchedTokenException", "NoViableAltException", "EarlyExitException", "NotAllInputParsedException"];
    Object.freeze(q);
    c.isRecognitionException = function(a) {
      return r.contains(q, a.name);
    };
    c.MismatchedTokenException = b;
    b.prototype = Error.prototype;
    c.NoViableAltException = e;
    e.prototype = Error.prototype;
    c.NotAllInputParsedException = f;
    f.prototype = Error.prototype;
    c.EarlyExitException = h;
    h.prototype = Error.prototype;
  }, function(a, c, k) {
    function b(a) {
      for (var b = v.cloneArr(a), c = !0; c;) {
        a = v.compact(v.flatten(v.map(a, function(a) {
          return a.CATEGORIES;
        })));
        var d = v.difference(a, b);
        b = b.concat(d);
        v.isEmpty(d) ? c = !1 : a = d;
      }
      return b;
    }
    function e(a) {
      v.forEach(a, function(a) {
        q(a) || (c.tokenIdxToClass.put(c.tokenShortNameIdx, a), a.tokenTypeIdx = c.tokenShortNameIdx++);
        n(a) && !v.isArray(a.CATEGORIES) && (a.CATEGORIES = [a.CATEGORIES]);
        n(a) || (a.CATEGORIES = []);
        m(a) || (a.categoryMatches = []);
        d(a) || (a.categoryMatchesMap = {});
        l(a) || (a.tokenName = w.tokenName(a));
      });
    }
    function f(a) {
      v.forEach(a, function(a) {
        a.categoryMatches = [];
        v.forEach(a.categoryMatchesMap, function(b, d) {
          a.categoryMatches.push(c.tokenIdxToClass.get(d).tokenTypeIdx);
        });
      });
    }
    function h(a) {
      v.forEach(a, function(a) {
        r([], a);
      });
    }
    function r(a, b) {
      v.forEach(a, function(a) {
        b.categoryMatchesMap[a.tokenTypeIdx] = !0;
      });
      v.forEach(b.CATEGORIES, function(c) {
        var d = a.concat(b);
        v.contains(d, c) || r(d, c);
      });
    }
    function q(a) {
      return v.has(a, "tokenTypeIdx");
    }
    function n(a) {
      return v.has(a, "CATEGORIES");
    }
    function m(a) {
      return v.has(a, "categoryMatches");
    }
    function d(a) {
      return v.has(a, "categoryMatchesMap");
    }
    function l(a) {
      return v.has(a, "tokenName");
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var v = k(0);
    a = k(4);
    var w = k(2);
    c.tokenStructuredMatcher = function(a, b) {
      a = a.tokenTypeIdx;
      return a === b.tokenTypeIdx || !0 === b.isParent && !0 === b.categoryMatchesMap[a];
    };
    c.tokenStructuredMatcherNoCategories = function(a, b) {
      return a.tokenTypeIdx === b.tokenTypeIdx;
    };
    c.tokenShortNameIdx = 1;
    c.tokenIdxToClass = new a.HashTable;
    c.augmentTokenTypes = function(a) {
      a = b(a);
      e(a);
      h(a);
      f(a);
      v.forEach(a, function(a) {
        a.isParent = 0 < a.categoryMatches.length;
      });
    };
    c.expandCategories = b;
    c.assignTokenDefaultProps = e;
    c.assignCategoriesTokensProp = f;
    c.assignCategoriesMapProp = h;
    c.singleAssignCategoriesToksMap = r;
    c.hasShortKeyProperty = q;
    c.hasCategoriesProperty = n;
    c.hasExtendingTokensTypesProperty = m;
    c.hasExtendingTokensTypesMapProperty = d;
    c.hasTokenNameProperty = l;
    c.isTokenType = function(a) {
      return v.has(a, "tokenTypeIdx");
    };
  }, function(a, c, k) {
    var b, e = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function e() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (e.prototype = c.prototype, new e);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var f = k(0), h = k(1);
    a = k(5);
    var r = k(2);
    c.isSequenceProd = function(a) {
      return a instanceof h.Flat || a instanceof h.Option || a instanceof h.Repetition || a instanceof h.RepetitionMandatory || a instanceof h.RepetitionMandatoryWithSeparator || a instanceof h.RepetitionWithSeparator || a instanceof h.Terminal || a instanceof h.Rule;
    };
    c.isOptionalProd = function d(a, b) {
      return void 0 === b && (b = []), !!(a instanceof h.Option || a instanceof h.Repetition || a instanceof h.RepetitionWithSeparator) || (a instanceof h.Alternation ? f.some(a.definition, function(a) {
        return d(a, b);
      }) : !(a instanceof h.NonTerminal && f.contains(b, a)) && a instanceof h.AbstractProduction && (a instanceof h.NonTerminal && b.push(a), f.every(a.definition, function(a) {
        return d(a, b);
      })));
    };
    c.isBranchingProd = function(a) {
      return a instanceof h.Alternation;
    };
    c.getProductionDslName = function(a) {
      if (a instanceof h.NonTerminal) {
        return "SUBRULE";
      }
      if (a instanceof h.Option) {
        return "OPTION";
      }
      if (a instanceof h.Alternation) {
        return "OR";
      }
      if (a instanceof h.RepetitionMandatory) {
        return "AT_LEAST_ONE";
      }
      if (a instanceof h.RepetitionMandatoryWithSeparator) {
        return "AT_LEAST_ONE_SEP";
      }
      if (a instanceof h.RepetitionWithSeparator) {
        return "MANY_SEP";
      }
      if (a instanceof h.Repetition) {
        return "MANY";
      }
      if (a instanceof h.Terminal) {
        return "CONSUME";
      }
      throw Error("non exhaustive match");
    };
    k = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.separator = "-", b.dslMethods = {option:[], alternation:[], repetition:[], repetitionWithSeparator:[], repetitionMandatory:[], repetitionMandatoryWithSeparator:[]}, b;
      }
      return e(b, a), b.prototype.visitTerminal = function(a) {
        var b = r.tokenName(a.terminalType) + this.separator + "Terminal";
        f.has(this.dslMethods, b) || (this.dslMethods[b] = []);
        this.dslMethods[b].push(a);
      }, b.prototype.visitNonTerminal = function(a) {
        var b = a.nonTerminalName + this.separator + "Terminal";
        f.has(this.dslMethods, b) || (this.dslMethods[b] = []);
        this.dslMethods[b].push(a);
      }, b.prototype.visitOption = function(a) {
        this.dslMethods.option.push(a);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.dslMethods.repetitionWithSeparator.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.dslMethods.repetitionMandatory.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.dslMethods.repetition.push(a);
      }, b.prototype.visitAlternation = function(a) {
        this.dslMethods.alternation.push(a);
      }, b;
    }(a.GAstVisitor);
    c.DslMethodsCollectorVisitor = k;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    c.BITS_FOR_METHOD_IDX = 4;
    c.BITS_FOR_OCCURRENCE_IDX = 4;
    c.BITS_FOR_RULE_IDX = 24;
    c.BITS_FOR_ALT_IDX = 8;
    c.OR_IDX = 1 << c.BITS_FOR_METHOD_IDX;
    c.OPTION_IDX = 2 << c.BITS_FOR_METHOD_IDX;
    c.MANY_IDX = 3 << c.BITS_FOR_METHOD_IDX;
    c.AT_LEAST_ONE_IDX = 4 << c.BITS_FOR_METHOD_IDX;
    c.MANY_SEP_IDX = 5 << c.BITS_FOR_METHOD_IDX;
    c.AT_LEAST_ONE_SEP_IDX = 6 << c.BITS_FOR_METHOD_IDX;
    c.getKeyForAutomaticLookahead = function(a, b, c) {
      return c | b | a;
    };
    var b = 32 - c.BITS_FOR_ALT_IDX;
    c.getKeyForAltIndex = function(a, c, h, k) {
      return h | c | a | k + 1 << b;
    };
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(2), e = k(0), f = k(0), h = k(1), r = k(8), q = k(11), n = k(17), m = k(3);
    c.defaultParserErrorProvider = {buildMismatchTokenMessage:function(a) {
      var c = a.expected, d = a.actual;
      a.previous;
      a.ruleName;
      return "Expecting " + (b.hasTokenLabel(c) ? "--\x3e " + b.tokenLabel(c) + " <--" : "token of type --\x3e " + b.tokenName(c) + " <--") + " but found --\x3e '" + d.image + "' <--";
    }, buildNotAllInputParsedMessage:function(a) {
      var b = a.firstRedundant;
      a.ruleName;
      return "Redundant input, expecting EOF but found: " + b.image;
    }, buildNoViableAltMessage:function(a) {
      var c = a.expectedPathsPerAlt, d = a.actual, e = (a.previous, a.customUserDescription);
      a = (a.ruleName, "\nbut found: '" + f.first(d).image + "'");
      if (e) {
        return "Expecting: " + e + a;
      }
      c = f.reduce(c, function(a, b) {
        return a.concat(b);
      }, []);
      c = f.map(c, function(a) {
        return "[" + f.map(a, function(a) {
          return b.tokenLabel(a);
        }).join(", ") + "]";
      });
      return "Expecting: one of these possible Token sequences:\n" + f.map(c, function(a, b) {
        return "  " + (b + 1) + ". " + a;
      }).join("\n") + a;
    }, buildEarlyExitMessage:function(a) {
      var c = a.expectedIterationPaths, d = a.actual, e = a.customUserDescription;
      a = (a.ruleName, "\nbut found: '" + f.first(d).image + "'");
      return e ? "Expecting: " + e + a : "Expecting: " + ("expecting at least one iteration which starts with one of these possible Token sequences::\n  <" + f.map(c, function(a) {
        return "[" + f.map(a, function(a) {
          return b.tokenLabel(a);
        }).join(",") + "]";
      }).join(" ,") + ">") + a;
    }};
    Object.freeze(c.defaultParserErrorProvider);
    c.defaultGrammarResolverErrorProvider = {buildRuleNotFoundError:function(a, b) {
      return "Invalid grammar, reference to a rule which is not defined: ->" + b.nonTerminalName + "<-\ninside top level rule: ->" + a.name + "<-";
    }};
    c.defaultGrammarValidatorErrorProvider = {buildDuplicateFoundError:function(a, c) {
      a = a.name;
      var d = f.first(c), e = d.idx, k = r.getProductionDslName(d);
      d = d instanceof h.Terminal ? b.tokenName(d.terminalType) : d instanceof h.NonTerminal ? d.nonTerminalName : "";
      return ("->" + k + "<- with numerical suffix: ->" + e + "<-\n                  " + (d ? "and argument: ->" + d + "<-" : "") + "\n                  appears more than once (" + c.length + " times) in the top level rule: ->" + a + "<-.\n                  " + (0 === e ? "Also note that numerical suffix 0 means " + k + " without any suffix." : "") + "\n                  To fix this make sure each usage of " + k + " " + (d ? "with the argument: ->" + d + "<-" : "") + "\n                  in the rule ->" + 
      a + "<- has a different occurrence index (0-5), as that combination acts as a unique\n                  position key in the grammar, which is needed by the parsing engine.\n                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ").replace(/[ \t]+/g, " ").replace(/\s\s+/g, "\n");
    }, buildInvalidNestedRuleNameError:function(a, b) {
      return "Invalid nested rule name: ->" + b.name + "<- inside rule: ->" + a.name + "<-\nit must match the pattern: ->" + q.validNestedRuleName.toString() + "<-.\nNote that this means a nested rule name must start with the '$'(dollar) sign.";
    }, buildDuplicateNestedRuleNameError:function(a, b) {
      return "Duplicate nested rule name: ->" + f.first(b).name + "<- inside rule: ->" + a.name + "<-\nA nested name must be unique in the scope of a top level grammar rule.";
    }, buildNamespaceConflictError:function(a) {
      return "Namespace conflict found in grammar.\nThe grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" + a.name + ">.\nTo resolve this make sure each Terminal and Non-Terminal names are unique\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\nand Non-Terminal names start with a lower case letter.";
    }, buildAlternationPrefixAmbiguityError:function(a) {
      var c = f.map(a.prefixPath, function(a) {
        return b.tokenLabel(a);
      }).join(", "), d = 0 === a.alternation.idx ? "" : a.alternation.idx;
      return "Ambiguous alternatives: <" + a.ambiguityIndices.join(" ,") + "> due to common lookahead prefix\nin <OR" + d + "> inside <" + a.topLevelRule.name + "> Rule,\n<" + c + "> may appears as a prefix path in all these alternatives.\nhttps://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\nFor Further details.";
    }, buildAlternationAmbiguityError:function(a) {
      var c = f.map(a.prefixPath, function(a) {
        return b.tokenLabel(a);
      }).join(", "), d = 0 === a.alternation.idx ? "" : a.alternation.idx;
      a = "Ambiguous alternatives: <" + a.ambiguityIndices.join(" ,") + "> in <OR" + d + "> inside <" + a.topLevelRule.name + "> Rule,\n<" + c + "> may appears as a prefix path in all these alternatives.\n";
      c = n.VERSION.replace(/\./g, "_");
      return a = a + "To Resolve this, try one of of the following: \n1. Refactor your grammar to be LL(K) for the current value of k (by default k=" + m.DEFAULT_PARSER_CONFIG.maxLookahead + "})\n2. Increase the value of K for your grammar by providing a larger 'maxLookahead' value in the parser's config\n3. This issue can be ignored (if you know what you are doing...), see https://sap.github.io/chevrotain/documentation/" + c + "/interfaces/iparserconfig.html#ignoredissues for more details\n";
    }, buildEmptyRepetitionError:function(a) {
      var b = r.getProductionDslName(a.repetition);
      return 0 !== a.repetition.idx && (b += a.repetition.idx), "The repetition <" + b + "> within Rule <" + a.topLevelRule.name + "> can never consume any tokens.\nThis could lead to an infinite loop.";
    }, buildTokenNameError:function(a) {
      return "Invalid Grammar Token name: ->" + b.tokenName(a.tokenType) + "<- it must match the pattern: ->" + a.expectedPattern.toString() + "<-";
    }, buildEmptyAlternationError:function(a) {
      return "Ambiguous empty alternative: <" + (a.emptyChoiceIdx + 1) + "> in <OR" + a.alternation.idx + "> inside <" + a.topLevelRule.name + "> Rule.\nOnly the last alternative may be an empty alternative.";
    }, buildTooManyAlternativesError:function(a) {
      return "An Alternation cannot have more than 256 alternatives:\n<OR" + a.alternation.idx + "> inside <" + a.topLevelRule.name + "> Rule.\n has " + (a.alternation.definition.length + 1) + " alternatives.";
    }, buildLeftRecursionError:function(a) {
      var b = a.topLevelRule.name;
      return "Left Recursion found in grammar.\nrule: <" + b + "> can be invoked from itself (directly or indirectly)\nwithout consuming any Tokens. The grammar path that causes this is: \n " + (b + " --\x3e " + e.map(a.leftRecursionPath, function(a) {
        return a.name;
      }).concat([b]).join(" --\x3e ")) + "\n To fix this refactor your grammar to remove the left recursion.\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
    }, buildInvalidRuleNameError:function(a) {
      return "Invalid grammar rule name: ->" + a.topLevelRule.name + "<- it must match the pattern: ->" + a.expectedPattern.toString() + "<-";
    }, buildDuplicateRuleNameError:function(a) {
      return "Duplicate definition, rule: ->" + (a.topLevelRule instanceof h.Rule ? a.topLevelRule.name : a.topLevelRule) + "<- is already defined in the grammar: ->" + a.grammarName + "<-";
    }};
  }, function(a, c, k) {
    function b(a) {
      return B.getProductionDslName(a) + "_#_" + a.idx + "_#_" + e(a);
    }
    function e(a) {
      return a instanceof H.Terminal ? D.tokenName(a.terminalType) : a instanceof H.NonTerminal ? a.nonTerminalName : "";
    }
    function f(a, b) {
      var d = [], e = a.name;
      return e.match(c.validTermsPattern) || d.push({message:b.buildInvalidRuleNameError({topLevelRule:a, expectedPattern:c.validTermsPattern}), type:A.ParserDefinitionErrorType.INVALID_RULE_NAME, ruleName:e}), d;
    }
    function h(a, b, d) {
      var e, f = [];
      return b.name.match(c.validNestedRuleName) || (e = d.buildInvalidNestedRuleNameError(a, b), f.push({message:e, type:A.ParserDefinitionErrorType.INVALID_NESTED_RULE_NAME, ruleName:a.name})), f;
    }
    function r(a, b) {
      var d = [];
      return D.tokenName(a).match(c.validTermsPattern) || d.push({message:b.buildTokenNameError({tokenType:a, expectedPattern:c.validTermsPattern}), type:A.ParserDefinitionErrorType.INVALID_TOKEN_NAME}), d;
    }
    function q(a, b, c, d) {
      var e = [];
      1 < y.reduce(b, function(b, c) {
        return c.name === a.name ? b + 1 : b;
      }, 0) && (b = d.buildDuplicateRuleNameError({topLevelRule:a, grammarName:c}), e.push({message:b, type:A.ParserDefinitionErrorType.DUPLICATE_RULE_NAME, ruleName:a.name}));
      return e;
    }
    function n(a, b, c, d) {
      void 0 === d && (d = []);
      var e = [];
      b = m(b.definition);
      if (u.isEmpty(b)) {
        return [];
      }
      var f = a.name;
      u.contains(b, a) && e.push({message:c.buildLeftRecursionError({topLevelRule:a, leftRecursionPath:d}), type:A.ParserDefinitionErrorType.LEFT_RECURSION, ruleName:f});
      b = u.difference(b, d.concat([a]));
      b = u.map(b, function(b) {
        var e = u.cloneArr(d);
        return e.push(b), n(a, b, c, e);
      });
      return e.concat(u.flatten(b));
    }
    function m(a) {
      var b = [];
      if (u.isEmpty(a)) {
        return b;
      }
      var c = u.first(a);
      if (c instanceof H.NonTerminal) {
        b.push(c.referencedRule);
      } else {
        if (c instanceof H.Flat || c instanceof H.Option || c instanceof H.RepetitionMandatory || c instanceof H.RepetitionMandatoryWithSeparator || c instanceof H.RepetitionWithSeparator || c instanceof H.Repetition) {
          b = b.concat(m(c.definition));
        } else {
          if (c instanceof H.Alternation) {
            b = u.flatten(u.map(c.definition, function(a) {
              return m(a.definition);
            }));
          } else {
            if (!(c instanceof H.Terminal)) {
              throw Error("non exhaustive match");
            }
          }
        }
      }
      c = B.isOptionalProd(c);
      var d = 1 < a.length;
      return c && d ? (a = u.drop(a), b.concat(m(a))) : b;
    }
    function d(a, b) {
      var c = new K;
      a.accept(c);
      return u.reduce(c.alternations, function(c, d) {
        var e = u.dropRight(d.definition);
        e = u.map(e, function(c, e) {
          c = E.nextPossibleTokensAfter([c], [], null, 1);
          return u.isEmpty(c) ? {message:b.buildEmptyAlternationError({topLevelRule:a, alternation:d, emptyChoiceIdx:e}), type:A.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT, ruleName:a.name, occurrence:d.idx, alternative:e + 1} : null;
        });
        return c.concat(u.compact(e));
      }, []);
    }
    function l(a, b, c, d) {
      var e = new K;
      a.accept(e);
      e = e.alternations;
      var f = c[a.name];
      return f && (e = y.reject(e, function(a) {
        return f[B.getProductionDslName(a) + (0 === a.idx ? "" : a.idx)];
      })), u.reduce(e, function(c, e) {
        var f = F.getLookaheadPathsForOr(e.idx, a, b), h = function(a, b, c, d) {
          var e = [], f = y.reduce(a, function(b, c, d) {
            return y.forEach(c, function(c) {
              var f = [d];
              y.forEach(a, function(a, b) {
                d !== b && F.containsPath(a, c) && f.push(b);
              });
              1 < f.length && !F.containsPath(e, c) && (e.push(c), b.push({alts:f, path:c}));
            }), b;
          }, []);
          return u.map(f, function(a) {
            var e = y.map(a.alts, function(a) {
              return a + 1;
            });
            return {message:d.buildAlternationAmbiguityError({topLevelRule:c, alternation:b, ambiguityIndices:e, prefixPath:a.path}), type:A.ParserDefinitionErrorType.AMBIGUOUS_ALTS, ruleName:c.name, occurrence:b.idx, alternatives:[a.alts]};
          });
        }(f, e, a, d);
        e = x(f, e, a, d);
        return c.concat(h, e);
      }, []);
    }
    function v(a, b) {
      var c = new K;
      a.accept(c);
      return u.reduce(c.alternations, function(c, d) {
        return 255 < d.definition.length && c.push({message:b.buildTooManyAlternativesError({topLevelRule:a, alternation:d}), type:A.ParserDefinitionErrorType.TOO_MANY_ALTS, ruleName:a.name, occurrence:d.idx}), c;
      }, []);
    }
    function w(a, b, c) {
      var d = [];
      return y.forEach(a, function(a) {
        var e = new M;
        a.accept(e);
        y.forEach(e.allProductions, function(e) {
          var f = F.getProdType(e);
          f = F.getLookaheadPathsForOptionalProd(e.idx, a, f, b)[0];
          y.isEmpty(y.flatten(f)) && (e = c.buildEmptyRepetitionError({topLevelRule:a, repetition:e}), d.push({message:e, type:A.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD, ruleName:a.name}));
        });
      }), d;
    }
    function x(a, b, c, d) {
      var e = [], f = y.reduce(a, function(a, b, c) {
        b = y.map(b, function(a) {
          return {idx:c, path:a};
        });
        return a.concat(b);
      }, []);
      return y.forEach(f, function(a) {
        var h = a.idx, k = a.path;
        a = y.findAll(f, function(a) {
          return a.idx < h && F.isStrictPrefixOfPath(a.path, k);
        });
        a = y.map(a, function(a) {
          var e = [a.idx + 1, h + 1], f = 0 === b.idx ? "" : b.idx;
          return {message:d.buildAlternationPrefixAmbiguityError({topLevelRule:c, alternation:b, ambiguityIndices:e, prefixPath:a.path}), type:A.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS, ruleName:c.name, occurrence:f, alternatives:e};
        });
        e = e.concat(a);
      }), e;
    }
    var z, p = this && this.__extends || (z = function(a, b) {
      return (z = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      z(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var u = k(0), y = k(0), A = k(3), B = k(8), D = k(2), F = k(12), C = k(16), E = k(13), H = k(1);
    a = k(5);
    c.validateGrammar = function(a, c, k, m, p, x) {
      var z = u.map(a, function(a) {
        return function(a, c) {
          var d = new Q;
          a.accept(d);
          d = u.groupBy(d.allProductions, b);
          d = u.pick(d, function(a) {
            return 1 < a.length;
          });
          return u.map(u.values(d), function(b) {
            var d = u.first(b);
            b = c.buildDuplicateFoundError(a, b);
            var f = B.getProductionDslName(d);
            b = {message:b, type:A.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS, ruleName:a.name, dslName:f, occurrence:d.idx};
            d = e(d);
            return d && (b.parameter = d), b;
          });
        }(a, p);
      }), I = u.map(a, function(a) {
        return n(a, a, p);
      }), E = [], L = [], F = [];
      y.every(I, y.isEmpty) && (E = y.map(a, function(a) {
        return d(a, p);
      }), L = y.map(a, function(a) {
        return l(a, c, m, p);
      }), F = w(a, c, p));
      var P = function(a, b, c) {
        var d = [], e = y.map(b, function(a) {
          return D.tokenName(a);
        });
        return y.forEach(a, function(a) {
          var b = a.name;
          y.contains(e, b) && (a = c.buildNamespaceConflictError(a), d.push({message:a, type:A.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE, ruleName:b}));
        }), d;
      }(a, k, p);
      k = u.map(k, function(a) {
        return r(a, p);
      });
      var H = function(a, b) {
        var c = [];
        return y.forEach(a, function(a) {
          var d = new C.NamedDSLMethodsCollectorVisitor("");
          a.accept(d);
          d = y.map(d.result, function(a) {
            return a.orgProd;
          });
          c.push(y.map(d, function(c) {
            return h(a, c, b);
          }));
        }), y.flatten(c);
      }(a, p), K = function(a, b) {
        var c = [];
        return y.forEach(a, function(a) {
          var d = new C.NamedDSLMethodsCollectorVisitor("");
          a.accept(d);
          d = y.groupBy(d.result, function(a) {
            return a.name;
          });
          d = y.pick(d, function(a) {
            return 1 < a.length;
          });
          y.forEach(y.values(d), function(d) {
            d = y.map(d, function(a) {
              return a.orgProd;
            });
            d = b.buildDuplicateNestedRuleNameError(a, d);
            c.push({message:d, type:A.ParserDefinitionErrorType.DUPLICATE_NESTED_NAME, ruleName:a.name});
          });
        }), c;
      }(a, p), M = y.map(a, function(a) {
        return v(a, p);
      }), R = y.map(a, function(a) {
        return f(a, p);
      }), T = y.map(a, function(b) {
        return q(b, a, x, p);
      });
      return u.flatten(z.concat(k, H, K, F, I, E, L, P, M, R, T));
    };
    c.identifyProductionForDuplicates = b;
    var Q = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.allProductions = [], b;
      }
      return p(b, a), b.prototype.visitNonTerminal = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitOption = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitAlternation = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitTerminal = function(a) {
        this.allProductions.push(a);
      }, b;
    }(a.GAstVisitor);
    c.OccurrenceValidationCollector = Q;
    c.validTermsPattern = /^[a-zA-Z_]\w*$/;
    c.validNestedRuleName = new RegExp(c.validTermsPattern.source.replace("^", "^\\$"));
    c.validateRuleName = f;
    c.validateNestedRuleName = h;
    c.validateTokenName = r;
    c.validateRuleDoesNotAlreadyExist = q;
    c.validateRuleIsOverridden = function(a, b, c) {
      var d, e = [];
      return u.contains(b, a) || (d = "Invalid rule override, rule: ->" + a + "<- cannot be overridden in the grammar: ->" + c + "<-as it is not defined in any of the super grammars ", e.push({message:d, type:A.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE, ruleName:a})), e;
    };
    c.validateNoLeftRecursion = n;
    c.getFirstNoneTerminal = m;
    var K = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.alternations = [], b;
      }
      return p(b, a), b.prototype.visitAlternation = function(a) {
        this.alternations.push(a);
      }, b;
    }(a.GAstVisitor);
    c.validateEmptyOrAlternative = d;
    c.validateAmbiguousAlternationAlternatives = l;
    var M = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.allProductions = [], b;
      }
      return p(b, a), b.prototype.visitRepetitionWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.allProductions.push(a);
      }, b;
    }(a.GAstVisitor);
    c.RepetionCollector = M;
    c.validateTooManyAlts = v;
    c.validateSomeNonEmptyLookaheadPath = w;
    c.checkPrefixAlternativesAmbiguities = x;
  }, function(a, c, k) {
    function b(a, b) {
      function c(a, b) {
        return d.reduce(a, function(a, c, e) {
          return e !== b ? (c = d.map(c, function(a) {
            return a.partialPath;
          }), a.concat(c)) : a;
        }, []);
      }
      function e(a, b) {
        return void 0 === d.find(a, function(a) {
          return d.every(b, function(b, c) {
            return d = b, e = a[c], d === e || d && e && (d.categoryMatchesMap[e.tokenTypeIdx] || e.categoryMatchesMap[d.tokenTypeIdx]);
            var d, e;
          });
        });
      }
      function f(a) {
        for (var b = [], c = 0; c < a; c++) {
          b.push([]);
        }
        return b;
      }
      var k = d.map(a, function(a) {
        return l.possiblePathsFrom([a], 1);
      });
      a = f(k.length);
      for (var m = 1; m <= b; m++) {
        var n = k;
        k = f(n.length);
        for (var q = 0; q < n.length; q++) {
          for (var p = n[q], r = c(n, q), u = 0; u < p.length; u++) {
            var v = p[u].partialPath, w = p[u].suffixDef;
            e(r, v) || d.isEmpty(w) || v.length === b ? (w = a[q], h(w, v) || w.push(v)) : (v = l.possiblePathsFrom(w, m + 1, v), k[q] = k[q].concat(v));
          }
        }
      }
      return a;
    }
    function e(a, c, d) {
      a = new z(a, m.ALTERNATION);
      return c.accept(a), b(a.result, d);
    }
    function f(a, c, d, e) {
      var f = new z(a, d);
      c.accept(f);
      f = f.result;
      a = (new x(c, a, d)).startWalking();
      return b([new w.Flat({definition:f}), new w.Flat({definition:a})], e);
    }
    function h(a, b) {
      return void 0 !== d.find(a, function(a) {
        return b.length === a.length && d.every(b, function(b, c) {
          return b === a[c] || a[c].categoryMatchesMap[b.tokenTypeIdx];
        });
      });
    }
    function r(a) {
      return d.every(a, function(a) {
        return d.every(a, function(a) {
          return d.every(a, function(a) {
            return d.isEmpty(a.categoryMatches);
          });
        });
      });
    }
    var q, n = this && this.__extends || (q = function(a, b) {
      return (q = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      q(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var m, d = k(0), l = k(13);
    a = k(14);
    var v = k(7), w = k(1);
    k = k(5);
    !function(a) {
      a[a.OPTION = 0] = "OPTION";
      a[a.REPETITION = 1] = "REPETITION";
      a[a.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY";
      a[a.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
      a[a.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR";
      a[a.ALTERNATION = 5] = "ALTERNATION";
    }(m = c.PROD_TYPE || (c.PROD_TYPE = {}));
    c.getProdType = function(a) {
      if (a instanceof w.Option) {
        return m.OPTION;
      }
      if (a instanceof w.Repetition) {
        return m.REPETITION;
      }
      if (a instanceof w.RepetitionMandatory) {
        return m.REPETITION_MANDATORY;
      }
      if (a instanceof w.RepetitionMandatoryWithSeparator) {
        return m.REPETITION_MANDATORY_WITH_SEPARATOR;
      }
      if (a instanceof w.RepetitionWithSeparator) {
        return m.REPETITION_WITH_SEPARATOR;
      }
      if (a instanceof w.Alternation) {
        return m.ALTERNATION;
      }
      throw Error("non exhaustive match");
    };
    c.buildLookaheadFuncForOr = function(a, b, c, d, f, h) {
      a = e(a, b, c);
      return h(a, d, r(a) ? v.tokenStructuredMatcherNoCategories : v.tokenStructuredMatcher, f);
    };
    c.buildLookaheadFuncForOptionalProd = function(a, b, c, d, e, h) {
      a = f(a, b, e, c);
      b = r(a) ? v.tokenStructuredMatcherNoCategories : v.tokenStructuredMatcher;
      return h(a[0], b, d);
    };
    c.buildAlternativesLookAheadFunc = function(a, b, c, e) {
      var f = a.length, h = d.every(a, function(a) {
        return d.every(a, function(a) {
          return 1 === a.length;
        });
      });
      if (b) {
        return function(b) {
          b = d.map(b, function(a) {
            return a.GATE;
          });
          for (var e = 0; e < f; e++) {
            var h = a[e], k = h.length, l = b[e];
            if (void 0 === l || !1 !== l.call(this)) {
              a: for (l = 0; l < k; l++) {
                for (var m = h[l], n = m.length, q = 0; q < n; q++) {
                  var p = this.LA(q + 1);
                  if (!1 === c(p, m[q])) {
                    continue a;
                  }
                }
                return e;
              }
            }
          }
        };
      }
      if (h && !e) {
        b = d.map(a, function(a) {
          return d.flatten(a);
        });
        var k = d.reduce(b, function(a, b, c) {
          return d.forEach(b, function(b) {
            d.has(a, b.tokenTypeIdx) || (a[b.tokenTypeIdx] = c);
            d.forEach(b.categoryMatches, function(b) {
              d.has(a, b) || (a[b] = c);
            });
          }), a;
        }, []);
        return function() {
          var a = this.LA(1);
          return k[a.tokenTypeIdx];
        };
      }
      return function() {
        for (var b = 0; b < f; b++) {
          var d = a[b], e = d.length, h = 0;
          a: for (; h < e; h++) {
            for (var k = d[h], l = k.length, m = 0; m < l; m++) {
              var n = this.LA(m + 1);
              if (!1 === c(n, k[m])) {
                continue a;
              }
            }
            return b;
          }
        }
      };
    };
    c.buildSingleAlternativeLookaheadFunction = function(a, b, c) {
      var e = d.every(a, function(a) {
        return 1 === a.length;
      }), f = a.length;
      if (e && !c) {
        c = d.flatten(a);
        if (1 === c.length && d.isEmpty(c[0].categoryMatches)) {
          var h = c[0].tokenTypeIdx;
          return function() {
            return this.LA(1).tokenTypeIdx === h;
          };
        }
        var k = d.reduce(c, function(a, b, c) {
          return a[b.tokenTypeIdx] = !0, d.forEach(b.categoryMatches, function(b) {
            a[b] = !0;
          }), a;
        }, []);
        return function() {
          var a = this.LA(1);
          return !0 === k[a.tokenTypeIdx];
        };
      }
      return function() {
        var c = 0;
        a: for (; c < f; c++) {
          for (var d = a[c], e = d.length, h = 0; h < e; h++) {
            var k = this.LA(h + 1);
            if (!1 === b(k, d[h])) {
              continue a;
            }
          }
          return !0;
        }
        return !1;
      };
    };
    var x = function(a) {
      function b(b, c, d) {
        var e = a.call(this) || this;
        return e.topProd = b, e.targetOccurrence = c, e.targetProdType = d, e;
      }
      return n(b, a), b.prototype.startWalking = function() {
        return this.walk(this.topProd), this.restDef;
      }, b.prototype.checkIsTarget = function(a, b, c, d) {
        return a.idx === this.targetOccurrence && this.targetProdType === b && (this.restDef = c.concat(d), !0);
      }, b.prototype.walkOption = function(b, c, d) {
        this.checkIsTarget(b, m.OPTION, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkAtLeastOne = function(b, c, d) {
        this.checkIsTarget(b, m.REPETITION_MANDATORY, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkAtLeastOneSep = function(b, c, d) {
        this.checkIsTarget(b, m.REPETITION_MANDATORY_WITH_SEPARATOR, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkMany = function(b, c, d) {
        this.checkIsTarget(b, m.REPETITION, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkManySep = function(b, c, d) {
        this.checkIsTarget(b, m.REPETITION_WITH_SEPARATOR, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b;
    }(a.RestWalker), z = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.targetOccurrence = b, d.targetProdType = c, d.result = [], d;
      }
      return n(b, a), b.prototype.checkIsTarget = function(a, b) {
        a.idx === this.targetOccurrence && this.targetProdType === b && (this.result = a.definition);
      }, b.prototype.visitOption = function(a) {
        this.checkIsTarget(a, m.OPTION);
      }, b.prototype.visitRepetition = function(a) {
        this.checkIsTarget(a, m.REPETITION);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.checkIsTarget(a, m.REPETITION_MANDATORY);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.checkIsTarget(a, m.REPETITION_MANDATORY_WITH_SEPARATOR);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.checkIsTarget(a, m.REPETITION_WITH_SEPARATOR);
      }, b.prototype.visitAlternation = function(a) {
        this.checkIsTarget(a, m.ALTERNATION);
      }, b;
    }(k.GAstVisitor);
    c.lookAheadSequenceFromAlternatives = b;
    c.getLookaheadPathsForOr = e;
    c.getLookaheadPathsForOptionalProd = f;
    c.containsPath = h;
    c.isStrictPrefixOfPath = function(a, b) {
      return a.length < b.length && d.every(a, function(a, c) {
        c = b[c];
        return a === c || c.categoryMatchesMap[a.tokenTypeIdx];
      });
    };
    c.areTokenCategoriesNotUsed = r;
  }, function(a, c, k) {
    function b(a, b, c, e) {
      c = h.cloneArr(c);
      c.push(a.name);
      e = h.cloneArr(e);
      return e.push(1), {idx:b, def:a.definition, ruleStack:c, occurrenceStack:e};
    }
    var e, f = this && this.__extends || (e = function(a, b) {
      return (e = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      e(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    a = k(14);
    var h = k(0), r = k(2), q = k(21), n = k(1);
    k = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.topProd = b, d.path = c, d.possibleTokTypes = [], d.nextProductionName = "", d.nextProductionOccurrence = 0, d.found = !1, d.isAtEndOfPath = !1, d;
      }
      return f(b, a), b.prototype.startWalking = function() {
        if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name) {
          throw Error("The path does not start with the walker's top Rule!");
        }
        return this.ruleStack = h.cloneArr(this.path.ruleStack).reverse(), this.occurrenceStack = h.cloneArr(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
      }, b.prototype.walk = function(b, c) {
        void 0 === c && (c = []);
        this.found || a.prototype.walk.call(this, b, c);
      }, b.prototype.walkProdRef = function(a, b, c) {
        a.referencedRule.name === this.nextProductionName && a.idx === this.nextProductionOccurrence && (b = b.concat(c), this.updateExpectedNext(), this.walk(a.referencedRule, b));
      }, b.prototype.updateExpectedNext = function() {
        h.isEmpty(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
      }, b;
    }(a.RestWalker);
    c.AbstractNextPossibleTokensWalker = k;
    k = function(a) {
      function b(b, c) {
        b = a.call(this, b, c) || this;
        return b.path = c, b.nextTerminalName = "", b.nextTerminalOccurrence = 0, b.nextTerminalName = r.tokenName(b.path.lastTok), b.nextTerminalOccurrence = b.path.lastTokOccurrence, b;
      }
      return f(b, a), b.prototype.walkTerminal = function(a, b, c) {
        this.isAtEndOfPath && r.tokenName(a.terminalType) === this.nextTerminalName && a.idx === this.nextTerminalOccurrence && !this.found && (a = b.concat(c), a = new n.Flat({definition:a}), this.possibleTokTypes = q.first(a), this.found = !0);
      }, b;
    }(k);
    c.NextAfterTokenWalker = k;
    a = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.topRule = b, d.occurrence = c, d.result = {token:void 0, occurrence:void 0, isEndOfRule:void 0}, d;
      }
      return f(b, a), b.prototype.startWalking = function() {
        return this.walk(this.topRule), this.result;
      }, b;
    }(a.RestWalker);
    c.AbstractNextTerminalAfterProductionWalker = a;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkMany = function(b, c, d) {
        b.idx === this.occurrence ? (b = h.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof n.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkMany.call(this, b, c, d);
      }, b;
    }(a);
    c.NextTerminalAfterManyWalker = k;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkManySep = function(b, c, d) {
        b.idx === this.occurrence ? (b = h.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof n.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkManySep.call(this, b, c, d);
      }, b;
    }(a);
    c.NextTerminalAfterManySepWalker = k;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkAtLeastOne = function(b, c, d) {
        b.idx === this.occurrence ? (b = h.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof n.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkAtLeastOne.call(this, b, c, d);
      }, b;
    }(a);
    c.NextTerminalAfterAtLeastOneWalker = k;
    a = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkAtLeastOneSep = function(b, c, d) {
        b.idx === this.occurrence ? (b = h.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof n.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkAtLeastOneSep.call(this, b, c, d);
      }, b;
    }(a);
    c.NextTerminalAfterAtLeastOneSepWalker = a;
    c.possiblePathsFrom = function w(a, b, c) {
      function d(d) {
        d = w(d.concat(h.drop(a, f + 1)), b, c);
        return e.concat(d);
      }
      void 0 === c && (c = []);
      c = h.cloneArr(c);
      for (var e = [], f = 0; c.length < b && f < a.length;) {
        var k = a[f];
        if (k instanceof n.Flat || k instanceof n.NonTerminal) {
          return d(k.definition);
        }
        if (k instanceof n.Option) {
          e = d(k.definition);
        } else {
          if (k instanceof n.RepetitionMandatory) {
            return d(k = k.definition.concat([new n.Repetition({definition:k.definition})]));
          }
          if (k instanceof n.RepetitionMandatoryWithSeparator) {
            return d(k = [new n.Flat({definition:k.definition}), new n.Repetition({definition:[new n.Terminal({terminalType:k.separator})].concat(k.definition)})]);
          }
          if (k instanceof n.RepetitionWithSeparator) {
            k = k.definition.concat([new n.Repetition({definition:[new n.Terminal({terminalType:k.separator})].concat(k.definition)})]), e = d(k);
          } else {
            if (k instanceof n.Repetition) {
              k = k.definition.concat([new n.Repetition({definition:k.definition})]), e = d(k);
            } else {
              if (k instanceof n.Alternation) {
                return h.forEach(k.definition, function(a) {
                  e = d(a.definition);
                }), e;
              }
              if (!(k instanceof n.Terminal)) {
                throw Error("non exhaustive match");
              }
              c.push(k.terminalType);
            }
          }
        }
        f++;
      }
      return e.push({partialPath:c, suffixDef:h.drop(a, f)}), e;
    };
    c.nextPossibleTokensAfter = function(a, c, e, f) {
      var d = ["EXIT_NONE_TERMINAL"], k = !1, l = c.length;
      f = l - f - 1;
      var q = [], r = [];
      for (r.push({idx:-1, def:a, ruleStack:[], occurrenceStack:[]}); !h.isEmpty(r);) {
        var v = r.pop();
        if ("EXIT_ALTERNATIVE" !== v) {
          a = v.def;
          var w = v.idx, D = v.ruleStack, F = v.occurrenceStack;
          if (!h.isEmpty(a)) {
            if (v = a[0], "EXIT_NONE_TERMINAL" === v) {
              var C = {idx:w, def:h.drop(a), ruleStack:h.dropRight(D), occurrenceStack:h.dropRight(F)};
              r.push(C);
            } else {
              if (v instanceof n.Terminal) {
                if (w < l - 1) {
                  w += 1, e(c[w], v.terminalType) && (C = {idx:w, def:h.drop(a), ruleStack:D, occurrenceStack:F}, r.push(C));
                } else {
                  if (w !== l - 1) {
                    throw Error("non exhaustive match");
                  }
                  q.push({nextTokenType:v.terminalType, nextTokenOccurrence:v.idx, ruleStack:D, occurrenceStack:F});
                  k = !0;
                }
              } else {
                if (v instanceof n.NonTerminal) {
                  C = h.cloneArr(D), C.push(v.nonTerminalName), D = h.cloneArr(F), D.push(v.idx), C = {idx:w, def:v.definition.concat(d, h.drop(a)), ruleStack:C, occurrenceStack:D}, r.push(C);
                } else {
                  if (v instanceof n.Option) {
                    var E = {idx:w, def:h.drop(a), ruleStack:D, occurrenceStack:F};
                    r.push(E);
                    r.push("EXIT_ALTERNATIVE");
                    a = {idx:w, def:v.definition.concat(h.drop(a)), ruleStack:D, occurrenceStack:F};
                    r.push(a);
                  } else {
                    if (v instanceof n.RepetitionMandatory) {
                      C = new n.Repetition({definition:v.definition, idx:v.idx}), C = {idx:w, def:v.definition.concat([C], h.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(C);
                    } else {
                      if (v instanceof n.RepetitionMandatoryWithSeparator) {
                        E = new n.Terminal({terminalType:v.separator}), C = new n.Repetition({definition:[E].concat(v.definition), idx:v.idx}), C = {idx:w, def:v.definition.concat([C], h.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(C);
                      } else {
                        if (v instanceof n.RepetitionWithSeparator) {
                          E = {idx:w, def:h.drop(a), ruleStack:D, occurrenceStack:F}, r.push(E), r.push("EXIT_ALTERNATIVE"), E = new n.Terminal({terminalType:v.separator}), E = new n.Repetition({definition:[E].concat(v.definition), idx:v.idx}), a = {idx:w, def:v.definition.concat([E], h.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(a);
                        } else {
                          if (v instanceof n.Repetition) {
                            E = {idx:w, def:h.drop(a), ruleStack:D, occurrenceStack:F}, r.push(E), r.push("EXIT_ALTERNATIVE"), E = new n.Repetition({definition:v.definition, idx:v.idx}), a = {idx:w, def:v.definition.concat([E], h.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(a);
                          } else {
                            if (v instanceof n.Alternation) {
                              for (E = v.definition.length - 1; 0 <= E; E--) {
                                var H = {idx:w, def:v.definition[E].definition.concat(h.drop(a)), ruleStack:D, occurrenceStack:F};
                                r.push(H);
                                r.push("EXIT_ALTERNATIVE");
                              }
                            } else {
                              if (v instanceof n.Flat) {
                                r.push({idx:w, def:v.definition.concat(h.drop(a)), ruleStack:D, occurrenceStack:F});
                              } else {
                                if (!(v instanceof n.Rule)) {
                                  throw Error("non exhaustive match");
                                }
                                r.push(b(v, w, D, F));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          k && h.last(r).idx <= f && r.pop();
        }
      }
      return q;
    };
  }, function(a, c, k) {
    function b(a, b, c) {
      return [new f.Option({definition:[new f.Terminal({terminalType:a.separator})].concat(a.definition)})].concat(b, c);
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var e = k(0), f = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.walk = function(a, b) {
        var c = this;
        void 0 === b && (b = []);
        e.forEach(a.definition, function(h, d) {
          d = e.drop(a.definition, d + 1);
          if (h instanceof f.NonTerminal) {
            c.walkProdRef(h, d, b);
          } else {
            if (h instanceof f.Terminal) {
              c.walkTerminal(h, d, b);
            } else {
              if (h instanceof f.Flat) {
                c.walkFlat(h, d, b);
              } else {
                if (h instanceof f.Option) {
                  c.walkOption(h, d, b);
                } else {
                  if (h instanceof f.RepetitionMandatory) {
                    c.walkAtLeastOne(h, d, b);
                  } else {
                    if (h instanceof f.RepetitionMandatoryWithSeparator) {
                      c.walkAtLeastOneSep(h, d, b);
                    } else {
                      if (h instanceof f.RepetitionWithSeparator) {
                        c.walkManySep(h, d, b);
                      } else {
                        if (h instanceof f.Repetition) {
                          c.walkMany(h, d, b);
                        } else {
                          if (!(h instanceof f.Alternation)) {
                            throw Error("non exhaustive match");
                          }
                          c.walkOr(h, d, b);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        });
      }, a.prototype.walkTerminal = function(a, b, c) {
      }, a.prototype.walkProdRef = function(a, b, c) {
      }, a.prototype.walkFlat = function(a, b, c) {
        b = b.concat(c);
        this.walk(a, b);
      }, a.prototype.walkOption = function(a, b, c) {
        b = b.concat(c);
        this.walk(a, b);
      }, a.prototype.walkAtLeastOne = function(a, b, c) {
        b = [new f.Option({definition:a.definition})].concat(b, c);
        this.walk(a, b);
      }, a.prototype.walkAtLeastOneSep = function(a, c, e) {
        c = b(a, c, e);
        this.walk(a, c);
      }, a.prototype.walkMany = function(a, b, c) {
        b = [new f.Option({definition:a.definition})].concat(b, c);
        this.walk(a, b);
      }, a.prototype.walkManySep = function(a, c, e) {
        c = b(a, c, e);
        this.walk(a, c);
      }, a.prototype.walkOr = function(a, b, c) {
        var h = this, d = b.concat(c);
        e.forEach(a.definition, function(a) {
          a = new f.Flat({definition:[a]});
          h.walk(a, d);
        });
      }, a;
    }();
    c.RestWalker = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(27), e = k(0), f = k(7);
    a = k(20);
    !function(a) {
      a[a.MISSING_PATTERN = 0] = "MISSING_PATTERN";
      a[a.INVALID_PATTERN = 1] = "INVALID_PATTERN";
      a[a.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND";
      a[a.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND";
      a[a.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND";
      a[a.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND";
      a[a.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST";
      a[a.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
      a[a.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
      a[a.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
      a[a.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
      a[a.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND";
      a[a.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN";
      a[a.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS";
      a[a.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN";
      a[a.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR";
      a[a.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK";
    }(c.LexerDefinitionErrorType || (c.LexerDefinitionErrorType = {}));
    var h = {deferDefinitionErrorsHandling:!1, positionTracking:"full", lineTerminatorsPattern:/\n|\r\n?/g, lineTerminatorCharacters:["\n", "\r"], ensureOptimizations:!1, safeMode:!1, errorMessageProvider:a.defaultLexerErrorProvider};
    Object.freeze(h);
    a = function() {
      function a(a, c) {
        var k = this;
        if (void 0 === c && (c = h), this.lexerDefinition = a, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.config = void 0, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, "boolean" == typeof c) {
          throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\na boolean 2nd argument is no longer supported");
        }
        if (this.config = e.merge(h, c), this.config.lineTerminatorsPattern === h.lineTerminatorsPattern) {
          this.config.lineTerminatorsPattern = b.LineTerminatorOptimizedTester;
        } else {
          if (this.config.lineTerminatorCharacters === h.lineTerminatorCharacters) {
            throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
          }
        }
        if (c.safeMode && c.ensureOptimizations) {
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        }
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);
        this.trackEndLines = /full/i.test(this.config.positionTracking);
        var d, l = !0;
        e.isArray(a) ? ((d = {modes:{}}).modes[b.DEFAULT_MODE] = e.cloneArr(a), d[b.DEFAULT_MODE] = b.DEFAULT_MODE) : (l = !1, d = e.cloneObj(a));
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(b.performRuntimeChecks(d, this.trackStartLines, this.config.lineTerminatorCharacters));
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(b.performWarningRuntimeChecks(d, this.trackStartLines, this.config.lineTerminatorCharacters));
        d.modes = d.modes ? d.modes : {};
        e.forEach(d.modes, function(a, b) {
          d.modes[b] = e.reject(a, function(a) {
            return e.isUndefined(a);
          });
        });
        var n = e.keys(d.modes);
        if (e.forEach(d.modes, function(a, d) {
          if (k.modes.push(d), k.lexerDefinitionErrors = k.lexerDefinitionErrors.concat(b.validatePatterns(a, n)), e.isEmpty(k.lexerDefinitionErrors)) {
            f.augmentTokenTypes(a), a = b.analyzeTokenTypes(a, {lineTerminatorCharacters:k.config.lineTerminatorCharacters, positionTracking:c.positionTracking, ensureOptimizations:c.ensureOptimizations, safeMode:c.safeMode}), k.patternIdxToConfig[d] = a.patternIdxToConfig, k.charCodeToPatternIdxToConfig[d] = a.charCodeToPatternIdxToConfig, k.emptyGroups = e.merge(k.emptyGroups, a.emptyGroups), k.hasCustom = a.hasCustom || k.hasCustom, k.canModeBeOptimized[d] = a.canBeOptimized;
          }
        }), this.defaultMode = d.defaultMode, !e.isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
          throw a = e.map(this.lexerDefinitionErrors, function(a) {
            return a.message;
          }).join("-----------------------\n"), Error("Errors detected in definition of Lexer:\n" + a);
        }
        if (e.forEach(this.lexerDefinitionWarning, function(a) {
          e.PRINT_WARNING(a.message);
        }), b.SUPPORT_STICKY ? (this.chopInput = e.IDENTITY, this.match = this.matchWithTest) : (this.updateLastIndex = e.NOOP, this.match = this.matchWithExec), l && (this.handleModes = e.NOOP), !1 === this.trackStartLines && (this.computeNewColumn = e.IDENTITY), !1 === this.trackEndLines && (this.updateTokenEndLineColumnLocation = e.NOOP), /full/i.test(this.config.positionTracking)) {
          this.createTokenInstance = this.createFullToken;
        } else {
          if (/onlyStart/i.test(this.config.positionTracking)) {
            this.createTokenInstance = this.createStartOnlyToken;
          } else {
            if (!/onlyOffset/i.test(this.config.positionTracking)) {
              throw Error('Invalid <positionTracking> config option: "' + this.config.positionTracking + '"');
            }
            this.createTokenInstance = this.createOffsetOnlyToken;
          }
        }
        this.hasCustom ? this.addToken = this.addTokenUsingPush : this.addToken = this.addTokenUsingMemberAccess;
        a = e.reduce(this.canModeBeOptimized, function(a, b, c) {
          return !1 === b && a.push(c), a;
        }, []);
        if (c.ensureOptimizations && !e.isEmpty(a)) {
          throw Error("Lexer Modes: < " + a.join(", ") + ' > cannot be optimized.\n\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n\t Or inspect the console log for details on how to resolve these issues.');
        }
      }
      return a.prototype.tokenize = function(a, b) {
        if (void 0 === b && (b = this.defaultMode), !e.isEmpty(this.lexerDefinitionErrors)) {
          throw a = e.map(this.lexerDefinitionErrors, function(a) {
            return a.message;
          }).join("-----------------------\n"), Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" + a);
        }
        return this.tokenizeInternal(a, b);
      }, a.prototype.tokenizeInternal = function(a, c) {
        function f(a) {
          T.push(a);
          P = this.charCodeToPatternIdxToConfig[a];
          I = this.patternIdxToConfig[a];
          L = L = I.length;
          a = this.canModeBeOptimized[a] && !1 === this.config.safeMode;
          N = P && a ? function(a) {
            a = P[a];
            return void 0 === a ? R : a;
          } : function() {
            return I;
          };
        }
        var d, h, k, n, q, r, p, u = this, y = a, A = y.length, B = 0, D = 0, F = Array(this.hasCustom ? 0 : Math.floor(a.length / 10)), C = [], E = this.trackStartLines ? 1 : void 0, H = this.trackStartLines ? 1 : void 0, Q = b.cloneEmptyGroups(this.emptyGroups), K = this.trackStartLines, M = this.config.lineTerminatorsPattern, L = 0, I = [], P = [], T = [], R = [];
        Object.freeze(R);
        var aa, N = void 0, S = function(a) {
          if (1 === T.length && void 0 === a.tokenType.PUSH_MODE) {
            var b = u.config.errorMessageProvider.buildUnableToPopLexerModeMessage(a);
            C.push({offset:a.startOffset, line:void 0 !== a.startLine ? a.startLine : void 0, column:void 0 !== a.startColumn ? a.startColumn : void 0, length:a.image.length, message:b});
          } else {
            T.pop(), a = e.last(T), I = u.patternIdxToConfig[a], P = u.charCodeToPatternIdxToConfig[a], L = I.length, a = u.canModeBeOptimized[a] && !1 === u.config.safeMode, N = P && a ? function(a) {
              a = P[a];
              return void 0 === a ? R : a;
            } : function() {
              return I;
            };
          }
        };
        for (f.call(this, c); B < A;) {
          c = null;
          var O = y.charCodeAt(B);
          var W = N(O);
          var J = W.length;
          for (d = 0; d < J; d++) {
            var U = (aa = W[d]).pattern;
            if (!1 !== (ea = aa.short) ? O === ea && (c = U) : !0 === aa.isCustom ? c = null !== (p = U.exec(y, B, F, Q)) ? p[0] : p : (this.updateLastIndex(U, B), c = this.match(U, a, B)), null !== c) {
              void 0 !== (U = aa.longerAlt) && (U = I[U], d = U.pattern, !0 === U.isCustom ? h = null !== (p = d.exec(y, B, F, Q)) ? p[0] : p : (this.updateLastIndex(d, B), h = this.match(d, a, B)), h && h.length > c.length && (c = h, aa = U));
              break;
            }
          }
          if (null !== c) {
            if (k = c.length, void 0 !== (n = aa.group) && (q = aa.tokenTypeIdx, r = this.createTokenInstance(c, B, q, aa.tokenType, E, H, k), !1 === n ? D = this.addToken(F, D, r) : Q[n].push(r)), a = this.chopInput(a, k), B += k, H = this.computeNewColumn(H, k), !0 === K && !0 === aa.canLineTerminator) {
              U = 0;
              O = d = void 0;
              M.lastIndex = 0;
              do {
                !0 === (d = M.test(c)) && (O = M.lastIndex - 1, U++);
              } while (d);
              0 !== U && (E += U, H = k - O, this.updateTokenEndLineColumnLocation(r, n, O, U, E, H, k));
            }
            this.handleModes(aa, S, f, r);
          } else {
            c = B;
            d = E;
            O = H;
            for (J = !1; !J && B < A;) {
              for (y.charCodeAt(B), a = this.chopInput(a, 1), B++, W = 0; W < L; W++) {
                var ea, ha = I[W];
                U = ha.pattern;
                if (!1 !== (ea = ha.short) ? y.charCodeAt(B) === ea && (J = !0) : !0 === ha.isCustom ? J = null !== U.exec(y, B, F, Q) : (this.updateLastIndex(U, B), J = null !== U.exec(a)), !0 === J) {
                  break;
                }
              }
            }
            U = B - c;
            W = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(y, c, U, d, O);
            C.push({offset:c, line:d, column:O, length:U, message:W});
          }
        }
        return this.hasCustom || (F.length = D), {tokens:F, groups:Q, errors:C};
      }, a.prototype.handleModes = function(a, b, c, d) {
        !0 === a.pop ? (a = a.push, b(d), void 0 !== a && c.call(this, a)) : void 0 !== a.push && c.call(this, a.push);
      }, a.prototype.chopInput = function(a, b) {
        return a.substring(b);
      }, a.prototype.updateLastIndex = function(a, b) {
        a.lastIndex = b;
      }, a.prototype.updateTokenEndLineColumnLocation = function(a, b, c, d, e, f, h) {
        var k, l;
        void 0 !== b && (l = (k = c === h - 1) ? -1 : 0, 1 === d && !0 === k || (a.endLine = e + l, a.endColumn = f - 1 - l));
      }, a.prototype.computeNewColumn = function(a, b) {
        return a + b;
      }, a.prototype.createTokenInstance = function() {
        for (var a = 0; a < arguments.length; a++) {
        }
        return null;
      }, a.prototype.createOffsetOnlyToken = function(a, b, c, d) {
        return {image:a, startOffset:b, tokenTypeIdx:c, tokenType:d};
      }, a.prototype.createStartOnlyToken = function(a, b, c, d, e, f) {
        return {image:a, startOffset:b, startLine:e, startColumn:f, tokenTypeIdx:c, tokenType:d};
      }, a.prototype.createFullToken = function(a, b, c, d, e, f, h) {
        return {image:a, startOffset:b, endOffset:b + h - 1, startLine:e, endLine:e, startColumn:f, endColumn:f + h - 1, tokenTypeIdx:c, tokenType:d};
      }, a.prototype.addToken = function(a, b, c) {
        return 666;
      }, a.prototype.addTokenUsingPush = function(a, b, c) {
        return a.push(c), b;
      }, a.prototype.addTokenUsingMemberAccess = function(a, b, c) {
        return a[b] = c, ++b;
      }, a.prototype.match = function(a, b, c) {
        return null;
      }, a.prototype.matchWithTest = function(a, b, c) {
        return !0 === a.test(b) ? b.substring(c, a.lastIndex) : null;
      }, a.prototype.matchWithExec = function(a, b) {
        a = a.exec(b);
        return null !== a ? a[0] : a;
      }, a.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.", a.NA = /NOT_APPLICABLE/, a;
    }();
    c.Lexer = a;
  }, function(a, c, k) {
    var b, e = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function d() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var f = k(0), h = k(4), r = k(9), q = k(1);
    a = k(5);
    c.addTerminalToCst = function(a, b, c) {
      void 0 === a.children[c] ? a.children[c] = [b] : a.children[c].push(b);
    };
    c.addNoneTerminalToCst = function(a, b, c) {
      void 0 === a.children[b] ? a.children[b] = [c] : a.children[b].push(c);
    };
    var n = function(a) {
      function b(b) {
        var c = a.call(this) || this;
        return c.result = [], c.ruleIdx = b, c;
      }
      return e(b, a), b.prototype.collectNamedDSLMethod = function(a, b, c) {
        if (!f.isUndefined(a.name)) {
          if (a instanceof q.Option || a instanceof q.Repetition || a instanceof q.RepetitionMandatory || a instanceof q.Alternation) {
            b = new b({definition:a.definition, idx:a.idx});
          } else {
            if (!(a instanceof q.RepetitionMandatoryWithSeparator || a instanceof q.RepetitionWithSeparator)) {
              throw Error("non exhaustive match");
            }
            b = new b({definition:a.definition, idx:a.idx, separator:a.separator});
          }
          b = [b];
          c = r.getKeyForAutomaticLookahead(this.ruleIdx, c, a.idx);
          this.result.push({def:b, key:c, name:a.name, orgProd:a});
        }
      }, b.prototype.visitOption = function(a) {
        this.collectNamedDSLMethod(a, q.Option, r.OPTION_IDX);
      }, b.prototype.visitRepetition = function(a) {
        this.collectNamedDSLMethod(a, q.Repetition, r.MANY_IDX);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionMandatory, r.AT_LEAST_ONE_IDX);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionMandatoryWithSeparator, r.AT_LEAST_ONE_SEP_IDX);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionWithSeparator, r.MANY_SEP_IDX);
      }, b.prototype.visitAlternation = function(a) {
        var b = this;
        this.collectNamedDSLMethod(a, q.Alternation, r.OR_IDX);
        var c = 1 < a.definition.length;
        f.forEach(a.definition, function(d, e) {
          if (!f.isUndefined(d.name)) {
            var h = c ? [new q.Option({definition:d.definition})] : d.definition;
            e = r.getKeyForAltIndex(b.ruleIdx, r.OR_IDX, a.idx, e);
            b.result.push({def:h, key:e, name:d.name, orgProd:d});
          }
        });
      }, b;
    }(a.GAstVisitor);
    c.NamedDSLMethodsCollectorVisitor = n;
    c.analyzeCst = function(a, b) {
      var c = {dictDef:new h.HashTable, allRuleNames:[]};
      return f.forEach(a, function(a) {
        var d = b.get(a.name);
        c.allRuleNames.push(a.name);
        d = new n(d);
        a.accept(d);
        f.forEach(d.result, function(b) {
          b.def;
          b.key;
          c.allRuleNames.push(a.name + b.name);
        });
      }), c;
    };
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    c.VERSION = "4.6.0";
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    c = k(3);
    var b = k(15), e = k(2), f = k(6), h = k(17), r = k(10), q = k(39), n = k(5), m = k(1), d = k(24), l = k(40);
    k = k(20);
    var v = {};
    v.VERSION = h.VERSION;
    v.Parser = c.Parser;
    v.CstParser = c.CstParser;
    v.EmbeddedActionsParser = c.EmbeddedActionsParser;
    v.ParserDefinitionErrorType = c.ParserDefinitionErrorType;
    v.Lexer = b.Lexer;
    v.LexerDefinitionErrorType = b.LexerDefinitionErrorType;
    v.EOF = e.EOF;
    v.tokenName = e.tokenName;
    v.tokenLabel = e.tokenLabel;
    v.tokenMatcher = e.tokenMatcher;
    v.createToken = e.createToken;
    v.createTokenInstance = e.createTokenInstance;
    v.EMPTY_ALT = c.EMPTY_ALT;
    v.defaultParserErrorProvider = r.defaultParserErrorProvider;
    v.isRecognitionException = f.isRecognitionException;
    v.EarlyExitException = f.EarlyExitException;
    v.MismatchedTokenException = f.MismatchedTokenException;
    v.NotAllInputParsedException = f.NotAllInputParsedException;
    v.NoViableAltException = f.NoViableAltException;
    v.defaultLexerErrorProvider = k.defaultLexerErrorProvider;
    v.Flat = m.Flat;
    v.Repetition = m.Repetition;
    v.RepetitionWithSeparator = m.RepetitionWithSeparator;
    v.RepetitionMandatory = m.RepetitionMandatory;
    v.RepetitionMandatoryWithSeparator = m.RepetitionMandatoryWithSeparator;
    v.Option = m.Option;
    v.Alternation = m.Alternation;
    v.NonTerminal = m.NonTerminal;
    v.Terminal = m.Terminal;
    v.Rule = m.Rule;
    v.GAstVisitor = n.GAstVisitor;
    v.serializeGrammar = m.serializeGrammar;
    v.serializeProduction = m.serializeProduction;
    v.resolveGrammar = d.resolveGrammar;
    v.defaultGrammarResolverErrorProvider = r.defaultGrammarResolverErrorProvider;
    v.validateGrammar = d.validateGrammar;
    v.defaultGrammarValidatorErrorProvider = r.defaultGrammarValidatorErrorProvider;
    v.assignOccurrenceIndices = d.assignOccurrenceIndices;
    v.clearCache = function() {
      console.warn("The clearCache function was 'soft' removed from the Chevrotain API.\n\t It performs no action other than printing this message.\n\t Please avoid using it as it will be completely removed in the future");
    };
    v.createSyntaxDiagramsCode = q.createSyntaxDiagramsCode;
    v.generateParserFactory = l.generateParserFactory;
    v.generateParserModule = l.generateParserModule;
    a.exports = v;
  }, function(a, c, k) {
    var b, e;
    "undefined" != typeof self && self;
    k = [];
    void 0 === (e = "function" == typeof(b = function() {
      function a() {
      }
      function b(a) {
        return a.charCodeAt(0);
      }
      function c(a, b) {
        void 0 !== a.length ? a.forEach(function(a) {
          b.push(a);
        }) : b.push(a);
      }
      function e(a, b) {
        if (!0 === a[b]) {
          throw "duplicate flag " + b;
        }
        a[b] = !0;
      }
      function k(a) {
        if (void 0 === a) {
          throw Error("Internal Error - Should never get here!");
        }
      }
      function m() {
      }
      a.prototype.saveState = function() {
        return {idx:this.idx, input:this.input, groupIdx:this.groupIdx};
      };
      a.prototype.restoreState = function(a) {
        this.idx = a.idx;
        this.input = a.input;
        this.groupIdx = a.groupIdx;
      };
      a.prototype.pattern = function(a) {
        this.idx = 0;
        this.input = a;
        this.groupIdx = 0;
        this.consumeChar("/");
        a = this.disjunction();
        this.consumeChar("/");
        for (var b = {type:"Flags", global:!1, ignoreCase:!1, multiLine:!1, unicode:!1, sticky:!1}; this.isRegExpFlag();) {
          switch(this.popChar()) {
            case "g":
              e(b, "global");
              break;
            case "i":
              e(b, "ignoreCase");
              break;
            case "m":
              e(b, "multiLine");
              break;
            case "u":
              e(b, "unicode");
              break;
            case "y":
              e(b, "sticky");
          }
        }
        if (this.idx !== this.input.length) {
          throw Error("Redundant input: " + this.input.substring(this.idx));
        }
        return {type:"Pattern", flags:b, value:a};
      };
      a.prototype.disjunction = function() {
        var a = [];
        for (a.push(this.alternative()); "|" === this.peekChar();) {
          this.consumeChar("|"), a.push(this.alternative());
        }
        return {type:"Disjunction", value:a};
      };
      a.prototype.alternative = function() {
        for (var a = []; this.isTerm();) {
          a.push(this.term());
        }
        return {type:"Alternative", value:a};
      };
      a.prototype.term = function() {
        return this.isAssertion() ? this.assertion() : this.atom();
      };
      a.prototype.assertion = function() {
        switch(this.popChar()) {
          case "^":
            return {type:"StartAnchor"};
          case "$":
            return {type:"EndAnchor"};
          case "\\":
            switch(this.popChar()) {
              case "b":
                return {type:"WordBoundary"};
              case "B":
                return {type:"NonWordBoundary"};
            }throw Error("Invalid Assertion Escape");
          case "(":
            switch(this.consumeChar("?"), this.popChar()) {
              case "=":
                var a = "Lookahead";
                break;
              case "!":
                a = "NegativeLookahead";
            }k(a);
            var b = this.disjunction();
            return this.consumeChar(")"), {type:a, value:b};
        }
        throw Error("Internal Error - Should never get here!");
      };
      a.prototype.quantifier = function(a) {
        switch(this.popChar()) {
          case "*":
            var b = {atLeast:0, atMost:1 / 0};
            break;
          case "+":
            b = {atLeast:1, atMost:1 / 0};
            break;
          case "?":
            b = {atLeast:0, atMost:1};
            break;
          case "{":
            var c = this.integerIncludingZero();
            switch(this.popChar()) {
              case "}":
                b = {atLeast:c, atMost:c};
                break;
              case ",":
                var d;
                this.isDigit() ? (d = this.integerIncludingZero(), b = {atLeast:c, atMost:d}) : b = {atLeast:c, atMost:1 / 0};
                this.consumeChar("}");
            }if (!0 === a && void 0 === b) {
              return;
            }
            k(b);
        }
        if (!0 !== a || void 0 !== b) {
          return k(b), "?" === this.peekChar(0) ? (this.consumeChar("?"), b.greedy = !1) : b.greedy = !0, b.type = "Quantifier", b;
        }
      };
      a.prototype.atom = function() {
        switch(this.peekChar()) {
          case ".":
            var a = this.dotAll();
            break;
          case "\\":
            a = this.atomEscape();
            break;
          case "[":
            a = this.characterClass();
            break;
          case "(":
            a = this.group();
        }
        return void 0 === a && this.isPatternCharacter() && (a = this.patternCharacter()), k(a), this.isQuantifier() && (a.quantifier = this.quantifier()), a;
      };
      a.prototype.dotAll = function() {
        return this.consumeChar("."), {type:"Set", complement:!0, value:[b("\n"), b("\r"), b("\u2028"), b("\u2029")]};
      };
      a.prototype.atomEscape = function() {
        switch(this.consumeChar("\\"), this.peekChar()) {
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            return this.decimalEscapeAtom();
          case "d":
          case "D":
          case "s":
          case "S":
          case "w":
          case "W":
            return this.characterClassEscape();
          case "f":
          case "n":
          case "r":
          case "t":
          case "v":
            return this.controlEscapeAtom();
          case "c":
            return this.controlLetterEscapeAtom();
          case "0":
            return this.nulCharacterAtom();
          case "x":
            return this.hexEscapeSequenceAtom();
          case "u":
            return this.regExpUnicodeEscapeSequenceAtom();
          default:
            return this.identityEscapeAtom();
        }
      };
      a.prototype.decimalEscapeAtom = function() {
        return {type:"GroupBackReference", value:this.positiveInteger()};
      };
      a.prototype.characterClassEscape = function() {
        var a = !1;
        switch(this.popChar()) {
          case "d":
            var b = x;
            break;
          case "D":
            b = x;
            a = !0;
            break;
          case "s":
            b = p;
            break;
          case "S":
            b = p;
            a = !0;
            break;
          case "w":
            b = z;
            break;
          case "W":
            b = z, a = !0;
        }
        return k(b), {type:"Set", value:b, complement:a};
      };
      a.prototype.controlEscapeAtom = function() {
        switch(this.popChar()) {
          case "f":
            var a = b("\f");
            break;
          case "n":
            a = b("\n");
            break;
          case "r":
            a = b("\r");
            break;
          case "t":
            a = b("\t");
            break;
          case "v":
            a = b("\v");
        }
        return k(a), {type:"Character", value:a};
      };
      a.prototype.controlLetterEscapeAtom = function() {
        this.consumeChar("c");
        var a = this.popChar();
        if (!1 === /[a-zA-Z]/.test(a)) {
          throw Error("Invalid ");
        }
        return {type:"Character", value:a.toUpperCase().charCodeAt(0) - 64};
      };
      a.prototype.nulCharacterAtom = function() {
        return this.consumeChar("0"), {type:"Character", value:b("\x00")};
      };
      a.prototype.hexEscapeSequenceAtom = function() {
        return this.consumeChar("x"), this.parseHexDigits(2);
      };
      a.prototype.regExpUnicodeEscapeSequenceAtom = function() {
        return this.consumeChar("u"), this.parseHexDigits(4);
      };
      a.prototype.identityEscapeAtom = function() {
        var a = this.popChar();
        return {type:"Character", value:b(a)};
      };
      a.prototype.classPatternCharacterAtom = function() {
        switch(this.peekChar()) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
          case "\\":
          case "]":
            throw Error("TBD");
          default:
            var a = this.popChar();
            return {type:"Character", value:b(a)};
        }
      };
      a.prototype.characterClass = function() {
        var a = [], d = !1;
        this.consumeChar("[");
        for ("^" === this.peekChar(0) && (this.consumeChar("^"), d = !0); this.isClassAtom();) {
          var e = this.classAtom();
          if ("Character" === e.type && this.isRangeDash()) {
            this.consumeChar("-");
            var f = this.classAtom();
            if ("Character" === f.type) {
              if (f.value < e.value) {
                throw Error("Range out of order in character class");
              }
              a.push({from:e.value, to:f.value});
            } else {
              c(e.value, a), a.push(b("-")), c(f.value, a);
            }
          } else {
            c(e.value, a);
          }
        }
        return this.consumeChar("]"), {type:"Set", complement:d, value:a};
      };
      a.prototype.classAtom = function() {
        switch(this.peekChar()) {
          case "]":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            throw Error("TBD");
          case "\\":
            return this.classEscape();
          default:
            return this.classPatternCharacterAtom();
        }
      };
      a.prototype.classEscape = function() {
        switch(this.consumeChar("\\"), this.peekChar()) {
          case "b":
            return this.consumeChar("b"), {type:"Character", value:b("\b")};
          case "d":
          case "D":
          case "s":
          case "S":
          case "w":
          case "W":
            return this.characterClassEscape();
          case "f":
          case "n":
          case "r":
          case "t":
          case "v":
            return this.controlEscapeAtom();
          case "c":
            return this.controlLetterEscapeAtom();
          case "0":
            return this.nulCharacterAtom();
          case "x":
            return this.hexEscapeSequenceAtom();
          case "u":
            return this.regExpUnicodeEscapeSequenceAtom();
          default:
            return this.identityEscapeAtom();
        }
      };
      a.prototype.group = function() {
        var a = !0;
        switch(this.consumeChar("("), this.peekChar(0)) {
          case "?":
            this.consumeChar("?");
            this.consumeChar(":");
            a = !1;
            break;
          default:
            this.groupIdx++;
        }
        var b = this.disjunction();
        this.consumeChar(")");
        b = {type:"Group", capturing:a, value:b};
        return a && (b.idx = this.groupIdx), b;
      };
      a.prototype.positiveInteger = function() {
        var a = this.popChar();
        if (!1 === w.test(a)) {
          throw Error("Expecting a positive integer");
        }
        for (; v.test(this.peekChar(0));) {
          a += this.popChar();
        }
        return parseInt(a, 10);
      };
      a.prototype.integerIncludingZero = function() {
        var a = this.popChar();
        if (!1 === v.test(a)) {
          throw Error("Expecting an integer");
        }
        for (; v.test(this.peekChar(0));) {
          a += this.popChar();
        }
        return parseInt(a, 10);
      };
      a.prototype.patternCharacter = function() {
        var a = this.popChar();
        switch(a) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
          case "^":
          case "$":
          case "\\":
          case ".":
          case "*":
          case "+":
          case "?":
          case "(":
          case ")":
          case "[":
          case "|":
            throw Error("TBD");
          default:
            return {type:"Character", value:b(a)};
        }
      };
      a.prototype.isRegExpFlag = function() {
        switch(this.peekChar(0)) {
          case "g":
          case "i":
          case "m":
          case "u":
          case "y":
            return !0;
          default:
            return !1;
        }
      };
      a.prototype.isRangeDash = function() {
        return "-" === this.peekChar() && this.isClassAtom(1);
      };
      a.prototype.isDigit = function() {
        return v.test(this.peekChar(0));
      };
      a.prototype.isClassAtom = function(a) {
        switch(void 0 === a && (a = 0), this.peekChar(a)) {
          case "]":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            return !1;
          default:
            return !0;
        }
      };
      a.prototype.isTerm = function() {
        return this.isAtom() || this.isAssertion();
      };
      a.prototype.isAtom = function() {
        if (this.isPatternCharacter()) {
          return !0;
        }
        switch(this.peekChar(0)) {
          case ".":
          case "\\":
          case "[":
          case "(":
            return !0;
          default:
            return !1;
        }
      };
      a.prototype.isAssertion = function() {
        switch(this.peekChar(0)) {
          case "^":
          case "$":
            return !0;
          case "\\":
            switch(this.peekChar(1)) {
              case "b":
              case "B":
                return !0;
              default:
                return !1;
            }case "(":
            return "?" === this.peekChar(1) && ("=" === this.peekChar(2) || "!" === this.peekChar(2));
          default:
            return !1;
        }
      };
      a.prototype.isQuantifier = function() {
        var a = this.saveState();
        try {
          return void 0 !== this.quantifier(!0);
        } catch (y) {
          return !1;
        } finally {
          this.restoreState(a);
        }
      };
      a.prototype.isPatternCharacter = function() {
        switch(this.peekChar()) {
          case "^":
          case "$":
          case "\\":
          case ".":
          case "*":
          case "+":
          case "?":
          case "(":
          case ")":
          case "[":
          case "|":
          case "/":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            return !1;
          default:
            return !0;
        }
      };
      a.prototype.parseHexDigits = function(a) {
        for (var b = "", c = 0; c < a; c++) {
          var d = this.popChar();
          if (!1 === l.test(d)) {
            throw Error("Expecting a HexDecimal digits");
          }
          b += d;
        }
        return {type:"Character", value:parseInt(b, 16)};
      };
      a.prototype.peekChar = function(a) {
        return void 0 === a && (a = 0), this.input[this.idx + a];
      };
      a.prototype.popChar = function() {
        var a = this.peekChar(0);
        return this.consumeChar(), a;
      };
      a.prototype.consumeChar = function(a) {
        if (void 0 !== a && this.input[this.idx] !== a) {
          throw Error("Expected: '" + a + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
        }
        if (this.idx >= this.input.length) {
          throw Error("Unexpected end of input");
        }
        this.idx++;
      };
      var d, l = /[0-9a-fA-F]/, v = /[0-9]/, w = /[1-9]/, x = [];
      for (d = b("0"); d <= b("9"); d++) {
        x.push(d);
      }
      var z = [b("_")].concat(x);
      for (d = b("a"); d <= b("z"); d++) {
        z.push(d);
      }
      for (d = b("A"); d <= b("Z"); d++) {
        z.push(d);
      }
      var p = [b(" "), b("\f"), b("\n"), b("\r"), b("\t"), b("\v"), b("\t"), b("\u00a0"), b("\u1680"), b("\u2000"), b("\u2001"), b("\u2002"), b("\u2003"), b("\u2004"), b("\u2005"), b("\u2006"), b("\u2007"), b("\u2008"), b("\u2009"), b("\u200a"), b("\u2028"), b("\u2029"), b("\u202f"), b("\u205f"), b("\u3000"), b("\ufeff")];
      return m.prototype.visitChildren = function(a) {
        for (var b in a) {
          var c = a[b];
          a.hasOwnProperty(b) && (void 0 !== c.type ? this.visit(c) : Array.isArray(c) && c.forEach(function(a) {
            this.visit(a);
          }, this));
        }
      }, m.prototype.visit = function(a) {
        switch(a.type) {
          case "Pattern":
            this.visitPattern(a);
            break;
          case "Flags":
            this.visitFlags(a);
            break;
          case "Disjunction":
            this.visitDisjunction(a);
            break;
          case "Alternative":
            this.visitAlternative(a);
            break;
          case "StartAnchor":
            this.visitStartAnchor(a);
            break;
          case "EndAnchor":
            this.visitEndAnchor(a);
            break;
          case "WordBoundary":
            this.visitWordBoundary(a);
            break;
          case "NonWordBoundary":
            this.visitNonWordBoundary(a);
            break;
          case "Lookahead":
            this.visitLookahead(a);
            break;
          case "NegativeLookahead":
            this.visitNegativeLookahead(a);
            break;
          case "Character":
            this.visitCharacter(a);
            break;
          case "Set":
            this.visitSet(a);
            break;
          case "Group":
            this.visitGroup(a);
            break;
          case "GroupBackReference":
            this.visitGroupBackReference(a);
            break;
          case "Quantifier":
            this.visitQuantifier(a);
        }
        this.visitChildren(a);
      }, m.prototype.visitPattern = function(a) {
      }, m.prototype.visitFlags = function(a) {
      }, m.prototype.visitDisjunction = function(a) {
      }, m.prototype.visitAlternative = function(a) {
      }, m.prototype.visitStartAnchor = function(a) {
      }, m.prototype.visitEndAnchor = function(a) {
      }, m.prototype.visitWordBoundary = function(a) {
      }, m.prototype.visitNonWordBoundary = function(a) {
      }, m.prototype.visitLookahead = function(a) {
      }, m.prototype.visitNegativeLookahead = function(a) {
      }, m.prototype.visitCharacter = function(a) {
      }, m.prototype.visitSet = function(a) {
      }, m.prototype.visitGroup = function(a) {
      }, m.prototype.visitGroupBackReference = function(a) {
      }, m.prototype.visitQuantifier = function(a) {
      }, {RegExpParser:a, BaseRegExpVisitor:m, VERSION:"0.4.0"};
    }) ? b.apply(c, k) : b) || (a.exports = e);
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    c.defaultLexerErrorProvider = {buildUnableToPopLexerModeMessage:function(a) {
      return "Unable to pop Lexer Mode after encountering Token ->" + a.image + "<- The Mode Stack is empty";
    }, buildUnexpectedCharactersMessage:function(a, c, f, h, k) {
      return "unexpected character: ->" + a.charAt(c) + "<- at offset: " + c + ", skipped " + f + " characters.";
    }};
  }, function(a, c, k) {
    function b(a) {
      if (a instanceof r.NonTerminal) {
        return b(a.referencedRule);
      }
      if (a instanceof r.Terminal) {
        return [a.terminalType];
      }
      if (q.isSequenceProd(a)) {
        return e(a);
      }
      if (q.isBranchingProd(a)) {
        return f(a);
      }
      throw Error("non exhaustive match");
    }
    function e(a) {
      var c = [];
      a = a.definition;
      var d = 0;
      var e = a.length > d;
      for (var f = !0; e && f;) {
        e = a[d], f = q.isOptionalProd(e), c = c.concat(b(e)), d += 1, e = a.length > d;
      }
      return h.uniq(c);
    }
    function f(a) {
      a = h.map(a.definition, function(a) {
        return b(a);
      });
      return h.uniq(h.flatten(a));
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var h = k(0), r = k(1), q = k(8);
    c.first = b;
    c.firstForSequence = e;
    c.firstForBranching = f;
    c.firstForTerminal = function(a) {
      return [a.terminalType];
    };
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    c.IN = "_~IN~_";
  }, function(a, c, k) {
    function b(a, b, d) {
      switch(a.type) {
        case H.AT_LEAST_ONE:
          return function(a, b, c) {
            return e(ha, new M.RepetitionMandatory({definition:[]}), a, b, c);
          }(a, b, d);
        case H.AT_LEAST_ONE_SEP:
          return f(a, b, M.RepetitionMandatoryWithSeparator, U, d);
        case H.MANY_SEP:
          return f(a, b, M.RepetitionWithSeparator, W, d);
        case H.MANY:
          return function(a, b, c) {
            return e(S, new M.Repetition({definition:[]}), a, b, c);
          }(a, b, d);
        case H.OPTION:
          return function(a, b, c) {
            return e(aa, new M.Option({definition:[]}), a, b, c);
          }(a, b, d);
        case H.OR:
          return function(a, b, c) {
            return e(la, new M.Alternation({definition:[]}), a, b, c);
          }(a, b, d);
        case H.FLAT:
          return function(a, b, c) {
            var d = new M.Flat({definition:[]}), e = ja.exec(a.text)[1];
            K.isUndefined(e) || (d.name = e);
            return h(d, a.range, b, c);
          }(a, b, d);
        case H.REF:
          return function(a) {
            a = P.exec(a.text);
            var b = void 0 === a[1] ? 0 : parseInt(a[1], 10);
            return new M.NonTerminal({nonTerminalName:a[2], idx:b});
          }(a);
        case H.TERMINAL:
          return function(a, b) {
            var d = L.exec(a.text);
            a = void 0 === d[1] ? 0 : parseInt(d[1], 10);
            d = d[2];
            var e = c.terminalNameToConstructor[d];
            if (!e) {
              throw Error("Terminal Token name: <" + d + "> not found in rule: <" + b + ">  \n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#TERMINAL_NAME_NOT_FOUND\n\tFor Further details.");
            }
            return new M.Terminal({terminalType:e, idx:a});
          }(a, d);
        default:
          throw Error("non exhaustive match");
      }
    }
    function e(a, b, c, d, e) {
      a = a.exec(c.text);
      b.idx = void 0 === a[1] ? 0 : parseInt(a[1], 10);
      a = a[2];
      return K.isUndefined(a) || (b.name = a), h(b, c.range, d, e);
    }
    function f(a, b, d, e, f) {
      e = e.exec(a.text);
      var k = void 0 === e[1] ? 0 : parseInt(e[1], 10), l = e[3], m = c.terminalNameToConstructor[l];
      if (!m) {
        throw Error("Separator Terminal Token name: " + l + " not found");
      }
      d = new d({definition:[], separator:m, idx:k});
      e = e[2];
      return K.isUndefined(e) || (d.name = e), h(d, a.range, b, f);
    }
    function h(a, c, d, e) {
      c = r(c, d);
      c = K.sortBy(c, function(a) {
        return a.range.start;
      });
      var f = [];
      return K.forEach(c, function(a) {
        f.push(b(a, d, e));
      }), a.definition = f, a;
    }
    function r(a, b) {
      return K.filter(b, function(c) {
        var d = a.strictlyContainsRange(c.range), e = K.every(b, function(b) {
          var d = b.range.strictlyContainsRange(c.range);
          b = b.range.isStrictlyContainedInRange(a);
          return !(d && b);
        });
        return d && e;
      });
    }
    function q(a) {
      return a.replace(oa, "").replace(ma, "");
    }
    function n(a, b) {
      return void 0 !== b ? a : "";
    }
    function m(a) {
      return a.replace(ua, n).replace(Da, n);
    }
    function d(a) {
      var b = l(a), c = v(a), d = w(a), e = x(a), f = z(a), h = p(a), k = u(a);
      a = y(a);
      return [].concat(b, c, d, e, f, h, k, a);
    }
    function l(a) {
      return B(a, H.TERMINAL, I);
    }
    function v(a) {
      return B(a, H.REF, T);
    }
    function w(a) {
      return D(a, H.AT_LEAST_ONE, V, Ba);
    }
    function x(a) {
      return D(a, H.AT_LEAST_ONE_SEP, ea, Ba);
    }
    function z(a) {
      return D(a, H.MANY, O, Ba);
    }
    function p(a) {
      return D(a, H.MANY_SEP, J, Ba);
    }
    function u(a) {
      return D(a, H.OPTION, N, Ba);
    }
    function y(a) {
      a = D(a, H.OR, ba, Ba);
      var b = A(a);
      return a.concat(b);
    }
    function A(a) {
      var b = [];
      return K.forEach(a, function(a) {
        var c = D(a.text, H.FLAT, pa, Pa), d = a.range.start;
        K.forEach(c, function(a) {
          a.range.start += d;
          a.range.end += d;
        });
        b = b.concat(c);
      }), K.uniq(b, function(a) {
        return a.type + "~" + a.range.start + "~" + a.range.end + "~" + a.text;
      });
    }
    function B(a, b, c) {
      for (var d, e = []; d = c.exec(a);) {
        var f = new Q.Range(d.index, c.lastIndex);
        e.push({range:f, text:d[0], type:b});
      }
      return e;
    }
    function D(a, b, c, d) {
      for (var e, f = []; e = c.exec(a);) {
        var h = e.index, k = d(h + e[0].length, a);
        e = new Q.Range(h, k);
        h = a.substr(h, k - h + 1);
        f.push({range:e, text:h, type:b});
      }
      return f;
    }
    function F(a, b, c, d) {
      for (var e = [1], f = -1; !K.isEmpty(e) && f + c < d.length;) {
        f++;
        var h = d.charAt(c + f);
        h === a ? e.push(1) : h === b && e.pop();
      }
      if (K.isEmpty(e)) {
        return f + c;
      }
      throw Error("INVALID INPUT TEXT, UNTERMINATED PARENTHESIS");
    }
    function C(a, b) {
      return K.map(a, function(a) {
        return E(a, b);
      });
    }
    function E(a, b) {
      switch(a.type) {
        case "NonTerminal":
          return new M.NonTerminal({nonTerminalName:a.name, idx:a.idx});
        case "Flat":
          return new M.Flat({name:a.name, definition:C(a.definition, b)});
        case "Option":
          return new M.Option({name:a.name, idx:a.idx, definition:C(a.definition, b)});
        case "RepetitionMandatory":
          return new M.RepetitionMandatory({name:a.name, idx:a.idx, definition:C(a.definition, b)});
        case "RepetitionMandatoryWithSeparator":
          return new M.RepetitionMandatoryWithSeparator({name:a.name, idx:a.idx, separator:b[a.separator.name], definition:C(a.definition, b)});
        case "RepetitionWithSeparator":
          return new M.RepetitionWithSeparator({name:a.name, idx:a.idx, separator:b[a.separator.name], definition:C(a.definition, b)});
        case "Repetition":
          return new M.Repetition({name:a.name, idx:a.idx, definition:C(a.definition, b)});
        case "Alternation":
          return new M.Alternation({name:a.name, idx:a.idx, definition:C(a.definition, b)});
        case "Terminal":
          return new M.Terminal({terminalType:b[a.name], idx:a.idx});
        case "Rule":
          return new M.Rule({name:a.name, orgText:a.orgText, definition:C(a.definition, b)});
      }
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var H, Q = k(29), K = k(0), M = k(1);
    !function(a) {
      a[a.OPTION = 0] = "OPTION";
      a[a.OR = 1] = "OR";
      a[a.MANY = 2] = "MANY";
      a[a.MANY_SEP = 3] = "MANY_SEP";
      a[a.AT_LEAST_ONE = 4] = "AT_LEAST_ONE";
      a[a.AT_LEAST_ONE_SEP = 5] = "AT_LEAST_ONE_SEP";
      a[a.REF = 6] = "REF";
      a[a.TERMINAL = 7] = "TERMINAL";
      a[a.FLAT = 8] = "FLAT";
    }(H = c.ProdType || (c.ProdType = {}));
    a = /(?:\s*{\s*NAME\s*:\s*["'`]([\w$]*)["'`])?/;
    k = new RegExp(a.source.replace("{", "").replace(")?", "\\s*,)?"));
    var L = /\.\s*CONSUME(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/, I = new RegExp(L.source, "g"), P = /\.\s*SUBRULE(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/, T = new RegExp(P.source, "g"), R = /\.\s*OPTION(\d+)?\s*\(/, aa = new RegExp(R.source + a.source), N = new RegExp(R.source, "g");
    R = /\.\s*MANY(\d+)?\s*\(/;
    var S = new RegExp(R.source + a.source), O = new RegExp(R.source, "g");
    R = /\s*SEP\s*:\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/;
    var W = new RegExp(/\.\s*MANY_SEP(\d+)?\s*\(\s*{/.source + k.source + R.source), J = new RegExp(W.source, "g"), U = new RegExp(/\.\s*AT_LEAST_ONE_SEP(\d+)?\s*\(\s*{/.source + k.source + R.source), ea = new RegExp(U.source, "g");
    R = /\.\s*AT_LEAST_ONE(\d+)?\s*\(/;
    var ha = new RegExp(R.source + a.source), V = new RegExp(R.source, "g");
    R = /\.\s*OR(\d+)?\s*\(/;
    var la = new RegExp(R.source + a.source), ba = new RegExp(R.source, "g"), ja = new RegExp(k.source + /\s*(ALT)\s*:/.source), pa = new RegExp(ja.source, "g");
    c.terminalNameToConstructor = {};
    c.buildTopProduction = function(a, b, e) {
      c.terminalNameToConstructor = e;
      e = d(m(q("  " + a)));
      var f = new Q.Range(0, a.length + 2);
      return h(new M.Rule({name:b, definition:[], orgText:a}), f, e, b);
    };
    c.buildProdGast = b;
    c.getDirectlyContainedRanges = r;
    var oa = /\/\/.*/g, ma = /\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\//g, ua = /(NAME\s*:\s*)?"([^\\"]|\\([bfnrtv"\\\/]|u[0-9a-fA-F]{4}))*"/g, Da = /(NAME\s*:\s*)?'([^\\']|\\([bfnrtv'\\\/]|u[0-9a-fA-F]{4}))*'/g;
    c.removeComments = q;
    c.removeStringLiterals = m;
    c.createRanges = d;
    c.createTerminalRanges = l;
    c.createRefsRanges = v;
    c.createAtLeastOneRanges = w;
    c.createAtLeastOneSepRanges = x;
    c.createManyRanges = z;
    c.createManySepRanges = p;
    c.createOptionRanges = u;
    c.createOrRanges = y;
    var Pa = K.partial(F, "{", "}"), Ba = K.partial(F, "(", ")");
    c.createOrPartRanges = A;
    c.findClosingOffset = F;
    c.deserializeGrammar = C;
    c.deserializeProduction = E;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(0), e = k(4), f = k(30), h = k(11), r = k(10), q = k(8);
    c.resolveGrammar = function(a) {
      a = b.defaults(a, {errMsgProvider:r.defaultGrammarResolverErrorProvider});
      var c = new e.HashTable;
      return b.forEach(a.rules, function(a) {
        c.put(a.name, a);
      }), f.resolveGrammar(c, a.errMsgProvider);
    };
    c.validateGrammar = function(a) {
      return a = b.defaults(a, {errMsgProvider:r.defaultGrammarValidatorErrorProvider, ignoredIssues:{}}), h.validateGrammar(a.rules, a.maxLookahead, a.tokenTypes, a.ignoredIssues, a.errMsgProvider, a.grammarName);
    };
    c.assignOccurrenceIndices = function(a) {
      b.forEach(a.rules, function(a) {
        var c = new q.DslMethodsCollectorVisitor;
        a.accept(c);
        b.forEach(c.dslMethods, function(a) {
          b.forEach(a, function(a, b) {
            a.idx = b + 1;
          });
        });
      });
    };
  }, function(a, c, k) {
    function b(a) {
      this.name = c.IN_RULE_RECOVERY_EXCEPTION;
      this.message = a;
    }
    function e(a, b, c, e, h, k) {
      var d = this.getKeyForAutomaticLookahead(e, h);
      e = this.firstAfterRepMap.get(d);
      void 0 === e && (e = this.getCurrRuleFullName(), e = (new k(this.getGAstProductions().get(e), h)).startWalking(), this.firstAfterRepMap.put(d, e));
      h = e.token;
      k = e.occurrence;
      e = e.isEndOfRule;
      1 === this.RULE_STACK.length && e && void 0 === h && (h = f.EOF, k = 1);
      this.shouldInRepetitionRecoveryBeTried(h, k) && this.tryInRepetitionRecovery(a, b, c, h);
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var f = k(2), h = k(0), r = k(6), q = k(22), n = k(4), m = k(3);
    c.EOF_FOLLOW_KEY = {};
    c.IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
    c.InRuleRecoveryException = b;
    b.prototype = Error.prototype;
    a = function() {
      function a() {
      }
      return a.prototype.initRecoverable = function(a) {
        this.firstAfterRepMap = new n.HashTable;
        this.resyncFollows = new n.HashTable;
        (this.recoveryEnabled = h.has(a, "recoveryEnabled") ? a.recoveryEnabled : m.DEFAULT_PARSER_CONFIG.recoveryEnabled) && (this.attemptInRepetitionRecovery = e);
      }, a.prototype.getTokenToInsert = function(a) {
        a = f.createTokenInstance(a, "", NaN, NaN, NaN, NaN, NaN, NaN);
        return a.isInsertedInRecovery = !0, a;
      }, a.prototype.canTokenTypeBeInsertedInRecovery = function(a) {
        return !0;
      }, a.prototype.tryInRepetitionRecovery = function(a, b, c, d) {
        for (var e = this, f = this.findReSyncTokenType(), k = this.exportLexerState(), l = [], m = !1, n = this.LA(1), q = this.LA(1), v = function() {
          var a = e.LA(0);
          a = e.errorMessageProvider.buildMismatchTokenMessage({expected:d, actual:n, previous:a, ruleName:e.getCurrRuleFullName()});
          a = new r.MismatchedTokenException(a, n, e.LA(0));
          a.resyncedTokens = h.dropRight(l);
          e.SAVE_ERROR(a);
        }; !m;) {
          if (this.tokenMatcher(q, d)) {
            return void v();
          }
          if (c.call(this)) {
            return v(), void a.apply(this, b);
          }
          this.tokenMatcher(q, f) ? m = !0 : (q = this.SKIP_TOKEN(), this.addToResyncTokens(q, l));
        }
        this.importLexerState(k);
      }, a.prototype.shouldInRepetitionRecoveryBeTried = function(a, b) {
        return void 0 !== a && void 0 !== b && !this.tokenMatcher(this.LA(1), a) && !this.isBackTracking() && !this.canPerformInRuleRecovery(a, this.getFollowsForInRuleRecovery(a, b));
      }, a.prototype.getFollowsForInRuleRecovery = function(a, b) {
        a = this.getCurrentGrammarPath(a, b);
        return this.getNextPossibleTokenTypes(a);
      }, a.prototype.tryInRuleRecovery = function(a, c) {
        if (this.canRecoverWithSingleTokenInsertion(a, c)) {
          return this.getTokenToInsert(a);
        }
        if (this.canRecoverWithSingleTokenDeletion(a)) {
          return a = this.SKIP_TOKEN(), this.consumeToken(), a;
        }
        throw new b("sad sad panda");
      }, a.prototype.canPerformInRuleRecovery = function(a, b) {
        return this.canRecoverWithSingleTokenInsertion(a, b) || this.canRecoverWithSingleTokenDeletion(a);
      }, a.prototype.canRecoverWithSingleTokenInsertion = function(a, b) {
        var c = this;
        if (!this.canTokenTypeBeInsertedInRecovery(a) || h.isEmpty(b)) {
          return !1;
        }
        var d = this.LA(1);
        return void 0 !== h.find(b, function(a) {
          return c.tokenMatcher(d, a);
        });
      }, a.prototype.canRecoverWithSingleTokenDeletion = function(a) {
        return this.tokenMatcher(this.LA(2), a);
      }, a.prototype.isInCurrentRuleReSyncSet = function(a) {
        var b = this.getCurrFollowKey();
        b = this.getFollowSetFromFollowKey(b);
        return h.contains(b, a);
      }, a.prototype.findReSyncTokenType = function() {
        for (var a = this.flattenFollowSet(), b = this.LA(1), c = 2;;) {
          b = b.tokenType;
          if (h.contains(a, b)) {
            return b;
          }
          b = this.LA(c);
          c++;
        }
      }, a.prototype.getCurrFollowKey = function() {
        if (1 === this.RULE_STACK.length) {
          return c.EOF_FOLLOW_KEY;
        }
        var a = this.getLastExplicitRuleShortName(), b = this.getLastExplicitRuleOccurrenceIndex(), d = this.getPreviousExplicitRuleShortName();
        return {ruleName:this.shortRuleNameToFullName(a), idxInCallingRule:b, inRule:this.shortRuleNameToFullName(d)};
      }, a.prototype.buildFullFollowKeyStack = function() {
        var a = this, b = this.RULE_STACK, d = this.RULE_OCCURRENCE_STACK;
        return h.isEmpty(this.LAST_EXPLICIT_RULE_STACK) || (b = h.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.RULE_STACK[b];
        }), d = h.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.RULE_OCCURRENCE_STACK[b];
        })), h.map(b, function(e, f) {
          return 0 === f ? c.EOF_FOLLOW_KEY : {ruleName:a.shortRuleNameToFullName(e), idxInCallingRule:d[f], inRule:a.shortRuleNameToFullName(b[f - 1])};
        });
      }, a.prototype.flattenFollowSet = function() {
        var a = this, b = h.map(this.buildFullFollowKeyStack(), function(b) {
          return a.getFollowSetFromFollowKey(b);
        });
        return h.flatten(b);
      }, a.prototype.getFollowSetFromFollowKey = function(a) {
        return a === c.EOF_FOLLOW_KEY ? [f.EOF] : this.resyncFollows.get(a.ruleName + a.idxInCallingRule + q.IN + a.inRule);
      }, a.prototype.addToResyncTokens = function(a, b) {
        return this.tokenMatcher(a, f.EOF) || b.push(a), b;
      }, a.prototype.reSyncTo = function(a) {
        for (var b = [], c = this.LA(1); !1 === this.tokenMatcher(c, a);) {
          c = this.SKIP_TOKEN(), this.addToResyncTokens(c, b);
        }
        return h.dropRight(b);
      }, a.prototype.attemptInRepetitionRecovery = function(a, b, c, d, e, f) {
      }, a.prototype.getCurrentGrammarPath = function(a, b) {
        return {ruleStack:this.getHumanReadableRuleStack(), occurrenceStack:h.cloneArr(this.RULE_OCCURRENCE_STACK), lastTok:a, lastTokOccurrence:b};
      }, a.prototype.getHumanReadableRuleStack = function() {
        var a = this;
        return h.isEmpty(this.LAST_EXPLICIT_RULE_STACK) ? h.map(this.RULE_STACK, function(b) {
          return a.shortRuleNameToFullName(b);
        }) : h.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.shortRuleNameToFullName(a.RULE_STACK[b]);
        });
      }, a;
    }();
    c.Recoverable = a;
    c.attemptInRepetitionRecovery = e;
  }, function(a, c, k) {
    function b(a, b) {
      return a.name + b + n.IN;
    }
    var e, f = this && this.__extends || (e = function(a, b) {
      return (e = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      e(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    a = k(14);
    var h = k(4), r = k(21), q = k(0), n = k(22), m = k(2), d = k(1), l = function(a) {
      function c(b) {
        var c = a.call(this) || this;
        return c.topProd = b, c.follows = new h.HashTable, c;
      }
      return f(c, a), c.prototype.startWalking = function() {
        return this.walk(this.topProd), this.follows;
      }, c.prototype.walkTerminal = function(a, b, c) {
      }, c.prototype.walkProdRef = function(a, c, e) {
        a = b(a.referencedRule, a.idx) + this.topProd.name;
        c = c.concat(e);
        c = new d.Flat({definition:c});
        c = r.first(c);
        this.follows.put(a, c);
      }, c;
    }(a.RestWalker);
    c.ResyncFollowsWalker = l;
    c.computeAllProdsFollows = function(a) {
      var b = new h.HashTable;
      return q.forEach(a, function(a) {
        a = (new l(a)).startWalking();
        b.putAll(a);
      }), b;
    };
    c.buildBetweenProdsFollowPrefix = b;
    c.buildInProdFollowPrefix = function(a) {
      return m.tokenName(a.terminalType) + a.idx + n.IN;
    };
  }, function(a, c, k) {
    function b(a) {
      var b = E.filter(a, function(a) {
        return !E.has(a, "PATTERN");
      });
      return {errors:E.map(b, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- missing static 'PATTERN' property", type:C.LexerDefinitionErrorType.MISSING_PATTERN, tokenTypes:[a]};
      }), valid:E.difference(a, b)};
    }
    function e(a) {
      var b = E.filter(a, function(a) {
        a = a.PATTERN;
        return !(E.isRegExp(a) || E.isFunction(a) || E.has(a, "exec") || E.isString(a));
      });
      return {errors:E.map(b, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.", type:C.LexerDefinitionErrorType.INVALID_PATTERN, tokenTypes:[a]};
      }), valid:E.difference(a, b)};
    }
    function f(a) {
      var b = function(a) {
        function b() {
          var b = null !== a && a.apply(this, arguments) || this;
          return b.found = !1, b;
        }
        return B(b, a), b.prototype.visitEndAnchor = function(a) {
          this.found = !0;
        }, b;
      }(D.BaseRegExpVisitor);
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        try {
          var c = Q.pattern(a.toString()), d = new b;
          return d.visit(c), d.found;
        } catch (aa) {
          return K.test(a.source);
        }
      });
      return E.map(a, function(a) {
        return {message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->" + F.tokenName(a) + "<- static 'PATTERN' cannot contain end of input anchor '$'\n\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.", type:C.LexerDefinitionErrorType.EOI_ANCHOR_FOUND, tokenTypes:[a]};
      });
    }
    function h(a) {
      a = E.filter(a, function(a) {
        return a.PATTERN.test("");
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' must not match an empty string", type:C.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN, tokenTypes:[a]};
      });
    }
    function r(a) {
      var b = function(a) {
        function b() {
          var b = null !== a && a.apply(this, arguments) || this;
          return b.found = !1, b;
        }
        return B(b, a), b.prototype.visitStartAnchor = function(a) {
          this.found = !0;
        }, b;
      }(D.BaseRegExpVisitor);
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        try {
          var c = Q.pattern(a.toString()), d = new b;
          return d.visit(c), d.found;
        } catch (aa) {
          return M.test(a.source);
        }
      });
      return E.map(a, function(a) {
        return {message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->" + F.tokenName(a) + "<- static 'PATTERN' cannot contain start of input anchor '^'\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.", type:C.LexerDefinitionErrorType.SOI_ANCHOR_FOUND, tokenTypes:[a]};
      });
    }
    function q(a) {
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        return a instanceof RegExp && (a.multiline || a.global);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')", type:C.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND, tokenTypes:[a]};
      });
    }
    function n(a) {
      var b = [], c = E.map(a, function(c) {
        return E.reduce(a, function(a, d) {
          return c.PATTERN.source !== d.PATTERN.source || E.contains(b, d) || d.PATTERN === C.Lexer.NA ? a : (b.push(d), a.push(d), a);
        }, []);
      });
      c = E.compact(c);
      c = E.filter(c, function(a) {
        return 1 < a.length;
      });
      return E.map(c, function(a) {
        var b = E.map(a, function(a) {
          return F.tokenName(a);
        });
        return {message:"The same RegExp pattern ->" + E.first(a).PATTERN + "<-has been used in all of the following Token Types: " + b.join(", ") + " <-", type:C.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND, tokenTypes:a};
      });
    }
    function m(a) {
      a = E.filter(a, function(a) {
        if (!E.has(a, "GROUP")) {
          return !1;
        }
        a = a.GROUP;
        return a !== C.Lexer.SKIPPED && a !== C.Lexer.NA && !E.isString(a);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String", type:C.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND, tokenTypes:[a]};
      });
    }
    function d(a, b) {
      a = E.filter(a, function(a) {
        return void 0 !== a.PUSH_MODE && !E.contains(b, a.PUSH_MODE);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" + a.PUSH_MODE + "<-which does not exist", type:C.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST, tokenTypes:[a]};
      });
    }
    function l(a) {
      var b = [], c = E.reduce(a, function(a, b, c) {
        var d = b.PATTERN;
        return d === C.Lexer.NA ? a : (E.isString(d) ? a.push({str:d, idx:c, tokenType:b}) : E.isRegExp(d) && void 0 === E.find(".\\[]|^$()?*+{".split(""), function(a) {
          return -1 !== d.source.indexOf(a);
        }) && a.push({str:d.source, idx:c, tokenType:b}), a);
      }, []);
      return E.forEach(a, function(a, d) {
        E.forEach(c, function(c) {
          var e = c.str, f = c.tokenType;
          d < c.idx && function(a, b) {
            if (E.isRegExp(b)) {
              return a = b.exec(a), null !== a && 0 === a.index;
            }
            if (E.isFunction(b)) {
              return b(a, 0, [], {});
            }
            if (E.has(b, "exec")) {
              return b.exec(a, 0, [], {});
            }
            if ("string" == typeof b) {
              return b === a;
            }
            throw Error("non exhaustive match");
          }(e, a.PATTERN) && (c = "Token: ->" + F.tokenName(f) + "<- can never be matched.\nBecause it appears AFTER the Token Type ->" + F.tokenName(a) + "<-in the lexer's definition.\nSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE", b.push({message:c, type:C.LexerDefinitionErrorType.UNREACHABLE_PATTERN, tokenTypes:[a, f]}));
        });
      }), b;
    }
    function v(a) {
      return new RegExp("^(?:" + a.source + ")", a.ignoreCase ? "i" : "");
    }
    function w(a) {
      return new RegExp("" + a.source, a.ignoreCase ? "iy" : "y");
    }
    function x(a) {
      a = a.PATTERN;
      if (E.isRegExp(a)) {
        return !1;
      }
      if (E.isFunction(a) || E.has(a, "exec")) {
        return !0;
      }
      if (E.isString(a)) {
        return !1;
      }
      throw Error("non exhaustive match");
    }
    function z(a) {
      return !(!E.isString(a) || 1 !== a.length) && a.charCodeAt(0);
    }
    function p(a, b) {
      if (E.has(a, "LINE_BREAKS")) {
        return !1;
      }
      if (E.isRegExp(a.PATTERN)) {
        try {
          H.canMatchCharCode(b, a.PATTERN);
        } catch (P) {
          return {issue:C.LexerDefinitionErrorType.IDENTIFY_TERMINATOR, errMsg:P.message};
        }
        return !1;
      }
      if (E.isString(a.PATTERN)) {
        return !1;
      }
      if (x(a)) {
        return {issue:C.LexerDefinitionErrorType.CUSTOM_LINE_BREAK};
      }
      throw Error("non exhaustive match");
    }
    function u(a, b) {
      if (b.issue === C.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
        return "Warning: unable to identify line terminator usage in pattern.\n\tThe problem is in the <" + a.name + "> Token Type\n\t Root cause: " + b.errMsg + ".\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR";
      }
      if (b.issue === C.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {
        return "Warning: A Custom Token Pattern should specify the <line_breaks> option.\n\tThe problem is in the <" + a.name + "> Token Type\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK";
      }
      throw Error("non exhaustive match");
    }
    function y(a) {
      return E.map(a, function(a) {
        return E.isString(a) && 0 < a.length ? a.charCodeAt(0) : a;
      });
    }
    var A, B = this && this.__extends || (A = function(a, b) {
      return (A = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      A(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var D = k(19), F = k(2), C = k(15), E = k(0), H = k(28), Q = new D.RegExpParser;
    c.DEFAULT_MODE = "defaultMode";
    c.MODES = "modes";
    c.SUPPORT_STICKY = "boolean" == typeof/(?:)/.sticky;
    c.disableSticky = function() {
      c.SUPPORT_STICKY = !1;
    };
    c.enableSticky = function() {
      c.SUPPORT_STICKY = !0;
    };
    c.analyzeTokenTypes = function(a, b) {
      function d(a, b, c) {
        void 0 === a[b] && (a[b] = []);
        a[b].push(c);
      }
      b = E.defaults(b, {useSticky:c.SUPPORT_STICKY, debug:!1, safeMode:!1, positionTracking:"full", lineTerminatorCharacters:["\r", "\n"]});
      var e = E.reject(a, function(a) {
        return a.PATTERN === C.Lexer.NA;
      }), f = !1, h = E.map(e, function(a) {
        a = a.PATTERN;
        if (E.isRegExp(a)) {
          var c = a.source;
          return 1 === c.length && "^" !== c && "$" !== c && "." !== c ? c : 2 !== c.length || "\\" !== c[0] || E.contains("dDsStrnt0cbBfvwW".split(""), c[1]) ? b.useSticky ? w(a) : v(a) : c[1];
        }
        if (E.isFunction(a)) {
          return f = !0, {exec:a};
        }
        if (E.has(a, "exec")) {
          return f = !0, a;
        }
        if ("string" == typeof a) {
          if (1 === a.length) {
            return a;
          }
          a = a.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
          a = new RegExp(a);
          return b.useSticky ? w(a) : v(a);
        }
        throw Error("non exhaustive match");
      }), k = E.map(e, function(a) {
        return a.tokenTypeIdx;
      }), l = E.map(e, function(a) {
        a = a.GROUP;
        if (a !== C.Lexer.SKIPPED) {
          if (E.isString(a)) {
            return a;
          }
          if (E.isUndefined(a)) {
            return !1;
          }
          throw Error("non exhaustive match");
        }
      }), m = E.map(e, function(a) {
        if (a = a.LONGER_ALT) {
          return E.indexOf(e, a);
        }
      }), n = E.map(e, function(a) {
        return a.PUSH_MODE;
      }), q = E.map(e, function(a) {
        return E.has(a, "POP_MODE");
      }), r = y(b.lineTerminatorCharacters), u = E.map(e, function(a) {
        return !1;
      });
      "onlyOffset" !== b.positionTracking && (u = E.map(e, function(a) {
        return E.has(a, "LINE_BREAKS") ? a.LINE_BREAKS : !1 === p(a, r) ? H.canMatchCharCode(r, a.PATTERN) : void 0;
      }));
      var A = E.map(e, x), B = E.map(h, z);
      a = E.reduce(e, function(a, b) {
        b = b.GROUP;
        return E.isString(b) && b !== C.Lexer.SKIPPED && (a[b] = []), a;
      }, {});
      var D = E.map(h, function(a, b) {
        return {pattern:h[b], longerAlt:m[b], canLineTerminator:u[b], isCustom:A[b], short:B[b], group:l[b], push:n[b], pop:q[b], tokenTypeIdx:k[b], tokenType:e[b]};
      }), I = !0, L = [];
      return b.safeMode || (L = E.reduce(e, function(a, c, e) {
        "string" == typeof c.PATTERN ? (c = c.PATTERN.charCodeAt(0), d(a, c, D[e])) : E.isArray(c.START_CHARS_HINT) ? E.forEach(c.START_CHARS_HINT, function(b) {
          b = "string" == typeof b ? b.charCodeAt(0) : b;
          d(a, b, D[e]);
        }) : E.isRegExp(c.PATTERN) ? c.PATTERN.unicode ? (I = !1, b.ensureOptimizations && E.PRINT_ERROR(H.failedOptimizationPrefixMsg + "\tUnable to analyze < " + c.PATTERN.toString() + " > pattern.\n\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE")) : (c = H.getStartCodes(c.PATTERN, b.ensureOptimizations), 
        E.isEmpty(c) && (I = !1), E.forEach(c, function(b) {
          d(a, b, D[e]);
        })) : (b.ensureOptimizations && E.PRINT_ERROR(H.failedOptimizationPrefixMsg + "\tTokenType: <" + F.tokenName(c) + "> is using a custom token pattern without providing <start_chars_hint> parameter.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE"), I = !1);
        return a;
      }, [])), I && 65536 > L.length && (L = E.packArray(L)), {emptyGroups:a, patternIdxToConfig:D, charCodeToPatternIdxToConfig:L, hasCustom:f, canBeOptimized:I};
    };
    c.validatePatterns = function(a, c) {
      var k = [];
      a = b(a);
      k = k.concat(a.errors);
      a = e(a.valid);
      var p = a.valid;
      return k = (k = (k = (k = (k = k.concat(a.errors)).concat(function(a) {
        var b = [];
        a = E.filter(a, function(a) {
          return E.isRegExp(a.PATTERN);
        });
        return b = (b = (b = (b = (b = b.concat(f(a))).concat(r(a))).concat(q(a))).concat(n(a))).concat(h(a));
      }(p))).concat(m(p))).concat(d(p, c))).concat(l(p));
    };
    c.findMissingPatterns = b;
    c.findInvalidPatterns = e;
    var K = /[^\\][\$]/;
    c.findEndOfInputAnchor = f;
    c.findEmptyMatchRegExps = h;
    var M = /[^\\[][\^]|^\^/;
    c.findStartOfInputAnchor = r;
    c.findUnsupportedFlags = q;
    c.findDuplicatePatterns = n;
    c.findInvalidGroupType = m;
    c.findModesThatDoNotExist = d;
    c.findUnreachablePatterns = l;
    c.addStartOfInput = v;
    c.addStickyFlag = w;
    c.performRuntimeChecks = function(a, b, d) {
      var e = [];
      return E.has(a, c.DEFAULT_MODE) || e.push({message:"A MultiMode Lexer cannot be initialized without a <" + c.DEFAULT_MODE + "> property in its definition\n", type:C.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE}), E.has(a, c.MODES) || e.push({message:"A MultiMode Lexer cannot be initialized without a <" + c.MODES + "> property in its definition\n", type:C.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY}), E.has(a, c.MODES) && E.has(a, c.DEFAULT_MODE) && !E.has(a.modes, 
      a.defaultMode) && e.push({message:"A MultiMode Lexer cannot be initialized with a " + c.DEFAULT_MODE + ": <" + a.defaultMode + ">which does not exist\n", type:C.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST}), E.has(a, c.MODES) && E.forEach(a.modes, function(a, b) {
        E.forEach(a, function(a, c) {
          E.isUndefined(a) && e.push({message:"A Lexer cannot be initialized using an undefined Token Type. Mode:<" + b + "> at index: <" + c + ">\n", type:C.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED});
        });
      }), e;
    };
    c.performWarningRuntimeChecks = function(a, b, c) {
      var d = [], e = !1;
      a = E.compact(E.flatten(E.mapValues(a.modes, function(a) {
        return a;
      })));
      a = E.reject(a, function(a) {
        return a.PATTERN === C.Lexer.NA;
      });
      var f = y(c);
      return b && E.forEach(a, function(a) {
        var b = p(a, f);
        !1 !== b ? (a = {message:u(a, b), type:b.issue, tokenType:a}, d.push(a)) : E.has(a, "LINE_BREAKS") ? !0 === a.LINE_BREAKS && (e = !0) : H.canMatchCharCode(f, a.PATTERN) && (e = !0);
      }), b && !e && d.push({message:"Warning: No LINE_BREAKS Found.\n\tThis Lexer has been defined to track line and column information,\n\tBut none of the Token Types can be identified as matching a line terminator.\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n\tfor details.", type:C.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS}), d;
    };
    c.cloneEmptyGroups = function(a) {
      var b = {}, c = E.keys(a);
      return E.forEach(c, function(c) {
        if (!E.isArray(a[c])) {
          throw Error("non exhaustive match");
        }
        b[c] = [];
      }), b;
    };
    c.isCustomPattern = x;
    c.isShortPattern = z;
    c.LineTerminatorOptimizedTester = {test:function(a) {
      for (var b = a.length, c = this.lastIndex; c < b; c++) {
        var d = a.charCodeAt(c);
        if (10 === d) {
          return this.lastIndex = c + 1, !0;
        }
        if (13 === d) {
          return 10 === a.charCodeAt(c + 1) ? this.lastIndex = c + 2 : this.lastIndex = c + 1, !0;
        }
      }
      return !1;
    }, lastIndex:0};
    c.buildLineBreakIssueMessage = u;
  }, function(a, c, k) {
    function b(a) {
      switch(a.type) {
        case "Disjunction":
          return m.flatten(m.map(a.value, b));
        case "Alternative":
          var c = [];
          a = a.value;
          for (var d = 0; d < a.length; d++) {
            var e = a[d];
            if (!m.contains("GroupBackReference Lookahead NegativeLookahead StartAnchor EndAnchor WordBoundary NonWordBoundary".split(" "), e.type)) {
              switch(e.type) {
                case "Character":
                  c.push(e.value);
                  break;
                case "Set":
                  if (!0 === e.complement) {
                    throw Error("Complement Sets are not supported for first char optimization");
                  }
                  m.forEach(e.value, function(a) {
                    if ("number" == typeof a) {
                      c.push(a);
                    } else {
                      for (var b = a.from; b <= a.to; b++) {
                        c.push(b);
                      }
                    }
                  });
                  break;
                case "Group":
                  var f = b(e.value);
                  m.forEach(f, function(a) {
                    return c.push(a);
                  });
                  break;
                default:
                  throw Error("Non Exhaustive Match");
              }
              f = void 0 !== e.quantifier && 0 === e.quantifier.atLeast;
              if ("Group" === e.type && !1 === h(e) || "Group" !== e.type && !1 === f) {
                break;
              }
            }
          }
          return c;
        default:
          throw Error("non exhaustive match!");
      }
    }
    function e(a) {
      var b = [];
      return m.forEach(a, function(a) {
        b.push(a);
        a = String.fromCharCode(a);
        a.toUpperCase() !== a ? b.push(a.toUpperCase().charCodeAt(0)) : a.toLowerCase() !== a && b.push(a.toLowerCase().charCodeAt(0));
      }), b;
    }
    function f(a, b) {
      return m.find(a.value, function(a) {
        return "number" == typeof a ? m.contains(b, a) : void 0 !== m.find(b, function(b) {
          return a.from <= b && b <= a.to;
        });
      });
    }
    function h(a) {
      return !(!a.quantifier || 0 !== a.quantifier.atLeast) || !!a.value && (m.isArray(a.value) ? m.every(a.value, h) : h(a.value));
    }
    var r, q = this && this.__extends || (r = function(a, b) {
      return (r = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      r(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var n = k(19), m = k(0), d = new n.RegExpParser;
    c.failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
    c.getStartCodes = function(a, f) {
      void 0 === f && (f = !1);
      try {
        var h = d.pattern(a.toString()), k = b(h.value);
        return h.flags.ignoreCase && (k = e(k)), k;
      } catch (p) {
        "Complement Sets are not supported for first char optimization" === p.message ? f && m.PRINT_WARNING(c.failedOptimizationPrefixMsg + "\tUnable to optimize: < " + a.toString() + " >\n\tComplement Sets cannot be automatically optimized.\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.") : (h = "", f && (h = "\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details."), 
        m.PRINT_ERROR(c.failedOptimizationPrefixMsg + "\n\tFailed parsing: < " + a.toString() + " >\n\tUsing the regexp-to-ast library version: " + n.VERSION + "\n\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" + h));
      }
      return [];
    };
    c.firstChar = b;
    c.applyIgnoreCase = e;
    var l = function(a) {
      function b(b) {
        var c = a.call(this) || this;
        return c.targetCharCodes = b, c.found = !1, c;
      }
      return q(b, a), b.prototype.visitChildren = function(b) {
        switch(b.type) {
          case "Lookahead":
            return void this.visitLookahead(b);
          case "NegativeLookahead":
            return void this.visitNegativeLookahead(b);
        }
        a.prototype.visitChildren.call(this, b);
      }, b.prototype.visitCharacter = function(a) {
        m.contains(this.targetCharCodes, a.value) && (this.found = !0);
      }, b.prototype.visitSet = function(a) {
        a.complement ? void 0 === f(a, this.targetCharCodes) && (this.found = !0) : void 0 !== f(a, this.targetCharCodes) && (this.found = !0);
      }, b;
    }(n.BaseRegExpVisitor);
    c.canMatchCharCode = function(a, b) {
      if (b instanceof RegExp) {
        b = d.pattern(b.toString());
        var c = new l(a);
        return c.visit(b), c.found;
      }
      return void 0 !== m.find(b, function(b) {
        return m.contains(a, b.charCodeAt(0));
      });
    };
  }, function(a, c, k) {
    function b(a, b) {
      return !(0 > a || b < a);
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    a = function() {
      function a(a, c) {
        if (this.start = a, this.end = c, !b(a, c)) {
          throw Error("INVALID RANGE");
        }
      }
      return a.prototype.contains = function(a) {
        return this.start <= a && this.end >= a;
      }, a.prototype.containsRange = function(a) {
        return this.start <= a.start && this.end >= a.end;
      }, a.prototype.isContainedInRange = function(a) {
        return a.containsRange(this);
      }, a.prototype.strictlyContainsRange = function(a) {
        return this.start < a.start && this.end > a.end;
      }, a.prototype.isStrictlyContainedInRange = function(a) {
        return a.strictlyContainsRange(this);
      }, a;
    }();
    c.Range = a;
    c.isValidRange = b;
  }, function(a, c, k) {
    var b, e = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function e() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (e.prototype = c.prototype, new e);
    });
    Object.defineProperty(c, "__esModule", {value:!0});
    var f = k(3), h = k(0);
    a = k(5);
    c.resolveGrammar = function(a, b) {
      a = new r(a, b);
      return a.resolveRefs(), a.errors;
    };
    var r = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.nameToTopRule = b, d.errMsgProvider = c, d.errors = [], d;
      }
      return e(b, a), b.prototype.resolveRefs = function() {
        var a = this;
        h.forEach(this.nameToTopRule.values(), function(b) {
          a.currTopLevel = b;
          b.accept(a);
        });
      }, b.prototype.visitNonTerminal = function(a) {
        var b = this.nameToTopRule.get(a.nonTerminalName);
        b ? a.referencedRule = b : (b = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, a), this.errors.push({message:b, type:f.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF, ruleName:this.currTopLevel.name, unresolvedRefName:a.nonTerminalName}));
      }, b;
    }(a.GAstVisitor);
    c.GastRefResolverVisitor = r;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(12), e = k(0), f = k(3), h = k(9);
    a = function() {
      function a() {
      }
      return a.prototype.initLooksAhead = function(a) {
        this.dynamicTokensEnabled = e.has(a, "dynamicTokensEnabled") ? a.dynamicTokensEnabled : f.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
        this.maxLookahead = e.has(a, "maxLookahead") ? a.maxLookahead : f.DEFAULT_PARSER_CONFIG.maxLookahead;
        this.lookAheadFuncsCache = e.isES2015MapSupported() ? new Map : [];
        e.isES2015MapSupported() ? (this.getLaFuncFromCache = this.getLaFuncFromMap, this.setLaFuncCache = this.setLaFuncCacheUsingMap) : (this.getLaFuncFromCache = this.getLaFuncFromObj, this.setLaFuncCache = this.setLaFuncUsingObj);
      }, a.prototype.lookAheadBuilderForOptional = function(a, c, e) {
        return b.buildSingleAlternativeLookaheadFunction(a, c, e);
      }, a.prototype.lookAheadBuilderForAlternatives = function(a, c, e, d) {
        return b.buildAlternativesLookAheadFunc(a, c, e, d);
      }, a.prototype.getKeyForAutomaticLookahead = function(a, b) {
        var c = this.getLastExplicitRuleShortName();
        return h.getKeyForAutomaticLookahead(c, a, b);
      }, a.prototype.getLookaheadFuncForOr = function(a, c) {
        var f = this.getKeyForAutomaticLookahead(h.OR_IDX, a), d = this.getLaFuncFromCache(f);
        if (void 0 === d) {
          var k = this.getCurrRuleFullName();
          k = this.getGAstProductions().get(k);
          c = e.some(c, function(a) {
            return e.isFunction(a.GATE);
          });
          return d = b.buildLookaheadFuncForOr(a, k, this.maxLookahead, c, this.dynamicTokensEnabled, this.lookAheadBuilderForAlternatives), this.setLaFuncCache(f, d), d;
        }
        return d;
      }, a.prototype.getLookaheadFuncForOption = function(a, c) {
        return this.getLookaheadFuncFor(a, c, this.maxLookahead, b.PROD_TYPE.OPTION);
      }, a.prototype.getLookaheadFuncForMany = function(a, c) {
        return this.getLookaheadFuncFor(a, c, this.maxLookahead, b.PROD_TYPE.REPETITION);
      }, a.prototype.getLookaheadFuncForManySep = function(a, c) {
        return this.getLookaheadFuncFor(a, c, this.maxLookahead, b.PROD_TYPE.REPETITION_WITH_SEPARATOR);
      }, a.prototype.getLookaheadFuncForAtLeastOne = function(a, c) {
        return this.getLookaheadFuncFor(a, c, this.maxLookahead, b.PROD_TYPE.REPETITION_MANDATORY);
      }, a.prototype.getLookaheadFuncForAtLeastOneSep = function(a, c) {
        return this.getLookaheadFuncFor(a, c, this.maxLookahead, b.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
      }, a.prototype.getLookaheadFuncFor = function(a, c, e, d) {
        var f = this.getLaFuncFromCache(a);
        if (void 0 === f) {
          var h = this.getCurrRuleFullName();
          h = this.getGAstProductions().get(h);
          return f = b.buildLookaheadFuncForOptionalProd(c, h, e, this.dynamicTokensEnabled, d, this.lookAheadBuilderForOptional), this.setLaFuncCache(a, f), f;
        }
        return f;
      }, a.prototype.getLaFuncFromCache = function(a) {
      }, a.prototype.getLaFuncFromMap = function(a) {
        return this.lookAheadFuncsCache.get(a);
      }, a.prototype.getLaFuncFromObj = function(a) {
        return this.lookAheadFuncsCache[a];
      }, a.prototype.setLaFuncCache = function(a, b) {
      }, a.prototype.setLaFuncCacheUsingMap = function(a, b) {
        this.lookAheadFuncsCache.set(a, b);
      }, a.prototype.setLaFuncUsingObj = function(a, b) {
        this.lookAheadFuncsCache[a] = b;
      }, a;
    }();
    c.LooksAhead = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(16), e = k(0), f = k(33), h = k(9), r = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initTreeBuilder = function(a) {
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        (this.outputCst = e.has(a, "outputCst") ? a.outputCst : r.DEFAULT_PARSER_CONFIG.outputCst) || (this.cstInvocationStateUpdate = e.NOOP, this.cstFinallyStateUpdate = e.NOOP, this.cstPostTerminal = e.NOOP, this.cstPostNonTerminal = e.NOOP, this.getLastExplicitRuleShortName = this.getLastExplicitRuleShortNameNoCst, this.getPreviousExplicitRuleShortName = this.getPreviousExplicitRuleShortNameNoCst, this.getLastExplicitRuleOccurrenceIndex = this.getLastExplicitRuleOccurrenceIndexNoCst, this.manyInternal = 
        this.manyInternalNoCst, this.orInternal = this.orInternalNoCst, this.optionInternal = this.optionInternalNoCst, this.atLeastOneInternal = this.atLeastOneInternalNoCst, this.manySepFirstInternal = this.manySepFirstInternalNoCst, this.atLeastOneSepFirstInternal = this.atLeastOneSepFirstInternalNoCst);
      }, a.prototype.cstNestedInvocationStateUpdate = function(a, b) {
        this.CST_STACK.push({name:a, fullName:this.shortRuleNameToFull.get(this.getLastExplicitRuleShortName()) + a, children:{}});
      }, a.prototype.cstInvocationStateUpdate = function(a, b) {
        this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);
        this.CST_STACK.push({name:a, children:{}});
      }, a.prototype.cstFinallyStateUpdate = function() {
        this.LAST_EXPLICIT_RULE_STACK.pop();
        this.CST_STACK.pop();
      }, a.prototype.cstNestedFinallyStateUpdate = function() {
        this.CST_STACK.pop();
      }, a.prototype.cstPostTerminal = function(a, c) {
        b.addTerminalToCst(this.CST_STACK[this.CST_STACK.length - 1], c, a);
      }, a.prototype.cstPostNonTerminal = function(a, c) {
        b.addNoneTerminalToCst(this.CST_STACK[this.CST_STACK.length - 1], c, a);
      }, a.prototype.getBaseCstVisitorConstructor = function() {
        if (e.isUndefined(this.baseCstVisitorConstructor)) {
          var a = f.createBaseSemanticVisitorConstructor(this.className, this.allRuleNames);
          return this.baseCstVisitorConstructor = a, a;
        }
        return this.baseCstVisitorConstructor;
      }, a.prototype.getBaseCstVisitorConstructorWithDefaults = function() {
        if (e.isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {
          var a = f.createBaseVisitorConstructorWithDefaults(this.className, this.allRuleNames, this.getBaseCstVisitorConstructor());
          return this.baseCstVisitorWithDefaultsConstructor = a, a;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
      }, a.prototype.nestedRuleBeforeClause = function(a, b) {
        var c;
        return void 0 !== a.NAME ? (c = a.NAME, this.nestedRuleInvocationStateUpdate(c, b), c) : void 0;
      }, a.prototype.nestedAltBeforeClause = function(a, b, c, e) {
        var d, f = this.getLastExplicitRuleShortName();
        b = h.getKeyForAltIndex(f, c, b, e);
        return void 0 !== a.NAME ? (d = a.NAME, this.nestedRuleInvocationStateUpdate(d, b), {shortName:b, nestedName:d}) : void 0;
      }, a.prototype.nestedRuleFinallyClause = function(a, c) {
        a = this.CST_STACK;
        var d = a[a.length - 1];
        this.nestedRuleFinallyStateUpdate();
        b.addNoneTerminalToCst(a[a.length - 1], c, d);
      }, a.prototype.getLastExplicitRuleShortName = function() {
        return this.RULE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1]];
      }, a.prototype.getLastExplicitRuleShortNameNoCst = function() {
        var a = this.RULE_STACK;
        return a[a.length - 1];
      }, a.prototype.getPreviousExplicitRuleShortName = function() {
        return this.RULE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 2]];
      }, a.prototype.getPreviousExplicitRuleShortNameNoCst = function() {
        var a = this.RULE_STACK;
        return a[a.length - 2];
      }, a.prototype.getLastExplicitRuleOccurrenceIndex = function() {
        return this.RULE_OCCURRENCE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1]];
      }, a.prototype.getLastExplicitRuleOccurrenceIndexNoCst = function() {
        var a = this.RULE_OCCURRENCE_STACK;
        return a[a.length - 1];
      }, a.prototype.nestedRuleInvocationStateUpdate = function(a, b) {
        this.RULE_OCCURRENCE_STACK.push(1);
        this.RULE_STACK.push(b);
        this.cstNestedInvocationStateUpdate(a, b);
      }, a.prototype.nestedRuleFinallyStateUpdate = function() {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        this.cstNestedFinallyStateUpdate();
      }, a;
    }();
    c.TreeBuilder = a;
  }, function(a, c, k) {
    function b(a, b) {
      for (var c = q.keys(a), d = c.length, e = 0; e < d; e++) {
        for (var f = a[c[e]], h = f.length, k = 0; k < h; k++) {
          var l = f[k];
          void 0 === l.tokenTypeIdx && (void 0 !== l.fullName ? this[l.fullName](l.children, b) : this[l.name](l.children, b));
        }
      }
    }
    function e(a, b) {
      var c = f(a, b);
      a = h(a, b);
      return c.concat(a);
    }
    function f(a, b) {
      b = q.map(b, function(b) {
        if (!q.isFunction(a[b])) {
          return {msg:"Missing visitor method: <" + b + "> on " + n.functionName(a.constructor) + " CST Visitor.", type:r.MISSING_METHOD, methodName:b};
        }
      });
      return q.compact(b);
    }
    function h(a, b) {
      var c = [], e;
      for (e in a) {
        m.validTermsPattern.test(e) && q.isFunction(a[e]) && !q.contains(d, e) && !q.contains(b, e) && c.push({msg:"Redundant visitor method: <" + e + "> on " + n.functionName(a.constructor) + " CST Visitor\nThere is no Grammar Rule corresponding to this method's name.\nFor utility methods on visitor classes use methods names that do not match /" + m.validTermsPattern.source + "/.", type:r.REDUNDANT_METHOD, methodName:e});
      }
      return c;
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var r, q = k(0), n = k(4), m = k(11);
    c.defaultVisit = b;
    c.createBaseSemanticVisitorConstructor = function(a, b) {
      var c = function() {
      };
      return n.defineNameProp(c, a + "BaseSemantics"), (c.prototype = {visit:function(a, b) {
        if (q.isArray(a) && (a = a[0]), !q.isUndefined(a)) {
          return void 0 !== a.fullName ? this[a.fullName](a.children, b) : this[a.name](a.children, b);
        }
      }, validateVisitor:function() {
        var a = e(this, b);
        if (!q.isEmpty(a)) {
          throw a = q.map(a, function(a) {
            return a.msg;
          }), Error("Errors Detected in CST Visitor <" + n.functionName(this.constructor) + ">:\n\t" + a.join("\n\n").replace(/\n/g, "\n\t"));
        }
      }}).constructor = c, c._RULE_NAMES = b, c;
    };
    c.createBaseVisitorConstructorWithDefaults = function(a, c, d) {
      var e = function() {
      };
      n.defineNameProp(e, a + "BaseSemanticsWithDefaults");
      var f = Object.create(d.prototype);
      return q.forEach(c, function(a) {
        f[a] = b;
      }), (e.prototype = f).constructor = e, e;
    };
    (function(a) {
      a[a.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD";
      a[a.MISSING_METHOD = 1] = "MISSING_METHOD";
    })(r = c.CstVisitorDefinitionError || (c.CstVisitorDefinitionError = {}));
    c.validateVisitor = e;
    c.validateMissingCstMethods = f;
    var d = ["constructor", "visit", "validateVisitor"];
    c.validateRedundantMethods = h;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initLexerAdapter = function() {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
      }, Object.defineProperty(a.prototype, "input", {get:function() {
        return this.tokVector;
      }, set:function(a) {
        this.reset();
        this.tokVector = a;
        this.tokVectorLength = a.length;
      }, enumerable:!0, configurable:!0}), a.prototype.SKIP_TOKEN = function() {
        return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : b.END_OF_FILE;
      }, a.prototype.LA = function(a) {
        return 0 > this.currIdx + a || this.tokVectorLength <= this.currIdx + a ? b.END_OF_FILE : this.tokVector[this.currIdx + a];
      }, a.prototype.consumeToken = function() {
        this.currIdx++;
      }, a.prototype.exportLexerState = function() {
        return this.currIdx;
      }, a.prototype.importLexerState = function(a) {
        this.currIdx = a;
      }, a.prototype.resetLexerState = function() {
        this.currIdx = -1;
      }, a.prototype.moveToTerminatedState = function() {
        this.currIdx = this.tokVector.length - 1;
      }, a.prototype.getLexerPosition = function() {
        return this.exportLexerState();
      }, a;
    }();
    c.LexerAdapter = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(0), e = k(6), f = k(3), h = k(10), r = k(23), q = k(11), n = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.CONSUME = function(a, b) {
        return this.consumeInternal(a, 0, b);
      }, a.prototype.CONSUME1 = function(a, b) {
        return this.consumeInternal(a, 1, b);
      }, a.prototype.CONSUME2 = function(a, b) {
        return this.consumeInternal(a, 2, b);
      }, a.prototype.CONSUME3 = function(a, b) {
        return this.consumeInternal(a, 3, b);
      }, a.prototype.CONSUME4 = function(a, b) {
        return this.consumeInternal(a, 4, b);
      }, a.prototype.CONSUME5 = function(a, b) {
        return this.consumeInternal(a, 5, b);
      }, a.prototype.CONSUME6 = function(a, b) {
        return this.consumeInternal(a, 6, b);
      }, a.prototype.CONSUME7 = function(a, b) {
        return this.consumeInternal(a, 7, b);
      }, a.prototype.CONSUME8 = function(a, b) {
        return this.consumeInternal(a, 8, b);
      }, a.prototype.CONSUME9 = function(a, b) {
        return this.consumeInternal(a, 9, b);
      }, a.prototype.SUBRULE = function(a, b) {
        return this.subruleInternal(a, 0, b);
      }, a.prototype.SUBRULE1 = function(a, b) {
        return this.subruleInternal(a, 1, b);
      }, a.prototype.SUBRULE2 = function(a, b) {
        return this.subruleInternal(a, 2, b);
      }, a.prototype.SUBRULE3 = function(a, b) {
        return this.subruleInternal(a, 3, b);
      }, a.prototype.SUBRULE4 = function(a, b) {
        return this.subruleInternal(a, 4, b);
      }, a.prototype.SUBRULE5 = function(a, b) {
        return this.subruleInternal(a, 5, b);
      }, a.prototype.SUBRULE6 = function(a, b) {
        return this.subruleInternal(a, 6, b);
      }, a.prototype.SUBRULE7 = function(a, b) {
        return this.subruleInternal(a, 7, b);
      }, a.prototype.SUBRULE8 = function(a, b) {
        return this.subruleInternal(a, 8, b);
      }, a.prototype.SUBRULE9 = function(a, b) {
        return this.subruleInternal(a, 9, b);
      }, a.prototype.OPTION = function(a) {
        return this.optionInternal(a, 0);
      }, a.prototype.OPTION1 = function(a) {
        return this.optionInternal(a, 1);
      }, a.prototype.OPTION2 = function(a) {
        return this.optionInternal(a, 2);
      }, a.prototype.OPTION3 = function(a) {
        return this.optionInternal(a, 3);
      }, a.prototype.OPTION4 = function(a) {
        return this.optionInternal(a, 4);
      }, a.prototype.OPTION5 = function(a) {
        return this.optionInternal(a, 5);
      }, a.prototype.OPTION6 = function(a) {
        return this.optionInternal(a, 6);
      }, a.prototype.OPTION7 = function(a) {
        return this.optionInternal(a, 7);
      }, a.prototype.OPTION8 = function(a) {
        return this.optionInternal(a, 8);
      }, a.prototype.OPTION9 = function(a) {
        return this.optionInternal(a, 9);
      }, a.prototype.OR = function(a) {
        return this.orInternal(a, 0);
      }, a.prototype.OR1 = function(a) {
        return this.orInternal(a, 1);
      }, a.prototype.OR2 = function(a) {
        return this.orInternal(a, 2);
      }, a.prototype.OR3 = function(a) {
        return this.orInternal(a, 3);
      }, a.prototype.OR4 = function(a) {
        return this.orInternal(a, 4);
      }, a.prototype.OR5 = function(a) {
        return this.orInternal(a, 5);
      }, a.prototype.OR6 = function(a) {
        return this.orInternal(a, 6);
      }, a.prototype.OR7 = function(a) {
        return this.orInternal(a, 7);
      }, a.prototype.OR8 = function(a) {
        return this.orInternal(a, 8);
      }, a.prototype.OR9 = function(a) {
        return this.orInternal(a, 9);
      }, a.prototype.MANY = function(a) {
        this.manyInternal(0, a);
      }, a.prototype.MANY1 = function(a) {
        this.manyInternal(1, a);
      }, a.prototype.MANY2 = function(a) {
        this.manyInternal(2, a);
      }, a.prototype.MANY3 = function(a) {
        this.manyInternal(3, a);
      }, a.prototype.MANY4 = function(a) {
        this.manyInternal(4, a);
      }, a.prototype.MANY5 = function(a) {
        this.manyInternal(5, a);
      }, a.prototype.MANY6 = function(a) {
        this.manyInternal(6, a);
      }, a.prototype.MANY7 = function(a) {
        this.manyInternal(7, a);
      }, a.prototype.MANY8 = function(a) {
        this.manyInternal(8, a);
      }, a.prototype.MANY9 = function(a) {
        this.manyInternal(9, a);
      }, a.prototype.MANY_SEP = function(a) {
        this.manySepFirstInternal(0, a);
      }, a.prototype.MANY_SEP1 = function(a) {
        this.manySepFirstInternal(1, a);
      }, a.prototype.MANY_SEP2 = function(a) {
        this.manySepFirstInternal(2, a);
      }, a.prototype.MANY_SEP3 = function(a) {
        this.manySepFirstInternal(3, a);
      }, a.prototype.MANY_SEP4 = function(a) {
        this.manySepFirstInternal(4, a);
      }, a.prototype.MANY_SEP5 = function(a) {
        this.manySepFirstInternal(5, a);
      }, a.prototype.MANY_SEP6 = function(a) {
        this.manySepFirstInternal(6, a);
      }, a.prototype.MANY_SEP7 = function(a) {
        this.manySepFirstInternal(7, a);
      }, a.prototype.MANY_SEP8 = function(a) {
        this.manySepFirstInternal(8, a);
      }, a.prototype.MANY_SEP9 = function(a) {
        this.manySepFirstInternal(9, a);
      }, a.prototype.AT_LEAST_ONE = function(a) {
        this.atLeastOneInternal(0, a);
      }, a.prototype.AT_LEAST_ONE1 = function(a) {
        return this.atLeastOneInternal(1, a);
      }, a.prototype.AT_LEAST_ONE2 = function(a) {
        this.atLeastOneInternal(2, a);
      }, a.prototype.AT_LEAST_ONE3 = function(a) {
        this.atLeastOneInternal(3, a);
      }, a.prototype.AT_LEAST_ONE4 = function(a) {
        this.atLeastOneInternal(4, a);
      }, a.prototype.AT_LEAST_ONE5 = function(a) {
        this.atLeastOneInternal(5, a);
      }, a.prototype.AT_LEAST_ONE6 = function(a) {
        this.atLeastOneInternal(6, a);
      }, a.prototype.AT_LEAST_ONE7 = function(a) {
        this.atLeastOneInternal(7, a);
      }, a.prototype.AT_LEAST_ONE8 = function(a) {
        this.atLeastOneInternal(8, a);
      }, a.prototype.AT_LEAST_ONE9 = function(a) {
        this.atLeastOneInternal(9, a);
      }, a.prototype.AT_LEAST_ONE_SEP = function(a) {
        this.atLeastOneSepFirstInternal(0, a);
      }, a.prototype.AT_LEAST_ONE_SEP1 = function(a) {
        this.atLeastOneSepFirstInternal(1, a);
      }, a.prototype.AT_LEAST_ONE_SEP2 = function(a) {
        this.atLeastOneSepFirstInternal(2, a);
      }, a.prototype.AT_LEAST_ONE_SEP3 = function(a) {
        this.atLeastOneSepFirstInternal(3, a);
      }, a.prototype.AT_LEAST_ONE_SEP4 = function(a) {
        this.atLeastOneSepFirstInternal(4, a);
      }, a.prototype.AT_LEAST_ONE_SEP5 = function(a) {
        this.atLeastOneSepFirstInternal(5, a);
      }, a.prototype.AT_LEAST_ONE_SEP6 = function(a) {
        this.atLeastOneSepFirstInternal(6, a);
      }, a.prototype.AT_LEAST_ONE_SEP7 = function(a) {
        this.atLeastOneSepFirstInternal(7, a);
      }, a.prototype.AT_LEAST_ONE_SEP8 = function(a) {
        this.atLeastOneSepFirstInternal(8, a);
      }, a.prototype.AT_LEAST_ONE_SEP9 = function(a) {
        this.atLeastOneSepFirstInternal(9, a);
      }, a.prototype.RULE = function(a, c, e) {
        if (void 0 === e && (e = f.DEFAULT_RULE_CONFIG), b.contains(this.definedRulesNames, a)) {
          var d = {message:h.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({topLevelRule:a, grammarName:this.className}), type:f.ParserDefinitionErrorType.DUPLICATE_RULE_NAME, ruleName:a};
          this.definitionErrors.push(d);
        }
        (this.definedRulesNames.push(a), this.gastProductionsCache.containsKey(a) || this.serializedGrammar) || (d = r.buildTopProduction(c.toString(), a, this.tokensMap), this.gastProductionsCache.put(a, d));
        c = this.defineRule(a, c, e);
        return this[a] = c, c;
      }, a.prototype.OVERRIDE_RULE = function(a, b, c) {
        void 0 === c && (c = f.DEFAULT_RULE_CONFIG);
        var d = [];
        (d = d.concat(q.validateRuleIsOverridden(a, this.definedRulesNames, this.className)), this.definitionErrors.push.apply(this.definitionErrors, d), this.serializedGrammar) || (d = r.buildTopProduction(b.toString(), a, this.tokensMap), this.gastProductionsCache.put(a, d));
        b = this.defineRule(a, b, c);
        return this[a] = b, b;
      }, a.prototype.BACKTRACK = function(a, b) {
        return function() {
          this.isBackTrackingStack.push(1);
          var c = this.saveRecogState();
          try {
            return a.apply(this, b), !0;
          } catch (w) {
            if (e.isRecognitionException(w)) {
              return !1;
            }
            throw w;
          } finally {
            this.reloadRecogState(c), this.isBackTrackingStack.pop();
          }
        };
      }, a.prototype.getGAstProductions = function() {
        return this.gastProductionsCache;
      }, a.prototype.getSerializedGastProductions = function() {
        return n.serializeGrammar(this.gastProductionsCache.values());
      }, a;
    }();
    c.RecognizerApi = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(0), e = k(9), f = k(6), h = k(12), r = k(13), q = k(3), n = k(25), m = k(2), d = k(7), l = k(4);
    a = function() {
      function a() {
      }
      return a.prototype.initRecognizerEngine = function(a, c) {
        if (this.className = l.classNameFromInstance(this), this.shortRuleNameToFull = new l.HashTable, this.fullRuleNameToShort = new l.HashTable, this.ruleShortNameIdx = 256, this.tokenMatcher = d.tokenStructuredMatcherNoCategories, this.definedRulesNames = [], this.tokensMap = {}, this.allRuleNames = [], this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = new l.HashTable, this.serializedGrammar = b.has(c, "serializedGrammar") ? c.serializedGrammar : 
        q.DEFAULT_PARSER_CONFIG.serializedGrammar, b.isArray(a)) {
          if (b.isEmpty(a)) {
            throw Error("A Token Vocabulary cannot be empty.\n\tNote that the first argument for the parser constructor\n\tis no longer a Token vector (since v4.0).");
          }
          if ("number" == typeof a[0].startOffset) {
            throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n\tFor Further details.");
          }
        }
        if (b.isArray(a)) {
          this.tokensMap = b.reduce(a, function(a, b) {
            return a[m.tokenName(b)] = b, a;
          }, {});
        } else {
          if (b.has(a, "modes") && b.every(b.flatten(b.values(a.modes)), d.isTokenType)) {
            c = b.flatten(b.values(a.modes)), c = b.uniq(c), this.tokensMap = b.reduce(c, function(a, b) {
              return a[m.tokenName(b)] = b, a;
            }, {});
          } else {
            if (!b.isObject(a)) {
              throw Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
            }
            this.tokensMap = b.cloneObj(a);
          }
        }
        this.tokensMap.EOF = m.EOF;
        this.tokenMatcher = b.every(b.values(a), function(a) {
          return b.isEmpty(a.categoryMatches);
        }) ? d.tokenStructuredMatcherNoCategories : d.tokenStructuredMatcher;
        d.augmentTokenTypes(b.values(this.tokensMap));
      }, a.prototype.defineRule = function(a, c, d) {
        if (this.selfAnalysisDone) {
          throw Error("Grammar rule <" + a + "> may not be defined after the 'performSelfAnalysis' method has been called'\nMake sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var h, k = b.has(d, "resyncEnabled") ? d.resyncEnabled : q.DEFAULT_RULE_CONFIG.resyncEnabled, l = b.has(d, "recoveryValueFunc") ? d.recoveryValueFunc : q.DEFAULT_RULE_CONFIG.recoveryValueFunc, m = this.ruleShortNameIdx << e.BITS_FOR_METHOD_IDX + e.BITS_FOR_OCCURRENCE_IDX;
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull.put(m, a);
        this.fullRuleNameToShort.put(a, m);
        return (h = function(b, d) {
          void 0 === b && (b = 0);
          this.ruleInvocationStateUpdate(m, a, b);
          a: {
            try {
              var e = !0 === this.outputCst ? (c.apply(this, d), this.CST_STACK[this.CST_STACK.length - 1]) : c.apply(this, d);
              break a;
            } catch (K) {
              var h = 1 === this.RULE_STACK.length, n = k && !this.isBackTracking() && this.recoveryEnabled;
              if (f.isRecognitionException(K)) {
                if (n) {
                  var p, q = this.findReSyncTokenType();
                  if (this.isInCurrentRuleReSyncSet(q)) {
                    e = (K.resyncedTokens = this.reSyncTo(q), this.outputCst ? ((p = this.CST_STACK[this.CST_STACK.length - 1]).recoveredNode = !0, p) : l());
                    break a;
                  }
                  throw this.outputCst && ((p = this.CST_STACK[this.CST_STACK.length - 1]).recoveredNode = !0, K.partialCstResult = p), K;
                }
                if (h) {
                  e = (this.moveToTerminatedState(), l());
                  break a;
                }
              }
              throw K;
            } finally {
              this.ruleFinallyStateUpdate();
            }
            e = void 0;
          }
          return e;
        }).ruleName = a, h;
      }, a.prototype.optionInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.OPTION_IDX, b), d = this.nestedRuleBeforeClause(a, c);
        try {
          return this.optionInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.optionInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.OPTION_IDX, b);
        return this.optionInternalLogic(a, b, c);
      }, a.prototype.optionInternalLogic = function(a, b, c) {
        var d, e = this;
        c = this.getLookaheadFuncForOption(c, b);
        if (void 0 !== a.DEF) {
          if (b = a.DEF, void 0 !== (d = a.GATE)) {
            var f = c;
            c = function() {
              return d.call(e) && f.call(e);
            };
          }
        } else {
          b = a;
        }
        if (!0 === c.call(this)) {
          return b.call(this);
        }
      }, a.prototype.atLeastOneInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.AT_LEAST_ONE_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          return this.atLeastOneInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.atLeastOneInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.AT_LEAST_ONE_IDX, a);
        this.atLeastOneInternalLogic(a, b, c);
      }, a.prototype.atLeastOneInternalLogic = function(a, b, c) {
        var d, f = this, k = this.getLookaheadFuncForAtLeastOne(c, a);
        if (void 0 !== b.DEF) {
          if (c = b.DEF, void 0 !== (d = b.GATE)) {
            var l = k;
            k = function() {
              return d.call(f) && l.call(f);
            };
          }
        } else {
          c = b;
        }
        if (!0 !== k.call(this)) {
          throw this.raiseEarlyExitException(a, h.PROD_TYPE.REPETITION_MANDATORY, b.ERR_MSG);
        }
        for (var m = this.doSingleRepetition(c); !0 === k.call(this) && !0 === m;) {
          m = this.doSingleRepetition(c);
        }
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [a, b], k, e.AT_LEAST_ONE_IDX, a, r.NextTerminalAfterAtLeastOneWalker);
      }, a.prototype.atLeastOneSepFirstInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.AT_LEAST_ONE_SEP_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          this.atLeastOneSepFirstInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.atLeastOneSepFirstInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.AT_LEAST_ONE_SEP_IDX, a);
        this.atLeastOneSepFirstInternalLogic(a, b, c);
      }, a.prototype.atLeastOneSepFirstInternalLogic = function(a, b, c) {
        var d = this, f = b.DEF, k = b.SEP;
        if (!0 !== this.getLookaheadFuncForAtLeastOneSep(c, a).call(this)) {
          throw this.raiseEarlyExitException(a, h.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, b.ERR_MSG);
        }
        f.call(this);
        for (b = function() {
          return d.tokenMatcher(d.LA(1), k);
        }; !0 === this.tokenMatcher(this.LA(1), k);) {
          this.CONSUME(k), f.call(this);
        }
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, k, b, f, r.NextTerminalAfterAtLeastOneSepWalker], b, e.AT_LEAST_ONE_SEP_IDX, a, r.NextTerminalAfterAtLeastOneSepWalker);
      }, a.prototype.manyInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.MANY_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          return this.manyInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.manyInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.MANY_IDX, a);
        return this.manyInternalLogic(a, b, c);
      }, a.prototype.manyInternalLogic = function(a, b, c) {
        var d, f = this, h = this.getLookaheadFuncForMany(c, a);
        if (void 0 !== b.DEF) {
          if (c = b.DEF, void 0 !== (d = b.GATE)) {
            var k = h;
            h = function() {
              return d.call(f) && k.call(f);
            };
          }
        } else {
          c = b;
        }
        for (var l = !0; !0 === h.call(this) && !0 === l;) {
          l = this.doSingleRepetition(c);
        }
        this.attemptInRepetitionRecovery(this.manyInternal, [a, b], h, e.MANY_IDX, a, r.NextTerminalAfterManyWalker);
      }, a.prototype.manySepFirstInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.MANY_SEP_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          this.manySepFirstInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.manySepFirstInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(e.MANY_SEP_IDX, a);
        this.manySepFirstInternalLogic(a, b, c);
      }, a.prototype.manySepFirstInternalLogic = function(a, b, c) {
        var d = this, f = b.DEF, h = b.SEP;
        if (!0 === this.getLookaheadFuncForManySep(c, a).call(this)) {
          f.call(this);
          for (b = function() {
            return d.tokenMatcher(d.LA(1), h);
          }; !0 === this.tokenMatcher(this.LA(1), h);) {
            this.CONSUME(h), f.call(this);
          }
          this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, h, b, f, r.NextTerminalAfterManySepWalker], b, e.MANY_SEP_IDX, a, r.NextTerminalAfterManySepWalker);
        }
      }, a.prototype.repetitionSepSecondInternal = function(a, b, c, d, f) {
        for (; c();) {
          this.CONSUME(b), d.call(this);
        }
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, b, c, d, f], c, e.AT_LEAST_ONE_SEP_IDX, a, f);
      }, a.prototype.doSingleRepetition = function(a) {
        var b = this.getLexerPosition();
        return a.call(this), this.getLexerPosition() > b;
      }, a.prototype.orInternalNoCst = function(a, c) {
        var d = b.isArray(a) ? a : a.DEF, e = this.getLookaheadFuncForOr(c, d).call(this, d);
        if (void 0 !== e) {
          return d[e].ALT.call(this);
        }
        this.raiseNoAltException(c, a.ERR_MSG);
      }, a.prototype.orInternal = function(a, c) {
        var d = this.getKeyForAutomaticLookahead(e.OR_IDX, c), f = this.nestedRuleBeforeClause(a, d);
        try {
          var h = b.isArray(a) ? a : a.DEF, k = this.getLookaheadFuncForOr(c, h).call(this, h);
          if (void 0 !== k) {
            var l = h[k], m = this.nestedAltBeforeClause(l, c, e.OR_IDX, k);
            try {
              return l.ALT.call(this);
            } finally {
              void 0 !== m && this.nestedRuleFinallyClause(m.shortName, m.nestedName);
            }
          }
          this.raiseNoAltException(c, a.ERR_MSG);
        } finally {
          void 0 !== f && this.nestedRuleFinallyClause(d, f);
        }
      }, a.prototype.ruleFinallyStateUpdate = function() {
        if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), 0 === this.RULE_STACK.length && !this.isAtEndOfInput()) {
          var a = this.LA(1), b = this.errorMessageProvider.buildNotAllInputParsedMessage({firstRedundant:a, ruleName:this.getCurrRuleFullName()});
          this.SAVE_ERROR(new f.NotAllInputParsedException(b, a));
        }
      }, a.prototype.subruleInternal = function(a, b, c) {
        var d;
        try {
          return d = a.call(this, b, void 0 !== c ? c.ARGS : void 0), this.cstPostNonTerminal(d, void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.ruleName), d;
        } catch (u) {
          throw f.isRecognitionException(u) && void 0 !== u.partialCstResult && (this.cstPostNonTerminal(u.partialCstResult, void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.ruleName), delete u.partialCstResult), u;
        }
      }, a.prototype.consumeInternal = function(a, b, c) {
        try {
          var d = this.LA(1);
          if (!0 !== this.tokenMatcher(d, a)) {
            var e = void 0, h = this.LA(0);
            throw e = void 0 !== c && c.ERR_MSG ? c.ERR_MSG : this.errorMessageProvider.buildMismatchTokenMessage({expected:a, actual:d, previous:h, ruleName:this.getCurrRuleFullName()}), this.SAVE_ERROR(new f.MismatchedTokenException(e, d, h));
          }
          this.consumeToken();
          var k = d;
        } catch (B) {
          if (!this.recoveryEnabled || "MismatchedTokenException" !== B.name || this.isBackTracking()) {
            throw B;
          }
          b = this.getFollowsForInRuleRecovery(a, b);
          try {
            k = this.tryInRuleRecovery(a, b);
          } catch (D) {
            throw D.name === n.IN_RULE_RECOVERY_EXCEPTION ? B : D;
          }
        }
        return this.cstPostTerminal(void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.tokenName, k), k;
      }, a.prototype.saveRecogState = function() {
        var a = this.errors, c = b.cloneArr(this.RULE_STACK);
        return {errors:a, lexerState:this.exportLexerState(), RULE_STACK:c, CST_STACK:this.CST_STACK, LAST_EXPLICIT_RULE_STACK:this.LAST_EXPLICIT_RULE_STACK};
      }, a.prototype.reloadRecogState = function(a) {
        this.errors = a.errors;
        this.importLexerState(a.lexerState);
        this.RULE_STACK = a.RULE_STACK;
      }, a.prototype.ruleInvocationStateUpdate = function(a, b, c) {
        this.RULE_OCCURRENCE_STACK.push(c);
        this.RULE_STACK.push(a);
        this.cstInvocationStateUpdate(b, a);
      }, a.prototype.isBackTracking = function() {
        return !b.isEmpty(this.isBackTrackingStack);
      }, a.prototype.getCurrRuleFullName = function() {
        var a = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull.get(a);
      }, a.prototype.shortRuleNameToFullName = function(a) {
        return this.shortRuleNameToFull.get(a);
      }, a.prototype.isAtEndOfInput = function() {
        return this.tokenMatcher(this.LA(1), m.EOF);
      }, a.prototype.reset = function() {
        this.resetLexerState();
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
      }, a;
    }();
    c.RecognizerEngine = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(6), e = k(0), f = k(12), h = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initErrorHandler = function(a) {
        this._errors = [];
        this.errorMessageProvider = e.defaults(a.errorMessageProvider, h.DEFAULT_PARSER_CONFIG.errorMessageProvider);
      }, a.prototype.SAVE_ERROR = function(a) {
        if (b.isRecognitionException(a)) {
          return a.context = {ruleStack:this.getHumanReadableRuleStack(), ruleOccurrenceStack:e.cloneArr(this.RULE_OCCURRENCE_STACK)}, this._errors.push(a), a;
        }
        throw Error("Trying to save an Error which is not a RecognitionException");
      }, Object.defineProperty(a.prototype, "errors", {get:function() {
        return e.cloneArr(this._errors);
      }, set:function(a) {
        this._errors = a;
      }, enumerable:!0, configurable:!0}), a.prototype.raiseEarlyExitException = function(a, c, e) {
        var d = this.getCurrRuleFullName(), h = this.getGAstProductions().get(d);
        a = f.getLookaheadPathsForOptionalProd(a, h, c, this.maxLookahead)[0];
        c = [];
        for (h = 1; h < this.maxLookahead; h++) {
          c.push(this.LA(h));
        }
        e = this.errorMessageProvider.buildEarlyExitMessage({expectedIterationPaths:a, actual:c, previous:this.LA(0), customUserDescription:e, ruleName:d});
        throw this.SAVE_ERROR(new b.EarlyExitException(e, this.LA(1), this.LA(0)));
      }, a.prototype.raiseNoAltException = function(a, c) {
        var e = this.getCurrRuleFullName();
        e = this.getGAstProductions().get(e);
        a = f.getLookaheadPathsForOr(a, e, this.maxLookahead);
        e = [];
        for (var d = 1; d <= this.maxLookahead; d++) {
          e.push(this.LA(d));
        }
        d = this.LA(0);
        c = this.errorMessageProvider.buildNoViableAltMessage({expectedPathsPerAlt:a, actual:e, previous:d, customUserDescription:c, ruleName:this.getCurrRuleFullName()});
        throw this.SAVE_ERROR(new b.NoViableAltException(c, this.LA(1), d));
      }, a;
    }();
    c.ErrorHandler = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(13), e = k(0);
    a = function() {
      function a() {
      }
      return a.prototype.initContentAssist = function() {
      }, a.prototype.computeContentAssist = function(a, c) {
        var f = this.gastProductionsCache.get(a);
        if (e.isUndefined(f)) {
          throw Error("Rule ->" + a + "<- does not exist in this grammar.");
        }
        return b.nextPossibleTokensAfter([f], c, this.tokenMatcher, this.maxLookahead);
      }, a.prototype.getNextPossibleTokenTypes = function(a) {
        var c = e.first(a.ruleStack);
        c = this.getGAstProductions().get(c);
        return (new b.NextAfterTokenWalker(c, a)).startWalking();
      }, a;
    }();
    c.ContentAssist = a;
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(17);
    c.createSyntaxDiagramsCode = function(a, c) {
      c = void 0 === c ? {} : c;
      var e = c.resourceBase;
      e = void 0 === e ? "https://unpkg.com/chevrotain@" + b.VERSION + "/diagrams/" : e;
      c = c.css;
      return "\n\x3c!-- This is a generated file --\x3e\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n\n<link rel='stylesheet' href='" + (void 0 === c ? "https://unpkg.com/chevrotain@" + b.VERSION + "/diagrams/diagrams.css" : c) + "'>\n\n<script src='" + e + "vendor/railroad-diagrams.js'>\x3c/script>\n<script src='" + e + "src/diagrams_builder.js'>\x3c/script>\n<script src='" + e + "src/diagrams_behavior.js'>\x3c/script>\n<script src='" + 
      e + 'src/main.js\'>\x3c/script>\n\n<div id="diagrams" align="center"></div>    \n\n<script>\n    window.serializedGrammar = ' + JSON.stringify(a, null, "  ") + ';\n\x3c/script>\n\n<script>\n    var diagramsDiv = document.getElementById("diagrams");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n\x3c/script>\n';
    };
  }, function(a, c, k) {
    Object.defineProperty(c, "__esModule", {value:!0});
    var b = k(41);
    c.generateParserFactory = function(a) {
      var c = b.genWrapperFunction({name:a.name, rules:a.rules}), e = new Function("tokenVocabulary", "config", "chevrotain", c);
      return function(b) {
        return e(a.tokenVocabulary, b, k(18));
      };
    };
    c.generateParserModule = function(a) {
      return b.genUmdModule({name:a.name, rules:a.rules});
    };
  }, function(a, c, k) {
    function b(a) {
      return "\nfunction " + a.name + "(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " + e(a.rules) + "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" + 
      a.name + ".prototype = Object.create(chevrotain.CstParser.prototype)\n" + a.name + ".prototype.constructor = " + a.name + "    \n    ";
    }
    function e(a) {
      return w.map(a, function(a) {
        return f(a, 1);
      }).join("\n");
    }
    function f(a, b) {
      var c = v(b, '$.RULE("' + a.name + '", function() {') + "\n";
      return c += l(a.definition, b + 1), c + (v(b + 1, "})") + "\n");
    }
    function h(a, b) {
      var c = x.tokenName(a.terminalType);
      return v(b, "$.CONSUME" + a.idx + "(this.tokensMap." + c + ")\n");
    }
    function r(a, b) {
      return v(b, "$.SUBRULE" + a.idx + "($." + a.nonTerminalName + ")\n");
    }
    function q(a, b) {
      var c = v(b, "$.OR" + a.idx + "([") + "\n";
      return c += w.map(a.definition, function(a) {
        return n(a, b + 1);
      }).join(",\n"), c += "\n" + v(b, "])\n");
    }
    function n(a, b) {
      var c = v(b, "{") + "\n";
      return a.name && (c += v(b + 1, 'NAME: "' + a.name + '",') + "\n"), c += v(b + 1, "ALT: function() {") + "\n", c += l(a.definition, b + 1), c += v(b + 1, "}") + "\n", c + v(b, "}");
    }
    function m(a, b, c) {
      a = v(c, "$." + (a + b.idx) + "(");
      return b.name || b.separator ? (a += "{\n", b.name && (a += v(c + 1, 'NAME: "' + b.name + '"') + ",\n"), b.separator && (a += v(c + 1, "SEP: this.tokensMap." + x.tokenName(b.separator)) + ",\n"), a += "DEF: " + d(b.definition, c + 2) + "\n", a += v(c, "}") + "\n") : a += d(b.definition, c + 1), a + (v(c, ")") + "\n");
    }
    function d(a, b) {
      var c = "function() {\n";
      return c += l(a, b), c + (v(b, "}") + "\n");
    }
    function l(a, b) {
      var c = "";
      return w.forEach(a, function(a) {
        c += function(a, b) {
          if (a instanceof z.NonTerminal) {
            return r(a, b);
          }
          if (a instanceof z.Option) {
            return m("OPTION", a, b);
          }
          if (a instanceof z.RepetitionMandatory) {
            return m("AT_LEAST_ONE", a, b);
          }
          if (a instanceof z.RepetitionMandatoryWithSeparator) {
            return m("AT_LEAST_ONE_SEP", a, b);
          }
          if (a instanceof z.RepetitionWithSeparator) {
            return m("MANY_SEP", a, b);
          }
          if (a instanceof z.Repetition) {
            return m("MANY", a, b);
          }
          if (a instanceof z.Alternation) {
            return q(a, b);
          }
          if (a instanceof z.Terminal) {
            return h(a, b);
          }
          if (a instanceof z.Flat) {
            return l(a.definition, b);
          }
          throw Error("non exhaustive match");
        }(a, b + 1);
      }), c;
    }
    function v(a, b) {
      return Array(4 * a + 1).join(" ") + b;
    }
    Object.defineProperty(c, "__esModule", {value:!0});
    var w = k(0), x = k(2), z = k(1);
    c.genUmdModule = function(a) {
      return "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" + 
      b(a) + "\n    \nreturn {\n    " + a.name + ": " + a.name + " \n}\n}));\n";
    };
    c.genWrapperFunction = function(a) {
      return "    \n" + b(a) + "\nreturn new " + a.name + "(tokenVocabulary, config)    \n";
    };
    c.genClass = b;
    c.genAllRules = e;
    c.genRule = f;
    c.genTerminal = h;
    c.genNonTerminal = r;
    c.genAlternation = q;
    c.genSingleAlt = n;
  }]);
});
"use strict";
function Nunu() {
}
Nunu.NAME = "nunuStudio";
Nunu.VERSION = "<PLACEHOLDER_VERSION>";
Nunu.TIMESTAMP = "<PLACEHOLDER_TIMESTAMP>";
Nunu.REPOSITORY_BRANCH = "<PLACEHOLDER_REPOSITORY_BRANCH>";
Nunu.REPOSITORY_COMMIT = "<PLACEHOLDER_REPOSITORY_COMMIT>";
Nunu.NWJS = 200;
Nunu.BROWSER = 201;
Nunu.CORDOVA = 202;
Nunu.developmentMode = function() {
  return "<PLACEHOLDER_TIMESTAMP>" === Nunu.TIMESTAMP;
};
Nunu.vrAvailable = function() {
  return Nunu.webVRAvailable() || Nunu.webXRAvailable();
};
Nunu.enterVR = function(a, c) {
  Nunu.webXRAvailable() ? Nunu.getXRSession(function(k) {
    a.vr.enabled = !0;
    a.vr.setSession(k);
    void 0 !== c && c();
  }) : Nunu.webVRAvailable() ? Nunu.getVRDisplay(function(k) {
    k.isPresenting || (a.vr.enabled = !0, a.vr.setDevice(k), k.requestPresent([{source:a.domElement}]), void 0 !== c && c());
  }) : console.warn("nunuStudio: VR support is not available.");
};
Nunu.exitVR = function(a) {
  Nunu.webXRAvailable() ? Nunu.getXRSession(function(c) {
    a.vr.enabled = !1;
    a.vr.setSession(null);
  }) : Nunu.webVRAvailable() && Nunu.getVRDisplay(function(c) {
    c.isPresenting && (a.vr.enabled = !1, a.vr.setDevice(null), device.exitPresent());
  });
};
Nunu.webXRSession = null;
Nunu.webXRSupported = null;
void 0 !== navigator.xr && void 0 !== navigator.xr.isSessionSupported && navigator.xr.isSessionSupported("immersive-vr").then(function(a) {
  Nunu.webXRSupported = a;
});
Nunu.webXRAvailable = function() {
  return void 0 !== navigator.xr && void 0 !== navigator.xr.isSessionSupported && !1 !== Nunu.webXRSupported;
};
Nunu.getXRSession = function(a) {
  Nunu.webXRAvailable() ? null !== Nunu.webXRSession ? a(Nunu.webXRSession) : navigator.xr.requestSession("immersive-vr", {optionalFeatures:["local-floor", "bounded-floor"]}).then(function(c) {
    Nunu.webXRSession = c;
    a(c);
  }) : console.warn("nunuStudio: WebXR support is not available.");
};
Nunu.webVRDisplay = null;
Nunu.webVRHasDisplay = null;
void 0 !== navigator.getVRDisplays && navigator.getVRDisplays().then(function(a) {
  Nunu.webVRHasDisplay = 0 < a.length;
});
Nunu.webVRAvailable = function() {
  return void 0 !== navigator.getVRDisplays && !1 !== Nunu.webVRHasDisplay;
};
Nunu.getVRDisplay = function(a) {
  Nunu.webVRAvailable() ? null !== Nunu.webVRDisplay ? a(Nunu.webVRDisplay) : navigator.getVRDisplays().then(function(c) {
    0 < c.length ? (Nunu.webVRDisplay = c[0], a(c[0])) : console.warn("nunuStudio: WebVR supported but no display is available.");
  }) : console.warn("nunuStudio: WebVR support is not available.");
};
Nunu.getQueryParameters = function() {
  for (var a = location.search.substring(1).split("&"), c = {}, k = 0; k < a.length; k++) {
    var b = a[k].split("=");
    if (1 < b.length) {
      var e = unescape(b[0]).replace(/"/g, "");
      b = unescape(b[1]).replace(/"/g, "");
      c[e] = b;
    }
  }
  return c;
};
Nunu.createWorker = function(a, c) {
  a = new Blob([a], {type:"application/javascript"});
  a = new Worker(URL.createObjectURL(a));
  void 0 !== c && (a.onmessage = c);
  return a;
};
Nunu.webAudioAvailable = function() {
  return void 0 !== window.AudioContext || void 0 !== window.webkitAudioContext;
};
Nunu.webGLAvailable = function() {
  try {
    var a = document.createElement("canvas");
    (a.getContext("webgl") || a.getContext("experimental-webgl")).getSupportedExtensions();
    return !0;
  } catch (c) {
  }
  return !1;
};
Nunu.getPlatform = function() {
  return void 0 !== window.nw ? Nunu.NWJS : void 0 !== window.cordova ? Nunu.CORDOVA : Nunu.BROWSER;
};
Nunu.runningOnDesktop = function() {
  return void 0 !== window.nw;
};
Nunu.openWebpage = function(a) {
  Nunu.runningOnDesktop() ? require("nw.gui").Shell.openExternal(a) : window.open(a);
};
Nunu.isFullscreen = function() {
  return !0 === document.webkitIsFullScreen || !0 === document.mozFullScreen || !0 === document.webkitIsFullScreen || !0 === document.webkitIsFullScreen || !0 === document.fullscreen || !1;
};
Nunu.setFullscreen = function(a, c) {
  var k = Nunu.isFullscreen();
  void 0 === a && (a = !k);
  !0 === a ? (void 0 === c && (c = document.body), !1 === k && (c.requestFullscreen = c.requestFullscreen || c.mozRequestFullScreen || c.webkitRequestFullscreen || c.msRequestFullscreen, void 0 !== c.requestFullscreen && c.requestFullscreen())) : !0 === k && (document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen, void 0 !== document.exitFullscreen && document.exitFullscreen());
};
"use strict";
function importFrom(a) {
  for (var c in a) {
    c in window || (window[c] = a[c]);
  }
}
importFrom(THREE);
importFrom(CANNON);
"use strict";
function FileSystem() {
}
try {
  FileSystem.fs = require("fs");
} catch (a) {
}
FileSystem.isRemote = function(a) {
  return a.startsWith("http");
};
FileSystem.readFile = function(a, c, k, b, e) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var f = new XMLHttpRequest;
    f.overrideMimeType("text/plain");
    f.open("GET", a, !c);
    void 0 !== k && (f.onload = function() {
      k(f.response);
    });
    void 0 !== b && (f.onprogress = b);
    void 0 !== e && (f.onerror = e);
    f.send(null);
    return !0 === c ? f.response : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a, "utf8"), void 0 !== k && k(a), a;
  }
  FileSystem.fs.readFile(a, "utf8", function(a, b) {
    null !== a ? void 0 !== e && e(a) : void 0 !== k && k(b);
  });
  return null;
};
FileSystem.readFileArrayBuffer = function(a, c, k, b, e) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var f = new XMLHttpRequest;
    f.open("GET", a, !c);
    f.overrideMimeType("text/plain; charset=x-user-defined");
    void 0 !== k && (f.onload = function() {
      k(ArraybufferUtils.fromBinaryString(f.response));
    });
    void 0 !== b && (f.onprogress = b);
    void 0 !== e && (f.onerror = e);
    f.send(null);
    return !0 === c ? ArraybufferUtils.fromBinaryString(f.response) : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a), ArraybufferUtils.fromBuffer(a);
  }
  FileSystem.fs.readFile(a, function(a, b) {
    null !== a ? void 0 !== e && e(a) : void 0 !== k && k(ArraybufferUtils.fromBuffer(b));
  });
  return null;
};
FileSystem.readFileBase64 = function(a, c, k, b, e) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var f = new XMLHttpRequest;
    f.open("GET", a, !c);
    f.overrideMimeType("text/plain; charset=x-user-defined");
    void 0 !== k && (f.onload = function() {
      k(Base64Utils.fromBinaryString(f.response));
    });
    void 0 !== b && (f.onprogress = b);
    void 0 !== e && (f.onerror = e);
    f.send(null);
    return !0 === c ? Base64Utils.fromBinaryString(f.response) : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a), (new Buffer(a)).toString("base64");
  }
  FileSystem.fs.readFile(a, function(a, b) {
    null !== a ? void 0 !== e && e(a) : void 0 !== k && k((new Buffer(b)).toString("base64"));
  });
  return null;
};
FileSystem.writeFile = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c, "utf8"), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, "utf8", b) : (a = FileSystem.fs.createWriteStream(a, "utf8"), a.write(c), a.end()) : (c = new Blob([c], {type:"octet/stream"}), k = document.createElement("a"), k.download = a, k.href = window.URL.createObjectURL(c), k.style.display = "none", k.onclick = function() {
    document.body.removeChild(this);
  }, document.body.appendChild(k), k.click(), void 0 !== b && b());
};
FileSystem.writeFileBase64 = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? (c = Buffer.from(Base64Utils.removeHeader(c), "base64"), void 0 !== FileSystem.fs.writeFile ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, b) : (a = FileSystem.fs.createWriteStream(a), a.write(c), a.end())) : (k = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(c)), k = new Blob([k]), c = document.createElement("a"), c.download = a, c.href = window.URL.createObjectURL(k), c.onclick = function() {
    document.body.removeChild(this);
  }, c.style.display = "none", document.body.appendChild(c), c.click(), void 0 !== b && b());
};
FileSystem.writeFileArrayBuffer = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? (c = BufferUtils.fromArrayBuffer(c), void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, b) : (a = FileSystem.fs.createWriteStream(a), a.write(c), a.end())) : (k = new Blob([c]), c = document.createElement("a"), c.download = a, c.href = window.URL.createObjectURL(k), c.onclick = function() {
    document.body.removeChild(this);
  }, c.style.display = "none", document.body.appendChild(c), c.click(), void 0 !== b && b());
};
FileSystem.chooseFile = function(a, c, k, b) {
  var e = document.createElement("input");
  e.type = "file";
  e.style.display = "none";
  document.body.appendChild(e);
  void 0 !== c && (e.accept = c);
  !0 === b && (e.multiple = !0);
  e.onchange = function(b) {
    void 0 !== a && a(e.files);
    document.body.removeChild(e);
  };
  void 0 !== k && (e.nwsaveas = !0 !== k ? k : "file");
  e.click();
};
FileSystem.chooseFileName = function(a, c, k) {
  k = prompt("Save As", void 0 !== k ? k : "file");
  null !== k && (void 0 === c || k.endsWith(c) || (k += c), void 0 !== a && a(k));
};
FileSystem.copyFile = function(a, c) {
  void 0 !== FileSystem.fs && (void 0 !== FileSystem.fs.copyFileSync ? FileSystem.fs.copyFileSync(a, c) : (a.replace(/\//g, "\\"), c.replace(/\//g, "\\"), FileSystem.fs.createReadStream(a).pipe(FileSystem.fs.createWriteStream(c))));
};
FileSystem.makeDirectory = function(a) {
  void 0 !== FileSystem.fs && (a.replace(/\//g, "\\"), FileSystem.fs.mkdirSync(a, {recursive:!0}));
};
FileSystem.getFilesDirectory = function(a) {
  if (void 0 !== FileSystem.fs) {
    try {
      return a.replace(/\//g, "\\"), FileSystem.fs.readdirSync(a);
    } catch (c) {
    }
  }
  return [];
};
FileSystem.deleteFolder = function(a) {
  void 0 !== FileSystem.fs && FileSystem.fs.existsSync(a) && (FileSystem.fs.readdirSync(a).forEach(function(c, k) {
    c = a + "/" + c;
    FileSystem.fs.lstatSync(c).isDirectory() ? FileSystem.deleteFolder(c) : FileSystem.fs.unlinkSync(c);
  }), FileSystem.fs.rmdirSync(a));
};
FileSystem.copyFolder = function(a, c) {
  if (void 0 !== FileSystem.fs) {
    a.replace(/\//g, "\\");
    c.replace(/\//g, "\\");
    FileSystem.makeDirectory(c);
    for (var k = FileSystem.fs.readdirSync(a), b = 0; b < k.length; b++) {
      var e = a + "\\" + k[b], f = c + "\\" + k[b], h = FileSystem.fs.statSync(e);
      h.isDirectory() ? FileSystem.copyFolder(e, f) : h.isSymbolicLink() ? FileSystem.fs.symlinkSync(FileSystem.fs.readlinkSync(e), f) : FileSystem.copyFile(e, f);
    }
  }
};
FileSystem.fileExists = function(a) {
  return void 0 !== FileSystem.fs ? (a.replace(/\//g, "\\"), FileSystem.fs.existsSync(a)) : !1;
};
FileSystem.getFileName = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(c > k ? c + 1 : k + 1, a.lastIndexOf("."));
  }
  return "";
};
FileSystem.getFileNameWithExtension = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(c > k ? c + 1 : k + 1, a.length);
  }
  return "";
};
FileSystem.getNameWithoutExtension = function(a) {
  return void 0 !== a ? a.substring(0, a.lastIndexOf(".")) : "";
};
FileSystem.getFilePath = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(0, c > k ? c + 1 : k + 1);
  }
  return "";
};
FileSystem.getFileExtension = function(a) {
  return void 0 !== a ? a.substring(a.lastIndexOf(".") + 1, a.length).toLowerCase() : "";
};
"use strict";
function TargetConfig() {
  this.desktop = {fullscreen:!1, frame:!0, resizable:!0};
}
"use strict";
THREE.KeyframeTrack.prototype.color = "#FF0000";
THREE.KeyframeTrack.prototype.setColor = function(a) {
  this.color = a;
};
THREE.KeyframeTrack.prototype.sort = function() {
  for (var a = 0; a < this.times.length; a++) {
    for (var c = a + 1; c < this.times.length; c++) {
      if (this.times[a] > this.times[c]) {
        var k = this.times[c];
        this.times[c] = this.times[a];
        this.times[a] = k;
        for (var b = this.getValueSize(), e = c * b, f = a * b, h = 0; h < b; h++) {
          k = this.values[e + h], this.values[e + h] = this.values[f + h], this.values[f + h] = k;
        }
      }
    }
  }
};
THREE.KeyframeTrack._toJSON = THREE.KeyframeTrack.toJSON;
THREE.KeyframeTrack.toJSON = function(a) {
  var c = THREE.KeyframeTrack._toJSON.call(this, a);
  c.color = a.color;
  return c;
};
THREE.KeyframeTrack._parse = THREE.KeyframeTrack.parse;
THREE.KeyframeTrack.parse = function(a) {
  var c = THREE.KeyframeTrack._parse.call(this, a);
  void 0 !== a.color && (c.color = a.color);
  return c;
};
"use strict";
THREE.AnimationClip.prototype.enabled = !0;
THREE.AnimationClip.prototype.loop = THREE.LoopRepeat;
THREE.AnimationClip.prototype.timeScale = 1;
THREE.AnimationClip.prototype.weight = 1;
THREE.AnimationClip._toJSON = THREE.AnimationClip.toJSON;
THREE.AnimationClip.toJSON = function(a) {
  var c = THREE.AnimationClip._toJSON.call(this, a);
  c.enabled = a.enabled;
  c.loop = a.loop;
  c.timeScale = a.timeScale;
  c.weight = a.weight;
  return c;
};
THREE.AnimationClip._parse = THREE.AnimationClip.parse;
THREE.AnimationClip.parse = function(a) {
  var c = THREE.AnimationClip._parse.call(this, a);
  void 0 !== a.enabled && (c.enabled = a.enabled, c.loop = a.loop, c.timeScale = a.timeScale, c.weight = a.weight);
  return c;
};
"use strict";
THREE.Object3D.prototype.folded = !1;
THREE.Object3D.prototype.locked = !1;
THREE.Object3D.prototype.contains = function(a) {
  for (var c = 0; c < this.children.length; c++) {
    if (this.children[c].uuid === a.uuid || this.children[c].contains(a)) {
      return !0;
    }
  }
  return !1;
};
THREE.Object3D.prototype.playAnimation = function() {
  void 0 !== this.mixer && this.mixer.play();
};
THREE.Object3D.prototype.stopAnimation = function() {
  void 0 !== this.mixer && this.mixer.stop();
};
THREE.Object3D.prototype.initialize = function() {
  void 0 !== this.animations && (this.mixer = new AnimationMixer(this), this.mixer.createActions(this.animations), this.mixer.play());
};
THREE.Object3D.prototype.update = function(a) {
  void 0 !== this.mixer && this.mixer.update(a);
};
THREE.Object3D.prototype.resize = function(a, c) {
};
THREE.Object3D.prototype.dispose = function() {
  void 0 !== this.mixer && this.mixer.dispose();
};
THREE.Object3D.prototype.addAbove = function(a, c) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), c = this.children.indexOf(c), this.children.splice(c, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.addBellow = function(a, c) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), c = this.children.indexOf(c) + 1, this.children.splice(c, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.getScene = function() {
  for (var a = this; null !== a.parent;) {
    if (a = a.parent, a instanceof Scene) {
      return a;
    }
  }
  return null;
};
THREE.Object3D.prototype.removeAll = function() {
  for (; 0 < this.children.length;) {
    this.remove(this.children[0]);
  }
};
THREE.Object3D.prototype.isEmpty = function() {
  return 0 === this.children.length;
};
THREE.Object3D.prototype.destroy = function() {
  for (; 0 < this.children.length;) {
    this.children[0].destroy();
  }
  null !== this.parent && (this.dispose && this.dispose(), this.parent.remove(this), this.parent = null);
};
THREE.Object3D.prototype.toJSON = function(a, c, k) {
  function b(b, c) {
    void 0 === b[c.uuid] && (b[c.uuid] = c.toJSON(a));
    return c.uuid;
  }
  function e(a) {
    var b = [], c;
    for (c in a) {
      var d = a[c];
      delete d.metadata;
      b.push(d);
    }
    return b;
  }
  var f = void 0 === a, h = {};
  f && (a = new ResourceManager.ResourceContainer, h.metadata = {version:Nunu.VERSION, type:"NunuProgram"});
  var r = {};
  r.uuid = this.uuid;
  r.type = this.type;
  r.name = this.name;
  r.folded = this.folded;
  r.locked = this.locked;
  r.castShadow = this.castShadow;
  r.receiveShadow = this.receiveShadow;
  r.visible = this.visible;
  r.matrixAutoUpdate = this.matrixAutoUpdate;
  r.frustumCulled = this.frustumCulled;
  r.renderOrder = this.renderOrder;
  r.position = this.position.toArray();
  r.quaternion = this.quaternion.toArray();
  r.scale = this.scale.toArray();
  "{}" !== JSON.stringify(this.userData) && (r.userData = this.userData);
  if (void 0 !== this.geometry) {
    r.geometry = b(a.geometries, this.geometry);
    var q = this.geometry.parameters;
    if (void 0 !== q && void 0 !== q.shapes) {
      var n = q.shapes;
      if (Array.isArray(n)) {
        q = 0;
        for (var m = n.length; q < m; q++) {
          b(a.shapes, n[q]);
        }
      } else {
        b(a.shapes, n);
      }
    }
  }
  if (void 0 !== this.material) {
    if (this.material instanceof THREE.Material) {
      r.material = b(a.materials, this.material);
    } else {
      if (this.material instanceof Array) {
        n = [];
        for (q = 0; q < this.material.length; q++) {
          n.push(b(a.materials, this.material[q]));
        }
        r.material = n;
      }
    }
  }
  if (void 0 !== this.animations && 0 < this.animations.length) {
    for (r.animations = [], q = 0; q < this.animations.length; q++) {
      r.animations.push(THREE.AnimationClip.toJSON(this.animations[q]));
    }
  }
  void 0 !== c && c(a, r);
  if (!1 !== k && 0 < this.children.length) {
    for (r.children = [], q = 0; q < this.children.length; q++) {
      this.children[q].locked || r.children.push(this.children[q].toJSON(a).object);
    }
  }
  f && (h.geometries = e(a.geometries), h.materials = e(a.materials), h.textures = e(a.textures), h.images = e(a.images), h.videos = e(a.videos), h.audio = e(a.audio), h.fonts = e(a.fonts), h.skeletons = e(a.skeletons), h.resources = e(a.resources), h.shapes = e(a.shapes));
  h.object = r;
  return h;
};
"use strict";
THREE.BufferGeometry.prototype.computeBoundingSphere = function() {
  var a = new THREE.Box3, c = new THREE.Vector3;
  return function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    var k = this.attributes.position;
    if (k) {
      var b = this.boundingSphere.center;
      a.setFromBufferAttribute(k);
      a.getCenter(b);
      var e = 0;
      k = k.array;
      for (var f = k.length, h = 0; h < f; h += 3) {
        c.set(k[h], k[h + 1], k[h + 2]);
        var r = b.distanceToSquared(c);
        r > e && (e = r);
      }
      this.boundingSphere.radius = Math.sqrt(e);
    }
  };
}();
THREE.BufferGeometry.prototype.toJSON = function() {
  var a = {metadata:{version:4.5, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
  a.uuid = this.uuid;
  a.type = this.type;
  a.name = this.name;
  if (void 0 !== this.parameters) {
    var c = this.parameters;
    for (h in c) {
      void 0 !== c[h] && (a[h] = c[h]);
    }
    return a;
  }
  a.data = {attributes:{}, morphAttributes:{}};
  var k = this.index;
  null !== k && (c = Array.prototype.slice.call(k.array), a.data.index = {type:k.array.constructor.name, array:c});
  var b = this.attributes;
  for (h in b) {
    k = b[h], c = Array.prototype.slice.call(k.array), a.data.attributes[h] = {itemSize:k.itemSize, type:k.array.constructor.name, array:c, normalized:k.normalized};
  }
  c = this.morphAttributes;
  for (h in c) {
    b = this.morphAttributes[h];
    c = [];
    for (var e = 0, f = b.length; e < f; e++) {
      k = b[e], c.push({name:k.name, itemSize:k.itemSize, type:k.array.constructor.name, array:Array.prototype.slice.call(k.array), normalized:k.normalized});
    }
    a.data.morphAttributes[h] = c;
  }
  var h = this.groups;
  0 < h.length && (a.data.groups = JSON.parse(JSON.stringify(h)));
  h = this.boundingSphere;
  null !== h && (a.data.boundingSphere = {center:h.center.toArray(), radius:h.radius});
  return a;
};
"use strict";
THREE.Camera.prototype.render = function(a, c) {
  a.render(c, this);
};
"use strict";
THREE.Material.prototype.dispose = function() {
  function a(a) {
    void 0 !== a && null !== a && a.dispose();
  }
  this.dispatchEvent({type:"dispose"});
  a(this.map);
  a(this.bumpMap);
  a(this.normalMap);
  a(this.displacementMap);
  a(this.specularMap);
  a(this.emissiveMap);
  a(this.alphaMap);
  a(this.roughnessMap);
  a(this.metalnessMap);
  a(this.envMap);
};
THREE.Material.prototype.toJSON = function(a) {
  function c(a) {
    var b = [], c;
    for (c in a) {
      var e = a[c];
      delete e.metadata;
      b.push(e);
    }
    return b;
  }
  void 0 === a && (a = {textures:{}, images:{}, videos:{}});
  var k = {};
  k.uuid = this.uuid;
  k.type = this.type;
  k.name = this.name;
  k.toneMapped = this.toneMapped;
  k.depthFunc = this.depthFunc;
  k.depthTest = this.depthTest;
  k.depthWrite = this.depthWrite;
  this.color && this.color.isColor && (k.color = this.color.getHex());
  void 0 !== this.roughness && (k.roughness = this.roughness);
  void 0 !== this.metalness && (k.metalness = this.metalness);
  this.specular && this.specular.isColor && (k.specular = this.specular.getHex());
  void 0 !== this.shininess && (k.shininess = this.shininess);
  void 0 !== this.clearcoat && (k.clearcoat = this.clearcoat);
  void 0 !== this.clearcoatRoughness && (k.clearcoatRoughness = this.clearcoatRoughness);
  void 0 !== this.transparency && (k.transparency = this.transparency);
  this.map && this.map.isTexture && (k.map = this.map.toJSON(a).uuid);
  this.alphaMap && this.alphaMap.isTexture && (k.alphaMap = this.alphaMap.toJSON(a).uuid);
  this.lightMap && this.lightMap.isTexture && (k.lightMap = this.lightMap.toJSON(a).uuid);
  this.bumpMap && this.bumpMap.isTexture && (k.bumpMap = this.bumpMap.toJSON(a).uuid, k.bumpScale = this.bumpScale);
  this.normalMap && this.normalMap.isTexture && (k.normalMap = this.normalMap.toJSON(a).uuid, k.normalMapType = this.normalMapType, k.normalScale = this.normalScale.toArray());
  this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (k.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(a).uuid, k.clearcoatNormalScale = this.clearcoatNormalScale.toArray());
  this.displacementMap && this.displacementMap.isTexture && (k.displacementMap = this.displacementMap.toJSON(a).uuid, k.displacementScale = this.displacementScale, k.displacementBias = this.displacementBias);
  this.roughnessMap && this.roughnessMap.isTexture && (k.roughnessMap = this.roughnessMap.toJSON(a).uuid);
  this.metalnessMap && this.metalnessMap.isTexture && (k.metalnessMap = this.metalnessMap.toJSON(a).uuid);
  this.emissive && this.emissive.isColor && (k.emissive = this.emissive.getHex());
  1 !== this.emissiveIntensity && (k.emissiveIntensity = this.emissiveIntensity);
  this.matcap && this.matcap.isTexture && (k.matcap = this.matcap.toJSON(a).uuid);
  this.emissiveMap && this.emissiveMap.isTexture && (k.emissiveMap = this.emissiveMap.toJSON(a).uuid);
  this.aoMap && this.aoMap.isTexture && (k.aoMap = this.aoMap.toJSON(a).uuid);
  this.aoMapIntensity && (k.aoMapIntensity = this.aoMapIntensity);
  this.specularMap && this.specularMap.isTexture && (k.specularMap = this.specularMap.toJSON(a).uuid);
  this.envMap && this.envMap.isTexture && (k.envMap = this.envMap.toJSON(a).uuid, k.reflectivity = this.reflectivity, this.combine && (k.combine = this.combine), this.envMapIntensity && (k.envMapIntensity = this.envMapIntensity), this.refractionRatio && (k.refractionRatio = this.refractionRatio));
  this.gradientMap && this.gradientMap.isTexture && (k.gradientMap = this.gradientMap.toJSON(a).uuid);
  void 0 !== this.size && (k.size = this.size);
  void 0 !== this.sizeAttenuation && (k.sizeAttenuation = this.sizeAttenuation);
  void 0 !== this.rotation && (k.rotation = this.rotation);
  void 0 !== this.linewidth && (k.linewidth = this.linewidth);
  void 0 !== this.dashSize && (k.dashSize = this.dashSize);
  void 0 !== this.gapSize && (k.gapSize = this.gapSize);
  void 0 !== this.scale && (k.scale = this.scale);
  this.blending !== THREE.NormalBlending && (k.blending = this.blending);
  this.side !== THREE.FrontSide && (k.side = this.side);
  this.vertexColors !== THREE.NoColors && (k.vertexColors = this.vertexColors);
  k.flatShading = this.flatShading;
  1 > this.opacity && (k.opacity = this.opacity);
  !0 === this.transparent && (k.transparent = this.transparent);
  !0 === this.dithering && (k.dithering = !0);
  0 < this.alphaTest && (k.alphaTest = this.alphaTest);
  !0 === this.premultipliedAlpha && (k.premultipliedAlpha = this.premultipliedAlpha);
  !0 === this.wireframe && (k.wireframe = this.wireframe);
  1 < this.wireframeLinewidth && (k.wireframeLinewidth = this.wireframeLinewidth);
  "round" !== this.wireframeLinecap && (k.wireframeLinecap = this.wireframeLinecap);
  "round" !== this.wireframeLinejoin && (k.wireframeLinejoin = this.wireframeLinejoin);
  k.skinning = this.skinning;
  k.morphTargets = this.morphTargets;
  void 0 !== this.morphNormals && (k.morphNormals = this.morphNormals);
  if (void 0 === a) {
    var b = c(a.textures), e = c(a.images);
    a = c(a.videos);
    0 < b.length && (k.textures = b);
    0 < e.length && (k.images = e);
    0 < a.length && (k.videos = a);
  }
  return k;
};
"use strict";
THREE.BufferGeometryLoader.prototype.parse = function(a) {
  var c = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:Uint8ClampedArray, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array}, k = new THREE.BufferGeometry, b = a.data.index;
  if (void 0 !== b) {
    var e = new c[b.type](b.array);
    k.setIndex(new THREE.BufferAttribute(e, 1));
  }
  b = a.data.attributes;
  for (var f in b) {
    var h = b[f];
    e = new c[h.type](h.array);
    k.setAttribute(f, new THREE.BufferAttribute(e, h.itemSize, h.normalized));
  }
  var r = a.data.morphAttributes;
  for (f in r) {
    var q = r[f], n = [];
    b = 0;
    for (var m = q.length; b < m; b++) {
      h = q[b], e = new c[h.type](h.array), e = new THREE.BufferAttribute(e, h.itemSize, h.normalized), void 0 !== h.name && (e.name = h.name), n.push(e);
    }
    k.morphAttributes[f] = n;
  }
  c = a.data.groups || a.data.drawcalls || a.data.offsets;
  if (void 0 !== c) {
    for (b = 0, f = c.length; b !== f; ++b) {
      h = c[b], k.addGroup(h.start, h.count, h.materialIndex);
    }
  }
  a = a.data.boundingSphere;
  void 0 !== a && (b = new THREE.Vector3, void 0 !== a.center && b.fromArray(a.center), k.boundingSphere = new THREE.Sphere(b, a.radius));
  return k;
};
"use strict";
THREE.Texture.prototype.toJSON = function(a) {
  if (void 0 !== a.textures[this.uuid]) {
    return a.textures[this.uuid];
  }
  var c = {metadata:{version:Nunu.VERSION, type:"Texture"}, uuid:this.uuid, name:this.name, category:this.category, format:this.format, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY};
  return a.textures[this.uuid] = c;
};
"use strict";
THREE.LightShadow.prototype.toJSON = function() {
  var a = {};
  a.bias = this.bias;
  a.radius = this.radius;
  a.mapSize = {};
  a.mapSize.x = this.mapSize.x;
  a.mapSize.y = this.mapSize.y;
  a.camera = {};
  a.camera.top = this.camera.top;
  a.camera.bottom = this.camera.bottom;
  a.camera.far = this.camera.far;
  a.camera.near = this.camera.near;
  a.camera.left = this.camera.left;
  a.camera.right = this.camera.right;
  return a;
};
THREE.LightShadow.prototype.fromJSON = function(a) {
  void 0 !== a.bias && (this.bias = a.bias);
  void 0 !== a.radius && (this.radius = a.radius);
  if (void 0 !== a.mapSize) {
    var c = a.mapSize;
    this.mapSize.set(c.x, c.y);
  }
  void 0 !== a.camera && (a = a.camera, this.camera.top = a.top, this.camera.bottom = a.bottom, this.camera.left = a.left, this.camera.right = a.right, this.camera.near = a.near, this.camera.far = a.far);
};
"use strict";
THREE.Fog.NONE = 0;
THREE.Fog.LINEAR = 1;
THREE.Fog.EXPONENTIAL = 2;
"use strict";
THREE.Points.prototype.raycast = function(a, c) {
  null === this.geometry.boundingBox && this.geometry.computeBoundingBox();
  var k = new THREE.Box3;
  k.copy(this.geometry.boundingBox);
  k.applyMatrix4(this.matrixWorld);
  null !== a.ray.intersectBox(k, new THREE.Vector3) && c.push({object:this});
};
"use strict";
function AnimationMixer(a) {
  THREE.AnimationMixer.call(this, a);
  this.playing = !1;
}
AnimationMixer.prototype = Object.create(THREE.AnimationMixer.prototype);
AnimationMixer.prototype.createActions = function(a) {
  for (var c = 0; c < a.length; c++) {
    var k = this.clipAction(a[c]);
    k.setLoop(a[c].loop);
    k.weight = a[c].weight;
    k.timeScale = a[c].timeScale;
    k.enabled = a[c].enabled;
    k.play();
  }
  return this._actions;
};
AnimationMixer.prototype.setTime = function(a) {
  this.time = a;
  for (var c = 0; c < this._actions.length; c++) {
    this._actions[c].time = a;
  }
  this.update(0, !0);
};
AnimationMixer.prototype.play = function() {
  this.playing = !0;
};
AnimationMixer.prototype.stop = function() {
  this.setTime(0);
  this.playing = !1;
};
AnimationMixer.prototype.pause = function() {
  this.playing = !1;
};
AnimationMixer.prototype.dispose = function() {
  this.stopAllAction();
  this.uncacheRoot(this._root);
};
AnimationMixer.prototype.update = function(a, c) {
  if (this.playing || c) {
    this.time += a;
    c = Math.sign(a);
    for (var k = 0; k < this._actions.length; k++) {
      this._actions[k]._update(this.time, a, c, this._accuIndex);
    }
    for (k = 0; k < this._bindings.length; k++) {
      this._bindings[k].apply(this._accuIndex);
    }
  }
  return this;
};
"use strict";
function Key() {
  this.justReleased = this.justPressed = this.pressed = !1;
}
Key.DOWN = -1;
Key.UP = 1;
Key.RESET = 0;
Key.prototype.constructor = Key;
Key.prototype.update = function(a) {
  this.justReleased = this.justPressed = !1;
  a === Key.DOWN ? (!1 === this.pressed && (this.justPressed = !0), this.pressed = !0) : a === Key.UP ? (this.pressed && (this.justReleased = !0), this.pressed = !1) : a === Key.RESET && (this.justPressed = this.justReleased = !1);
};
Key.prototype.set = function(a, c, k) {
  this.justPressed = a;
  this.pressed = c;
  this.justReleased = k;
};
Key.prototype.reset = function() {
  this.justReleased = this.pressed = this.justPressed = !1;
};
"use strict";
function Keyboard(a) {
  this.keys = [];
  this.actions = [];
  var c = this, k = this.actions;
  this.events = new EventManager;
  this.events.add(window, "keydown", function(a) {
    k.push(a.keyCode);
    k.push(Key.DOWN);
  });
  this.events.add(window, "keyup", function(a) {
    k.push(a.keyCode);
    k.push(Key.UP);
  });
  this.events.add(window, "focus", function(a) {
    c.reset();
  });
  !0 !== a && this.create();
}
Keyboard.prototype = Keyboard;
Keyboard.prototype.constructor = Keyboard;
Keyboard.update = function() {
  for (var a = 0; this.actions.length > a;) {
    var c = this.actions.shift(), k = this.actions.shift();
    void 0 === this.keys[c] && (this.keys[c] = new Key);
    this.keys[c].update(k);
    if (this.keys[c].justReleased || this.keys[c].justPressed) {
      this.actions.push(c), this.actions.push(Key.RESET), a += 2;
    }
  }
};
Keyboard.reset = function() {
  for (var a = 0; a < this.keys.length; a++) {
    void 0 !== this.keys[a] && this.keys[a].reset();
  }
};
Keyboard.keyPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].pressed;
};
Keyboard.keyJustPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justPressed;
};
Keyboard.keyJustReleased = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justReleased;
};
Keyboard.create = function() {
  this.events.create();
};
Keyboard.dispose = function() {
  this.events.destroy();
};
Keyboard.TAB = 9;
Keyboard.ENTER = 13;
Keyboard.SHIFT = 16;
Keyboard.CTRL = 17;
Keyboard.ALT = 18;
Keyboard.CAPS_LOCK = 20;
Keyboard.ESC = 27;
Keyboard.SPACEBAR = 32;
Keyboard.PAGE_UP = 33;
Keyboard.PAGE_DOWN = 34;
Keyboard.END = 35;
Keyboard.HOME = 36;
Keyboard.INSERT = 45;
Keyboard.DEL = 46;
Keyboard.LEFT = 37;
Keyboard.RIGHT = 39;
Keyboard.UP = 38;
Keyboard.DOWN = 40;
Keyboard.NUM0 = 48;
Keyboard.NUM1 = 49;
Keyboard.NUM2 = 50;
Keyboard.NUM3 = 51;
Keyboard.NUM4 = 52;
Keyboard.NUM5 = 53;
Keyboard.NUM6 = 54;
Keyboard.NUM7 = 55;
Keyboard.NUM8 = 56;
Keyboard.NUM9 = 57;
Keyboard.A = 65;
Keyboard.B = 66;
Keyboard.C = 67;
Keyboard.D = 68;
Keyboard.E = 69;
Keyboard.F = 70;
Keyboard.G = 71;
Keyboard.H = 72;
Keyboard.I = 73;
Keyboard.J = 74;
Keyboard.K = 75;
Keyboard.L = 76;
Keyboard.M = 77;
Keyboard.N = 78;
Keyboard.O = 79;
Keyboard.P = 80;
Keyboard.Q = 81;
Keyboard.R = 82;
Keyboard.S = 83;
Keyboard.T = 84;
Keyboard.U = 85;
Keyboard.V = 86;
Keyboard.W = 87;
Keyboard.X = 88;
Keyboard.Y = 89;
Keyboard.Z = 90;
Keyboard.F1 = 112;
Keyboard.F2 = 113;
Keyboard.F3 = 114;
Keyboard.F4 = 115;
Keyboard.F5 = 116;
Keyboard.F6 = 117;
Keyboard.F7 = 118;
Keyboard.F8 = 119;
Keyboard.F9 = 120;
Keyboard.F10 = 121;
Keyboard.F11 = 122;
Keyboard.F12 = 123;
"use strict";
function TizenKeyboard() {
}
TizenKeyboard.ARROW_LEFT = 37;
TizenKeyboard.ARROW_UP = 38;
TizenKeyboard.ARROW_RIGHT = 39;
TizenKeyboard.ARROW_DOWN = 40;
TizenKeyboard.ENTER = 13;
TizenKeyboard.BACK = 10009;
TizenKeyboard.VOLUME_UP = 447;
TizenKeyboard.VOLUME_DOWN = 448;
TizenKeyboard.VOLUME_MUTE = 449;
TizenKeyboard.CHANNEL_UP = 427;
TizenKeyboard.CHANNEL_DOWN = 428;
TizenKeyboard.F0_RED = 403;
TizenKeyboard.F1_GREEN = 404;
TizenKeyboard.F2_YELLOW = 405;
TizenKeyboard.F3_BLUE = 406;
TizenKeyboard.NUM_0 = 48;
TizenKeyboard.NUM_1 = 49;
TizenKeyboard.NUM_2 = 50;
TizenKeyboard.NUM_3 = 51;
TizenKeyboard.NUM_4 = 52;
TizenKeyboard.NUM_5 = 53;
TizenKeyboard.NUM_6 = 54;
TizenKeyboard.NUM_7 = 55;
TizenKeyboard.NUM_8 = 56;
TizenKeyboard.NUM_9 = 57;
TizenKeyboard.MINUS = 189;
TizenKeyboard.E_MANUAL = 10146;
TizenKeyboard.PREVIOUS_CHANNEL = 10190;
TizenKeyboard.PICTURE_SIZE = 10140;
TizenKeyboard.SOCCER = 10228;
TizenKeyboard.TELETEXT = 10200;
TizenKeyboard.SEARCH = 10225;
TizenKeyboard.GUIDE = 458;
TizenKeyboard.SOURCE = 10072;
TizenKeyboard.EXTRA = 10253;
TizenKeyboard.MTS = 10195;
TizenKeyboard.MEDIA_PLAY_PAUSE = 10252;
TizenKeyboard.MENU = 18;
TizenKeyboard.MEDIA_REWIND = 412;
TizenKeyboard.TOOLS = 10135;
TizenKeyboard.MEDIA_FAST_FORWARD = 417;
TizenKeyboard.INFO = 457;
TizenKeyboard.MEDIA_PLAY = 415;
TizenKeyboard.EXIT = 10182;
TizenKeyboard.MEDIA_PAUSE = 19;
TizenKeyboard.MEDIA_STOP = 413;
TizenKeyboard.CAPTION = 10221;
TizenKeyboard.MEDIA_RECORD = 416;
TizenKeyboard.CHANNEL_LIST = 10073;
TizenKeyboard.MEDIA_TRACK_PREVIOUS = 10232;
TizenKeyboard.MEDIA_TRACK_NEXT = 10233;
TizenKeyboard.MEDIA_3D = 10199;
"use strict";
function Mouse(a, c) {
  this._keys = Array(5);
  this._position = new THREE.Vector2(0, 0);
  this._positionUpdated = !1;
  this._delta = new THREE.Vector2(0, 0);
  this._wheel = 0;
  this._wheelUpdated = !1;
  this._doubleClicked = Array(5);
  this.keys = Array(5);
  this.position = new THREE.Vector2(0, 0);
  this.delta = new THREE.Vector2(0, 0);
  this.wheel = 0;
  this.doubleClicked = Array(5);
  this.domElement = void 0 !== a ? a : window;
  this.canvas = null;
  this.events = new EventManager;
  for (a = 0; 5 > a; a++) {
    this._doubleClicked[a] = !1, this.doubleClicked[a] = !1, this._keys[a] = new Key, this.keys[a] = new Key;
  }
  var k = this;
  void 0 !== window.onmousewheel ? this.events.add(this.domElement, "mousewheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  }) : void 0 !== window.addEventListener ? this.events.add(this.domElement, "DOMMouseScroll", function(a) {
    k._wheel = 30 * a.detail;
    k._wheelUpdated = !0;
  }) : this.events.add(this.domElement, "wheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  });
  if (void 0 !== window.ontouchstart || 0 < navigator.msMaxTouchPoints) {
    var b = new Vector2(0, 0);
    this.events.add(this.domElement, "touchstart", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, 0, 0);
      k.updateKey(Mouse.LEFT, Key.DOWN);
      b.set(a.clientX, a.clientY);
    });
    this.events.add(this.domElement, "touchend", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(this.domElement, "touchcancel", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(document.body, "touchmove", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, a.clientX - b.x, a.clientY - b.y);
      b.set(a.clientX, a.clientY);
    });
  }
  this.events.add(this.domElement, "mousemove", function(a) {
    k.updatePosition(a.clientX, a.clientY, a.movementX, a.movementY);
  });
  this.events.add(this.domElement, "mousedown", function(a) {
    k.updateKey(a.which - 1, Key.DOWN);
  });
  this.events.add(this.domElement, "mouseup", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dragstart", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dblclick", function(a) {
    k._doubleClicked[a.which - 1] = !0;
  });
  !0 !== c && this.create();
}
Mouse.prototype = Mouse;
Mouse.prototype.constructor = Mouse;
Mouse.LEFT = 0;
Mouse.MIDDLE = 1;
Mouse.RIGHT = 2;
Mouse.BACK = 3;
Mouse.FORWARD = 4;
Mouse.setCanvas = function(a) {
  this.canvas = a;
  a.mouseInside = !1;
  a.addEventListener("mouseenter", function() {
    this.mouseInside = !0;
  });
  a.addEventListener("mouseleave", function() {
    this.mouseInside = !1;
  });
};
Mouse.insideCanvas = function() {
  return null !== this.canvas && this.canvas.mouseInside;
};
Mouse.setLock = function(a) {
  null !== this.canvas && (a ? this.canvas.requestPointerLock ? this.canvas.requestPointerLock() : this.canvas.mozRequestPointerLock ? this.canvas.mozRequestPointerLock() : this.canvas.webkitRequestPointerLock && this.canvas.webkitRequestPointerLock() : document.exitPointerLock ? document.exitPointerLock() : document.mozExitPointerLock ? document.mozExitPointerLock() : document.webkitExitPointerLock && document.webkitExitPointerLock());
};
Mouse.buttonPressed = function(a) {
  return this.keys[a].pressed;
};
Mouse.buttonDoubleClicked = function(a) {
  return this.doubleClicked[a];
};
Mouse.buttonJustPressed = function(a) {
  return this.keys[a].justPressed;
};
Mouse.buttonJustReleased = function(a) {
  return this.keys[a].justReleased;
};
Mouse.updatePosition = function(a, c, k, b) {
  if (null !== this.canvas) {
    var e = this.canvas.getBoundingClientRect();
    a -= e.left;
    c -= e.top;
  }
  this._position.set(a, c);
  this._delta.x += k;
  this._delta.y += b;
  this._positionUpdated = !0;
};
Mouse.updateKey = function(a, c) {
  -1 < a && this._keys[a].update(c);
};
Mouse.update = function() {
  for (var a = 0; 5 > a; a++) {
    this._keys[a].justPressed && this.keys[a].justPressed && (this._keys[a].justPressed = !1), this._keys[a].justReleased && this.keys[a].justReleased && (this._keys[a].justReleased = !1), this.keys[a].set(this._keys[a].justPressed, this._keys[a].pressed, this._keys[a].justReleased), !0 === this._doubleClicked[a] ? (this.doubleClicked[a] = !0, this._doubleClicked[a] = !1) : this.doubleClicked[a] = !1;
  }
  this._wheelUpdated ? (this.wheel = this._wheel, this._wheelUpdated = !1) : this.wheel = 0;
  this._positionUpdated ? (this.delta.copy(this._delta), this.position.copy(this._position), this._delta.set(0, 0), this._positionUpdated = !1) : (this.delta.x = 0, this.delta.y = 0);
};
Mouse.create = function() {
  this.events.create();
};
Mouse.dispose = function() {
  this.events.destroy();
};
"use strict";
function Gamepad() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
  for (var a = navigator.getGamepads(), c = 0; c < a.length; c++) {
    if (null !== a[c]) {
      this.setGamepad(a[c]);
      break;
    }
  }
  null === this.gamepad && console.warn("nunuStudio: No gamepad found");
}
Gamepad.prototype.setGamepad = function(a) {
  if (void 0 !== a && null !== a) {
    this.index = a.index;
    this.gamepad = a;
    this.buttons = [];
    for (var c = 0; c < a.buttons.length; c++) {
      this.buttons.push(new Key);
    }
    this.setProductVendor(a);
    this.connected = !0;
  } else {
    console.warn("nunuStudio: No gamepad found"), this.disconnect();
  }
};
Gamepad.prototype.disconnect = function() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
};
Gamepad.prototype.setProductVendor = function(a) {
  try {
    var c = a.id.split(":");
    this.vendor = c[1].split(" ")[1];
    this.product = c[2].replace(" ", "").replace(")", "");
    return;
  } catch (k) {
  }
  try {
    c = a.id.split("-"), this.vendor = c[0], this.product = c[1];
  } catch (k) {
  }
};
Gamepad.prototype.update = function(a) {
  this.gamepad = navigator.getGamepads()[this.index];
  if (void 0 !== this.gamepad) {
    for (a = 0; a < this.buttons.length; a++) {
      this.buttons[a].update(this.gamepad.buttons[a].pressed ? Key.DOWN : Key.UP);
    }
  }
};
Gamepad.prototype.getAnalogueButton = function(a) {
  return a > this.buttons.length || 0 > a ? 0 : this.gamepad.buttons[a].value;
};
Gamepad.prototype.getAxis = function(a) {
  return a > this.gamepad.axes.length || 0 > a ? 0 : this.gamepad.axes[a];
};
Gamepad.prototype.buttonExists = function(a) {
  return 0 <= a && a < this.buttons.length;
};
Gamepad.prototype.buttonPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].pressed : !1;
};
Gamepad.prototype.buttonJustPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].justPressed : !1;
};
Gamepad.prototype.buttonJustReleased = function(a) {
  return this.buttons[a] ? this.buttons[a].justReleased : !1;
};
Gamepad.LEFT = 14;
Gamepad.RIGHT = 15;
Gamepad.DOWN = 13;
Gamepad.UP = 12;
Gamepad.SELECT = 8;
Gamepad.START = 9;
Gamepad.HOME = 16;
Gamepad.LEFT_TRIGGER_A = 4;
Gamepad.LEFT_TRIGGER_B = 6;
Gamepad.RIGHT_TRIGGER_A = 5;
Gamepad.RIGHT_TRIGGER_B = 7;
Gamepad.L1 = 4;
Gamepad.L2 = 6;
Gamepad.L3 = 6;
Gamepad.R1 = 5;
Gamepad.R2 = 7;
Gamepad.R3 = 11;
Gamepad.A = 0;
Gamepad.B = 1;
Gamepad.C = 2;
Gamepad.D = 3;
Gamepad.X = 2;
Gamepad.Y = 3;
Gamepad.LEFT_ANALOGUE_BUT = 10;
Gamepad.LEFT_ANALOGUE_HOR = 0;
Gamepad.LEFT_ANALOGUE_VERT = 1;
Gamepad.RIGHT_ANALOGUE_BUT = 11;
Gamepad.RIGHT_ANALOGUE_HOR = 2;
Gamepad.RIGHT_ANALOGUE_VERT = 3;
"use strict";
function Gyroscope() {
  this.orientation = this.gamma = this.beta = this.alpha = 0;
  this.events = new EventManager;
  var a = this;
  this.events.add(window, "orientationchange", function(c) {
    a.orientation = THREE.Math.degToRad(window.orientation);
  });
  this.events.add(window, "deviceorientation", function(c) {
    a.alpha = THREE.Math.degToRad(c.alpha);
    a.beta = THREE.Math.degToRad(c.beta);
    a.gamma = THREE.Math.degToRad(c.gamma);
  });
  this.events.create();
}
Gyroscope.prototype.setObjectQuaternion = function() {
  var a = new THREE.Euler, c = new THREE.Quaternion, k = new THREE.Vector3(0, 0, 1), b = new THREE.Quaternion(-Math.sqrt(.5), 0, 0, Math.sqrt(.5));
  return function(e) {
    a.set(this.beta, this.alpha, -this.gamma, "YXZ");
    e.quaternion.setFromEuler(a);
    e.quaternion.multiply(b);
    e.quaternion.multiply(c.setFromAxisAngle(k, -this.orientation));
  };
}();
Gyroscope.prototype.dispose = function() {
  this.events.destroy();
};
"use strict";
function RendererConfiguration() {
  this.backend = RendererConfiguration.WEBGL2;
  this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !1;
  this.stencil = this.shadows = this.antialiasing = !0;
  this.shadowsType = THREE.PCFSoftShadowMap;
  this.shadowsAutoUpdate = !0;
  this.toneMapping = THREE.NoToneMapping;
  this.toneMappingWhitePoint = this.toneMappingExposure = 1;
  this.sortObjects = !0;
  this.gammaFactor = 2;
  this.gammaOutput = this.gammaInput = !1;
  this.precision = "highp";
  this.alpha = !1;
  this.premultipliedAlpha = !0;
  this.preserveDrawingBuffer = !1;
  this.powerPreference = "high-performance";
  this.physicallyCorrectLights = this.logarithmicDepthBuffer = !1;
  this.checkShaderErrors = !0;
}
RendererConfiguration.WEBGL = 1;
RendererConfiguration.WEBGL2 = 2;
RendererConfiguration.prototype.createRenderer = function(a) {
  var c = null;
  if (this.backend === RendererConfiguration.WEBGL2) {
    try {
      c = a.getContext("webgl2");
    } catch (k) {
    }
  }
  a = new THREE.WebGLRenderer({canvas:a, context:c, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, antialias:this.antialiasing, stencil:this.stencil, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer});
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearDepth = this.autoClearDepth;
  a.autoClearStencil = this.autoClearStencil;
  a.shadowMap.enabled = this.shadows;
  a.shadowMap.type = this.shadowsType;
  a.shadowMap.autoUpdate = this.shadowsAutoUpdate;
  a.shadowMap.needsUpdate = !0;
  a.toneMapping = this.toneMapping;
  a.toneMappingExposure = this.toneMappingExposure;
  a.toneMappingWhitePoint = this.toneMappingWhitePoint;
  a.debug.checkShaderErrors = this.checkShaderErrors;
  a.sortObjects = this.sortObjects;
  a.gammaFactor = this.gammaFactor;
  a.gammaInput = this.gammaInput;
  a.gammaOutput = this.gammaOutput;
  a.physicallyCorrectLights = this.physicallyCorrectLights;
  return a;
};
RendererConfiguration.prototype.toJSON = function() {
  return {backend:this.backend, autoClear:this.autoClear, autoClearColor:this.autoClearColor, autoClearDepth:this.autoClearDepth, autoClearStencil:this.autoClearStencil, antialiasing:this.antialiasing, shadows:this.shadows, stencil:this.stencil, shadowsType:this.shadowsType, shadowsAutoUpdate:this.shadowsAutoUpdate, toneMapping:this.toneMapping, toneMappingExposure:this.toneMappingExposure, toneMappingWhitePoint:this.toneMappingWhitePoint, sortObjects:this.sortObjects, checkShaderErrors:this.checkShaderErrors, 
  gammaFactor:this.gammaFactor, gammaInput:this.gammaInput, gammaOutput:this.gammaOutput, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer, physicallyCorrectLights:this.physicallyCorrectLights};
};
RendererConfiguration.prototype.fromJSON = function(a) {
  this.backend = a.backend;
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearDepth = a.autoClearDepth;
  this.autoClearStencil = a.autoClearStencil;
  this.antialiasing = a.antialiasing;
  this.shadows = a.shadows;
  this.stencil = a.stencil;
  this.shadowsType = a.shadowsType;
  this.shadowsAutoUpdate = a.shadowsAutoUpdate;
  this.toneMapping = a.toneMapping;
  this.toneMappingExposure = a.toneMappingExposure;
  this.toneMappingWhitePoint = a.toneMappingWhitePoint;
  this.sortObjects = a.sortObjects;
  this.checkShaderErrors = a.checkShaderErrors;
  this.gammaFactor = a.gammaFactor;
  this.gammaInput = a.gammaInput;
  this.gammaOutput = a.gammaOutput;
  this.precision = a.precision;
  this.alpha = a.alpha;
  this.premultipliedAlpha = a.premultipliedAlpha;
  this.preserveDrawingBuffer = a.preserveDrawingBuffer;
  this.powerPreference = a.powerPreference;
  this.logarithmicDepthBuffer = a.logarithmicDepthBuffer;
  this.physicallyCorrectLights = a.physicallyCorrectLights;
};
"use strict";
function CSS3DRenderer(a) {
  this.size = new THREE.Vector2(2, 2);
  this.halfSize = new THREE.Vector2(1, 1);
  this.matrix = new THREE.Matrix4;
  this.cache = {camera:{fov:0, style:""}, objects:new WeakMap};
  this.domElement = void 0 !== a ? a : document.createElement("div");
  this.domElement.style.overflow = "hidden";
  this.domElement.style.pointerEvents = "none";
  this.cameraElement = document.createElement("div");
  this.cameraElement.style.WebkitTransformStyle = "preserve-3d";
  this.cameraElement.style.transformStyle = "preserve-3d";
  this.domElement.appendChild(this.cameraElement);
}
CSS3DRenderer.prototype.getSize = function() {
  return {width:this.size.x, height:this.size.y};
};
CSS3DRenderer.prototype.setSize = function(a, c) {
  this.size.set(a, c);
  this.halfSize.set(a / 2, c / 2);
  this.domElement.style.width = a + "px";
  this.domElement.style.height = c + "px";
  this.cameraElement.style.width = a + "px";
  this.cameraElement.style.height = c + "px";
};
CSS3DRenderer.prototype.render = function(a, c) {
  function k(a) {
    a = a.elements;
    return "matrix3d(" + a[0] + "," + -a[1] + "," + a[2] + "," + a[3] + "," + a[4] + "," + -a[5] + "," + a[6] + "," + a[7] + "," + a[8] + "," + -a[9] + "," + a[10] + "," + a[11] + "," + a[12] + "," + -a[13] + "," + a[14] + "," + a[15] + ")";
  }
  function b(a, b) {
    a = a.elements;
    return "translate(-50%,-50%)matrix3d(" + a[0] + "," + a[1] + "," + a[2] + "," + a[3] + "," + -a[4] + "," + -a[5] + "," + -a[6] + "," + -a[7] + "," + a[8] + "," + a[9] + "," + a[10] + "," + a[11] + "," + a[12] + "," + a[13] + "," + a[14] + "," + a[15] + ")";
  }
  function e(a, c, h) {
    if (!0 === a.isCSS3DObject) {
      if (!0 === a.isCSS3DSprite) {
        matrix.copy(c.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(a.matrixWorld);
        matrix.scale(a.scale);
        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;
        var d = b(matrix, h);
      } else {
        d = b(a.matrixWorld, h);
      }
      var k = a.element, m = f.cache.objects.get(a);
      if (void 0 === m || m.style !== d) {
        k.style.WebkitTransform = d, k.style.transform = d, f.cache.objects.set(a, {style:d});
      }
      k.parentNode !== f.cameraElement && f.cameraElement.appendChild(k);
    }
    d = 0;
    for (k = a.children.length; d < k; d++) {
      e(a.children[d], c, h);
    }
  }
  var f = this, h = c.projectionMatrix.elements[5] * this.halfSize.y;
  this.cache.camera.fov !== h && (c.isPerspectiveCamera && (this.domElement.style.WebkitPerspective = h + "px", this.domElement.style.perspective = h + "px"), this.cache.camera.fov = h);
  a.updateMatrixWorld();
  null === c.parent && c.updateMatrixWorld();
  h = c.isOrthographicCamera ? "scale(" + h + ")translate(" + -(c.right + c.left) / 2 + "px," + (c.top + c.bottom) / 2 + "px)" + k(c.matrixWorldInverse) : "translateZ(" + h + "px)" + k(c.matrixWorldInverse);
  var r = h + "translate(" + this.halfSize.x + "px," + this.halfSize.y + "px)";
  this.cache.camera.style !== r && (this.cameraElement.style.WebkitTransform = r, this.cameraElement.style.transform = r, this.cache.camera.style = r);
  e(a, c, h);
};
"use strict";
function CSS3DObject(a) {
  THREE.Object3D.call(this);
  this.element = a;
  this.element.style.position = "absolute";
  this.addEventListener("removed", function() {
    null !== this.element.parentNode && this.element.parentNode.removeChild(this.element);
  });
  var c = this, k = !0;
  Object.defineProperties(this, {visible:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    c.element.style.display = a ? "block" : "none";
  }}});
}
CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);
CSS3DObject.prototype.constructor = CSS3DObject;
CSS3DObject.prototype.isCSS3DObject = !0;
"use strict";
function CSS3DSprite(a) {
  CSS3DObject.call(this, a);
}
CSS3DSprite.prototype = Object.create(CSS3DObject.prototype);
CSS3DSprite.prototype.constructor = CSS3DSprite;
CSS3DSprite.prototype.isCSS3DSprite = !0;
"use strict";
function RendererState() {
  this.autoClearDepth = this.autoClearStencil = this.autoClearColor = this.autoClear = !1;
  this.clearColor = new THREE.Color;
  this.clearAlpha = 1;
}
RendererState.prototype.backup = function(a) {
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearStencil = a.autoClearStencil;
  this.autoClearDepth = a.autoClearDepth;
  this.clearColor.copy(a.getClearColor());
  this.clearAlpha = a.getClearAlpha();
};
RendererState.prototype.restore = function(a) {
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearStencil = this.autoClearStencil;
  a.autoClearDepth = this.autoClearDepth;
  a.setClearColor(this.clearColor);
  a.setClearAlpha(this.clearAlpha);
};
"use strict";
function Pass() {
  this.uuid = THREE.Math.generateUUID();
  this.type = "Pass";
  this.needsSwap = this.enabled = !0;
  this.copyToScreen = this.renderToScreen = this.clear = !1;
}
Pass.RGBALinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat};
Pass.RGBLinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBFormat};
Pass.RGBANearest = {minFilter:THREE.NearestFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat};
Pass.prototype.createQuadScene = function() {
  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
  this.scene = new THREE.Scene;
  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
  this.quad.frustumCulled = !1;
  this.scene.add(this.quad);
};
Pass.prototype.setSize = function(a, c) {
};
Pass.prototype.render = function(a, c, k, b, e, f, h) {
};
Pass.prototype.dispose = function() {
};
Pass.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.clear = this.clear;
  a.enabled = this.enabled;
  a.needsSwap = this.needsSwap;
  a.renderToScreen = this.renderToScreen;
  a.copyToScreen = this.copyToScreen;
  return a;
};
"use strict";
function ShaderPass(a, c) {
  Pass.call(this);
  this.type = "Shader";
  this.textureID = void 0 !== c ? c : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.createQuadScene();
}
ShaderPass.prototype = Object.create(Pass.prototype);
ShaderPass.prototype.render = function(a, c, k, b, e, f, h) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.quad.material = this.material;
  a.setRenderTarget(this.renderToScreen ? null : c);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
};
"use strict";
function EffectComposer() {
  void 0 === THREE.CopyShader && console.error("EffectComposer relies on THREE.CopyShader");
  this.uuid = THREE.Math.generateUUID();
  this.height = this.width = 1;
  this.passes = [];
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.copyPass = new ShaderPass(THREE.CopyShader);
  this.rendererState = new RendererState;
}
EffectComposer.bufferParameters = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1};
EffectComposer.prototype.swapBuffers = function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
};
EffectComposer.prototype.addPass = function(a) {
  this.passes.push(a);
};
EffectComposer.prototype.moveBack = function(a) {
  var c = this.passes.indexOf(a);
  if (0 < c) {
    for (var k = c; k !== c - 1; --k) {
      this.passes[k] = this.passes[k - 1];
    }
    this.passes[c - 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.moveForward = function(a) {
  var c = this.passes.indexOf(a);
  if (-1 !== c && c < this.passes.length - 1) {
    for (var k = c; k !== c + 1; k += 1) {
      this.passes[k] = this.passes[k + 1];
    }
    this.passes[c + 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.removePass = function(a) {
  a = this.passes.indexOf(a);
  -1 !== a && this.passes.splice(a, 1);
};
EffectComposer.prototype.insertPass = function(a, c) {
  this.passes.splice(c, 0, a);
};
EffectComposer.prototype.render = function(a, c, k, b) {
  var e = !1;
  this.rendererState.backup(a);
  for (var f = 0; f < this.passes.length; f++) {
    var h = this.passes[f];
    if (h.enabled) {
      h.render(a, this.writeBuffer, this.readBuffer, b, e, c, k);
      if (h.renderToScreen) {
        h.copyToScreen && (this.copyPass.renderToScreen = !0, this.copyPass.render(a, this.readBuffer, this.writeBuffer, b));
        break;
      }
      h.needsSwap && (e && (a.context.stencilFunc(a.context.NOTEQUAL, 1, 4294967295), this.copyPass.renderToScreen = !1, this.copyPass.render(a, this.writeBuffer, this.readBuffer, b), a.context.stencilFunc(a.context.EQUAL, 1, 4294967295)), this.swapBuffers());
      void 0 !== THREE.MaskPass && (h instanceof THREE.MaskPass ? e = !0 : h instanceof THREE.ClearMaskPass && (e = !1));
    }
  }
  this.rendererState.restore(a);
};
EffectComposer.prototype.setSize = function(a, c) {
  a = Math.floor(a);
  c = Math.floor(c);
  this.width = a;
  this.height = c;
  this.writeBuffer.setSize(a, c);
  this.readBuffer.setSize(a, c);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, c);
  }
};
EffectComposer.prototype.reset = function() {
  this.dispose();
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
};
EffectComposer.prototype.dispose = function() {
  this.writeBuffer.dispose();
  this.readBuffer.dispose();
  this.readBuffer = this.writeBuffer = null;
};
EffectComposer.prototype.toJSON = function() {
  var a = {};
  a.uuid = this.uuid;
  a.passes = [];
  for (var c = 0; c < this.passes.length; c++) {
    a.passes.push(this.passes[c].toJSON());
  }
  return a;
};
EffectComposer.fromJSON = function(a) {
  var c = new EffectComposer;
  c.uuid = a.uuid;
  for (var k = 0; k < a.passes.length; k++) {
    var b = a.passes[k];
    if ("Render" === b.type) {
      var e = new RenderPass;
    } else {
      if ("UnrealBloom" === b.type) {
        for (e = new UnrealBloomPass, e.strength = b.strength, e.radius = b.radius, e.threshold = b.threshold, e.bloomFactors = b.bloomFactors, k = 0; k < e.bloomTintColors.length; k++) {
          e.bloomTintColors[k].fromArray(b.bloomTintColors[k]);
        }
      } else {
        "Bloom" === b.type ? e = new BloomPass(b.strength, b.kernelSize, b.sigma, b.resolution) : "SSAONOH" === b.type ? (e = new SSAONOHPass, e.kernelRadius = b.kernelRadius, e.minDistance = b.minDistance, e.maxDistance = b.maxDistance, e.kernelSize = b.kernelSize) : "SSAO" === b.type ? (e = new SSAOPass, e.onlyAO = b.onlyAO, e.radius = b.radius, e.aoClamp = b.aoClamp, e.lumInfluence = b.lumInfluence) : "Bokeh" === b.type ? e = new BokehPass(b.focus, b.aperture, b.maxblur) : "FXAA" === b.type ? 
        e = new FXAAPass : "Copy" === b.type ? e = new CopyPass : "Film" === b.type ? (e = new FilmPass, e.grayscale = b.grayscale, e.noiseIntensity = b.noiseIntensity, e.scanlinesIntensity = b.scanlinesIntensity, e.scanlinesCount = b.scanlinesCount) : "DotScreen" === b.type ? (e = new DotScreenPass, e.center.fromArray(b.center), e.angle = b.angle, e.scale = b.scale) : "Colorify" === b.type ? (e = new ColorifyPass, e.color.setHex(b.color)) : "Sobel" === b.type ? e = new SobelPass : "Technicolor" === 
        b.type ? e = new TechnicolorPass : "HueSaturation" === b.type ? (e = new HueSaturationPass, e.hue = b.hue, e.saturation = b.saturation) : "AdaptiveToneMapping" === b.type ? (e = new AdaptiveToneMappingPass(b.adaptive), e.tau = b.tau, e.minLuminance = b.minLuminance) : "Afterimage" === b.type ? (e = new AfterimagePass, e.damp = b.damp) : e = new RenderPass;
      }
    }
    e.uuid = b.uuid;
    e.enabled = b.enabled;
    e.needsSwap = b.needsSwap;
    e.renderToScreen = b.renderToScreen;
    e.clear = b.clear;
    e.copyToScreen = !0 === b.copyToScreen;
    c.addPass(e);
  }
  return c;
};
"use strict";
function RenderPass() {
  Pass.call(this);
  this.type = "Render";
  this.clear = !0;
}
RenderPass.prototype = Object.create(Pass.prototype);
RenderPass.prototype.render = function(a, c, k, b, e, f, h) {
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(f, h);
};
"use strict";
function FXAAPass() {
  ShaderPass.call(this, THREE.FXAAShader);
  this.type = "FXAA";
}
FXAAPass.prototype = Object.create(ShaderPass.prototype);
FXAAPass.prototype.setSize = function(a, c) {
  this.uniforms.resolution.value.set(1 / a, 1 / c);
};
"use strict";
function AfterimagePass(a) {
  void 0 === THREE.AfterimageShader && console.error("AfterimagePass relies on THREE.AfterimageShader");
  Pass.call(this);
  this.type = "Afterimage";
  this.uniforms = THREE.UniformsUtils.clone(THREE.AfterimageShader.uniforms);
  this.textureComp = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat});
  this.textureOld = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat});
  this.shaderMaterial = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.AfterimageShader.vertexShader, fragmentShader:THREE.AfterimageShader.fragmentShader});
  this.basicMaterial = new THREE.MeshBasicMaterial;
  this.createQuadScene();
  Object.defineProperties(this, {damp:{get:function() {
    return this.uniforms.damp.value;
  }, set:function(a) {
    this.uniforms.damp.value = a;
  }}});
  this.damp = void 0 !== a ? a : .96;
}
AfterimagePass.prototype = Object.create(Pass.prototype);
AfterimagePass.prototype.render = function(a, c, k, b, e, f, h) {
  b = this.textureOld;
  this.textureOld = this.textureComp;
  this.textureComp = b;
  this.uniforms.tNew.value = k.texture;
  this.uniforms.tOld.value = this.textureOld.texture;
  this.quad.material = this.shaderMaterial;
  a.autoClear = !1;
  a.setRenderTarget(this.textureComp);
  a.render(this.scene, this.camera);
  this.basicMaterial.map = this.textureComp.texture;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  this.quad.material = this.basicMaterial;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
AfterimagePass.prototype.setSize = function(a, c) {
  this.textureComp.setSize(a, c);
  this.textureOld.setSize(a, c);
};
AfterimagePass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.damp = this.damp;
  return a;
};
"use strict";
function UnrealBloomPass(a, c, k) {
  void 0 === THREE.LuminosityHighPassShader && console.error("UnrealBloomPass relies on THREE.LuminosityHighPassShader");
  void 0 === THREE.CopyShader && console.error("UnrealBloomPass relies on THREE.CopyShader");
  Pass.call(this);
  this.type = "UnrealBloom";
  this.renderTargetsHorizontal = [];
  this.renderTargetsVertical = [];
  this.nMips = 5;
  for (var b = 0; b < this.nMips; b++) {
    var e = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    e.texture.generateMipmaps = !1;
    this.renderTargetsHorizontal.push(e);
    e = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    e.texture.generateMipmaps = !1;
    this.renderTargetsVertical.push(e);
  }
  this.renderTargetBright = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
  this.renderTargetBright.texture.generateMipmaps = !1;
  b = THREE.LuminosityHighPassShader;
  this.highPassUniforms = THREE.UniformsUtils.clone(b.uniforms);
  this.materialHighPassFilter = new THREE.ShaderMaterial({uniforms:this.highPassUniforms, vertexShader:b.vertexShader, fragmentShader:b.fragmentShader, defines:{}});
  this.separableBlurMaterials = [];
  e = [3, 5, 7, 9, 11];
  for (b = 0; b < this.nMips; b++) {
    this.separableBlurMaterials.push(UnrealBloomPass.getSeperableBlurMaterial(e[b])), this.separableBlurMaterials[b].uniforms.texSize.value = new THREE.Vector2(0, 0);
  }
  this.compositeMaterial = UnrealBloomPass.getCompositeMaterial(this.nMips);
  this.compositeMaterial.uniforms.blurTexture1.value = this.renderTargetsVertical[0].texture;
  this.compositeMaterial.uniforms.blurTexture2.value = this.renderTargetsVertical[1].texture;
  this.compositeMaterial.uniforms.blurTexture3.value = this.renderTargetsVertical[2].texture;
  this.compositeMaterial.uniforms.blurTexture4.value = this.renderTargetsVertical[3].texture;
  this.compositeMaterial.uniforms.blurTexture5.value = this.renderTargetsVertical[4].texture;
  this.highPassUniforms.luminosityThreshold.value = void 0 !== k ? k : .7;
  this.highPassUniforms.smoothWidth.value = .01;
  this.compositeMaterial.uniforms.bloomStrength.value = void 0 !== a ? a : .8;
  this.compositeMaterial.uniforms.bloomRadius.value = void 0 !== c ? c : .3;
  this.compositeMaterial.uniforms.bloomFactors.value = [1, .8, .6, .4, .2];
  this.compositeMaterial.uniforms.bloomTintColors.value = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];
  this.compositeMaterial.needsUpdate = !0;
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = 1;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, depthTest:!1, depthWrite:!1, transparent:!0});
  this.createQuadScene();
  this.basic = new THREE.MeshBasicMaterial;
  Object.defineProperties(this, {strength:{get:function() {
    return this.compositeMaterial.uniforms.bloomStrength.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomStrength.value = a;
  }}, radius:{get:function() {
    return this.compositeMaterial.uniforms.bloomRadius.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomRadius.value = a;
  }}, threshold:{get:function() {
    return this.highPassUniforms.luminosityThreshold.value;
  }, set:function(a) {
    this.highPassUniforms.luminosityThreshold.value;
  }}, smooth:{get:function() {
    return this.highPassUniforms.smoothWidth.value;
  }, set:function(a) {
    this.highPassUniforms.smoothWidth.value;
  }}, bloomFactors:{get:function() {
    return this.compositeMaterial.uniforms.bloomFactors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomFactors.value;
  }}, bloomTintColors:{get:function() {
    return this.compositeMaterial.uniforms.bloomTintColors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomTintColors.value = a;
  }}});
}
UnrealBloomPass.prototype = Object.create(Pass.prototype);
UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1, 0);
UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0, 1);
UnrealBloomPass.prototype.dispose = function() {
  for (var a = 0; a < this.renderTargetsHorizontal.length; a++) {
    this.renderTargetsHorizontal[a].dispose();
  }
  for (a = 0; a < this.renderTargetsVertical.length; a++) {
    this.renderTargetsVertical[a].dispose();
  }
  this.renderTargetBright.dispose();
};
UnrealBloomPass.prototype.setSize = function(a, c) {
  a = Math.round(a / 2);
  c = Math.round(c / 2);
  this.renderTargetBright.setSize(a, c);
  for (var k = 0; k < this.nMips; k++) {
    this.renderTargetsHorizontal[k].setSize(a, c), this.renderTargetsVertical[k].setSize(a, c), this.separableBlurMaterials[k].uniforms.texSize.value.set(a, c), a = Math.round(a / 2), c = Math.round(c / 2);
  }
};
UnrealBloomPass.prototype.render = function(a, c, k, b, e, f, h) {
  a.autoClear = !1;
  a.setClearColor(new THREE.Color(0, 0, 0), 0);
  e && a.context.disable(a.context.STENCIL_TEST);
  this.renderToScreen && (this.quad.material = this.basic, this.basic.map = k.texture, a.setRenderTarget(null), a.clear(), a.render(this.scene, this.camera));
  this.highPassUniforms.tDiffuse.value = k.texture;
  this.quad.material = this.materialHighPassFilter;
  a.setRenderTarget(this.renderTargetBright);
  a.clear();
  a.render(this.scene, this.camera);
  c = this.renderTargetBright;
  for (b = 0; b < this.nMips; b++) {
    this.quad.material = this.separableBlurMaterials[b], this.separableBlurMaterials[b].uniforms.colorTexture.value = c.texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionX, a.setRenderTarget(this.renderTargetsHorizontal[b]), a.clear(), a.render(this.scene, this.camera), this.separableBlurMaterials[b].uniforms.colorTexture.value = this.renderTargetsHorizontal[b].texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionY, 
    a.setRenderTarget(this.renderTargetsVertical[b]), a.clear(), a.render(this.scene, this.camera), c = this.renderTargetsVertical[b];
  }
  this.quad.material = this.compositeMaterial;
  a.setRenderTarget(this.renderTargetsHorizontal[0]);
  a.render(this.scene, this.camera);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetsHorizontal[0].texture;
  e && a.context.enable(a.context.STENCIL_TEST);
  a.setRenderTarget(this.renderToScreen ? null : k);
  a.render(this.scene, this.camera);
};
UnrealBloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.radius = this.radius;
  a.threshold = this.threshold;
  a.bloomFactors = this.bloomFactors;
  a.bloomTintColors = [];
  for (var c = 0; c < this.bloomTintColors.length; c++) {
    a.bloomTintColors.push(this.bloomTintColors[c].toArray());
  }
  return a;
};
UnrealBloomPass.getSeperableBlurMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:a, SIGMA:a}, uniforms:{colorTexture:{value:null}, texSize:{value:new THREE.Vector2(.5, .5)}, direction:{value:new THREE.Vector2(.5, .5)}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", fragmentShader:"\n\t\t\t#include <common>\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D colorTexture;\n\t\t\tuniform vec2 texSize;\n\t\t\tuniform vec2 direction;\n\t\t\t\n\t\t\tfloat gaussianPdf(in float x, in float sigma)\n\t\t\t{\n\t\t\t\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\tvec3 diffuseSum = texture2D(colorTexture, vUv).rgb * weightSum;\n\t\t\t\tfor(int i = 1; i < KERNEL_RADIUS; i++)\n\t\t\t\t{\n\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\tvec3 sample1 = texture2D(colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\tvec3 sample2 = texture2D(colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t}"});
};
UnrealBloomPass.getCompositeMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{NUM_MIPS:a}, uniforms:{blurTexture1:{value:null}, blurTexture2:{value:null}, blurTexture3:{value:null}, blurTexture4:{value:null}, blurTexture5:{value:null}, dirtTexture:{value:null}, bloomStrength:{value:1}, bloomFactors:{value:null}, bloomTintColors:{value:null}, bloomRadius:{value:0}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", 
  fragmentShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D blurTexture1;\n\t\t\tuniform sampler2D blurTexture2;\n\t\t\tuniform sampler2D blurTexture3;\n\t\t\tuniform sampler2D blurTexture4;\n\t\t\tuniform sampler2D blurTexture5;\n\t\t\tuniform sampler2D dirtTexture;\n\t\t\tuniform float bloomStrength;\n\t\t\tuniform float bloomRadius;\n\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\t\t\t\n\t\t\tfloat lerpBloomFactor(const in float factor)\n\t\t\t{\n\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = bloomStrength * (lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv));\n\t\t\t}"});
};
"use strict";
function BloomPass(a, c, k, b) {
  Pass.call(this);
  void 0 === THREE.ConvolutionShader && console.error("BloomPass relies on THREE.ConvolutionShader");
  void 0 === THREE.CopyShader && console.error("BloomPass relies on THREE.CopyShader");
  this.type = "Bloom";
  this.copyToScreen = !0;
  this.createQuadScene();
  a = void 0 !== a ? a : 1;
  c = void 0 !== c ? c : 25;
  k = void 0 !== k ? k : 4;
  b = void 0 !== b ? b : 256;
  this.renderTargetX = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.renderTargetY = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = a;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0});
  this.convolutionUniforms = THREE.UniformsUtils.clone(THREE.ConvolutionShader.uniforms);
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  this.convolutionUniforms.cKernel.value = THREE.ConvolutionShader.buildKernel(k);
  this.materialConvolution = new THREE.ShaderMaterial({uniforms:this.convolutionUniforms, vertexShader:THREE.ConvolutionShader.vertexShader, fragmentShader:THREE.ConvolutionShader.fragmentShader, defines:{KERNEL_SIZE_FLOAT:c.toFixed(1), KERNEL_SIZE_INT:c.toFixed(0)}});
}
BloomPass.blurX = new THREE.Vector2(.001953125, 0);
BloomPass.blurY = new THREE.Vector2(0, .001953125);
BloomPass.prototype = Object.create(Pass.prototype);
BloomPass.prototype.render = function(a, c, k, b, e, f, h) {
  e && a.context.disable(a.context.STENCIL_TEST);
  this.quad.material = this.materialConvolution;
  this.convolutionUniforms.tDiffuse.value = k.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  a.setRenderTarget(this.renderTargetX);
  a.clear(!0, !0, !0);
  a.render(this.scene, this.camera, this.renderTargetX, !0);
  this.convolutionUniforms.tDiffuse.value = this.renderTargetX.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurY;
  a.setRenderTarget(this.renderTargetY);
  a.clear(!0, !0, !0);
  a.render(this.scene, this.camera);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetY.texture;
  e && a.context.enable(a.context.STENCIL_TEST);
  a.setRenderTarget(c);
  a.render(this.scene, this.camera);
};
BloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.kernelSize = this.kernelSize;
  a.sigma = this.sigma;
  a.resolution = this.resolution;
  return a;
};
"use strict";
function SSAONOHPass() {
  void 0 === THREE.SSAOShader && console.warn("SSAONOHPass depends on THREE.SSAOShader");
  Pass.call(this);
  this.type = "SSAONOH";
  this.kernel = [];
  this.noiseTexture = null;
  this.createQuadScene();
  this.depthTexture = new THREE.DepthTexture;
  this.depthTexture.type = THREE.UnsignedShortType;
  this.depthTexture.minFilter = THREE.NearestFilter;
  this.depthTexture.maxFilter = THREE.NearestFilter;
  this.normalMaterial = new THREE.MeshNormalMaterial;
  this.normalMaterial.blending = THREE.NoBlending;
  this.normalRenderTarget = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, depthTexture:this.depthTexture, depthBuffer:!0});
  this.ssaoRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOBlurShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOBlurShader.uniforms), vertexShader:THREE.SSAOBlurShader.vertexShader, fragmentShader:THREE.SSAOBlurShader.fragmentShader});
  this.blurMaterial.uniforms.tDiffuse.value = this.ssaoRenderTarget.texture;
  this.ssaoMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOShader.uniforms), vertexShader:THREE.SSAOShader.vertexShader, fragmentShader:THREE.SSAOShader.fragmentShader, blending:THREE.NoBlending});
  this.ssaoMaterial.uniforms.tNormal.value = this.normalRenderTarget.texture;
  this.copyMaterial = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.CopyShader.uniforms), vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, transparent:!0, depthTest:!1, depthWrite:!1, blendSrc:THREE.DstColorFactor, blendDst:THREE.ZeroFactor, blendEquation:THREE.AddEquation, blendSrcAlpha:THREE.DstAlphaFactor, blendDstAlpha:THREE.ZeroFactor, blendEquationAlpha:THREE.AddEquation});
  this._kernelSize = 0;
  var a = this;
  Object.defineProperties(this, {kernelRadius:{get:function() {
    return a.ssaoMaterial.uniforms.kernelRadius.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.kernelRadius.value = c;
  }}, minDistance:{get:function() {
    return a.ssaoMaterial.uniforms.minDistance.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.minDistance.value = c;
  }}, maxDistance:{get:function() {
    return a.ssaoMaterial.uniforms.maxDistance.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.maxDistance.value = c;
  }}, kernelSize:{get:function() {
    return a._kernelSize;
  }, set:function(c) {
    a._kernelSize = c;
    a.generateSampleKernel();
    a.generateRandomKernelRotations();
    a.ssaoMaterial.uniforms.tNoise.value = a.noiseTexture;
    a.ssaoMaterial.uniforms.kernel.value = a.kernel;
  }}});
  this.kernelSize = 64;
  this.kernelRadius = 8;
  this.minDistance = .1;
  this.maxDistance = 1E3;
}
SSAONOHPass.prototype = Object.create(Pass.prototype);
SSAONOHPass.prototype.generateSampleKernel = function() {
  for (var a = 0; a < this._kernelSize; a++) {
    var c = new THREE.Vector3;
    c.x = 2 * Math.random() - 1;
    c.y = 2 * Math.random() - 1;
    c.z = Math.random();
    c.normalize();
    var k = a / this._kernelSize;
    k = THREE.Math.lerp(.1, 1, k * k);
    c.multiplyScalar(k);
    this.kernel.push(c);
  }
};
SSAONOHPass.prototype.generateRandomKernelRotations = function() {
  void 0 === SimplexNoise && console.error("SSAONOHPass: The pass relies on SimplexNoise.");
  for (var a = new SimplexNoise, c = new Float32Array(16), k = 0; 16 > k; k++) {
    c[k] = a.noise3d(2 * Math.random() - 1, 2 * Math.random() - 1, 0);
  }
  this.noiseTexture = new THREE.DataTexture(c, 4, 4, THREE.LuminanceFormat, THREE.FloatType);
  this.noiseTexture.wrapS = THREE.RepeatWrapping;
  this.noiseTexture.wrapT = THREE.RepeatWrapping;
  this.noiseTexture.needsUpdate = !0;
};
SSAONOHPass.prototype.render = function(a, c, k, b, e, f, h) {
  a.autoClear = !1;
  a.setClearColor(7829503);
  a.setClearAlpha(1);
  f.overrideMaterial = this.normalMaterial;
  a.setRenderTarget(this.normalRenderTarget);
  a.clear(!0, !0, !0);
  a.render(f, h);
  f.overrideMaterial = null;
  this.ssaoMaterial.uniforms.tDepth.value = this.depthTexture;
  this.ssaoMaterial.uniforms.tDiffuse.value = k.texture;
  this.ssaoMaterial.uniforms.cameraNear.value = h.near;
  this.ssaoMaterial.uniforms.cameraFar.value = h.far;
  this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(h.projectionMatrix);
  this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(h.projectionMatrix);
  this.renderPass(a, this.ssaoMaterial, this.ssaoRenderTarget);
  this.renderPass(a, this.blurMaterial, this.blurRenderTarget);
  this.renderToScreen ? (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, null, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, null, !1)) : (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, 
  c, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, c, !1));
};
SSAONOHPass.prototype.renderPass = function(a, c, k, b) {
  this.quad.material = c;
  a.autoClear = !1;
  a.setRenderTarget(k);
  b && a.clear(!0, !0, !0);
  a.render(this.scene, this.camera);
};
SSAONOHPass.prototype.dispose = function() {
  this.normalRenderTarget.dispose();
  this.ssaoRenderTarget.dispose();
  this.blurRenderTarget.dispose();
  this.quad.geometry.dispose();
  this.normalMaterial.dispose();
  this.blurMaterial.dispose();
  this.copyMaterial.dispose();
};
SSAONOHPass.prototype.setSize = function(a, c) {
  this.ssaoMaterial.uniforms.resolution.value.set(a, c);
  this.blurMaterial.uniforms.resolution.value.set(a, c);
  this.normalRenderTarget.setSize(a, c);
  this.ssaoRenderTarget.setSize(a, c);
  this.blurRenderTarget.setSize(a, c);
};
SSAONOHPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.kernelSize = this.kernelSize;
  a.kernelRadius = this.kernelRadius;
  a.minDistance = this.minDistance;
  a.maxDistance = this.maxDistance;
  return a;
};
"use strict";
function SSAOPass() {
  ShaderPass.call(this, SSAOShader);
  this.type = "SSAO";
  this.depthMaterial = new THREE.MeshDepthMaterial;
  this.depthMaterial.depthPacking = THREE.RGBADepthPacking;
  this.depthMaterial.blending = THREE.NoBlending;
  this.depthRenderTarget = new THREE.WebGLRenderTarget(2, 2, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter});
  this.uniforms.tDepth.value = this.depthRenderTarget.texture;
  this.uniforms.size.value.set(2, 2);
  Object.defineProperties(this, {radius:{get:function() {
    return this.uniforms.radius.value;
  }, set:function(a) {
    this.uniforms.radius.value = a;
  }}, onlyAO:{get:function() {
    return this.uniforms.onlyAO.value;
  }, set:function(a) {
    this.uniforms.onlyAO.value = a;
  }}, aoClamp:{get:function() {
    return this.uniforms.aoClamp.value;
  }, set:function(a) {
    this.uniforms.aoClamp.value = a;
  }}, lumInfluence:{get:function() {
    return this.uniforms.lumInfluence.value;
  }, set:function(a) {
    this.uniforms.lumInfluence.value = a;
  }}});
  this.radius = 4;
  this.onlyAO = !1;
  this.aoClamp = .25;
  this.lumInfluence = .7;
}
SSAOPass.prototype = Object.create(ShaderPass.prototype);
SSAOPass.prototype.render = function(a, c, k, b, e, f, h) {
  this.uniforms.cameraNear.value = h.near;
  this.uniforms.cameraFar.value = h.far;
  f.overrideMaterial = this.depthMaterial;
  a.setRenderTarget(this.depthRenderTarget);
  a.clear(!0, !0, !0);
  a.render(f, h);
  f.overrideMaterial = null;
  ShaderPass.prototype.render.call(this, a, c, k, b, e);
};
SSAOPass.prototype.setSize = function(a, c) {
  this.uniforms.size.value.set(a, c);
  this.depthRenderTarget.setSize(a, c);
};
SSAOPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.onlyAO = this.onlyAO;
  a.radius = this.radius;
  a.aoClamp = this.aoClamp;
  a.lumInfluence = this.lumInfluence;
  return a;
};
"use strict";
function BokehPass(a, c, k) {
  void 0 === THREE.BokehShader && console.error("BokehPass relies on THREE.BokehShader");
  Pass.call(this);
  this.type = "Bokeh";
  this.renderTargetColor = new THREE.WebGLRenderTarget(0, 0, Pass.RGBLinear);
  this.renderTargetDepth = this.renderTargetColor.clone();
  this.materialDepth = new THREE.MeshDepthMaterial;
  this.materialDepth.depthPacking = THREE.RGBADepthPacking;
  this.materialDepth.blending = THREE.NoBlending;
  this.uniforms = THREE.UniformsUtils.clone(THREE.BokehShader.uniforms);
  this.uniforms.tDepth.value = this.renderTargetDepth.texture;
  this.materialBokeh = new THREE.ShaderMaterial({defines:THREE.BokehShader.defines, uniforms:this.uniforms, vertexShader:THREE.BokehShader.vertexShader, fragmentShader:THREE.BokehShader.fragmentShader});
  this.createQuadScene();
  this.quad.material = this.materialBokeh;
  var b = this;
  Object.defineProperties(this, {aperture:{get:function() {
    return b.uniforms.aperture.value;
  }, set:function(a) {
    b.uniforms.aperture.value = a;
  }}, focus:{get:function() {
    return b.uniforms.focus.value;
  }, set:function(a) {
    b.uniforms.focus.value = a;
  }}, maxblur:{get:function() {
    return b.uniforms.maxblur.value;
  }, set:function(a) {
    b.uniforms.maxblur.value = a;
  }}});
  this.focus = void 0 !== a ? a : 1;
  this.aperture = void 0 !== c ? c : 1;
  this.maxblur = void 0 !== k ? k : .2;
}
BokehPass.prototype = Object.create(Pass.prototype);
BokehPass.prototype.render = function(a, c, k, b, e, f, h) {
  f.overrideMaterial = this.materialDepth;
  a.autoClear = !1;
  a.setClearColor(16777215);
  a.setClearAlpha(1);
  a.setRenderTarget(this.renderTargetDepth);
  a.clear(!0, !0, !0);
  a.render(f, h);
  this.uniforms.tColor.value = k.texture;
  this.uniforms.nearClip.value = h.near;
  this.uniforms.farClip.value = h.far;
  this.uniforms.aspect.value = h.aspect;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
  f.overrideMaterial = null;
};
BokehPass.prototype.setSize = function(a, c) {
  this.renderTargetColor.setSize(a, c);
  this.renderTargetDepth.setSize(a, c);
};
BokehPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.aperture = this.aperture;
  a.focus = this.focus;
  a.maxblur = this.maxblur;
  return a;
};
"use strict";
function CopyPass() {
  ShaderPass.call(this, THREE.CopyShader);
  this.type = "Copy";
}
CopyPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function FilmPass(a, c, k, b) {
  void 0 === THREE.FilmShader && console.error("FilmPass relies on THREE.FilmShader");
  Pass.call(this);
  this.type = "Film";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.FilmShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.FilmShader.vertexShader, fragmentShader:THREE.FilmShader.fragmentShader});
  var e = this;
  Object.defineProperties(this, {grayscale:{get:function() {
    return e.uniforms.grayscale.value;
  }, set:function(a) {
    e.uniforms.grayscale.value = a;
  }}, noiseIntensity:{get:function() {
    return e.uniforms.nIntensity.value;
  }, set:function(a) {
    e.uniforms.nIntensity.value = a;
  }}, scanlinesIntensity:{get:function() {
    return e.uniforms.sIntensity.value;
  }, set:function(a) {
    e.uniforms.sIntensity.value = a;
  }}, scanlinesCount:{get:function() {
    return e.uniforms.sCount.value;
  }, set:function(a) {
    e.uniforms.sCount.value = a;
  }}});
  this.grayscale = void 0 !== b ? b : !1;
  this.noiseIntensity = void 0 !== a ? a : .35;
  this.scanlinesIntensity = void 0 !== c ? c : .5;
  this.scanlinesCount = void 0 !== k ? k : 512;
}
FilmPass.prototype = Object.create(Pass.prototype);
FilmPass.prototype.render = function(a, c, k, b, e, f, h) {
  this.uniforms.time.value += b;
  this.uniforms.tDiffuse.value = k.texture;
  this.quad.material = this.material;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
FilmPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.grayscale = this.grayscale;
  a.noiseIntensity = this.noiseIntensity;
  a.scanlinesIntensity = this.scanlinesIntensity;
  a.scanlinesCount = this.scanlinesCount;
  return a;
};
"use strict";
function DotScreenPass(a, c, k) {
  void 0 === THREE.DotScreenShader && console.error("DotScreenPass relies on THREE.DotScreenShader");
  Pass.call(this);
  this.type = "DotScreen";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.DotScreenShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.DotScreenShader.vertexShader, fragmentShader:THREE.DotScreenShader.fragmentShader});
  Object.defineProperties(this, {center:{get:function() {
    return this.uniforms.center.value;
  }, set:function(a) {
    this.uniforms.center.value = a;
  }}, angle:{get:function() {
    return this.uniforms.angle.value;
  }, set:function(a) {
    this.uniforms.angle.value = a;
  }}, scale:{get:function() {
    return this.uniforms.scale.value;
  }, set:function(a) {
    this.uniforms.scale.value = a;
  }}});
  void 0 !== a && this.center.copy(a);
  this.angle = void 0 !== c ? c : .5;
  this.scale = void 0 !== k ? k : .8;
}
DotScreenPass.prototype = Object.create(Pass.prototype);
DotScreenPass.prototype.render = function(a, c, k, b, e, f, h) {
  this.uniforms.tDiffuse.value = k.texture;
  this.uniforms.tSize.value.set(k.width, k.height);
  this.quad.material = this.material;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
DotScreenPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.center = this.center.toArray();
  a.angle = this.angle;
  a.scale = this.scale;
  return a;
};
"use strict";
function SobelPass(a, c, k) {
  void 0 === THREE.SobelOperatorShader && console.error("SobelPass relies on THREE.SobelOperatorShader");
  void 0 === THREE.LuminosityShader && console.error("SobelPass relies on THREE.LuminosityShader");
  ShaderPass.call(this, THREE.SobelOperatorShader);
  this.type = "Sobel";
}
SobelPass.prototype = Object.create(ShaderPass.prototype);
SobelPass.prototype.setSize = function(a, c) {
  this.uniforms.resolution.value.set(a, c);
};
"use strict";
function ColorifyPass() {
  ShaderPass.call(this, THREE.ColorifyShader);
  this.type = "Colorify";
  Object.defineProperties(this, {color:{get:function() {
    return this.uniforms.color.value;
  }, set:function(a) {
    this.uniforms.color.value = a;
  }}});
}
ColorifyPass.prototype = Object.create(ShaderPass.prototype);
ColorifyPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.color = this.color.getHex();
  return a;
};
"use strict";
function TechnicolorPass() {
  ShaderPass.call(this, THREE.TechnicolorShader);
  this.type = "Technicolor";
}
TechnicolorPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function HueSaturationPass(a, c) {
  ShaderPass.call(this, THREE.HueSaturationShader);
  this.type = "HueSaturation";
  Object.defineProperties(this, {hue:{get:function() {
    return this.uniforms.hue.value;
  }, set:function(a) {
    this.uniforms.hue.value = a;
  }}, saturation:{get:function() {
    return this.uniforms.saturation.value;
  }, set:function(a) {
    this.uniforms.saturation.value = a;
  }}});
  this.hue = void 0 !== a ? a : 0;
  this.saturation = void 0 !== c ? c : 0;
}
HueSaturationPass.prototype = Object.create(ShaderPass.prototype);
HueSaturationPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.hue = this.hue;
  a.saturation = this.saturation;
  return a;
};
function AdaptiveToneMappingPass(a, c) {
  Pass.call(this);
  var k = this;
  this.type = "AdaptiveToneMapping";
  this.needsInit = !0;
  this.resolution = void 0 !== c ? c : 256;
  this._adaptive = void 0 !== a ? a : !0;
  this.currentLuminanceRT = this.previousLuminanceRT = this.luminanceRT = null;
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.NoBlending, depthTest:!1});
  this.materialLuminance = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.LuminosityShader.uniforms), vertexShader:THREE.LuminosityShader.vertexShader, fragmentShader:THREE.LuminosityShader.fragmentShader, blending:THREE.NoBlending});
  this.createShader();
  void 0 === THREE.ToneMapShader && console.error("nunuStudio: AdaptiveToneMappingPass relies on THREE.ToneMapShader");
  this.materialToneMap = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.ToneMapShader.uniforms), vertexShader:THREE.ToneMapShader.vertexShader, fragmentShader:THREE.ToneMapShader.fragmentShader, blending:THREE.NoBlending});
  this.createQuadScene();
  Object.defineProperties(this, {minLuminance:{get:function() {
    return k.adaptLuminanceShader.uniforms.minLuminance.value;
  }, set:function(a) {
    k.adaptLuminanceShader.uniforms.minLuminance.value = a;
  }}, tau:{get:function() {
    return k.adaptLuminanceShader.uniforms.tau.value;
  }, set:function(a) {
    k.adaptLuminanceShader.uniforms.tau.value = a;
  }}, adaptive:{get:function() {
    return k._adaptive;
  }, set:function(a) {
    a ? (this._adaptive = !0, this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture) : (this._adaptive = !1, delete this.materialToneMap.defines.ADAPTED_LUMINANCE, this.materialToneMap.uniforms.luminanceMap.value = null);
    this.materialToneMap.needsUpdate = !0;
  }}});
}
AdaptiveToneMappingPass.prototype = Object.create(Pass.prototype);
AdaptiveToneMappingPass.prototype.constructor = AdaptiveToneMappingPass;
AdaptiveToneMappingPass.prototype.render = function(a, c, k, b, e) {
  this.needsInit && (this.reset(), this.luminanceRT.texture.type = k.texture.type, this.previousLuminanceRT.texture.type = k.texture.type, this.currentLuminanceRT.texture.type = k.texture.type, this.needsInit = !1);
  this._adaptive && (this.quad.material = this.materialLuminance, this.materialLuminance.uniforms.tDiffuse.value = k.texture, a.setRenderTarget(this.currentLuminanceRT), a.render(this.scene, this.camera), this.quad.material = this.materialAdaptiveLum, this.materialAdaptiveLum.uniforms.delta.value = b, this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture, this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture, a.setRenderTarget(this.luminanceRT), 
  a.render(this.scene, this.camera), this.quad.material = this.materialCopy, this.copyUniforms.tDiffuse.value = this.luminanceRT.texture, a.setRenderTarget(this.previousLuminanceRT), a.render(this.scene, this.camera));
  this.quad.material = this.materialToneMap;
  this.materialToneMap.uniforms.tDiffuse.value = k.texture;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
AdaptiveToneMappingPass.prototype.createShader = function() {
  this.adaptLuminanceShader = {defines:{MIP_LEVEL_1X1:(Math.log(this.resolution) / Math.log(2)).toFixed(1)}, uniforms:{lastLum:{value:null}, currentLum:{value:null}, minLuminance:{value:.01}, delta:{value:.016}, tau:{value:1}}, vertexShader:"varying vec2 vUv;\n\t\tvoid main(){\n\t\t\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\n\t\t}", fragmentShader:"varying vec2 vUv;\n\t\t\n\t\tuniform sampler2D lastLum;\n\t\tuniform sampler2D currentLum;\n\t\tuniform float minLuminance;\n\t\tuniform float delta;\n\t\tuniform float tau;\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 lastLum = texture2D(lastLum, vUv, MIP_LEVEL_1X1);\n\t\t\tvec4 currentLum = texture2D(currentLum, vUv, MIP_LEVEL_1X1);\n\t\t\t\n\t\t\tfloat fLastLum = max(minLuminance, lastLum.r);\n\t\t\tfloat fCurrentLum = max(minLuminance, currentLum.r);\n\t\t\t\n\t\t\t// The adaption seems to work better in extreme lighting differences if the input luminance is squared.\t\t\tfCurrentLum *= fCurrentLum;\n\t\t\t\n\t\t\t// Adapt the luminance using Pattanaik's technique\t\t\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n\t\t\tgl_FragColor.r = fAdaptedLum;\n\t\t}"};
  this.materialAdaptiveLum = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(this.adaptLuminanceShader.uniforms), vertexShader:this.adaptLuminanceShader.vertexShader, fragmentShader:this.adaptLuminanceShader.fragmentShader, defines:this.adaptLuminanceShader.defines, blending:THREE.NoBlending});
};
AdaptiveToneMappingPass.prototype.reset = function() {
  this.luminanceRT && this.luminanceRT.dispose();
  this.currentLuminanceRT && this.currentLuminanceRT.dispose();
  this.previousLuminanceRT && this.previousLuminanceRT.dispose();
  this.luminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, Pass.RGBALinear);
  this.luminanceRT.texture.generateMipmaps = !1;
  this.previousLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, Pass.RGBALinear);
  this.previousLuminanceRT.texture.generateMipmaps = !1;
  this.currentLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, {minFilter:THREE.LinearMipMapLinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat});
  this._adaptive && (this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture);
  this.quad.material = new THREE.MeshBasicMaterial({color:7829367});
  this.materialLuminance.needsUpdate = !0;
  this.materialAdaptiveLum.needsUpdate = !0;
  this.materialToneMap.needsUpdate = !0;
};
AdaptiveToneMappingPass.prototype.dispose = function() {
  this.luminanceRT && this.luminanceRT.dispose();
  this.previousLuminanceRT && this.previousLuminanceRT.dispose();
  this.currentLuminanceRT && this.currentLuminanceRT.dispose();
  this.materialLuminance && this.materialLuminance.dispose();
  this.materialAdaptiveLum && this.materialAdaptiveLum.dispose();
  this.materialCopy && this.materialCopy.dispose();
  this.materialToneMap && this.materialToneMap.dispose();
};
AdaptiveToneMappingPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.minLuminance = this.minLuminance;
  a.tau = this.tau;
  a.adaptive = this._adaptive;
  return a;
};
"use strict";
var SSAOShader = {uniforms:{tDiffuse:{value:null}, tDepth:{value:null}, size:{value:new THREE.Vector2(512, 512)}, cameraNear:{value:1}, cameraFar:{value:100}, radius:{value:32}, onlyAO:{value:0}, aoClamp:{value:.25}, lumInfluence:{value:.7}}, vertexShader:"\n\tvarying vec2 vUv;\n\tvoid main()\n\t{\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t}", fragmentShader:"\n\tuniform float cameraNear;\n\tuniform float cameraFar;\n\n\t#ifdef USE_LOGDEPTHBUF\n\t\tuniform float logDepthBufFC;\n\t#endif\n\n\tuniform float radius; //ao radius \n\tuniform bool onlyAO; //use only ambient occlusion pass?\n\n\tuniform vec2 size; //texture width, height\n\tuniform float aoClamp; //depth clamp - reduces haloing at screen edges\n\n\tuniform float lumInfluence; //how much luminance affects occlusion\n\n\tuniform sampler2D tDiffuse;\n\tuniform sampler2D tDepth;\n\n\tvarying vec2 vUv;\n\n\t#define DL 2.399963229728653 //PI *(3.0 - sqrt(5.0))\n\t#define EULER 2.718281828459045\n\n\t//user variables\n\tconst int samples = 64; //ao sample count\n\tconst bool useNoise = true; //use noise instead of pattern for sample dithering\n\tconst float noiseAmount = 0.0004; //dithering amount\n\tconst float diffArea = 0.4; //self-shadowing reduction\n\tconst float gDisplace = 0.4; //gauss bell center\n\n\t//RGBA depth\n\t#include <packing>\n\n\t//generating noise / pattern texture for dithering\n\tvec2 rand(const vec2 coord)\n\t{\n\t\tvec2 noise;\n\n\t\tif(useNoise)\n\t\t{\n\t\t\tfloat nx = dot(coord, vec2(12.9898, 78.233));\n\t\t\tfloat ny = dot(coord, vec2(12.9898, 78.233) * 2.0);\n\t\t\tnoise = clamp(fract(43758.5453 * sin(vec2(nx, ny))), 0.0, 1.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfloat ff = fract(1.0 - coord.s *(size.x / 2.0));\n\t\t\tfloat gg = fract(coord.t *(size.y / 2.0));\n\t\t\tnoise = vec2(0.25, 0.75) * vec2(ff) + vec2(0.75, 0.25) * gg;\n\t\t}\n\n\t\treturn(noise * 2.0  - 1.0) * noiseAmount;\n\t}\n\n\tfloat readDepth(const in vec2 coord) {\n\n\t\tfloat cameraFarPlusNear = cameraFar + cameraNear;\n\t\tfloat cameraFarMinusNear = cameraFar - cameraNear;\n\t\tfloat cameraCoef = 2.0 * cameraNear;\n\n\t\t#ifdef USE_LOGDEPTHBUF\n\t\t\tfloat logz = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t\tfloat w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\n\t\t\tfloat z = (logz / w) + 1.0;\n\t\t#else\n\t\t\tfloat z = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t#endif\n\n\t\treturn cameraCoef /(cameraFarPlusNear - z * cameraFarMinusNear);\n\t}\n\n\tfloat compareDepths(const in float depth1, const in float depth2, inout int far)\n\t{\n\t\tfloat garea = 8.0; //gauss bell width\n\t\tfloat diff =(depth1 - depth2) * 100.0; //depth difference (0-100)\n\n\t\t//reduce left bell width to avoid self-shadowing\n\t\tif(diff < gDisplace)\n\t\t{\n\t\t\tgarea = diffArea;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfar = 1;\n\t\t}\n\n\t\tfloat dd = diff - gDisplace;\n\t\tfloat gauss = pow(EULER, -2.0 *(dd * dd) /(garea * garea));\n\t\treturn gauss;\n\t}\n\n\tfloat calcAO(float depth, float dw, float dh)\n\t{\n\t\tvec2 vv = vec2(dw, dh);\n\t\tvec2 coord1 = vUv + radius * vv;\n\t\tvec2 coord2 = vUv - radius * vv;\n\n\t\tfloat temp1 = 0.0;\n\t\tfloat temp2 = 0.0;\n\n\t\tint far = 0;\n\t\ttemp1 = compareDepths(depth, readDepth(coord1), far);\n\n\t\t//DEPTH EXTRAPOLATION\n\t\tif(far > 0)\n\t\t{\n\t\t\ttemp2 = compareDepths(readDepth(coord2), depth, far);\n\t\t\ttemp1 +=(1.0 - temp1) * temp2;\n\t\t}\n\n\t\treturn temp1;\n\t}\n\n\tvoid main()\n\t{\n\t\tvec2 noise = rand(vUv);\n\t\tfloat depth = readDepth(vUv);\n\n\t\tfloat tt = clamp(depth, aoClamp, 1.0);\n\n\t\tfloat w =(1.0 / size.x) / tt +(noise.x *(1.0 - noise.x));\n\t\tfloat h =(1.0 / size.y) / tt +(noise.y *(1.0 - noise.y));\n\n\t\tfloat ao = 0.0;\n\n\t\tfloat dz = 1.0 / float(samples);\n\t\tfloat l = 0.0;\n\t\tfloat z = 1.0 - dz / 2.0;\n\n\t\tfor(int i = 0; i <= samples; i ++)\n\t\t{\n\t\t\tfloat r = sqrt(1.0 - z);\n\n\t\t\tfloat pw = cos(l) * r;\n\t\t\tfloat ph = sin(l) * r;\n\t\t\tao += calcAO(depth, pw * w, ph * h);\n\t\t\tz = z - dz;\n\t\t\tl = l + DL;\n\t\t}\n\n\t\tao /= float(samples);\n\t\tao = 1.0 - ao;\n\n\t\tvec3 color = texture2D(tDiffuse, vUv).rgb;\n\n\t\tvec3 lumcoeff = vec3(0.299, 0.587, 0.114);\n\t\tfloat lum = dot(color.rgb, lumcoeff);\n\t\tvec3 luminance = vec3(lum);\n\n\t\tvec3 final = vec3(color * mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); //mix(color * ao, white, luminance)\n\n\t\tif(onlyAO)\n\t\t{\n\t\t\tfinal = vec3(mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); //ambient occlusion only\n\t\t}\n\n\t\tgl_FragColor = vec4(final, 1.0);\n\t}"};
"use strict";
function Resource(a, c) {
  this.name = a;
  this.uuid = THREE.Math.generateUUID();
  this.type = c;
  this.encoding = this.format = "";
  this.data = null;
}
Resource.prototype.export = function(a) {
  "base64" === this.format ? FileSystem.writeFileBase64(a, this.data) : "arraybuffer" === this.format ? FileSystem.writeFileArrayBuffer(a, void 0 !== this.arraybuffer ? this.arraybuffer : this.data) : "string" === this.format ? FileSystem.writeFile(a, this.data) : "json" === this.format ? FileSystem.writeFile(a, JSON.stringify(this.data)) : "url" === this.format && FileSystem.writeFileArrayBuffer(a, FileSystem.readFileArrayBuffer(this.data));
};
Resource.prototype.toJSON = function(a) {
  a = {};
  a.name = this.name;
  a.uuid = this.uuid;
  a.type = this.type;
  return a;
};
"use strict";
function Font(a) {
  Resource.call(this, "font", "Font");
  this.reversed = !1;
  this.font = null;
  if (void 0 !== a) {
    if (a instanceof ArrayBuffer) {
      this.data = a, this.format = "arraybuffer", this.loadTTF();
    } else {
      if ("object" === typeof a) {
        this.font = this.data = a, this.encoding = this.format = "json";
      } else {
        if (this.encoding = FileSystem.getFileExtension(a), this.name = FileSystem.getFileName(a), "json" === this.encoding) {
          this.data = JSON.parse(FileSystem.readFile(a)), this.format = "json", this.font = this.data;
        } else {
          if ("ttf" === this.encoding || "otf" === this.encoding || "ttc" === this.encoding || "otc" === this.encoding) {
            this.data = FileSystem.readFileArrayBuffer(a), this.format = "arraybuffer", this.loadTTF();
          }
        }
      }
    }
  }
}
Font.prototype = Object.create(Resource.prototype);
Font.fileIsFont = function(a) {
  return void 0 !== a ? (a = a.name.toLocaleLowerCase(), a.endsWith("ttf") || a.endsWith("otf") || a.endsWith("ttc") || a.endsWith("otc") || a.endsWith("json")) : !1;
};
Font.prototype.isFont = !0;
Font.prototype.reverseGlyphs = function() {
  this.reversed = !this.reversed;
  this.loadTTF();
};
Font.prototype.loadTTF = function() {
  var a = new THREE.TTFLoader;
  a.reversed = this.reversed;
  this.font = a.parse(this.data);
};
Font.prototype.toJSON = function(a) {
  if (void 0 !== a.fonts[this.uuid]) {
    return a.fonts[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.reversed = this.reversed;
  "arraybuffer" === this.format ? (c.data = this.data, c.format = this.format) : "base64" === this.format ? (c.data = ArraybufferUtils.fromBase64(this.data), c.format = "arraybuffer") : (c.data = this.data, c.format = this.format);
  return a.fonts[this.uuid] = c;
};
Font.prototype.generateShapes = function(a, c, k) {
  void 0 === c && (c = 100);
  void 0 === k && (k = 10);
  var b = this.font;
  a = String(a).split("");
  var e = c / b.resolution, f = (b.boundingBox.yMax - b.boundingBox.yMin) * e, h = 0, r = 0;
  c = [];
  for (var q = 0; q < a.length; q++) {
    var n = a[q];
    if ("\n" === n) {
      r -= f, h = 0;
    } else {
      var m;
      var d = e;
      var l = h, v = r;
      if (n = b.glyphs[n] || b.glyphs["?"]) {
        var w = new THREE.ShapePath, x = [], z = THREE.ShapeUtils.b2, p = THREE.ShapeUtils.b3;
        if (n.o) {
          for (var u = n._cachedOutline || (n._cachedOutline = n.o.split(" ")), y = 0, A = u.length; y < A;) {
            var B = u[y++];
            if ("m" === B) {
              var D = u[y++] * d + l;
              var F = u[y++] * d + v;
              w.moveTo(D, F);
            }
            if ("l" === B) {
              D = u[y++] * d + l, F = u[y++] * d + v, w.lineTo(D, F);
            } else {
              if ("q" === B) {
                var C = u[y++] * d + l;
                var E = u[y++] * d + v;
                var H = u[y++] * d + l;
                B = u[y++] * d + v;
                w.quadraticCurveTo(H, B, C, E);
                if (m = x[x.length - 1]) {
                  var Q = m.x;
                  m = m.y;
                  for (var K = 1; K <= k; K++) {
                    var M = K / k;
                    z(M, Q, H, C);
                    z(M, m, B, E);
                  }
                }
              } else {
                if ("b" === B && (C = u[y++] * d + l, E = u[y++] * d + v, H = u[y++] * d + l, B = u[y++] * d + v, D = u[y++] * d + l, F = u[y++] * d + v, w.bezierCurveTo(H, B, D, F, C, E), m = x[x.length - 1])) {
                  for (Q = m.x, m = m.y, K = 1; K <= k; K++) {
                    M = K / k, p(M, Q, H, D, C), p(M, m, B, F, E);
                  }
                }
              }
            }
          }
        }
        d = {width:n.ha * d, path:w};
      } else {
        d = void 0;
      }
      h += d.width;
      c.push(d.path);
    }
  }
  k = [];
  for (b = 0; b < c.length; b++) {
    Array.prototype.push.apply(k, c[b].toShapes());
  }
  return k;
};
"use strict";
function Video(a, c) {
  Resource.call(this, "video", "Video");
  void 0 !== a && (a instanceof ArrayBuffer ? this.loadArrayBufferData(a, c) : Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : this.loadArrayBufferData(FileSystem.readFileArrayBuffer(a), FileSystem.getFileExtension(a)));
}
Video.prototype = Object.create(Resource.prototype);
Video.fileIsVideo = function(a) {
  return void 0 !== a && a.type.startsWith("video") ? !0 : !1;
};
Video.prototype.loadArrayBufferData = function(a, c) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"video/" + c});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = c;
  this.format = "arraybuffer";
};
Video.prototype.toJSON = function(a) {
  if (void 0 !== a.videos[this.uuid]) {
    return a.videos[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  "arraybuffer" === this.format ? (c.format = this.format, c.data = this.arraybuffer) : "base64" === this.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (c.format = this.format, c.data = this.data);
  return a.videos[this.uuid] = c;
};
"use strict";
function Audio(a, c) {
  Resource.call(this, "audio", "Audio");
  void 0 !== a && (a instanceof ArrayBuffer ? (this.data = a, this.encoding = void 0 !== c ? c : "") : Base64Utils.isBase64(a) ? (this.encoding = void 0 !== c ? c : "", this.data = ArraybufferUtils.fromBase64(a)) : (this.data = FileSystem.readFileArrayBuffer(a), this.encoding = FileSystem.getFileExtension(a)), this.format = "arraybuffer");
}
Audio.prototype = Object.create(Resource.prototype);
Audio.fileIsAudio = function(a) {
  return void 0 !== a && a.type.startsWith("audio") ? !0 : !1;
};
Audio.prototype.getAudioBuffer = function(a, c) {
  a.decodeAudioData(this.data.slice(0), c, function(a) {
    console.error("nunuStudio: Cannot decode audio buffer (" + a + ")");
  });
};
Audio.prototype.toJSON = function(a) {
  if (void 0 !== a.audio[this.uuid]) {
    return a.audio[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.data = this.data;
  c.format = this.format;
  return a.audio[this.uuid] = c;
};
"use strict";
function Image(a, c) {
  Resource.call(this, "image", "Image");
  this.height = this.width = -1;
  void 0 !== a ? a instanceof ArrayBuffer ? this.loadArrayBufferData(a, c) : (Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64") : (this.encoding = FileSystem.getFileExtension(a), this.format = "url"), this.data = a) : this.createSolidColor();
}
Image.prototype = Object.create(Resource.prototype);
Image.fileIsImage = function(a) {
  if (void 0 !== a) {
    if (a.type.startsWith("image")) {
      return !0;
    }
    a = a.name.toLocaleLowerCase();
    return a.endsWith("tga") || a.endsWith("dds") || a.endsWith("pvr") || a.endsWith("ktx") || a.endsWith("basis");
  }
  return !1;
};
Image.prototype.createSolidColor = function(a) {
  var c = document.createElement("canvas");
  c.width = 1;
  c.height = 1;
  var k = c.getContext("2d");
  k.fillStyle = void 0 !== a ? a : MathUtils.randomColor();
  k.fillRect(0, 0, 1, 1);
  this.data = c.toDataURL("image/png");
  this.format = "base64";
  this.encoding = "png";
};
Image.prototype.loadArrayBufferData = function(a, c) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"image/" + c});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = c;
  this.format = "arraybuffer";
};
Image.prototype.hasTransparency = function() {
  return "png" === this.encoding || "gif" === this.encoding;
};
Image.prototype.compressJPEG = function(a) {
  var c = document.createElement("img");
  c.src = this.data;
  var k = document.createElement("canvas");
  k.width = c.width;
  k.height = c.height;
  k.getContext("2d").drawImage(c, 0, 0, c.width, c.height);
  var b = this;
  k.toBlob(function(a) {
    var c = new FileReader;
    c.onload = function() {
      b.encoding = "jpeg";
      b.format = "arraybuffer";
      b.data = c.result;
    };
    c.readAsArrayBuffer(a);
  }, "image/jpeg", void 0 !== a ? a : .7);
};
Image.prototype.toJSON = function(a) {
  if (void 0 !== a.images[this.uuid]) {
    return a.images[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  "url" === this.format && this.loadArrayBufferData(FileSystem.readFileArrayBuffer(this.data), this.encoding);
  c.width = this.width;
  c.height = this.height;
  c.encoding = this.encoding;
  "arraybuffer" === this.format ? (c.format = this.format, c.data = this.arraybuffer) : "base64" === this.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (c.format = this.format, c.data = this.data);
  return a.images[this.uuid] = c;
};
"use strict";
function Model() {
  Resource.call(this, "model", "Model");
}
Model.prototype = Object.create(Resource.prototype);
Model.extensions = "gcode drc assimp assimp.json blend amf babylon prwm svg obj 3ds dae gltf glb 3mf awd ply vtk vtp wrl vrml fbx pcd stl json x".split(" ");
Model.fileIsModel = function(a) {
  if (void 0 !== a) {
    a = a.name.toLocaleLowerCase();
    for (var c = 0; c < Model.extensions.length; c++) {
      if (a.endsWith(Model.extensions[c])) {
        return !0;
      }
    }
  }
  return !1;
};
"use strict";
function TextFile(a, c) {
  Resource.call(this, "text", "TextFile");
  this.format = "string";
  this.encoding = void 0 !== c ? c : "txt";
  this.data = void 0 !== a ? a : "";
}
TextFile.prototype = Object.create(Resource.prototype);
TextFile.extensions = ".js .txt .glsl .json .xml .yaml .csv .css .html".split(" ");
TextFile.fileIsText = function(a) {
  a = a.name.toLocaleLowerCase();
  for (var c = 0; c < TextFile.extensions.length; c++) {
    if (a.endsWith(TextFile.extensions[c])) {
      return !0;
    }
  }
  return !1;
};
TextFile.prototype.toJSON = function(a) {
  if (void 0 !== a.resources[this.uuid]) {
    return a.resources[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.data = this.data;
  c.format = this.format;
  return a.resources[this.uuid] = c;
};
"use strict";
function ResourceManager() {
  THREE.Object3D.call(this);
  ResourceManager.ResourceContainer.call(this);
}
ResourceManager.ResourceContainer = function() {
  this.images = [];
  this.videos = [];
  this.audio = [];
  this.fonts = [];
  this.materials = [];
  this.textures = [];
  this.geometries = [];
  this.resources = [];
  this.shapes = [];
  this.skeletons = [];
};
ResourceManager.prototype = Object.create(THREE.Object3D.prototype);
ResourceManager.prototype.dispose = function() {
  for (var a in this.geometries) {
    this.geometries[a].dispose();
  }
  for (a in this.textures) {
    this.textures[a].dispose();
  }
  for (a in this.materials) {
    this.materials[a].dispose();
  }
};
ResourceManager.prototype.removeGeometry = function(a, c) {
  this.traverse(function(k) {
    void 0 !== k.geometry && k.geometry.uuid === a.uuid && (k.geometry = c);
  });
  delete this.geometries[a.uuid];
};
ResourceManager.prototype.getResourceByName = function(a) {
  for (var c in this.resources) {
    if (this.resources[c].name === a) {
      return this.resources[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addResource = function(a) {
  a instanceof Resource && (this.resources[a.uuid] = a);
};
ResourceManager.prototype.removeResource = function(a) {
  delete this.resources[a.uuid];
};
ResourceManager.prototype.getImageByName = function(a) {
  for (var c in this.images) {
    if (this.images[c].name === a) {
      return this.images[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeImage = function(a) {
  a instanceof Image && delete this.images[a.uuid];
};
ResourceManager.prototype.getVideoByName = function(a) {
  for (var c in this.videos) {
    if (this.videos[c].name === a) {
      return this.videos[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeVideo = function(a) {
  a instanceof Video && delete this.videos[a.uuid];
};
ResourceManager.prototype.getMaterialByName = function(a) {
  for (var c in this.materials) {
    if (this.materials[c].name === a) {
      return this.materials[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addMaterial = function(a) {
  a instanceof THREE.Material && (this.materials[a.uuid] = a);
};
ResourceManager.prototype.removeMaterial = function(a, c, k) {
  void 0 === c && (c = new THREE.MeshBasicMaterial);
  void 0 === k && (k = new THREE.SpriteMaterial);
  a instanceof THREE.Material && (delete this.materials[a.uuid], this.traverse(function(b) {
    void 0 !== b.material && b.material.uuid === a.uuid && (b.material = b instanceof THREE.Sprite ? k : c);
  }));
};
ResourceManager.prototype.getTextureByName = function(a) {
  for (var c in this.textures) {
    if (this.textures[c].name === a) {
      return this.textures[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addTexture = function(a) {
  material instanceof THREE.Texture && (this.textures[a.uuid] = a);
};
ResourceManager.prototype.removeTexture = function(a, c) {
  void 0 === c && (c = new THREE.Texture);
  a instanceof THREE.Texture && (delete this.textures[a.uuid], this.traverse(function(k) {
    void 0 !== k.material ? (k = k.material, null != k.map && k.map.uuid === a.uuid && (k.map = c, k.needsUpdate = !0), null != k.bumpMap && k.bumpMap.uuid === a.uuid && (k.bumpMap = c, k.needsUpdate = !0), null != k.normalMap && k.normalMap.uuid === a.uuid && (k.normalMap = c, k.needsUpdate = !0), null != k.displacementMap && k.displacementMap.uuid === a.uuid && (k.displacementMap = c, k.needsUpdate = !0), null != k.specularMap && k.specularMap.uuid === a.uuid && (k.specularMap = c, k.needsUpdate = 
    !0), null != k.emissiveMap && k.emissiveMap.uuid === a.uuid && (k.emissiveMap = c, k.needsUpdate = !0), null != k.alphaMap && k.alphaMap.uuid === a.uuid && (k.alphaMap = c, k.needsUpdate = !0), null != k.roughnessMap && k.roughnessMap.uuid === a.uuid && (k.roughnessMap = c, k.needsUpdate = !0), null != k.metalnessMap && k.metalnessMap.uuid === a.uuid && (k.metalnessMap = c, k.needsUpdate = !0), null != k.envMap && k.envMap.uuid === a.uuid && (k.envMap = null, k.needsUpdate = !0)) : k instanceof 
    ParticleEmitter && k.group.texture.uuid === a.uuid && (k.group.texture = c);
  }));
};
ResourceManager.prototype.getFontByName = function(a) {
  for (var c in this.fonts) {
    if (this.fonts[c].name === a) {
      return this.fonts[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addFont = function(a) {
  a instanceof Font && (this.fonts[a.uuid] = a);
};
ResourceManager.prototype.removeFont = function(a, c) {
  void 0 === c && (c = new Font);
  a instanceof Font && (delete this.fonts[a.uuid], this.traverse(function(k) {
    void 0 !== k.font && k.font.uuid === a.uuid && k.setFont(c);
  }));
};
ResourceManager.prototype.getAudioByName = function(a) {
  for (var c in this.audio) {
    if (this.audio[c].name === a) {
      return this.audio[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addAudio = function(a) {
  a instanceof Audio && (this.audio[a.uuid] = a);
};
ResourceManager.prototype.removeAudio = function(a, c) {
  void 0 === c && (c = new Audio);
  a instanceof Audio && (delete this.audio[a.uuid], this.traverse(function(k) {
    void 0 !== k.audio && k.audio.uuid === a.uuid && k.setAudio(c);
  }));
};
"use strict";
function VideoStream(a) {
  Video.call(this);
  this.format = "url";
  this.encoding = FileSystem.getFileExtension(a);
  this.data = a;
}
VideoStream.prototype = Object.create(Video.prototype);
"use strict";
function Texture(a, c, k, b, e, f, h, r, q, n) {
  this.img = "string" === typeof a ? new Image(a) : void 0 === a ? new Image : a;
  THREE.Texture.call(this, document.createElement("img"), c, k, b, e, f, h, r, q, n);
  var m = this;
  this.name = "texture";
  this.category = "Image";
  this.disposed = !1;
  this.format = this.img.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.image.crossOrigin = "anonymous";
  this.image.src = this.img.data;
  this.image.onload = function() {
    m.needsUpdate = !0;
  };
  this.image.onerror = function() {
    console.log("nunuStudio: Failed to load image " + m.img.uuid + " data.");
    m.img.createSolidColor();
    m.image.src = m.img.data;
    m.needsUpdate = !0;
  };
  if ("gif" === this.img.encoding) {
    var d = function() {
      m.disposed || (m.needsUpdate = !0, requestAnimationFrame(d));
    };
    this.generateMipmaps = !1;
    this.minFilter = this.magFilter = THREE.LinearFilter;
    d();
  }
}
Texture.prototype = Object.create(THREE.Texture.prototype);
Texture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
Texture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.img.toJSON(a);
  c.image = a.uuid;
  return c;
};
"use strict";
function CanvasTexture(a, c, k, b, e, f, h, r, q, n, m) {
  THREE.Texture.call(this, document.createElement("canvas"), k, b, e, f, h, r, q, n, m);
  this.name = "canvas";
  this.category = "Canvas";
  this.format = THREE.RGBAFormat;
  Object.defineProperties(this, {width:{get:function() {
    return this.image.width;
  }, set:function(a) {
    this.image.width = a;
  }}, height:{get:function() {
    return this.image.height;
  }, set:function(a) {
    this.image.height = a;
  }}});
  this.width = void 0 !== a ? a : 1;
  this.height = void 0 !== c ? c : 1;
  this.context = this.image.getContext("2d");
}
CanvasTexture.prototype = Object.create(THREE.Texture.prototype);
CanvasTexture.prototype.isCanvasTexture = !0;
CanvasTexture.prototype.placeholder = function() {
  this.context.fillStyle = "#000000";
  this.context.fillRect(0, 0, this.width, this.height);
  this.context.font = "Normal " + Math.round(this.width / 12) + "px Arial";
  this.context.textAlign = "center";
  this.context.fillStyle = "#FF0000";
  this.context.fillText("Canvas Texture", this.width / 2, this.height / 2);
  this.needsUpdate = !0;
};
CanvasTexture.prototype.clear = function(a) {
  void 0 === a ? this.context.clearRect(0, 0, width, height) : (this.context.fillStyle = a, this.context.fillRect(0, 0, this.width, this.height));
};
CanvasTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.width = this.width;
  a.height = this.height;
  return a;
};
"use strict";
function VideoTexture(a, c, k, b, e, f) {
  function h() {
    r.disposed || (r.image.readyState >= r.image.HAVE_CURRENT_DATA && (r.needsUpdate = !0), requestAnimationFrame(h));
  }
  THREE.Texture.call(this, document.createElement("video"), c, k, b, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, e, f);
  this.generateMipmaps = this.disposed = !1;
  this.name = "video";
  this.category = "Video";
  this.loop = this.autoplay = !0;
  this.volume = this.playbackRate = 1;
  this.image.crossOrigin = "anonymous";
  this.image.autoplay = this.autoplay;
  this.image.playbackRate = this.playbackRate;
  this.image.loop = this.loop;
  this.image.volume = this.volume;
  this.video = null;
  this.setVideo(a);
  var r = this;
  h();
}
VideoTexture.prototype = Object.create(THREE.Texture.prototype);
VideoTexture.prototype.setVideo = function(a) {
  null === a || void 0 === a ? (this.video = null, this.image.src = null) : ("string" === typeof a ? this.video = new Video(a) : a instanceof Video && (this.video = a), this.image.src = this.video.data);
};
VideoTexture.prototype.setTime = function(a) {
  this.image.currentTime = a;
};
VideoTexture.prototype.setLoop = function(a) {
  this.loop = a;
  this.image.loop = a;
};
VideoTexture.prototype.setVolume = function(a) {
  this.volume = 0 <= a && 1 >= a ? a : 0 <= a ? 1 : 0;
  this.image.volume = this.volume;
};
VideoTexture.prototype.setAutoPlay = function(a) {
  this.autoplay = a;
  this.image.autoplay = this.autoplay;
};
VideoTexture.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.image.playbackRate = a;
};
VideoTexture.prototype.pause = function() {
  this.image.paused || this.image.pause();
};
VideoTexture.prototype.play = function() {
  this.image.paused && this.image.play();
};
VideoTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
  this.image.pause();
  this.image.src = "";
  this.image.load();
};
VideoTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.video.toJSON(a);
  c.video = a.uuid;
  c.loop = this.loop;
  c.autoplay = this.autoplay;
  c.playbackRate = this.playbackRate;
  c.volume = this.volume;
  return c;
};
"use strict";
function WebcamTexture(a, c, k, b, e) {
  function f() {
    h.readyState >= h.HAVE_CURRENT_DATA && (r.needsUpdate = !0);
    r.disposed || requestAnimationFrame(f);
  }
  var h = document.createElement("video");
  h.autoplay = !0;
  h.loop = !0;
  THREE.Texture.call(this, h, a, c, k, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, b, e);
  var r = this;
  this.disposed = this.generateMipmaps = !1;
  this.name = "webcam";
  this.category = "Webcam";
  this.mode = WebcamTexture.USER;
  this.stream = null;
  this.connect();
  requestAnimationFrame(f);
}
WebcamTexture.USER = 21;
WebcamTexture.ENVIRONMENT = 22;
WebcamTexture.prototype = Object.create(THREE.Texture.prototype);
WebcamTexture.prototype.connect = function() {
  var a = {facingMode:this.mode === WebcamTexture.USER ? "user" : {exact:"environment"}}, c = this;
  void 0 !== navigator.webkitGetUserMedia && (navigator.getUserMedia = navigator.webkitGetUserMedia);
  navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices.getUserMedia({video:a}).then(function(a) {
    c.stream = a;
    c.image.srcObject = a;
    c.image.play();
  }).catch(function(a) {
    console.warn("nunuStudio: No webcam available");
  }) : navigator.getUserMedia && navigator.getUserMedia({video:!0}, function(a) {
    c.stream = a;
    c.image.src = URL.createObjectURL(a);
  }, function(a) {
    console.warn("nunuStudio: No webcam available");
  });
};
WebcamTexture.prototype.disconnect = function() {
  if (null !== this.stream) {
    for (var a = this.stream.getTracks(), c = 0; c < a.length; c++) {
      a[c].stop();
    }
  }
};
WebcamTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disconnect();
  this.disposed = !0;
  this.image.paused || this.image.pause();
};
WebcamTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.mode = this.mode;
  return a;
};
"use strict";
function CubeTexture(a, c, k, b, e, f, h, r, q, n) {
  void 0 === c && (c = THREE.CubeReflectionMapping);
  for (var m = [], d = 0; 6 > d; d++) {
    m.push(document.createElement("canvas"));
  }
  THREE.Texture.call(this, m, c, k, b, e, f, h, r, q, n);
  this.images = void 0 !== a ? a : [];
  this.size = 512;
  this.flipY = !1;
  this.mode = 6 === this.images.length ? CubeTexture.CUBE : CubeTexture.CROSS;
  0 < this.images.length && this.updateImages();
  this.name = "cubetexture";
  this.category = "Cube";
}
CubeTexture.prototype = Object.create(THREE.Texture.prototype);
CubeTexture.prototype.isCubeTexture = !0;
CubeTexture.RIGHT = 0;
CubeTexture.LEFT = 1;
CubeTexture.TOP = 2;
CubeTexture.BOTTOM = 3;
CubeTexture.FRONT = 4;
CubeTexture.BACK = 5;
CubeTexture.CUBE = 20;
CubeTexture.CROSS = 21;
CubeTexture.EQUIRECTANGULAR = 22;
CubeTexture.prototype.setSize = function(a) {
  0 !== (a & a - 1) ? console.warn("nunuStudio: CubeTexture new size is not a power of two.") : this.size = a;
};
CubeTexture.prototype.setImages = function(a, c) {
  this.mode = void 0 !== c ? c : CubeTexture.CUBE;
  this.images = a;
};
CubeTexture.prototype.updateImages = function() {
  var a = this;
  if (this.mode === CubeTexture.CUBE) {
    for (var c = 0; c < this.images.length; c++) {
      "string" === typeof this.images[c] && (this.images[c] = new Image(this.images[c]));
      var k = document.createElement("img");
      k.crossOrigin = "anonymous";
      k.index = c;
      k.src = this.images[c].data;
      k.onload = function() {
        a.image[this.index].width = a.size;
        a.image[this.index].height = a.size;
        a.image[this.index].getContext("2d").drawImage(this, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    }
  } else {
    if (this.mode === CubeTexture.CROSS) {
      for (c = 0; c < this.image.length; c++) {
        this.image[c].width = this.size, this.image[c].height = this.size;
      }
      k = document.createElement("img");
      k.src = this.images[0].data;
      k.onload = function() {
        var b = this.naturalWidth / 4, c = this.naturalHeight / 3;
        a.image[CubeTexture.LEFT].getContext("2d").drawImage(this, 0, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.FRONT].getContext("2d").drawImage(this, b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.RIGHT].getContext("2d").drawImage(this, 2 * b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.BACK].getContext("2d").drawImage(this, 3 * b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.TOP].getContext("2d").drawImage(this, b, 0, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.BOTTOM].getContext("2d").drawImage(this, b, 2 * c, b, c, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    } else {
      if (this.mode === CubeTexture.EQUIRECTANGULAR) {
        for (c = 0; c < this.image.length; c++) {
          this.image[c].width = this.size, this.image[c].height = this.size;
        }
        k = document.createElement("img");
        k.src = this.images[0].data;
        k.onload = function() {
          var b = document.createElement("canvas");
          b.width = k.naturalWidth;
          b.height = k.naturalHeight;
          var c = b.getContext("2d");
          c.drawImage(k, 0, 0);
          b = c.getImageData(0, 0, b.width, b.height);
          for (c = 0; 6 > c; c++) {
            var f = CubeTexture.renderEquirectFace(b, c, Math.PI, a.size);
            a.image[c].getContext("2d").putImageData(f, 0, 0);
          }
          a.needsUpdate = !0;
        };
      }
    }
  }
};
CubeTexture.resampleBilinear = function(a, c, k, b, e) {
  var f = a.width, h = a.height;
  a = a.data;
  var r = THREE.Math.clamp(Math.floor(k), 0, f - 1), q = THREE.Math.clamp(Math.ceil(k), 0, f - 1);
  k -= r;
  var n = THREE.Math.clamp(Math.floor(b), 0, h - 1), m = THREE.Math.clamp(Math.ceil(b), 0, h - 1);
  b -= n;
  h = 4 * (n * f + r);
  n = 4 * (n * f + q);
  r = 4 * (m * f + r);
  f = 4 * (m * f + q);
  for (q = 0; 3 > q; q++) {
    c.data[e + q] = Math.ceil((a[h + q] * (1 - k) + a[n + q] * k) * (1 - b) + (a[r + q] * (1 - k) + a[f + q] * k) * b);
  }
};
CubeTexture.renderEquirectFace = function(a, c, k, b) {
  var e = new ImageData(b, b);
  c = CubeTexture.faces[c];
  for (var f = 0; f < b; f++) {
    for (var h = 0; h < b; h++) {
      var r = 4 * (h * b + f);
      e.data[r + 3] = 255;
      var q = c(2 * (f + .5) / b - 1, 2 * (h + .5) / b - 1), n = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z), m = THREE.Math.euclideanModulo(Math.atan2(q.y, q.x) + k, 2 * Math.PI);
      CubeTexture.resampleBilinear(a, e, a.width * m / Math.PI / 2 - .5, a.height * Math.acos(q.z / n) / Math.PI - .5, r);
    }
  }
  return e;
};
CubeTexture.faces = [function(a, c) {
  return new THREE.Vector3(a, -1, -c);
}, function(a, c) {
  return new THREE.Vector3(-a, 1, -c);
}, function(a, c) {
  return new THREE.Vector3(-c, -a, 1);
}, function(a, c) {
  return new THREE.Vector3(c, -a, -1);
}, function(a, c) {
  return new THREE.Vector3(-1, -a, -c);
}, function(a, c) {
  return new THREE.Vector3(1, a, -c);
}];
CubeTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  c.size = this.size;
  c.mode = this.mode;
  c.images = [];
  if (this.mode === CubeTexture.EQUIRECTANGULAR || this.mode === CubeTexture.CROSS) {
    var k = this.images[0].toJSON(a);
    c.images.push(k.uuid);
  } else {
    for (var b = 0; b < this.images.length; b++) {
      k = this.images[b].toJSON(a), c.images.push(k.uuid);
    }
  }
  return c;
};
"use strict";
function CompressedTexture(a, c, k, b, e, f, h, r, q, n, m, d) {
  THREE.Texture.call(this, null, f, h, r, q, n, b, e, m, d);
  this.category = "Compressed";
  this.image = {width:c, height:k};
  this.mipmaps = a;
  this.generateMipmaps = this.flipY = this.isCubeTexture = !1;
}
CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.isCompressedTexture = !0;
CompressedTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  if (a.isCubeTexture = this.isCubeTexture) {
    a.image = [];
    for (var c = 0; c < this.image.length; c++) {
      for (var k = {mipmaps:[], format:this.image[c].format, width:this.image[c].width, height:this.image[c].height}, b = 0; b < this.image[c].mipmaps.length; b++) {
        k.mipmaps.push({width:this.image[c].mipmaps[b].width, height:this.image[c].mipmaps[b].height, data:this.image[c].mipmaps[b].data});
      }
      a.image.push(k);
    }
  } else {
    for (a.mipmaps = [], a.width = this.image.width, a.height = this.image.height, b = 0; b < this.mipmaps.length; b++) {
      a.mipmaps.push({width:this.mipmaps[b].width, height:this.mipmaps[b].height, data:this.mipmaps[b].data});
    }
  }
  return a;
};
"use strict";
function SpriteSheetTexture(a, c, k, b, e, f, h) {
  function r() {
    q.currentFrame++;
    q.currentFrame >= q._endFrame && (q.currentFrame = q._beginFrame);
    q.offset.x = q.currentFrame % q.framesHorizontal / q.framesHorizontal;
    q.offset.y = 1 - q.repeat.y - Math.floor(q.currentFrame / q.framesHorizontal) / q.framesVertical;
    q.disposed || setTimeout(r, 1E3 * q.animationSpeed);
  }
  "string" === typeof a ? this.img = new Image(a) : a instanceof Image && (this.img = a);
  THREE.Texture.call(this, document.createElement("img"), e, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, f, h);
  this.name = "animation";
  this.category = "SpriteSheet";
  this.disposed = !1;
  this.format = this.img.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.repeat.set(1 / c, 1 / k);
  this.loop = !0;
  this.animationSpeed = .1;
  this._totalFrames = b;
  this._endFrame = this._beginFrame = 0;
  this._framesHorizontal = c;
  this._framesVertical = k;
  var q = this;
  Object.defineProperties(this, {framesHorizontal:{get:function() {
    return q._framesHorizontal;
  }, set:function(a) {
    q._framesHorizontal = a;
    q.repeat.x = 1 / a;
    q.totalFrames = q._framesHorizontal * q._framesVertical;
  }}, framesVertical:{get:function() {
    return q._framesVertical;
  }, set:function(a) {
    q._framesVertical = a;
    q.repeat.y = 1 / a;
    q.totalFrames = q._framesHorizontal * q._framesVertical;
  }}, endFrame:{get:function() {
    return q._endFrame;
  }, set:function(a) {
    a > q._totalFrames && (a = q._totalFrames);
    q._endFrame = a;
  }}, beginFrame:{get:function() {
    return q._beginFrame;
  }, set:function(a) {
    0 > a && (a = 0);
    q.currentFrame = a;
    q._beginFrame = a;
  }}, totalFrames:{get:function() {
    return q._totalFrames;
  }, set:function(a) {
    q._beginFrame = 0;
    q._endFrame = a;
    q._totalFrames = a;
  }}});
  this.image.crossOrigin = "anonymous";
  this.image.src = this.img.data;
  this.image.onload = function() {
    q.needsUpdate = !0;
  };
  this.currentFrame = 0;
  r();
}
SpriteSheetTexture.prototype = Object.create(THREE.Texture.prototype);
SpriteSheetTexture.prototype.setAnimationSpeed = function(a) {
  this.animationSpeed = a;
};
SpriteSheetTexture.prototype.setFrameGrid = function(a, c) {
  this._framesHorizontal = a;
  this._framesVertical = c;
  this._totalFrames = a * c;
  this.repeat.set(1 / a, 1 / c);
};
SpriteSheetTexture.prototype.setAnimationFrames = function(a, c) {
  this.beginFrame = a;
  this.endFrame = c;
};
SpriteSheetTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
SpriteSheetTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.img.toJSON(a);
  c.image = a.uuid;
  c.loop = this.loop;
  c.animationSpeed = this.animationSpeed;
  c.framesHorizontal = this._framesHorizontal;
  c.framesVertical = this._framesVertical;
  c.totalFrames = this._totalFrames;
  c.beginFrame = this._beginFrame;
  c.endFrame = this._endFrame;
  return c;
};
"use strict";
function FontLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
FontLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(new Font(JSON.parse(a)));
  }, k, b);
};
FontLoader.prototype.parse = function(a) {
  if (void 0 !== a.data) {
    var c = new Font;
    c.name = a.name;
    c.uuid = a.uuid;
    c.encoding = a.encoding;
    void 0 !== a.reversed && (c.reversed = a.reversed);
    "arraybuffer" === a.format ? (c.format = a.format, c.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, c.loadTTF()) : "base64" === a.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(a.data), c.loadTTF()) : (c.format = a.format, c.data = a.data, c.font = a.data);
    return c;
  }
  return new Font(a);
};
"use strict";
function ImageLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "Anonymous";
}
ImageLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
ImageLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
ImageLoader.prototype.loadJSON = function(a, c, k, b) {
  var e = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(e.parse(JSON.parse(a)));
  }, k, b);
};
ImageLoader.prototype.parse = function(a) {
  var c = new Image(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  c.name = a.name;
  c.uuid = a.uuid;
  void 0 !== a.width && (c.width = a.width, c.height = a.height);
  return c;
};
"use strict";
function VideoLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
VideoLoader.prototype.load = function(a, c, k, b) {
  var e = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(e.parse(JSON.parse(a)));
  }, k, b);
};
VideoLoader.prototype.parse = function(a) {
  var c = new Video(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  c.name = a.name;
  c.uuid = a.uuid;
  return c;
};
"use strict";
function AudioLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
AudioLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(self.parse(JSON.parse(a)));
  }, k, b);
};
AudioLoader.prototype.parse = function(a) {
  var c = new Audio;
  c.name = a.name;
  c.uuid = a.uuid;
  c.encoding = a.encoding;
  "base64" === a.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(a.data)) : "arraybuffer" === a.format ? (c.format = a.format, c.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data) : (c.format = a.format, c.data = a.data);
  return c;
};
"use strict";
function MaterialLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.textures = {};
}
MaterialLoader.prototype.load = function(a, c, k, b) {
  var e = this;
  (new FileLoader(e.manager)).load(a, function(a) {
    c(e.parse(JSON.parse(a)));
  }, k, b);
};
MaterialLoader.prototype.setTextures = function(a) {
  this.textures = a;
};
MaterialLoader.prototype.parse = function(a) {
  function c(a) {
    void 0 === k[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
    return k[a];
  }
  var k = this.textures, b = new window[a.type];
  void 0 !== a.uuid && (b.uuid = a.uuid);
  void 0 !== a.name && (b.name = a.name);
  b.toneMapped = !1 !== a.toneMapped;
  void 0 !== a.color && (void 0 === b.color && (b.color = new THREE.Color), b.color.setHex(a.color));
  void 0 !== a.roughness && (b.roughness = a.roughness);
  void 0 !== a.metalness && (b.metalness = a.metalness);
  void 0 !== a.specular && (void 0 === b.specular && (b.specular = new THREE.Color), b.specular.setHex(a.specular));
  void 0 !== a.shininess && (b.shininess = a.shininess);
  void 0 !== a.clearcoat && (b.clearcoat = a.clearcoat);
  void 0 !== a.clearcoatRoughness && (b.clearcoatRoughness = a.clearcoatRoughness);
  void 0 !== a.transparency && (b.transparency = a.transparency);
  void 0 !== a.clearcoatNormalMap && (b.clearcoatNormalMap = c(a.clearcoatNormalMap));
  void 0 !== a.clearcoatNormalScale && (b.clearcoatNormalScale = (new Vector2).fromArray(a.clearcoatNormalScale));
  void 0 !== a.uniforms && (b.uniforms = a.uniforms);
  void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);
  void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);
  void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);
  void 0 !== a.fog && (b.fog = a.fog);
  void 0 !== a.blending && (b.blending = a.blending);
  void 0 !== a.side && (b.side = a.side);
  void 0 !== a.shading && (b.flatShading = 1 === a.shading);
  void 0 !== a.flatShading && (b.flatShading = a.flatShading);
  void 0 !== a.rotation && (b.rotation = a.rotation);
  void 0 !== a.linewidth && (b.linewidth = a.linewidth);
  void 0 !== a.dashSize && (b.dashSize = a.dashSize);
  void 0 !== a.gapSize && (b.gapSize = a.gapSize);
  void 0 !== a.scale && (b.scale = a.scale);
  void 0 !== a.opacity && (b.opacity = a.opacity);
  void 0 !== a.transparent && (b.transparent = a.transparent);
  void 0 !== a.alphaTest && (b.alphaTest = a.alphaTest);
  void 0 !== a.depthTest && (b.depthTest = a.depthTest);
  void 0 !== a.depthWrite && (b.depthWrite = a.depthWrite);
  void 0 !== a.colorWrite && (b.colorWrite = a.colorWrite);
  void 0 !== a.wireframe && (b.wireframe = a.wireframe);
  void 0 !== a.wireframeLinewidth && (b.wireframeLinewidth = a.wireframeLinewidth);
  void 0 !== a.wireframeLinecap && (b.wireframeLinecap = a.wireframeLinecap);
  void 0 !== a.wireframeLinejoin && (b.wireframeLinejoin = a.wireframeLinejoin);
  void 0 !== a.morphTargets && (b.morphTargets = a.morphTargets);
  void 0 !== a.morphNormals && (b.morphNormals = a.morphNormals);
  void 0 !== a.dithering && (b.dithering = a.dithering);
  void 0 !== a.visible && (b.visible = a.visible);
  void 0 !== a.userData && (b.userData = a.userData);
  void 0 !== a.skinning && (b.skinning = a.skinning);
  void 0 !== a.size && (b.size = a.size);
  void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);
  void 0 !== a.map && (b.map = c(a.map));
  void 0 !== a.alphaMap && (b.alphaMap = c(a.alphaMap), b.transparent = !0);
  void 0 !== a.bumpMap && (b.bumpMap = c(a.bumpMap));
  void 0 !== a.bumpScale && (b.bumpScale = a.bumpScale);
  void 0 !== a.normalMap && (b.normalMap = c(a.normalMap));
  if (void 0 !== a.normalScale) {
    var e = a.normalScale;
    !1 === Array.isArray(e) && (e = [e, e]);
    b.normalScale = (new Vector2).fromArray(e);
  }
  void 0 !== a.displacementMap && (b.displacementMap = c(a.displacementMap));
  void 0 !== a.displacementScale && (b.displacementScale = a.displacementScale);
  void 0 !== a.displacementBias && (b.displacementBias = a.displacementBias);
  void 0 !== a.roughnessMap && (b.roughnessMap = c(a.roughnessMap));
  void 0 !== a.metalnessMap && (b.metalnessMap = c(a.metalnessMap));
  void 0 !== a.emissiveMap && (b.emissiveMap = c(a.emissiveMap));
  void 0 !== a.emissive && (void 0 === b.emissive && (b.emissive = new THREE.Color), b.emissive.setHex(a.emissive));
  void 0 !== a.emissiveIntensity && (b.emissiveIntensity = a.emissiveIntensity);
  void 0 !== a.matcap && (b.matcap = c(a.matcap));
  void 0 !== a.specularMap && (b.specularMap = c(a.specularMap));
  void 0 !== a.envMap && (b.envMap = c(a.envMap));
  void 0 !== a.reflectivity && (b.reflectivity = a.reflectivity);
  void 0 !== a.envMapIntensity && (b.envMapIntensity = a.envMapIntensity);
  void 0 !== a.combine && (b.combine = a.combine);
  void 0 !== a.refractionRatio && (b.refractionRatio = a.refractionRatio);
  void 0 !== a.lightMap && (b.lightMap = c(a.lightMap));
  void 0 !== a.lightMapIntensity && (b.lightMapIntensity = a.lightMapIntensity);
  void 0 !== a.aoMap && (b.aoMap = c(a.aoMap));
  void 0 !== a.aoMapIntensity && (b.aoMapIntensity = a.aoMapIntensity);
  void 0 !== a.gradientMap && (b.gradientMap = c(a.gradientMap));
  if (void 0 !== a.materials) {
    e = 0;
    for (var f = a.materials.length; e < f; e++) {
      b.materials.push(this.parse(a.materials[e]));
    }
  }
  return b;
};
"use strict";
function TextureLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "Anonymous";
  this.images = [];
  this.videos = [];
  this.fonts = [];
}
THREE._TextureLoader = THREE.TextureLoader;
THREE.TextureLoader = TextureLoader;
TextureLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
TextureLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
TextureLoader.prototype.setImages = function(a) {
  this.images = a;
  return this;
};
TextureLoader.prototype.setVideos = function(a) {
  this.videos = a;
  return this;
};
TextureLoader.prototype.setFonts = function(a) {
  this.fonts = a;
  return this;
};
TextureLoader.prototype.load = function(a, c, k, b) {
  try {
    var e = new Texture(this.path + a);
    void 0 !== c && c(e);
    return e;
  } catch (f) {
    return void 0 !== b && b(f), console.warn("nunuStudio: Texture not found", f), new Texture;
  }
};
TextureLoader.prototype.loadJSON = function(a, c, k, b) {
  var e = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    e.parse(JSON.parse(a), c);
  }, k, b);
};
TextureLoader.prototype.parse = function(a, c) {
  var k = a.category;
  if ("Video" === k) {
    void 0 === a.video && console.warn("TextureLoader: No video specified for", a.uuid), void 0 === this.videos[a.video] && console.warn("TextureLoader: Undefined video", a.video), k = new VideoTexture(this.videos[a.video]), k.setLoop(a.loop), k.setAutoPlay(a.autoplay), k.setPlaybackRate(a.playbackRate), k.setVolume(a.volume);
  } else {
    if ("Webcam" === k) {
      k = new WebcamTexture, void 0 !== a.mode && (k.mode = a.mode);
    } else {
      if ("Compressed" === k) {
        if (a.isCubeTexture) {
          k = new CompressedTexture;
          k.image = [];
          k.isCubeTexture = !0;
          for (var b = 0; b < a.image.length; b++) {
            for (var e = 0; e < a.image[b].mipmaps.length; e++) {
              void 0 !== a.image[b].mipmaps[e].data.toArrayBuffer && (a.image[b].mipmaps[e].data = new Uint8Array(a.image[b].mipmaps[e].data.toArrayBuffer()));
            }
            k.image.push(a.image[b]);
          }
        } else {
          for (e = 0; e < a.mipmaps.length; e++) {
            void 0 !== a.mipmaps[e].data.toArrayBuffer && (a.mipmaps[e].data = new Uint8Array(a.mipmaps[e].data.toArrayBuffer()));
          }
          k = new CompressedTexture(a.mipmaps, a.width, a.height);
        }
      } else {
        if ("Cube" === k) {
          b = [];
          for (e = 0; e < a.images.length; e++) {
            void 0 === this.images[a.images[e]] && console.warn("nunuStudio: TextureLoader, undefined image", a.images[e]), b.push(this.images[a.images[e]]);
          }
          k = new CubeTexture;
          k.setImages(b, a.mode);
          k.setSize(a.size);
          k.updateImages();
        } else {
          "Canvas" === k ? k = new CanvasTexture(a.width, a.height) : (void 0 === a.image && console.warn("nunuStudio: TextureLoader, no image specified for", a.uuid), void 0 === this.images[a.image] && console.warn("nunuStudio: TextureLoader, undefined image", a.image), "SpriteSheet" === k ? (k = new SpriteSheetTexture(this.images[a.image], a.framesHorizontal, a.framesVertical, a.totalFrames), k.loop = a.loop, k.animationSpeed = a.animationSpeed, k.beginFrame = a.beginFrame, k.endFrame = a.endFrame) : 
          k = new Texture(this.images[a.image]));
        }
      }
    }
  }
  k.needsUpdate = !0;
  k.uuid = a.uuid;
  k.name = a.name;
  k.mapping = a.mapping;
  k.offset.set(a.offset[0], a.offset[1]);
  k.repeat.set(a.repeat[0], a.repeat[1]);
  void 0 !== a.center && k.center.set(a.center[0], a.center[1]);
  void 0 !== a.rotation && (k.rotation = a.rotation);
  void 0 !== a.format && (k.format = a.format);
  k.wrapS = a.wrap[0];
  k.wrapT = a.wrap[1];
  k.minFilter = a.minFilter;
  k.magFilter = a.magFilter;
  k.anisotropy = a.anisotropy;
  k.flipY = a.flipY;
  void 0 !== c && c(k);
  return k;
};
"use strict";
function GeometryLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.geometryLoader = new LegacyGeometryLoader;
  this.bufferGeometryLoader = new THREE.BufferGeometryLoader;
  this.shapes = {};
}
GeometryLoader.prototype.setShapes = function(a) {
  this.shapes = a;
  return this;
};
GeometryLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(self.parse(JSON.parse(a)));
  }, k, b);
};
GeometryLoader.prototype.parse = function(a) {
  switch(a.type) {
    case "PlaneGeometry":
    case "PlaneBufferGeometry":
      var c = new THREE[a.type](a.width, a.height, a.widthSegments, a.heightSegments);
      break;
    case "BoxGeometry":
    case "BoxBufferGeometry":
    case "CubeGeometry":
      c = new THREE[a.type](a.width, a.height, a.depth, a.widthSegments, a.heightSegments, a.depthSegments);
      break;
    case "CircleGeometry":
    case "CircleBufferGeometry":
      c = new THREE[a.type](a.radius, a.segments, a.thetaStart, a.thetaLength);
      break;
    case "CylinderGeometry":
    case "CylinderBufferGeometry":
      c = new THREE[a.type](a.radiusTop, a.radiusBottom, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
      break;
    case "ConeGeometry":
    case "ConeBufferGeometry":
      c = new THREE[a.type](a.radius, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
      break;
    case "SphereGeometry":
    case "SphereBufferGeometry":
      c = new THREE[a.type](a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
      break;
    case "DodecahedronGeometry":
    case "IcosahedronGeometry":
    case "OctahedronGeometry":
    case "TetrahedronGeometry":
    case "DodecahedronBufferGeometry":
    case "IcosahedronBufferGeometry":
    case "OctahedronBufferGeometry":
    case "TetrahedronBufferGeometry":
      c = new THREE[a.type](a.radius, a.detail);
      break;
    case "PolyhedronGeometry":
    case "PolyhedronBufferGeometry":
      c = new THREE[a.type](a.radius, a.indices, a.radius, a.detail);
      break;
    case "RingGeometry":
    case "RingBufferGeometry":
      c = new THREE[a.type](a.innerRadius, a.outerRadius, a.thetaSegments, a.phiSegments, a.thetaStart, a.thetaLength);
      break;
    case "TorusGeometry":
    case "TorusBufferGeometry":
      c = new THREE[a.type](a.radius, a.tube, a.radialSegments, a.tubularSegments, a.arc);
      break;
    case "TorusKnotGeometry":
    case "TorusKnotBufferGeometry":
      c = new THREE[a.type](a.radius, a.tube, a.tubularSegments, a.radialSegments, a.p, a.q);
      break;
    case "LatheGeometry":
    case "LatheBufferGeometry":
      c = new THREE[a.type](a.points, a.segments, a.phiStart, a.phiLength);
      break;
    case "ShapeGeometry":
    case "ShapeBufferGeometry":
      c = [];
      for (var k = 0, b = a.shapes.length; k < b; k++) {
        c.push(this.shapes[a.shapes[k]]);
      }
      c = new THREE[a.type](c, a.curveSegments);
      break;
    case "BufferGeometry":
      c = this.bufferGeometryLoader.parse(a);
      break;
    case "Geometry":
      c = this.geometryLoader.parse(a.data).geometry;
      break;
    default:
      console.warn("GeometryLoader: Unsupported geometry type " + a.type), c = new THREE.Geometry;
  }
  c.uuid = a.uuid;
  c.name = void 0 !== a.name ? a.name : "geometry";
  return c;
};
"use strict";
function LegacyGeometryLoader(a) {
  this.manager = void 0 !== a ? a : DefaultLoadingManager;
  this.withCredentials = !1;
}
LegacyGeometryLoader.prototype.load = function(a, c, k, b) {
  var e = this, f = void 0 === this.path ? LoaderUtils.extractUrlBase(a) : this.path, h = new FileLoader(this.manager);
  h.setPath(this.path);
  h.setWithCredentials(this.withCredentials);
  h.load(a, function(b) {
    b = JSON.parse(b);
    var h = b.metadata;
    if (void 0 !== h && (h = h.type, void 0 !== h && "object" === h.toLowerCase())) {
      console.error("nunuStudio: LegacyGeometryLoader: " + a + " should be loaded with ObjectLoader instead.");
      return;
    }
    b = e.parse(b, f);
    c(b.geometry, b.materials);
  }, k, b);
};
LegacyGeometryLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
LegacyGeometryLoader.prototype.setResourcePath = function(a) {
  this.resourcePath = a;
  return this;
};
LegacyGeometryLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
LegacyGeometryLoader.prototype.parse = function() {
  return function(a, c) {
    void 0 !== a.data && (a = a.data);
    a.scale = void 0 !== a.scale ? 1 / a.scale : 1;
    var k = new THREE.Geometry, b = a, e, f, h, r = b.faces;
    var q = b.vertices;
    var n = b.normals, m = b.colors;
    var d = b.scale;
    var l = 0;
    if (void 0 !== b.uvs) {
      for (e = 0; e < b.uvs.length; e++) {
        b.uvs[e].length && l++;
      }
      for (e = 0; e < l; e++) {
        k.faceVertexUvs[e] = [];
      }
    }
    var v = 0;
    for (h = q.length; v < h;) {
      e = new THREE.Vector3, e.x = q[v++] * d, e.y = q[v++] * d, e.z = q[v++] * d, k.vertices.push(e);
    }
    v = 0;
    for (h = r.length; v < h;) {
      q = r[v++];
      var w = q & 1;
      var x = q & 2;
      e = q & 8;
      var z = q & 16;
      var p = q & 32;
      d = q & 64;
      q &= 128;
      if (w) {
        w = new THREE.Face3;
        w.a = r[v];
        w.b = r[v + 1];
        w.c = r[v + 3];
        var u = new THREE.Face3;
        u.a = r[v + 1];
        u.b = r[v + 2];
        u.c = r[v + 3];
        v += 4;
        x && (x = r[v++], w.materialIndex = x, u.materialIndex = x);
        x = k.faces.length;
        if (e) {
          for (e = 0; e < l; e++) {
            var y = b.uvs[e];
            k.faceVertexUvs[e][x] = [];
            k.faceVertexUvs[e][x + 1] = [];
            for (f = 0; 4 > f; f++) {
              var A = r[v++];
              var B = y[2 * A];
              A = y[2 * A + 1];
              B = new THREE.Vector2(B, A);
              2 !== f && k.faceVertexUvs[e][x].push(B);
              0 !== f && k.faceVertexUvs[e][x + 1].push(B);
            }
          }
        }
        z && (z = 3 * r[v++], w.normal.set(n[z++], n[z++], n[z]), u.normal.copy(w.normal));
        if (p) {
          for (e = 0; 4 > e; e++) {
            z = 3 * r[v++], p = new THREE.Vector3(n[z++], n[z++], n[z]), 2 !== e && w.vertexNormals.push(p), 0 !== e && u.vertexNormals.push(p);
          }
        }
        d && (d = r[v++], d = m[d], w.color.setHex(d), u.color.setHex(d));
        if (q) {
          for (e = 0; 4 > e; e++) {
            d = r[v++], d = m[d], 2 !== e && w.vertexColors.push(new Color(d)), 0 !== e && u.vertexColors.push(new Color(d));
          }
        }
        k.faces.push(w);
        k.faces.push(u);
      } else {
        w = new THREE.Face3;
        w.a = r[v++];
        w.b = r[v++];
        w.c = r[v++];
        x && (x = r[v++], w.materialIndex = x);
        x = k.faces.length;
        if (e) {
          for (e = 0; e < l; e++) {
            for (y = b.uvs[e], k.faceVertexUvs[e][x] = [], f = 0; 3 > f; f++) {
              A = r[v++], B = y[2 * A], A = y[2 * A + 1], B = new THREE.Vector2(B, A), k.faceVertexUvs[e][x].push(B);
            }
          }
        }
        z && (z = 3 * r[v++], w.normal.set(n[z++], n[z++], n[z]));
        if (p) {
          for (e = 0; 3 > e; e++) {
            z = 3 * r[v++], p = new THREE.Vector3(n[z++], n[z++], n[z]), w.vertexNormals.push(p);
          }
        }
        d && (d = r[v++], w.color.setHex(m[d]));
        if (q) {
          for (e = 0; 3 > e; e++) {
            d = r[v++], w.vertexColors.push(new Color(m[d]));
          }
        }
        k.faces.push(w);
      }
    }
    b = a;
    v = void 0 !== b.influencesPerVertex ? b.influencesPerVertex : 2;
    if (b.skinWeights) {
      for (h = 0, r = b.skinWeights.length; h < r; h += v) {
        k.skinWeights.push(new Vector4(b.skinWeights[h], 1 < v ? b.skinWeights[h + 1] : 0, 2 < v ? b.skinWeights[h + 2] : 0, 3 < v ? b.skinWeights[h + 3] : 0));
      }
    }
    if (b.skinIndices) {
      for (h = 0, r = b.skinIndices.length; h < r; h += v) {
        k.skinIndices.push(new Vector4(b.skinIndices[h], 1 < v ? b.skinIndices[h + 1] : 0, 2 < v ? b.skinIndices[h + 2] : 0, 3 < v ? b.skinIndices[h + 3] : 0));
      }
    }
    k.bones = b.bones;
    k.bones && 0 < k.bones.length && (k.skinWeights.length !== k.skinIndices.length || k.skinIndices.length !== k.vertices.length) && console.warn("When skinning, number of vertices (" + k.vertices.length + "), skinIndices (" + k.skinIndices.length + "), and skinWeights (" + k.skinWeights.length + ") should match.");
    h = a;
    r = h.scale;
    if (void 0 !== h.morphTargets) {
      for (b = 0, v = h.morphTargets.length; b < v; b++) {
        for (k.morphTargets[b] = {}, k.morphTargets[b].name = h.morphTargets[b].name, k.morphTargets[b].vertices = [], n = k.morphTargets[b].vertices, m = h.morphTargets[b].vertices, l = 0, q = m.length; l < q; l += 3) {
          d = new THREE.Vector3, d.x = m[l] * r, d.y = m[l + 1] * r, d.z = m[l + 2] * r, n.push(d);
        }
      }
    }
    if (void 0 !== h.morphColors && 0 < h.morphColors.length) {
      for (r = k.faces, h = h.morphColors[0].colors, b = 0, v = r.length; b < v; b++) {
        r[b].color.fromArray(h, 3 * b);
      }
    }
    h = a;
    b = [];
    v = [];
    void 0 !== h.animation && v.push(h.animation);
    void 0 !== h.animations && (h.animations.length ? v = v.concat(h.animations) : v.push(h.animations));
    for (h = 0; h < v.length; h++) {
      (r = AnimationClip.parseAnimation(v[h], k.bones)) && b.push(r);
    }
    k.morphTargets && (v = AnimationClip.CreateClipsFromMorphTargetSequences(k.morphTargets, 10), b = b.concat(v));
    0 < b.length && (k.animations = b);
    k.computeFaceNormals();
    k.computeBoundingSphere();
    if (void 0 === a.materials || 0 === a.materials.length) {
      return {geometry:k};
    }
    a = Loader.prototype.initMaterials(a.materials, this.resourcePath || c, this.crossOrigin);
    return {geometry:k, materials:a};
  };
}();
"use strict";
function ObjectLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.texturePath = "";
}
ObjectLoader.prototype.load = function(a, c, k, b) {
  "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));
  var e = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    e.parse(JSON.parse(a), c);
  }, k, b);
};
ObjectLoader.prototype.parse = function(a, c) {
  var k = this.parseResources(a.resources), b = this.parseShape(a.shapes), e = this.parseGeometries(a.geometries, b), f = this.parseImages(a.images), h = this.parseVideos(a.videos), r = this.parseAudio(a.audio), q = this.parseFonts(a.fonts), n = this.parseTextures(a.textures, f, h), m = this.parseMaterials(a.materials, n);
  k = this.parseObject(a.object, e, m, n, r, q, k, f, h, b, d);
  if (a.skeletons) {
    var d = this.parseSkeletons(a.skeletons, k);
    this.bindSkeletons(k, d);
  }
  a.animations && (k.animations = this.parseAnimations(a.animations));
  void 0 !== a.images && 0 !== a.images.length || void 0 === c || c(k);
  return k;
};
ObjectLoader.prototype.setTexturePath = function(a) {
  this.texturePath = a;
};
ObjectLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
};
ObjectLoader.prototype.parseResources = function(a) {
  var c = [];
  if (void 0 !== a) {
    for (var k in a) {
      var b = new TextFile(a[k].data, a[k].encoding);
      b.format = a[k].format;
      b.name = a[k].name;
      b.uuid = a[k].uuid;
      c[b.uuid] = b;
    }
  }
  return c;
};
ObjectLoader.prototype.parseShape = function(a) {
  var c = {};
  if (void 0 !== a) {
    for (var k = 0, b = a.length; k < b; k++) {
      var e = (new Shape).fromJSON(a[k]);
      c[e.uuid] = e;
    }
  }
  return c;
};
ObjectLoader.prototype.parseGeometries = function(a, c) {
  var k = new GeometryLoader;
  k.setShapes(c);
  c = [];
  if (void 0 !== a) {
    for (var b = 0; b < a.length; b++) {
      c[a[b].uuid] = k.parse(a[b]);
    }
  }
  return c;
};
ObjectLoader.prototype.parseMaterials = function(a, c) {
  var k = [], b = new MaterialLoader;
  b.setTextures(c);
  if (void 0 !== a) {
    for (var e in a) {
      k[a[e].uuid] = b.parse(a[e]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAnimations = function(a) {
  for (var c = [], k = 0; k < a.length; k++) {
    var b = THREE.AnimationClip.parse(a[k]);
    void 0 !== a[k].uuid && (b.uuid = a[k].uuid);
    c.push();
  }
  return c;
};
ObjectLoader.prototype.parseImages = function(a) {
  var c = new ImageLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseVideos = function(a) {
  var c = new VideoLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAudio = function(a) {
  var c = new AudioLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseFonts = function(a) {
  var c = new FontLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseTextures = function(a, c, k) {
  var b = [], e = new TextureLoader;
  e.setImages(c);
  e.setVideos(k);
  if (void 0 !== a) {
    for (var f in a) {
      b[a[f].uuid] = e.parse(a[f]);
    }
  }
  return b;
};
ObjectLoader.prototype.parseSkeletons = function(a, c) {
  var k = {};
  if (void 0 === a) {
    return k;
  }
  for (var b = 0; b < a.length; b++) {
    var e = a[b], f = e.uuid, h = e.bones;
    e = e.boneInverses;
    for (var r = [], q = [], n = 0, m = h.length; n < m; n++) {
      var d = c.getObjectByProperty("uuid", h[n]);
      void 0 === d && (console.warn("THREE.ObjectLoader: Not found Bone whose uuid is " + h[n]), d = new THREE.Bone);
      r.push(d);
      q.push((new THREE.Matrix4).fromArray(e[n]));
    }
    k[f] = new Skeleton(r, q);
  }
  return k;
};
ObjectLoader.prototype.bindSkeletons = function(a, c) {
  0 !== Object.keys(c).length && a.traverse(function(a) {
    if (!0 === a.isSkinnedMesh && void 0 !== a.skeletonUUID) {
      var b = c[a.skeletonUUID];
      void 0 === b ? console.warn("THREE.ObjectLoader: Not found Skeleton whose uuid is " + a.skeletonUUID) : a.bind(b, a.bindMatrix);
      delete a.skeletonUUID;
    }
  });
};
ObjectLoader.prototype.parseObject = function(a, c, k, b, e, f, h, r, q, n, m) {
  function d(a) {
    void 0 === b[a] && console.warn("ObjectLoader: Undefined texture", a);
    return b[a];
  }
  function l(a) {
    void 0 === c[a] && console.warn("ObjectLoader: Undefined geometry", a);
    return c[a];
  }
  function v(a) {
    if (a instanceof Array) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push(k[a[c]]);
      }
      return b;
    }
    void 0 === k[a] && console.warn("ObjectLoader: Undefined material", a);
    return k[a];
  }
  function w(a) {
    void 0 === f[a] && console.warn("ObjectLoader: Undefined font", a);
    return f[a];
  }
  function x(a) {
    void 0 === e[a] && console.warn("ObjectLoader: Undefined audio", a);
    return e[a];
  }
  switch(a.type) {
    case "SpineAnimation":
      for (var z = 0; z < a.textures.length; z++) {
        a.textures[z].texture = d(a.textures[z].texture);
      }
      var p = new SpineAnimation(a.json, a.atlas, "", a.textures);
      void 0 !== a.animation && (p.animation = a.animation, p.track = a.track, p.loop = a.loop);
      void 0 !== a.skin && (p.skin = a.skin);
      break;
    case "Audio":
      p = new AudioEmitter(x(a.audio));
      p.autoplay = a.autoplay;
      p.startTime = a.startTime;
      p.playbackRate = a.playbackRate;
      p.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (p.volume = a.volume);
      break;
    case "PositionalAudio":
      p = new PositionalAudio(x(a.audio));
      p.autoplay = a.autoplay;
      p.startTime = a.startTime;
      p.playbackRate = a.playbackRate;
      p.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (p.volume = a.volume);
      p.distanceModel = a.distanceModel;
      p.panningModel = a.panningModel;
      break;
    case "Physics":
      p = new PhysicsObject;
      p.body.type = a.body.type;
      p.body.mass = a.body.mass;
      p.body.linearDamping = a.body.linearDamping;
      p.body.angularDamping = a.body.angularDamping;
      p.body.allowSleep = a.body.allowSleep;
      p.body.sleepSpeedLimit = a.body.sleepSpeedLimit;
      p.body.sleepTimeLimit = a.body.sleepTimeLimit;
      p.body.collisionFilterGroup = a.body.collisionFilterGroup;
      p.body.collisionFilterMask = a.body.collisionFilterMask;
      p.body.fixedRotation = a.body.fixedRotation;
      n = a.body.shapes;
      for (z = 0; z < n.length; z++) {
        var u = n[z];
        u.type === CANNON.Shape.types.SPHERE ? p.body.addShape(new CANNON.Sphere(u.radius)) : u.type === CANNON.Shape.types.BOX ? p.body.addShape(new CANNON.Box(new CANNON.Vec3(u.halfExtents.x, u.halfExtents.y, u.halfExtents.z))) : u.type === CANNON.Shape.types.PARTICLE ? p.body.addShape(new CANNON.Particle) : u.type === CANNON.Shape.types.PLANE ? p.body.addShape(new CANNON.Plane) : u.type === CANNON.Shape.types.CONVEXPOLYHEDRON && p.body.addShape(new CANNON.ConvexPolyhedron(u.vertices, u.faces));
      }
      break;
    case "ParticleEmiter":
      p = function(a) {
        return Array.isArray(a) ? (new THREE.Vector3).fromArray(a) : new THREE.Vector3(a.x, a.y, a.z);
      };
      void 0 !== a.group && (z = a.group, z.texture.value = d(z.texture.value), z.texture.frames = (new THREE.Vector2).fromArray(z.texture.frames || [1, 1]));
      if (void 0 !== a.emitter) {
        for (u = a.emitter, u.position.value = p(u.position.value), u.position.spread = p(u.position.spread), u.velocity.value = p(u.velocity.value), u.velocity.spread = p(u.velocity.spread), u.acceleration.value = p(u.acceleration.value), u.acceleration.spread = p(u.acceleration.spread), z = 0; z < u.color.value.length; z++) {
          u.color.value[z] = new THREE.Color(u.color.value[z]), u.color.spread[z] = p(u.color.spread[z]);
        }
      }
      p = new ParticleEmitter(a.group, a.emitter);
      break;
    case "LensFlare":
      p = new LensFlare;
      void 0 !== a.lensFlares && (a.elements = a.lensFlares);
      for (z = 0; z < a.elements.length; z++) {
        p.addFlare(d(a.elements[z].texture), a.elements[z].size, a.elements[z].distance, new THREE.Color(a.elements[z].color));
      }
      break;
    case "TextMesh":
    case "Text3D":
      p = new TextMesh(a.text, v(a.material), w(a.font), a.height, a.bevel, a.bevelThickness, a.bevelSize, a.size, a.curveSegments, a.extruded);
      break;
    case "Program":
      p = new Program(a.name);
      p.description = a.description;
      p.author = a.author;
      p.version = a.version;
      p.vr = a.vr;
      p.vrScale = a.vrScale;
      void 0 !== a.rendererConfig ? p.rendererConfig.fromJSON(a.rendererConfig) : (p.antialiasing = a.antialiasing, p.shadows = a.shadows, p.shadowsType = a.shadowsType, p.toneMapping = a.toneMapping, p.toneMappingWhitePoint = a.toneMappingWhitePoint, p.toneMappingExposure = a.toneMappingExposure);
      void 0 !== a.lockPointer && (p.lockPointer = a.lockPointer);
      void 0 !== a.defaultScene && (p.defaultScene = a.defaultScene);
      void 0 !== a.handlePixelRatio && (p.handlePixelRatio = a.handlePixelRatio);
      break;
    case "LeapDevice":
      p = new LeapMotion;
      p.mode = a.mode;
      p.useArm = a.useArm;
      void 0 !== a.debugModel && (p.debugModel = a.debugModel);
      void 0 !== a.gesturesEnabled && (p.gesturesEnabled = a.gesturesEnabled);
      void 0 !== a.posesEnabled && (p.posesEnabled = a.posesEnabled);
      break;
    case "Kinect":
      p = new KinectDevice;
      void 0 !== a.debugModel && (p.debugModel = a.debugModel);
      break;
    case "Sky":
      p = new Sky(a.autoUpdate, a.dayTime, a.sunDistance, a.time);
      void 0 !== a.sun && (p.sun.shadow.fromJSON(a.sun.shadow), void 0 !== a.sun.castShadow && (p.sun.castShadow = a.sun.castShadow));
      if (void 0 !== a.colorTop) {
        for (p.colorTop = [], z = 0; z < a.colorTop.length; z++) {
          p.colorTop.push(new THREE.Color(a.colorTop[z]));
        }
      }
      if (void 0 !== a.colorBottom) {
        for (p.colorBottom = [], z = 0; z < a.colorBottom.length; z++) {
          p.colorBottom.push(new THREE.Color(a.colorBottom[z]));
        }
      }
      void 0 !== a.sunColor && (p.sunColor = a.sunColor);
      void 0 !== a.moonColor && (p.moonColor = a.moonColor);
      void 0 !== a.intensity && (p.intensity = a.intensity);
      break;
    case "CubeCamera":
      p = new CubeCamera(a.near, a.far, a.resolution, a.autoUpdate);
      break;
    case "FirstPersonControls":
      p = new FirstPersonControls;
      p.sensitivity = a.sensitivity;
      p.needsButtonPressed = a.needsButtonPressed;
      p.movementEnabled = a.movementEnabled;
      p.moveSpeed = a.moveSpeed;
      p.moveOnPlane = a.moveOnPlane;
      p.moveKeys = a.moveKeys;
      break;
    case "OrbitControls":
      p = new OrbitControls;
      p.distance = a.distance;
      p.maxDistance = a.maxDistance;
      p.minDistance = a.minDistance;
      p.sensitivity = a.sensitivity;
      p.limitUp = a.limitUp;
      p.limitDown = a.limitDown;
      p.needsButtonPressed = a.needsButtonPressed;
      p.zoomEnabled = a.zoomEnabled;
      p.movementEnabled = a.movementEnabled;
      void 0 !== a.smooth && (p.smooth = a.smooth, p.friction = a.friction, p.speed = a.speed, p.invertNavigation = a.invertNavigation);
      void 0 !== a.center && (p.center.fromArray(a.center), p.vector.fromArray(a.vector));
      break;
    case "Scene":
      p = new Scene;
      void 0 !== a.background && (Number.isInteger(a.background) ? p.background = new THREE.Color(a.background) : p.background = d(a.background));
      void 0 !== a.fog && ("Fog" === a.fog.type ? p.fog = new THREE.Fog(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (p.fog = new THREE.FogExp2(a.fog.color, a.fog.density)));
      void 0 !== a.defaultCamera && (p.defaultCamera = this.parse(a.defaultCamera));
      void 0 !== a.cameras && (p.cameras = a.cameras);
      void 0 !== a.usePhysics && (p.usePhysics = a.usePhysics);
      void 0 !== a.world && (p.world.gravity.set(a.world.gravity.x, a.world.gravity.y, a.world.gravity.z), p.world.quatNormalizeSkip = a.world.quatNormalizeSkip, p.world.quatNormalizeFast = a.world.quatNormalizeFast, p.world.solver.tolerance = a.world.solver.tolerance, p.world.solver.iterations = a.world.solver.iterations);
      break;
    case "PerspectiveCamera":
      p = new PerspectiveCamera(a.fov, a.aspect, a.near, a.far);
      void 0 !== a.focus && (p.focus = a.focus);
      void 0 !== a.zoom && (p.zoom = a.zoom);
      void 0 !== a.filmGauge && (p.filmGauge = a.filmGauge);
      void 0 !== a.filmOffset && (p.filmOffset = a.filmOffset);
      void 0 !== a.view && (p.view = Object.assign({}, a.view));
      void 0 !== a.viewport && (a.viewport instanceof Array ? (p.viewport.size.fromArray(a.viewport), p.viewport.offset.fromArray(a.offset)) : p.viewport.fromJSON(a.viewport));
      void 0 !== a.clearColor && (p.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
      void 0 !== a.clearStencil && (p.clearStencil = a.clearStencil);
      void 0 !== a.order && (p.order = a.order);
      void 0 !== a.composer && (p.composer = EffectComposer.fromJSON(a.composer));
      break;
    case "OrthographicCamera":
      p = new OrthographicCamera(a.size, a.aspect, a.mode, a.near, a.far);
      void 0 !== a.viewport && (a.viewport instanceof Array ? (p.viewport.size.fromArray(a.viewport), p.viewport.offset.fromArray(a.offset)) : p.viewport.fromJSON(a.viewport));
      void 0 !== a.clearColor && (p.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
      void 0 !== a.clearStencil && (p.clearStencil = a.clearStencil);
      void 0 !== a.order && (p.order = a.order);
      void 0 !== a.composer && (p.composer = EffectComposer.fromJSON(a.composer));
      void 0 !== a.zoom && (p.zoom = a.zoom);
      void 0 !== a.view && (p.view = Object.assign({}, a.view));
      break;
    case "Script":
      p = new Script(a.code, a.mode);
      break;
    case "RectAreaLight":
      p = new RectAreaLight(a.color, a.intensity, a.width, a.height);
      break;
    case "AmbientLight":
      p = new AmbientLight(a.color, a.intensity);
      break;
    case "DirectionalLight":
      p = new DirectionalLight(a.color, a.intensity);
      break;
    case "PointLight":
      p = new PointLight(a.color, a.intensity, a.distance, a.decay);
      break;
    case "SpotLight":
      p = new SpotLight(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
      break;
    case "HemisphereLight":
      p = new HemisphereLight(a.color, a.groundColor, a.intensity);
      break;
    case "SkinnedMesh":
      z = l(a.geometry);
      p = v(a.material);
      void 0 !== a.skeleton && void 0 !== z.bones && (u = z.bones, z.bones = void 0);
      p = new SkinnedMesh(z, p);
      void 0 !== a.skeleton && (p.skeletonUUID = a.skeleton);
      void 0 !== a.bindMode && (p.bindMode = a.bindMode);
      void 0 !== a.bindMatrix && p.bindMatrix.fromArray(a.bindMatrix);
      p.updateMatrixWorld(!0);
      void 0 !== u && (z.bones = u);
      break;
    case "Mesh":
      z = l(a.geometry);
      p = v(a.material);
      p = z.bones && 0 < z.bones.length ? new SkinnedMesh(z, p) : new Mesh(z, p);
      break;
    case "TextBitmap":
      p = TextBitmap.fromJSON(a, d(a.texture));
      break;
    case "TextSprite":
      p = TextSprite.fromJSON(a);
      break;
    case "LOD":
      p = new THREE.LOD;
      break;
    case "Line":
      p = new THREE.Line(l(a.geometry), v(a.material), a.mode);
      break;
    case "LineLoop":
      p = new THREE.LineLoop(l(a.geometry), v(a.material));
      break;
    case "LineSegments":
      p = new THREE.LineSegments(l(a.geometry), v(a.material));
      break;
    case "PointCloud":
    case "Points":
      p = new THREE.Points(l(a.geometry), v(a.material));
      break;
    case "Sprite":
      p = new Sprite(v(a.material));
      break;
    case "Group":
      p = new Container;
      break;
    case "Bone":
      p = new THREE.Bone;
      break;
    default:
      p = new Container;
  }
  p.uuid = a.uuid;
  p.name = a.name;
  p.locked = !0 === a.locked || !0 === a.hidden;
  p.folded = !0 === a.folded;
  void 0 !== a.frustumCulled && (p.frustumCulled = a.frustumCulled);
  void 0 !== a.renderOrder && (p.renderOrder = a.renderOrder);
  if (void 0 !== a.animations) {
    for (p.animations = [], z = 0; z < a.animations.length; z++) {
      p.animations.push(THREE.AnimationClip.parse(a.animations[z]));
    }
  }
  void 0 !== a.matrix && (p.matrix.fromArray(a.matrix), p.matrix.decompose(p.position, p.quaternion, p.scale));
  void 0 !== a.position && p.position.fromArray(a.position);
  void 0 !== a.rotation && p.rotation.fromArray(a.rotation);
  void 0 !== a.quaternion && p.quaternion.fromArray(a.quaternion);
  void 0 !== a.scale && p.scale.fromArray(a.scale);
  p.castShadow = !0 === a.castShadow;
  p.receiveShadow = !0 === a.receiveShadow;
  void 0 !== a.shadow && p.shadow.fromJSON(a.shadow);
  p.visible = !0 === a.visible;
  void 0 !== a.userData && (p.userData = a.userData);
  if (void 0 !== a.children) {
    for (var y in a.children) {
      p.add(this.parseObject(a.children[y], c, k, b, e, f, r, q, n, m));
    }
  }
  void 0 !== a.matrixAutoUpdate && (p.matrixAutoUpdate = a.matrixAutoUpdate, p.matrixAutoUpdate || (p.updateMatrix(), p.updateMatrixWorld(!0)));
  if ("Program" === a.type) {
    p.materials = k, p.textures = b, p.resources = h, p.fonts = f, p.audio = e, p.geometries = c, p.images = r, p.videos = q, p.shapes = n, p.skeletons = m;
  } else {
    if ("Scene" === a.type) {
      for (z = 0; z < p.cameras.length; z++) {
        y = p.getCamera(p.cameras[z]), null !== y ? p.cameras[z] = y : p.cameras.splice(z, 1);
      }
    } else {
      if ("LOD" === a.type) {
        for (a = a.levels, h = 0; h < a.length; h++) {
          r = a[h], y = p.getObjectByProperty("uuid", r.object), void 0 !== y && p.addLevel(y, r.distance);
        }
      }
    }
  }
  return p;
};
"use strict";
function LeapMotion() {
  THREE.Group.call(this);
  this.type = "LeapDevice";
  this.name = "leap";
  this.posesEnabled = this.gesturesEnabled = this.debugModel = !0;
  this.mode = LeapMotion.DESK;
  this.useArm = !1;
  this.boneMeshes = [];
  this.armMeshes = [];
  this.material = new THREE.MeshPhongMaterial;
  this.geometry = new THREE.BoxBufferGeometry(1, 1, 1);
  this.gesture = [];
  for (var a = 0; 10 > a; a++) {
    this.gesture[a] = !1;
  }
  this.pose = [];
  for (a = 0; 3 > a; a++) {
    this.pose[a] = !1;
  }
  this.data = null;
}
LeapMotion.prototype = Object.create(THREE.Group.prototype);
LeapMotion.DESK = 0;
LeapMotion.HDM = 1;
LeapMotion.SWIPE = 0;
LeapMotion.SWIPE_LEFT = 1;
LeapMotion.SWIPE_RIGHT = 2;
LeapMotion.SWIPE_FRONT = 3;
LeapMotion.SWIPE_BACK = 4;
LeapMotion.SWIPE_UP = 5;
LeapMotion.SWIPE_DOWN = 6;
LeapMotion.CIRCLE = 7;
LeapMotion.SCREEN_TAP = 8;
LeapMotion.KEY_TAP = 9;
LeapMotion.CLOSED = 0;
LeapMotion.OPEN = 1;
LeapMotion.POINTING = 2;
LeapMotion.prototype.initialize = function() {
  var a = this;
  Leap.loop({background:!0}, function(c) {
    a.data = c;
  }).connect();
  THREE.Object3D.prototype.initialize.call(this);
};
LeapMotion.prototype.update = function(a) {
  null !== this.data && (this.gesturesEnabled && this.updateGestures(), this.posesEnabled && this.updatePoses(), this.debugModel && this.updateDebugModel());
  THREE.Object3D.prototype.update.call(this, a);
};
LeapMotion.prototype.checkGesture = function(a) {
  return void 0 !== this.gesture[a] ? this.gesture[a] : !1;
};
LeapMotion.prototype.checkPose = function(a) {
  return void 0 !== this.pose[a] ? this.pose[a] : !1;
};
LeapMotion.prototype.setMode = function(a) {
  this.mode = a;
};
LeapMotion.prototype.updatePoses = function() {
  for (var a = 0; a < this.pose.length; a++) {
    this.pose[a] = !0;
  }
  for (var c = 0; c < this.data.hands.length; c++) {
    var k = this.data.hands[c], b = k.sphereCenter;
    b = new THREE.Vector3(b[0], b[1], b[2]);
    var e = [], f = 0;
    for (a = 0; a < this.pose.length; a++) {
      this.pose[a] = !0;
    }
    var h = [];
    for (a = 0; a < k.fingers.length; a++) {
      var r = k.fingers[a];
      h.push(r.direction);
      r = r.distal.nextJoint;
      r = new THREE.Vector3(r[0], r[1], r[2]);
      e.push(b.distanceTo(r) / k._scaleFactor);
      0 !== a && (.3 > h[a][2] && (this.pose[LeapMotion.CLOSED] = !1), -.5 < h[a][2] && (this.pose[LeapMotion.OPEN] = !1), 1 === a ? f = e[1] : f < 2 * e[a] - 15 && (this.pose[LeapMotion.POINTING] = !1));
    }
    f < 2 * e[0] - 15 && (this.pose[LeapMotion.POINTING] = !1);
  }
};
LeapMotion.prototype.updateGestures = function() {
  for (var a = 0; a < this.gesture.length; a++) {
    this.gesture[a] = !1;
  }
  var c = this;
  this.data.valid && 0 < this.data.gestures.length && this.data.gestures.forEach(function(a) {
    "swipe" === a.type ? (c.gesture[LeapMotion.SWIPE] = !0, 0 < a.direction[0] ? c.gesture[LeapMotion.SWIPE_RIGHT] = !0 : c.gesture[LeapMotion.SWIPE_LEFT] = !0, 0 < a.direction[1] ? c.gesture[LeapMotion.SWIPE_UP] = !0 : c.gesture[LeapMotion.SWIPE_DOWN] = !0, 0 < a.direction[2] ? c.gesture[LeapMotion.SWIPE_FRONT] = !0 : c.gesture[LeapMotion.SWIPE_BACK] = !0) : "circle" === a.type ? c.gesture[LeapMotion.CIRCLE] = !0 : "keyTap" === a.type ? c.gesture[LeapMotion.KEY_TAP] = !0 : "screenTap" === a.type && 
    (c.gesture[LeapMotion.SCREEN_TAP] = !0);
  });
};
LeapMotion.prototype.updateDebugModel = function() {
  var a = this;
  this.armMeshes.forEach(function(b) {
    a.remove(b);
  });
  this.boneMeshes.forEach(function(b) {
    a.remove(b);
  });
  for (var c = 0, k = 0, b = 0; b < this.data.hands.length; b++) {
    for (var e = this.data.hands[b], f = 0; f < e.fingers.length; f++) {
      for (var h = e.fingers[f], r = 0; r < h.bones.length; r++) {
        var q = h.bones[r];
        if (0 !== c) {
          var n = this.boneMeshes[c] || this.addMesh(this.boneMeshes);
          this.updateMesh(q, n);
        }
        c++;
      }
    }
    this.showArm && (e = e.arm, f = this.armMeshes[k++] || this.addMesh(this.armMeshes), this.updateMesh(e, f), f.scale.set(e.width / 1200, e.width / 300, e.length / 150));
  }
};
LeapMotion.prototype.addMesh = function(a) {
  var c = new Mesh(this.geometry, this.material);
  c.castShadow = this.castShadow;
  c.receiveShadow = this.receiveShadow;
  a.push(c);
  return c;
};
LeapMotion.prototype.updateMesh = function(a, c) {
  c.position.fromArray(a.center());
  c.position.divideScalar(150);
  c.setRotationFromMatrix((new THREE.Matrix4).fromArray(a.matrix()));
  c.scale.set(a.width / 150, a.width / 150, a.length / 150);
  this.add(c);
};
LeapMotion.prototype.getMovement = function() {
  var a = this.data.gestures[0].position, c = this.data.gestures[0].startPosition;
  a = new THREE.Vector3(a[0] - c[0], a[1] - c[1], a[2] - c[2]);
  a.divideScalar(this.data.currentFrameRate);
  return a;
};
LeapMotion.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.type = this.type;
  a.object.debugModel = this.debugModel;
  a.object.gesturesEnabled = this.gesturesEnabled;
  a.object.posesEnabled = this.posesEnabled;
  a.object.mode = this.mode;
  a.object.useArm = this.useArm;
  return a;
};
"use strict";
function KinectDevice() {
  THREE.Group.call(this);
  this.type = "Kinect";
  this.name = "kinect";
  this.socket = new WebSocket("ws://127.0.0.1:8181");
  this.connected = !1;
  this.debugModel = !0;
  this.dataTimeout = 0;
  this.data = this.camera = null;
  this.dataReceived = !1;
  var a = this;
  this.socket.onopen = function() {
    a.connected = !0;
  };
  this.socket.onclose = function() {
    a.connected = !1;
  };
  this.socket.onmessage = function(c) {
    "string" === typeof c.data ? (a.data = JSON.parse(c.data), a.dataReceived = !0, a.dataTimeout = KinectDevice.DATA_TIMEOUT) : c.data instanceof Blob && (a.camera = c.data);
  };
}
KinectDevice.DATA_TIMEOUT = 20;
KinectDevice.DEPTH = 0;
KinectDevice.COLOR = 1;
KinectDevice.JOINTS_NAME = [["head", "shouldercenter"], ["shouldercenter", "shoulderright"], ["shouldercenter", "shoulderleft"], ["shoulderright", "elbowright"], ["shoulderleft", "elbowleft"], ["elbowright", "wristright"], ["elbowleft", "wristleft"], ["wristright", "handright"], ["wristleft", "handleft"], ["shouldercenter", "spine"], ["spine", "hipcenter"], ["hipcenter", "hipright"], ["hipcenter", "hipleft"], ["hipright", "kneeright"], ["hipleft", "kneeleft"], ["kneeright", "ankleright"], ["kneeleft", 
"ankleleft"], ["ankleright", "footright"], ["ankleleft", "footleft"]];
KinectDevice.prototype = Object.create(THREE.Group.prototype);
KinectDevice.prototype.update = function(a) {
  if (null !== this.data) {
    if (this.dataReceived) {
      for (this.dataReceived = !1; 0 < this.children.length;) {
        this.children.pop();
      }
      if (this.debugModel) {
        for (var c = new THREE.SphereGeometry(.04, 6, 6), k = new THREE.MeshPhongMaterial(16711680), b = 0; b < this.data.skeletons.length; b++) {
          for (var e = this.data.skeletons[b].joints, f = 0; f < e.length; f++) {
            var h = new Mesh(c, k);
            h.position.set(e[f].x, e[f].y, e[f].z);
            h.castShadow = !0;
            this.add(h);
          }
        }
      }
    } else {
      if (0 < this.dataTimeout && (this.dataTimeout--, 0 === this.dataTimeout)) {
        for (; 0 < this.children.length;) {
          this.children.pop();
        }
      }
    }
  }
  THREE.Object3D.prototype.update.call(this, a);
};
KinectDevice.prototype.isConnected = function() {
  return this.connected;
};
KinectDevice.prototype.setCameraMode = function(a) {
  a === KinectDevice.COLOR ? socket.send("Color") : a === KinectDevice.DEPTH && socket.send("Depth");
};
KinectDevice.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.debugModel = this.debugModel;
  return a;
};
"use strict";
function Mesh(a, c) {
  THREE._Mesh.call(this, a, c);
  this.name = "model";
  this.castShadow = this.receiveShadow = !0;
}
THREE._Mesh = THREE.Mesh;
THREE.Mesh = Mesh;
Mesh.prototype = Object.create(THREE._Mesh.prototype);
Mesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function SkinnedMesh(a, c, k) {
  THREE._SkinnedMesh.call(this, a, c, k);
  this.name = "skinned";
  this.castShadow = this.receiveShadow = !0;
}
THREE._SkinnedMesh = THREE.SkinnedMesh;
THREE.SkinnedMesh = SkinnedMesh;
SkinnedMesh.prototype = Object.create(THREE._SkinnedMesh.prototype);
SkinnedMesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
SkinnedMesh.prototype.toJSON = function(a) {
  var c = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    void 0 !== c.skeleton && (void 0 === a.skeletons[c.skeleton.uuid] && (a.skeletons[c.skeleton.uuid] = c.skeleton.toJSON(a)), b.skeleton = c.skeleton.uuid);
  });
  void 0 !== this.bindMode && (a.object.bindMode = this.bindMode);
  void 0 !== this.bindMatrix && (a.object.bindMatrix = this.bindMatrix.toArray());
  return a;
};
"use strict";
function CanvasSprite() {
  this.texture = new CanvasTexture;
  this.canvas = this.texture.image;
  var a = new THREE.SpriteMaterial({map:this.texture, color:16777215, transparent:!0, alphaTest:.4, depthTest:!0, depthWrite:!0, sizeAttenuation:!0});
  THREE.Sprite.call(this, a);
  this.name = "sprite";
  this.type = "CanvasSprite";
  Object.defineProperties(this, {sizeAttenuation:{get:function() {
    return this.material.sizeAttenuation;
  }, set:function(a) {
    this.material.sizeAttenuation = a;
    this.material.needsUpdate = !0;
  }}});
}
CanvasSprite.prototype = Object.create(THREE.Sprite.prototype);
"use strict";
function Sprite(a) {
  THREE._Sprite.call(this, a);
  this.name = "sprite";
}
THREE._Sprite = THREE.Sprite;
THREE.Sprite = Sprite;
Sprite.prototype = Object.create(THREE._Sprite.prototype);
Sprite.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function TextMesh(a, c, k, b, e, f, h, r, q, n) {
  Mesh.call(this, TextMesh.EMPTY_GEOMETRY, c);
  this.name = "text";
  this.type = "TextMesh";
  this.font = void 0 !== k ? k : null;
  this.extruded = void 0 !== n ? n : !0;
  this.size = void 0 !== r ? r : 1;
  this.height = void 0 !== b ? b : .5;
  this.curveSegments = void 0 !== q ? q : 15;
  this.bevel = void 0 !== e ? e : !1;
  this.bevelThickness = void 0 !== f ? f : .1;
  this.bevelSize = void 0 !== h ? h : .05;
  a = void 0 !== a ? a : "text";
  Object.defineProperties(this, {text:{get:function() {
    return a;
  }, set:function(b) {
    a !== b && (a = b, this.updateGeometry());
  }}});
  this.updateGeometry();
}
TextMesh.prototype = Object.create(Mesh.prototype);
TextMesh.EMPTY_GEOMETRY = new THREE.Geometry;
TextMesh.prototype.setFont = function(a) {
  this.font !== a && (this.font = a, this.updateGeometry());
};
TextMesh.prototype.setText = function(a) {
  this.text = a;
};
TextMesh.prototype.updateGeometry = function() {
  if (null !== this.font) {
    if (void 0 !== this.geometry && this.geometry.dispose(), !0 !== this.font.isFont) {
      console.warn("nunuStudio: Font parameter is not an instance of THREE.Font."), this.geometry = TextMesh.EMPTY_GEOMETRY;
    } else {
      var a = this.font.generateShapes(this.text, this.size);
      this.extruded ? (this.geometry = new THREE.ExtrudeBufferGeometry(a, {curveSegments:this.curveSegments, depth:this.height, bevelEnabled:this.bevel, bevelSize:this.bevelSize, bevelThickness:this.bevelThickness}), this.geometry.computeVertexNormals()) : this.geometry = new THREE.ShapeBufferGeometry(a, this.curveSegments);
    }
  }
};
TextMesh.prototype.clone = function() {
  return new TextMesh(this.text, this.material, this.font, this.height, this.bevel, this.bevelThickness, this.bevelSize, this.size, this.curveSegments);
};
TextMesh.prototype.toJSON = function(a) {
  var c = this.geometry;
  this.geometry = void 0;
  var k = this.font;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    k = k.toJSON(a);
  });
  a.object.text = this.text;
  a.object.font = k.uuid;
  a.object.size = this.size;
  a.object.curveSegments = this.curveSegments;
  a.object.height = this.height;
  a.object.bevel = this.bevel;
  a.object.bevelThickness = this.bevelThickness;
  a.object.bevelSize = this.bevelSize;
  a.object.extruded = this.extruded;
  this.geometry = c;
  return a;
};
"use strict";
function TextBitmap(a, c, k, b) {
  if (void 0 === a.font) {
    throw Error("TextBitmap configuration font is required.");
  }
  void 0 === a.width && (a.width = 500);
  void 0 === a.align && (a.align = TextBitmap.CENTER);
  void 0 === a.lineHeight && (a.lineHeight = a.font.common.lineHeight);
  void 0 === a.letterSpacing && (a.letterSpacing = 5);
  void 0 === a.text && (a.text = "");
  this.config = a;
  this.uniforms = {map:{type:"t", value:c}, color:{type:"v3", value:new THREE.Color(void 0 !== b ? b : 16777215)}, smoothing:{type:"f", value:0}, threshold:{type:"f", value:.4}};
  THREE.Mesh.call(this, createGeometry(this.config), null);
  this.name = "text";
  this.type = "TextBitmap";
  k = void 0 !== k ? k : TextBitmap.BITMAP;
  var e = .01;
  Object.defineProperties(this, {fontScale:{get:function() {
    return e;
  }, set:function(a) {
    e = a;
    this.updateGeometry();
  }}, shader:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    this.updateShader();
  }}, texture:{get:function() {
    return this.uniforms.map.value;
  }, set:function(a) {
    this.uniforms.map.value = a;
    this.material.needsUpdate = !0;
  }}, font:{get:function() {
    return this.config.font;
  }, set:function(a) {
    this.config.font = a;
    this.updateGeometry();
  }}, text:{get:function() {
    return this.config.text;
  }, set:function(a) {
    this.config.text !== a && (this.config.text = a, this.updateGeometry());
  }}, lineHeight:{get:function() {
    return this.config.lineHeight;
  }, set:function(a) {
    this.config.lineHeight = a;
    this.updateGeometry();
  }}, letterSpacing:{get:function() {
    return this.config.letterSpacing;
  }, set:function(a) {
    this.config.letterSpacing = a;
    this.updateGeometry();
  }}, align:{get:function() {
    return this.config.align;
  }, set:function(a) {
    this.config.align = a;
    this.updateGeometry();
  }}, width:{get:function() {
    return this.config.width;
  }, set:function(a) {
    this.config.width = a;
    this.updateGeometry();
  }}, color:{get:function() {
    return this.uniforms.color.value;
  }, set:function(a) {
    this.uniforms.color.value = a;
  }}, threshold:{get:function() {
    return this.uniforms.threshold.value;
  }, set:function(a) {
    this.uniforms.threshold.value = a;
  }}, smoothing:{get:function() {
    return this.uniforms.smoothing.value;
  }, set:function(a) {
    this.uniforms.smoothing.value = a;
  }}});
  this.updateGeometry();
  this.updateShader(c);
}
TextBitmap.prototype = Object.create(THREE.Mesh.prototype);
TextBitmap.prototype.constructor = TextBitmap;
TextBitmap.BITMAP = 100;
TextBitmap.SDF = 101;
TextBitmap.MSDF = 102;
TextBitmap.LEFT = "left";
TextBitmap.CENTER = "center";
TextBitmap.RIGHT = "right";
TextBitmap.VERTEX_SHADER = "\n#define BILLBOARD 0 \n\nvarying vec2 vUv;\n\nvoid main()\n{\n\tvUv = uv;\n\t\n\t#if BILLBOARD\n\t\tmat4 model = modelViewMatrix; \n\t\tmodel[0][0] = 1.0;\n\t\tmodel[0][1] = 0.0;\n\t\tmodel[0][2] = 0.0;\n\t\t\n\t\tmodel[1][0] = 0.0;\n\t\tmodel[1][1] = 1.0;\n\t\tmodel[1][2] = 0.0;\n\t\t\n\t\tmodel[2][0] = 0.0;\n\t\tmodel[2][1] = 0.0;\n\t\tmodel[2][2] = 1.0;\n\t\t\n\t\tgl_Position = projectionMatrix * model * vec4(position, 1.0);\n\t#else\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t#endif\n\t\n}";
TextBitmap.BITMAP_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\n\nvoid main()\n{\n\tgl_FragColor = texture2D(map, vUv);\n}";
TextBitmap.SDF_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nvoid main()\n{\n\tfloat distance = texture2D(map, vUv).a;\n\tfloat alpha = smoothstep(threshold - smoothing, threshold + smoothing, distance);\n\tgl_FragColor = vec4(color, alpha);\n}";
TextBitmap.MSDF_SHADER = "\n#extension GL_OES_standard_derivatives : enable\n\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nfloat median(float r, float g, float b)\n{\n\treturn max(min(r, g), min(max(r, g), b));\n}\n\nvoid main()\n{\n\tvec3 sample = texture2D(map, vUv).rgb;\n\tfloat sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n\tfloat alpha = clamp(sigDist / fwidth(sigDist) + 0.5, 0.0, 1.0);\n\tgl_FragColor = vec4(color, 1.0 - alpha);\n}";
TextBitmap.prototype.setText = function(a) {
  this.text = a;
};
TextBitmap.prototype.updateShader = function() {
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, fragmentShader:this.shader === TextBitmap.SDF ? TextBitmap.SDF_SHADER : this.shader === TextBitmap.MSDF ? TextBitmap.MSDF_SHADER : TextBitmap.BITMAP_SHADER, vertexShader:TextBitmap.VERTEX_SHADER, side:THREE.DoubleSide, transparent:!0, depthTest:!0});
};
TextBitmap.prototype.updateGeometry = function() {
  this.geometry.update(this.config);
  if (1 !== this.fontScale) {
    for (var a = this.geometry.attributes.position.array, c = 0; c < a.length; c++) {
      a[c] *= this.fontScale;
    }
  }
};
TextBitmap.prototype.toJSON = function(a) {
  var c = THREE.Object3D.prototype.toJSON.call(this, a);
  c.object.texture = this.texture.toJSON(a).uuid;
  c.object.fontScale = this.fontScale;
  c.object.shader = this.shader;
  c.object.text = this.text;
  c.object.font = this.font;
  c.object.lineHeight = this.lineHeight;
  c.object.letterSpacing = this.letterSpacing;
  c.object.align = this.align;
  c.object.width = this.width;
  c.object.color = this.color;
  c.object.threshold = this.threshold;
  c.object.smoothing = this.smoothing;
  return c;
};
TextBitmap.fromJSON = function(a, c) {
  c = new TextBitmap(a, c, a.shader);
  c.color = a.color;
  c.threshold = a.threshold;
  c.smoothing = a.smoothing;
  c.fontScale = a.fontScale;
  return c;
};
"use strict";
function TextSprite() {
  CanvasSprite.call(this);
  this.name = "text";
  this.type = "TextSprite";
  var a = "", c = "#FFFFFF", k = !0, b = "#000000", e = 1, f = 32, h = TextSprite.CENTER, r = "arial";
  Object.defineProperties(this, {font:{get:function() {
    return r;
  }, set:function(a) {
    r = a;
    this.drawText();
  }}, align:{get:function() {
    return h;
  }, set:function(a) {
    h = a;
    this.drawText();
  }}, color:{get:function() {
    return c;
  }, set:function(a) {
    c = a;
    this.drawText();
  }}, text:{get:function() {
    return a;
  }, set:function(b) {
    b !== a && (a = b, this.drawText());
  }}, outline:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    this.drawText();
  }}, outlineColor:{get:function() {
    return b;
  }, set:function(a) {
    b = a;
    this.drawText();
  }}, outlineWidth:{get:function() {
    return e;
  }, set:function(a) {
    e = a;
    this.drawText();
  }}, resolution:{get:function() {
    return f;
  }, set:function(a) {
    f = a;
    this.drawText();
  }}});
  this.text = "text";
}
TextSprite.prototype = Object.create(CanvasSprite.prototype);
TextSprite.LEFT = "left";
TextSprite.CENTER = "center";
TextSprite.RIGHT = "right";
TextSprite.prototype.drawText = function() {
  var a = this.resolution, c = .8 * a, k = this.texture.context;
  k.font = c + "px " + this.font;
  var b = k.measureText(this.text).width;
  b = THREE.Math.ceilPowerOfTwo(b);
  var e = b / a;
  this.texture.width = b;
  this.texture.height = a;
  k.clearRect(0, 0, b, a);
  0 !== this.text.length && (k.font = c + "px " + this.font, k.textAlign = this.align, k.textBaseline = "middle", k.fillStyle = this.color, k.fillText(this.text, b / 2, a / 2), !0 === this.outline && (k.lineWidth = this.outlineWidth, k.strokeStyle = this.outlineColor, k.strokeText(this.text, b / 2, a / 2)), this.scale.x = e * this.scale.y, this.texture.needsUpdate = !0);
};
TextSprite.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.text = this.text;
  a.object.color = this.color;
  a.object.outline = this.outline;
  a.object.outlineColor = this.outlineColor;
  a.object.outlineWidth = this.outlineWidth;
  a.object.resolution = this.resolution;
  a.object.align = this.align;
  a.object.font = this.font;
  return a;
};
TextSprite.fromJSON = function(a) {
  var c = new TextSprite;
  c.text = a.text;
  c.color = a.color;
  c.outline = a.outline;
  c.outlineColor = a.outlineColor;
  c.outlineWidth = a.outlineWidth;
  c.resolution = a.resolution;
  c.align = a.align;
  c.font = a.font;
  return c;
};
"use strict";
function PointLight(a, c, k, b) {
  THREE._PointLight.call(this, a, c, k, b);
  this.name = "point";
  this.castShadow = !0;
  this.shadow.camera.near = .1;
  this.shadow.camera.far = 1E3;
  this.shadow.bias = 0;
}
THREE._PointLight = THREE.PointLight;
THREE.PointLight = PointLight;
PointLight.prototype = Object.create(THREE._PointLight.prototype);
PointLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function SpotLight(a, c, k, b, e, f) {
  THREE._SpotLight.call(this, a, c, k, b, e, f);
  this.name = "spotlight";
  this.castShadow = !0;
  this.shadow.camera.near = .05;
  this.shadow.camera.far = 5E3;
  this.shadow.mapSize.width = 512;
  this.shadow.mapSize.height = 512;
}
THREE._SpotLight = THREE.SpotLight;
THREE.SpotLight = SpotLight;
SpotLight.prototype = Object.create(THREE._SpotLight.prototype);
SpotLight.prototype.setTarget = function(a) {
  this.target = a;
};
SpotLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
SpotLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.target = this.target.uuid;
  return a;
};
"use strict";
function AmbientLight(a) {
  THREE._AmbientLight.call(this, a);
  this.name = "ambient";
  this.matrixAutoUpdate = !1;
}
THREE._AmbientLight = THREE.AmbientLight;
THREE.AmbientLight = AmbientLight;
AmbientLight.prototype = Object.create(THREE._AmbientLight.prototype);
"use strict";
function DirectionalLight(a, c) {
  THREE._DirectionalLight.call(this, a, c);
  this.name = "directional";
  this.castShadow = !0;
  this.shadow.camera.near = .5;
  this.shadow.camera.far = 1E4;
}
THREE._DirectionalLight = THREE.DirectionalLight;
THREE.DirectionalLight = DirectionalLight;
DirectionalLight.prototype = Object.create(THREE._DirectionalLight.prototype);
DirectionalLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function HemisphereLight(a, c, k) {
  THREE._HemisphereLight.call(this, a, c, k);
  this.name = "hemisphere";
}
THREE._HemisphereLight = THREE.HemisphereLight;
THREE.HemisphereLight = HemisphereLight;
HemisphereLight.prototype = Object.create(THREE._HemisphereLight.prototype);
"use strict";
function RectAreaLight(a, c, k, b) {
  THREE._RectAreaLight.call(this, a, c, k, b);
  this.name = "rectarea";
}
THREE._RectAreaLight = THREE.RectAreaLight;
THREE.RectAreaLight = RectAreaLight;
RectAreaLight.prototype = Object.create(THREE._RectAreaLight.prototype);
RectAreaLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.width = this.width;
  a.object.height = this.height;
  return a;
};
"use strict";
function Viewport(a) {
  this.offset = new THREE.Vector2(0, 0);
  this.size = new THREE.Vector2(1, 1);
  this.mode = void 0 !== a ? a : Viewport.RELATIVE;
  this.anchor = Viewport.TOP_LEFT;
  this.height = this.width = 1;
  this.viewport = new THREE.Vector4(0, 0, 1, 1);
}
Viewport.RELATIVE = 200;
Viewport.ABSOLUTE = 201;
Viewport.TOP_LEFT = 301;
Viewport.TOP_RIGHT = 302;
Viewport.BOTTOM_LEFT = 303;
Viewport.BOTTOM_RIGHT = 304;
Viewport.prototype.update = function(a) {
  var c;
  if (void 0 === a) {
    var k = c = 0;
    var b = this.width;
    a = this.height;
  } else {
    c = a.viewport.x, k = a.viewport.y, b = a.viewport.z, a = a.viewport.w;
  }
  if (this.mode === Viewport.RELATIVE) {
    var e = new THREE.Vector2(this.offset.x * b, this.offset.y * a);
    var f = new THREE.Vector2(this.size.x * b, this.size.y * a);
  } else {
    this.mode === Viewport.ABSOLUTE && (e = this.offset, f = this.size);
  }
  this.anchor === Viewport.BOTTOM_LEFT ? this.viewport.set(e.x + c, e.y + k, f.x, f.y) : this.anchor === Viewport.BOTTOM_RIGHT ? this.viewport.set(b - f.x - e.x + c, e.y + k, f.x, f.y) : this.anchor === Viewport.TOP_LEFT ? this.viewport.set(e.x + c, a - f.y - e.y + k, f.x, f.y) : this.anchor === Viewport.TOP_RIGHT && this.viewport.set(b - f.x - e.x + c, a - f.y - e.y + k, f.x, f.y);
};
Viewport.prototype.getAspectRatio = function() {
  return this.viewport.z / this.viewport.w;
};
Viewport.prototype.isInside = function(a, c) {
  return c.position.x > this.viewport.x && c.position.x < this.viewport.x + this.viewport.z && c.position.y < this.height - this.viewport.y && c.position.y > this.height - this.viewport.y - this.viewport.w;
};
Viewport.prototype.getNormalized = function() {
  var a = new THREE.Vector2;
  return function(c, k) {
    a.set((k.position.x - this.viewport.z - this.viewport.x) / this.viewport.z * 2 + 1, -(k.position.y - (this.height - (this.viewport.y + this.viewport.w))) / this.viewport.w * 2 + 1);
    return a;
  };
}();
Viewport.prototype.enable = function(a) {
  a.setViewport(this.viewport);
  a.setScissor(this.viewport);
};
Viewport.prototype.toJSON = function() {
  return {offset:this.offset.toArray(), size:this.size.toArray(), mode:this.mode, anchor:this.anchor};
};
Viewport.prototype.fromJSON = function(a) {
  this.offset.fromArray(a.offset);
  this.size.fromArray(a.size);
  this.mode = a.mode;
  this.anchor = a.anchor;
};
"use strict";
function PerspectiveCamera(a, c, k, b) {
  this.viewport = new Viewport;
  THREE.PerspectiveCamera.call(this, a, c, k, b);
  this.name = "camera";
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
PerspectiveCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);
PerspectiveCamera.prototype.resize = function(a, c, k) {
  this.viewport.width = a;
  this.viewport.height = c;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
PerspectiveCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
PerspectiveCamera.prototype.render = function(a, c) {
  this.composer.render(a, c, this, .016);
};
PerspectiveCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  var a = this.near * Math.tan(.5 * THREE.Math.DEG2RAD * this.fov) / this.zoom, c = 2 * a, k = this.aspect * c, b = -.5 * k;
  0 !== this.filmOffset && (b += this.near * this.filmOffset / this.getFilmWidth());
  this.projectionMatrix.makePerspective(b, b + k, a, a - c, this.near, this.far);
  this.projectionMatrixInverse.getInverse(this.projectionMatrix);
};
PerspectiveCamera.prototype.toJSON = function(a) {
  a = THREE.PerspectiveCamera.prototype.toJSON.call(this, a);
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function OrthographicCamera(a, c, k, b, e) {
  THREE.OrthographicCamera.call(this, -1, 1, 1, -1, b, e);
  this.name = "camera";
  this.size = void 0 != a ? a : 10;
  this.aspect = void 0 != c ? c : 1;
  this.mode = void 0 !== k ? k : OrthographicCamera.RESIZE_HORIZONTAL;
  this.viewport = new Viewport;
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.updateProjectionMatrix();
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
OrthographicCamera.prototype = Object.create(THREE.OrthographicCamera.prototype);
OrthographicCamera.RESIZE_HORIZONTAL = 0;
OrthographicCamera.RESIZE_VERTICAL = 1;
OrthographicCamera.prototype.resize = function(a, c, k) {
  this.viewport.width = a;
  this.viewport.height = c;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
OrthographicCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
OrthographicCamera.prototype.render = function(a, c) {
  this.composer.render(a, c, this, .016);
};
OrthographicCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
OrthographicCamera.prototype.updateProjectionMatrix = function() {
  this.mode === OrthographicCamera.RESIZE_HORIZONTAL ? (this.top = this.size / 2, this.bottom = -this.top, this.right = this.top * this.aspect, this.left = -this.right) : this.mode === OrthographicCamera.RESIZE_VERTICAL && (this.right = this.size / 2, this.left = -this.right, this.top = this.right / this.aspect, this.bottom = -this.top);
  THREE.OrthographicCamera.prototype.updateProjectionMatrix.call(this);
};
OrthographicCamera.prototype.toJSON = function(a) {
  a = THREE.OrthographicCamera.prototype.toJSON.call(this, a);
  a.object.size = this.size;
  a.object.aspect = this.aspect;
  a.object.mode = this.mode;
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function CubeCamera(a, c, k, b) {
  THREE.Object3D.call(this);
  this.name = "cubecamera";
  this.type = "CubeCamera";
  this.near = void 0 !== a ? a : .01;
  this.far = void 0 !== c ? c : 1E4;
  this.resolution = void 0 !== k ? k : 256;
  this.autoUpdate = void 0 !== b ? b : !1;
  this.cameras = [];
  for (a = 0; 6 > a; a++) {
    c = new THREE.PerspectiveCamera(90, 1, this.near, this.far), c.parent = this, this.cameras.push(c);
  }
  this.cameras[0].up.set(0, -1, 0);
  this.cameras[0].lookAt(new THREE.Vector3(1, 0, 0));
  this.cameras[1].up.set(0, -1, 0);
  this.cameras[1].lookAt(new THREE.Vector3(-1, 0, 0));
  this.cameras[2].up.set(0, 0, 1);
  this.cameras[2].lookAt(new THREE.Vector3(0, 1, 0));
  this.cameras[3].up.set(0, 0, -1);
  this.cameras[3].lookAt(new THREE.Vector3(0, -1, 0));
  this.cameras[4].up.set(0, -1, 0);
  this.cameras[4].lookAt(new THREE.Vector3(0, 0, 1));
  this.cameras[5].up.set(0, -1, 0);
  this.cameras[5].lookAt(new THREE.Vector3(0, 0, -1));
  this.target = new THREE.WebGLRenderTargetCube(this.resolution, this.resolution, {format:THREE.RGBFormat, magFilter:THREE.LinearFilter, minFilter:THREE.LinearFilter});
  this.cube = this.target.texture;
  this.cube.generateMipmaps = !1;
  this.cube.name = "cube";
  this.renderer = this.scene = null;
}
THREE._CubeCamera = THREE.CubeCamera;
THREE.CubeCamera = CubeCamera;
CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
CubeCamera.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.renderer = a.renderer);
  }
  THREE.Object3D.prototype.initialize.call(this);
};
CubeCamera.prototype.update = function(a) {
  this.autoUpdate && this.updateCubeMap(this.renderer, this.scene);
  THREE.Object3D.prototype.update.call(this, a);
};
CubeCamera.prototype.setResolution = function(a) {
  this.resolution = a;
  this.target.setSize(a, a);
};
CubeCamera.prototype.clear = function(a, c, k, b) {
  for (var e = a.getRenderTarget(), f = 0; 6 > f; f++) {
    a.setRenderTarget(this.target, f), a.clear(c, k, b);
  }
  a.setRenderTarget(e);
};
CubeCamera.prototype.updateCubeMap = function(a, c) {
  var k = a.autoClear;
  a.autoClear = !0;
  for (var b = 0; 6 > b; b++) {
    this.cameras[b].updateMatrixWorld(), a.setRenderTarget(this.target, b), a.render(c, this.cameras[b]);
  }
  a.autoClear = k;
};
CubeCamera.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.near = this.near;
  a.object.far = this.far;
  a.object.resolution = this.resolution;
  a.object.autoUpdate = this.autoUpdate;
  return a;
};
"use strict";
function AudioEmitter(a) {
  THREE.Object3D.call(this);
  this.name = "audio";
  this.type = "Audio";
  this.listener = new THREE.AudioListener;
  this.context = this.listener.context;
  this.matrixAutoUpdate = !1;
  this.gain = this.context.createGain();
  this.gain.connect(this.listener.getInput());
  this.buffer = null;
  this.filters = [];
  this.sourceType = "empty";
  this.audio = void 0 !== a ? a : null;
  this.autoplay = !0;
  this.playbackRate = this.volume = 1;
  this.startTime = 0;
  this.loop = !0;
  this.detune = 0;
  this.isPlaying = !1;
  this.hasPlaybackControl = !0;
  this.filters = [];
}
THREE.Audio = AudioEmitter;
AudioEmitter.prototype = Object.create(THREE.Object3D.prototype);
AudioEmitter.SOURCE = {EMPTY:"empty", BUFFER:"buffer", NODE:"audioNode"};
AudioEmitter.prototype.onEnded = function() {
  this.isPlaying = !1;
};
AudioEmitter.prototype.connect = function() {
  if (0 < this.filters.length) {
    this.source.connect(this.filters[0]);
    for (var a = 1, c = this.filters.length; a < c; a++) {
      this.filters[a - 1].connect(this.filters[a]);
    }
    this.filters[this.filters.length - 1].connect(this.getOutput());
  } else {
    this.source.connect(this.getOutput());
  }
  return this;
};
AudioEmitter.prototype.disconnect = function() {
  if (0 < this.filters.length) {
    this.source.disconnect(this.filters[0]);
    for (var a = 1, c = this.filters.length; a < c; a++) {
      this.filters[a - 1].disconnect(this.filters[a]);
    }
    this.filters[this.filters.length - 1].disconnect(this.getOutput());
  } else {
    this.source.disconnect(this.getOutput());
  }
  return this;
};
AudioEmitter.prototype.initialize = function() {
  if (null !== this.audio) {
    var a = this;
    this.audio.getAudioBuffer(this.context, function(c) {
      a.setBuffer(c);
    });
  } else {
    console.warn("nunuStudio: AudioEmitter audio is null.");
  }
  this.setVolume(this.volume);
  this.setPlaybackRate(this.playbackRate);
  THREE.Object3D.prototype.initialize.call(this);
};
AudioEmitter.prototype.setBuffer = function(a) {
  this.buffer = a;
  this.sourceType = "buffer";
  !0 === this.autoplay && this.play();
  return this;
};
AudioEmitter.prototype.play = function() {
  if (null === this.buffer) {
    console.warn("nunuStudio: Audio buffer not ready, audio will not play.");
  } else {
    this.isPlaying && console.warn("nunuStudio: Audio is already playing, its only possible to control the last playing instance.");
    var a = this.context.createBufferSource();
    a.buffer = this.buffer;
    a.detune.value = this.detune;
    a.loop = this.loop;
    a.onended = this.onEnded.bind(this);
    a.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
    a.start(0, this.startTime);
    this.isPlaying = !0;
    this.source = a;
    return this.connect();
  }
};
AudioEmitter.prototype.pause = function() {
  this.source.stop();
  this.startTime = this.context.currentTime;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.stop = function() {
  this.source.stop();
  this.startTime = 0;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.setAudio = function(a) {
  this.audio = a;
  null !== this.buffer && (this.isPlaying && this.stop(), this.disconnect());
  var c = this;
  this.audio.getAudioBuffer(this.context, function(a) {
    c.setBuffer(a);
  });
};
AudioEmitter.prototype.getVolume = function() {
  return this.gain.gain.value;
};
AudioEmitter.prototype.setVolume = function(a) {
  this.volume = a;
  this.gain.gain.value = a;
  return this;
};
AudioEmitter.prototype.setLoop = function(a) {
  this.loop = a;
  this.isPlaying && (this.source.loop = this.loop);
  return this;
};
AudioEmitter.prototype.setDetune = function(a) {
  this.detune = a;
  !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01);
  return this;
};
AudioEmitter.prototype.getLoop = function() {
  return this.loop;
};
AudioEmitter.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);
  return this;
};
AudioEmitter.prototype.getPlaybackRate = function() {
  return this.playbackRate;
};
AudioEmitter.prototype.getFilters = function() {
  return this.filters;
};
AudioEmitter.prototype.setFilters = function(a) {
  a || (a = []);
  this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
  return this;
};
AudioEmitter.prototype.getFilter = function(a) {
  return this.getFilters()[void 0 !== a ? a : 0];
};
AudioEmitter.prototype.setFilter = function(a) {
  return this.setFilters(a ? [a] : []);
};
AudioEmitter.prototype.setNodeSource = function(a) {
  this.hasPlaybackControl = !1;
  this.sourceType = "audioNode";
  this.source = a;
  this.connect();
  return this;
};
AudioEmitter.prototype.getOutput = function() {
  return this.gain;
};
AudioEmitter.prototype.dispose = function() {
  this.isPlaying && (this.stop(), this.disconnect());
  THREE.Object3D.prototype.dispose.call(this);
};
AudioEmitter.prototype.toJSON = function(a) {
  var c = this.audio;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    c = c.toJSON(a);
  });
  a.object.audio = c.uuid;
  a.object.volume = this.volume;
  a.object.autoplay = this.autoplay;
  a.object.startTime = this.startTime;
  a.object.playbackRate = this.playbackRate;
  a.object.loop = this.loop;
  return a;
};
"use strict";
function PositionalAudio(a) {
  AudioEmitter.call(this, a);
  this.type = "PositionalAudio";
  this.matrixAutoUpdate = !0;
  this.distanceModel = "inverse";
  this.panningModel = "HRTF";
  this.panner = this.context.createPanner();
  this.panner.connect(this.gain);
  this.panner.panningModel = this.panningModel;
  this.panner.distanceModel = this.distanceModel;
  this.panner.refDistance = 1;
  this.panner.maxDistance = 1E4;
  this.panner.rolloffFactor = 1;
  this.panner.coneInnerAngle = 360;
  this.panner.coneOuterAngle = 0;
  this.panner.coneOuterGain = 0;
  this.scene = null;
  this.tempPosition = new THREE.Vector3;
  this.tempPositionCamera = new THREE.Vector3;
  this.tempQuaternionCamera = new THREE.Quaternion;
}
THREE.PositionalAudio = PositionalAudio;
PositionalAudio.prototype = Object.create(AudioEmitter.prototype);
PositionalAudio.prototype.initialize = function() {
  AudioEmitter.prototype.initialize.call(this);
  for (var a = this.parent; null !== a;) {
    if (a instanceof Scene) {
      this.scene = a;
      break;
    }
    a = a.parent;
  }
};
PositionalAudio.prototype.update = function(a) {
  if (0 < this.scene.cameras.length) {
    var c = this.scene.cameras[0];
    this.getWorldPosition(this.tempPosition);
    c.getWorldPosition(this.tempPositionCamera);
    c.getWorldQuaternion(this.tempQuaternionCamera);
    this.tempPosition.sub(this.tempPositionCamera);
    this.tempPosition.z = -this.tempPosition.z;
    this.tempPosition.applyQuaternion(this.tempQuaternionCamera);
    this.panner.setPosition(this.tempPosition.x, this.tempPosition.z, this.tempPosition.y);
  } else {
    this.panner.setPosition(0, 0, 0), this.panner.setOrientation(0, 0, 0);
  }
  THREE.Object3D.prototype.update.call(this, a);
};
PositionalAudio.prototype.getOutput = function() {
  return this.panner;
};
PositionalAudio.prototype.getRefDistance = function() {
  return this.panner.refDistance;
};
PositionalAudio.prototype.setRefDistance = function(a) {
  this.panner.refDistance = a;
};
PositionalAudio.prototype.getRolloffFactor = function() {
  return this.panner.rolloffFactor;
};
PositionalAudio.prototype.setRolloffFactor = function(a) {
  this.panner.rolloffFactor = a;
};
PositionalAudio.prototype.getDistanceModel = function() {
  return this.panner.distanceModel;
};
PositionalAudio.prototype.setDistanceModel = function(a) {
  this.panner.distanceModel = a;
};
PositionalAudio.prototype.getMaxDistance = function() {
  return this.panner.maxDistance;
};
PositionalAudio.prototype.setMaxDistance = function(a) {
  this.panner.maxDistance = a;
};
PositionalAudio.prototype.toJSON = function(a) {
  a = AudioEmitter.prototype.toJSON.call(this, a);
  a.object.distanceModel = this.distanceModel;
  a.object.panningModel = this.panningModel;
  return a;
};
function Script(a, c) {
  THREE.Group.call(this);
  this.type = "Script";
  this.name = "script";
  this.code = void 0 !== a ? a : Script.DEFAULT;
  this.mode = void 0 !== c ? c : Script.APPEND;
  this.script = {};
  this.scene = this.program = null;
}
Script.prototype = Object.create(THREE.Group.prototype);
Script.DEFAULT = "function initialize()\n{\n\t//TODO <INITIALIZATION CODE>\n}\n\nfunction update(delta)\n{\n\t//TODO <UPDATE CODE>\n}\n";
Script.METHODS = "initialize update dispose onMouseOver onResize onAppData".split(" ");
Script.APPEND = 100;
Script.EVALUATE = 101;
Script.INCLUDE = 102;
Script.getIncludes = function(a) {
  var c = [], k = a.search(/include\(".+?"\);/gi);
  -1 !== k && (a = a.substring(k), k = a.indexOf('");'), a = a.substring(9, k), c.push(a));
  return c;
};
Script.removeIncludes = function(a) {
  return a.replace(/include\(".+?"\);/gi, "");
};
Script.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.program = a);
  }
  THREE.Object3D.prototype.initialize.call(this);
  var c = this;
  this.compileCode(this.code, function() {
    void 0 !== c.script.initialize && c.script.initialize.call(c);
  });
};
Script.prototype.update = function(a) {
  if (void 0 !== this.script.onMouseOver) {
    var c = this.scene.raycaster.intersectObjects(this.children, !0);
    0 < c.length && this.script.onMouseOver.call(this, c);
  }
  void 0 !== this.script.update && this.script.update.call(this, a);
  THREE.Object3D.prototype.update.call(this, a);
};
Script.prototype.dispose = function() {
  void 0 !== this.script.dispose && this.script.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Script.prototype.resize = function(a, c) {
  void 0 !== this.script.onResize && this.script.onResize.call(this, a, c);
};
Script.prototype.appData = function(a) {
  void 0 !== this.script.onAppData && this.script.onAppData.call(this, a);
};
Script.prototype.compileCode = function(a, c) {
  void 0 !== a && (this.code = a);
  try {
    a = this.code;
    for (var k = 0; k < Script.METHODS.length; k++) {
      var b = Script.METHODS[k];
      a += "\nif(this." + b + " == undefined && typeof " + b + " !== 'undefined'){this." + b + " = " + b + ";}";
    }
    if (this.mode === Script.APPEND) {
      var e = Script.getIncludes(a);
      a = Script.removeIncludes(a);
      for (k = 0; k < e.length; k++) {
        a = this.program.getResourceByName(e[k]).data + "\n" + a;
      }
      a += '\nfunction include(name)\t\t\t{\t\t\t\tconsole.warn("nunuStudio: Script running in append mode " + name);\t\t\t}';
    } else {
      if (this.mode === Script.EVALUATE) {
        a += '\nfunction include(name)\t\t\t{\t\t\t\tvar text = program.getResourceByName(name);\t\t\t\tif(text !== null)\t\t\t\t{\t\t\t\t\tnew Function(text.data).call(this);\t\t\t\t}\t\t\t\telse\t\t\t\t{\t\t\t\t\tconsole.warn("nunuStudio: Javascript file " + name + " not found in resources");\t\t\t\t}\t\t\t}';
      } else {
        if (this.mode === Script.INCLUDE) {
          e = Script.getIncludes(a);
          a = Script.removeIncludes(a);
          var f = 0;
          for (k = 0; k < e.length; k++) {
            var h = new Blob([this.program.getResourceByName(e[k]).data], {type:"text/plain"}), r = URL.createObjectURL(h), q = document.createElement("script");
            q.type = "text/javascript";
            q.async = !1;
            q.src = r;
            q.onload = function() {
              f++;
              f === e.length && c();
            };
            q.onerror = q.onload;
            document.body.appendChild(q);
          }
        }
      }
    }
    var n = new Function("Keyboard, Mouse, self, program, scene", a);
    try {
      this.script = new n(this.program.keyboard, this.program.mouse, this, this.program, this.scene);
    } catch (m) {
      throw console.warn("nunuStudio: Error initializing script code", m), "Error initializing script code";
    }
    this.mode !== Script.INCLUDE && c();
  } catch (m) {
    throw console.warn("nunuStudio: Error compiling script code", m), "Error compiling script code";
  }
};
Script.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.code = this.code;
  a.object.mode = this.mode;
  return a;
};
"use strict";
function PhysicsObject() {
  THREE.Group.call(this);
  this.name = "physics";
  this.type = "Physics";
  this.body = new CANNON.Body;
  this.body.type = CANNON.Body.DYNAMIC;
  this.body.mass = 1;
  this.world = null;
}
PhysicsObject.prototype = Object.create(THREE.Group.prototype);
PhysicsObject.prototype.initialize = function() {
  this.body.position.copy(this.position);
  this.body.quaternion.copy(this.quaternion);
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene && (this.world = a.world, this.world.addBody(this.body));
  }
  THREE.Object3D.prototype.initialize.call(this);
};
PhysicsObject.prototype.update = function(a) {
  this.position.copy(this.body.position);
  this.body.fixedRotation || this.quaternion.copy(this.body.quaternion);
  THREE.Object3D.prototype.update.call(this, a);
};
PhysicsObject.prototype.addShape = function(a) {
  a instanceof CANNON.Shape && this.body.addShape(a);
};
PhysicsObject.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.body = {};
  a.object.body.type = this.body.type;
  a.object.body.mass = this.body.mass;
  a.object.body.linearDamping = this.body.linearDamping;
  a.object.body.angularDamping = this.body.angularDamping;
  a.object.body.allowSleep = this.body.allowSleep;
  a.object.body.sleepSpeedLimit = this.body.sleepSpeedLimit;
  a.object.body.sleepTimeLimit = this.body.sleepTimeLimit;
  a.object.body.collisionFilterGroup = this.body.collisionFilterGroup;
  a.object.body.collisionFilterMask = this.body.collisionFilterMask;
  a.object.body.fixedRotation = this.body.fixedRotation;
  a.object.body.shapes = [];
  for (var c = this.body.shapes, k = 0; k < c.length; k++) {
    var b = c[k], e = {};
    e.type = b.type;
    b.type === CANNON.Shape.types.SPHERE ? e.radius = b.radius : b.type === CANNON.Shape.types.BOX ? (e.halfExtents = {}, e.halfExtents.x = b.halfExtents.x, e.halfExtents.y = b.halfExtents.y, e.halfExtents.z = b.halfExtents.z) : b.type === CANNON.Shape.types.CONVEXPOLYHEDRON ? (e.vertices = b.vertices, e.faces = b.faces) : b.type === CANNON.Shape.types.TRIMESH && (e.vertices = b.vertices, e.normals = b.normals, e.edges = b.edges, e.indices = b.indices);
    a.object.body.shapes[k] = e;
  }
  return a;
};
"use strict";
function SpineAnimation(a, c, k, b) {
  void 0 === b && (b = []);
  var e = new spine.TextureAtlas(c, function(a) {
    for (var e = 0; e < b.length; e++) {
      if (b[e].name === a) {
        var f = new SpineTexture(b[e].texture);
        break;
      }
    }
    e === b.length && (f = new SpineTexture(new Texture(new Image(k + "/" + a))), b.push({name:a, texture:f.texture}));
    a = f.texture.image;
    e = f.texture.img;
    if (0 < e.width && 0 < e.height) {
      a.width = e.width, a.height = e.height;
    } else {
      if (0 !== a.naturalWidth && 0 !== a.naturalHeight) {
        a.width = a.naturalWidth, a.height = a.naturalHeight, e.width = a.width, e.height = a.height;
      } else {
        e = c.search("size: ");
        var q = c.search("\nformat");
        e = c.substring(e + 6, q);
        e = e.split(",");
        a.width = parseInt(e[0]);
        a.height = parseInt(e[1]);
      }
    }
    return f;
  });
  e = new spine.AtlasAttachmentLoader(e);
  e = (new spine.SkeletonJson(e)).readSkeletonData(a);
  spine.threejs.SkeletonMesh.call(this, e);
  this.name = "spine";
  this.type = "SpineAnimation";
  this.frustumCulled = !1;
  this.castShadow = this.receiveShadow = !0;
  this.scale.set(.01, .01, .01);
  this.json = a;
  this.atlas = c;
  this.textures = b;
  this.skin = 0 < this.getSkins().length ? this.getSkins()[0].name : null;
  this.animation = 0 < this.getAnimations().length ? this.getAnimations()[0].name : null;
  this.track = 0;
  this.loop = !0;
  this.clock = new THREE.Clock;
  this.play();
}
SpineAnimation.prototype = Object.create(spine.threejs.SkeletonMesh.prototype);
SpineAnimation.prototype.update = THREE.Object3D.prototype.update;
SpineAnimation.prototype.onBeforeRender = function() {
  this.state.update(this.clock.getDelta());
  this.state.apply(this.skeleton);
  this.skeleton.updateWorldTransform();
  this.updateGeometry();
};
SpineAnimation.prototype.play = function() {
  null !== this.animation && this.setAnimation(this.track, this.animation, this.loop);
  null !== this.skin && this.setSkin(this.skin);
};
SpineAnimation.prototype.getAnimations = function() {
  return this.state.data.skeletonData.animations;
};
SpineAnimation.prototype.setAnimation = function(a, c, k) {
  try {
    void 0 !== a && (this.track = a), void 0 !== c && (this.animation = c), void 0 !== k && (this.loop = k), this.state.setAnimation(this.track, this.animation, this.loop);
  } catch (b) {
    this.animation = null, console.warn("nunuStudio: Error setting spine animation " + name + " on track " + a);
  }
};
SpineAnimation.prototype.getSkins = function() {
  return this.state.data.skeletonData.skins;
};
SpineAnimation.prototype.setSkin = function(a) {
  try {
    this.skeleton.setSkinByName(a), this.skin = a;
  } catch (c) {
    this.skin = null, console.warn("nunuStudio: Error setting spine skin " + a);
  }
};
SpineAnimation.prototype.toJSON = function(a) {
  var c = this.geometry, k = this.material;
  this.material = this.geometry = void 0;
  var b = [], e = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    for (c = 0; c < e.textures.length; c++) {
      var f = e.textures[c].texture.toJSON(a);
      b.push({name:e.textures[c].name, texture:f.uuid});
    }
  });
  a.object.json = this.json;
  a.object.atlas = this.atlas;
  a.object.textures = b;
  null !== this.animation && (a.object.animation = this.animation, a.object.track = this.track, a.object.loop = this.loop);
  null !== this.skin && (a.object.skin = this.skin);
  this.geometry = c;
  this.material = k;
  return a;
};
"use strict";
function SpineTexture(a) {
  spine.Texture.call(this, a.image);
  this.texture = a;
  this.texture.flipY = !1;
}
SpineTexture.prototype = Object.create(spine.Texture.prototype);
SpineTexture.prototype.setFilters = function(a, c) {
  this.texture.minFilter = SpineTexture.getTextureFilter(a);
  this.texture.magFilter = SpineTexture.getTextureFilter(c);
};
SpineTexture.prototype.setWraps = function(a, c) {
  this.texture.wrapS = SpineTexture.getTextureWrap(a);
  this.texture.wrapT = SpineTexture.getTextureWrap(c);
};
SpineTexture.prototype.dispose = function() {
  this.texture.dispose();
};
SpineTexture.getTextureFilter = function(a) {
  return a === spine.TextureFilter.Linear ? THREE.LinearFilter : a === spine.TextureFilter.MipMap || a === spine.TextureFilter.MipMapLinearLinear ? THREE.LinearMipMapLinearFilter : a === spine.TextureFilter.MipMapLinearNearest ? THREE.LinearMipMapNearestFilter : a === spine.TextureFilter.MipMapNearestLinear ? THREE.NearestMipMapLinearFilter : a === spine.TextureFilter.MipMapNearestNearest ? THREE.NearestMipMapNearestFilter : a === spine.TextureFilter.Nearest ? THREE.NearestFilter : null;
};
SpineTexture.getTextureWrap = function(a) {
  if (a === spine.TextureWrap.ClampToEdge) {
    return THREE.ClampToEdgeWrapping;
  }
  if (a === spine.TextureWrap.MirroredRepeat) {
    return THREE.MirroredRepeatWrapping;
  }
  if (a === spine.TextureWrap.Repeat) {
    return THREE.RepeatWrapping;
  }
};
"use strict";
function ParticleEmitterControl(a) {
  a = ShaderUtils.ensureTypedArg(a, ShaderUtils.types.OBJECT, {});
  a.position = ShaderUtils.ensureTypedArg(a.position, ShaderUtils.types.OBJECT, {});
  a.velocity = ShaderUtils.ensureTypedArg(a.velocity, ShaderUtils.types.OBJECT, {});
  a.acceleration = ShaderUtils.ensureTypedArg(a.acceleration, ShaderUtils.types.OBJECT, {});
  a.radius = ShaderUtils.ensureTypedArg(a.radius, ShaderUtils.types.OBJECT, {});
  a.drag = ShaderUtils.ensureTypedArg(a.drag, ShaderUtils.types.OBJECT, {});
  a.rotation = ShaderUtils.ensureTypedArg(a.rotation, ShaderUtils.types.OBJECT, {});
  a.color = ShaderUtils.ensureTypedArg(a.color, ShaderUtils.types.OBJECT, {});
  a.opacity = ShaderUtils.ensureTypedArg(a.opacity, ShaderUtils.types.OBJECT, {});
  a.size = ShaderUtils.ensureTypedArg(a.size, ShaderUtils.types.OBJECT, {});
  a.angle = ShaderUtils.ensureTypedArg(a.angle, ShaderUtils.types.OBJECT, {});
  a.wiggle = ShaderUtils.ensureTypedArg(a.wiggle, ShaderUtils.types.OBJECT, {});
  a.maxAge = ShaderUtils.ensureTypedArg(a.maxAge, ShaderUtils.types.OBJECT, {});
  a.onParticleSpawn && console.warn("nunuStudio: onParticleSpawn has been removed. Please set properties directly to alter values at runtime.");
  this.uuid = THREE.Math.generateUUID();
  this.type = ShaderUtils.ensureTypedArg(a.type, ShaderUtils.types.NUMBER, ParticleDistributions.BOX);
  this.position = {_value:ShaderUtils.ensureInstanceOf(a.position.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.position.spread, THREE.Vector3, new THREE.Vector3), _spreadClamp:ShaderUtils.ensureInstanceOf(a.position.spreadClamp, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.position.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1), _radius:ShaderUtils.ensureTypedArg(a.position.radius, 
  ShaderUtils.types.NUMBER, 10), _radiusScale:ShaderUtils.ensureInstanceOf(a.position.radiusScale, THREE.Vector3, new THREE.Vector3(1, 1, 1)), _distributionClamp:ShaderUtils.ensureTypedArg(a.position.distributionClamp, ShaderUtils.types.NUMBER, 0)};
  this.velocity = {_value:ShaderUtils.ensureInstanceOf(a.velocity.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.velocity.spread, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.velocity.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.acceleration = {_value:ShaderUtils.ensureInstanceOf(a.acceleration.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.acceleration.spread, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.acceleration.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.drag = {_value:ShaderUtils.ensureTypedArg(a.drag.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureTypedArg(a.drag.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.wiggle = {_value:ShaderUtils.ensureTypedArg(a.wiggle.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureTypedArg(a.wiggle.spread, ShaderUtils.types.NUMBER, 0)};
  this.rotation = {_axis:ShaderUtils.ensureInstanceOf(a.rotation.axis, THREE.Vector3, new THREE.Vector3(0, 1, 0)), _axisSpread:ShaderUtils.ensureInstanceOf(a.rotation.axisSpread, THREE.Vector3, new THREE.Vector3), _angle:ShaderUtils.ensureTypedArg(a.rotation.angle, ShaderUtils.types.NUMBER, 0), _angleSpread:ShaderUtils.ensureTypedArg(a.rotation.angleSpread, ShaderUtils.types.NUMBER, 0), _static:ShaderUtils.ensureTypedArg(a.rotation.static, ShaderUtils.types.BOOLEAN, !1), _center:ShaderUtils.ensureInstanceOf(a.rotation.center, 
  THREE.Vector3, this.position._value.clone()), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.maxAge = {_value:ShaderUtils.ensureTypedArg(a.maxAge.value, ShaderUtils.types.NUMBER, 2), _spread:ShaderUtils.ensureTypedArg(a.maxAge.spread, ShaderUtils.types.NUMBER, 0)};
  this.color = {_value:ShaderUtils.ensureArrayInstanceOf(a.color.value, THREE.Color, new THREE.Color), _spread:ShaderUtils.ensureArrayInstanceOf(a.color.spread, THREE.Vector3, new THREE.Vector3), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.opacity = {_value:ShaderUtils.ensureArrayTypedArg(a.opacity.value, ShaderUtils.types.NUMBER, 1), _spread:ShaderUtils.ensureArrayTypedArg(a.opacity.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.size = {_value:ShaderUtils.ensureArrayTypedArg(a.size.value, ShaderUtils.types.NUMBER, 1), _spread:ShaderUtils.ensureArrayTypedArg(a.size.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.angle = {_value:ShaderUtils.ensureArrayTypedArg(a.angle.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureArrayTypedArg(a.angle.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.particleCount = ShaderUtils.ensureTypedArg(a.particleCount, ShaderUtils.types.NUMBER, 100);
  this.duration = ShaderUtils.ensureTypedArg(a.duration, ShaderUtils.types.NUMBER, null);
  this.isStatic = ShaderUtils.ensureTypedArg(a.isStatic, ShaderUtils.types.BOOLEAN, !1);
  this.activeMultiplier = ShaderUtils.ensureTypedArg(a.activeMultiplier, ShaderUtils.types.NUMBER, 1);
  this.direction = ShaderUtils.ensureTypedArg(a.direction, ShaderUtils.types.NUMBER, 1);
  this.alive = ShaderUtils.ensureTypedArg(a.alive, ShaderUtils.types.BOOLEAN, !0);
  this.activeParticleCount = this.age = this.attributeEnd = this.attributeOffset = this.activationIndex = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.resetFlags = {position:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1) || ShaderUtils.ensureTypedArg(a.radius.randomise, ShaderUtils.types.BOOLEAN, !1), velocity:ShaderUtils.ensureTypedArg(a.velocity.randomise, ShaderUtils.types.BOOLEAN, !1), acceleration:ShaderUtils.ensureTypedArg(a.acceleration.randomise, ShaderUtils.types.BOOLEAN, !1) || ShaderUtils.ensureTypedArg(a.drag.randomise, ShaderUtils.types.BOOLEAN, !1), rotation:ShaderUtils.ensureTypedArg(a.rotation.randomise, 
  ShaderUtils.types.BOOLEAN, !1), rotationCenter:ShaderUtils.ensureTypedArg(a.rotation.randomise, ShaderUtils.types.BOOLEAN, !1), size:ShaderUtils.ensureTypedArg(a.size.randomise, ShaderUtils.types.BOOLEAN, !1), color:ShaderUtils.ensureTypedArg(a.color.randomise, ShaderUtils.types.BOOLEAN, !1), opacity:ShaderUtils.ensureTypedArg(a.opacity.randomise, ShaderUtils.types.BOOLEAN, !1), angle:ShaderUtils.ensureTypedArg(a.angle.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.updateFlags = {};
  this.updateCounts = {};
  this.updateMap = {maxAge:"params", position:"position", velocity:"velocity", acceleration:"acceleration", drag:"acceleration", wiggle:"params", rotation:"rotation", size:"size", color:"color", opacity:"opacity", angle:"angle"};
  for (var c in this.updateMap) {
    this.updateMap.hasOwnProperty(c) && (this.updateCounts[this.updateMap[c]] = 0, this.updateFlags[this.updateMap[c]] = !1, this._createGetterSetters(this[c], c));
  }
  this.bufferUpdateRanges = {};
  this.attributeKeys = null;
  this.attributeCount = 0;
  ShaderUtils.ensureValueOverLifetimeCompliance(this.color, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.opacity, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.size, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.angle, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
}
ParticleEmitterControl.constructor = ParticleEmitterControl;
ParticleEmitterControl.prototype._createGetterSetters = function(a, c) {
  var k = this, b;
  for (b in a) {
    if (a.hasOwnProperty(b)) {
      var e = b.replace("_", "");
      Object.defineProperty(a, e, {get:function(a) {
        return function() {
          return this[a];
        };
      }(b), set:function(a) {
        return function(b) {
          var e = k.updateMap[c], f = this[a], h = ParticleEmitter.valueOverLifetimeLength;
          "_rotationCenter" === a ? (k.updateFlags.rotationCenter = !0, k.updateCounts.rotationCenter = 0) : "_randomise" === a ? k.resetFlags[e] = b : (k.updateFlags[e] = !0, k.updateCounts[e] = 0);
          k.group._updateDefines();
          this[a] = b;
          Array.isArray(f) && ShaderUtils.ensureValueOverLifetimeCompliance(k[c], h, h);
        };
      }(b)});
    }
  }
};
ParticleEmitterControl.prototype._setBufferUpdateRanges = function(a) {
  this.attributeKeys = a;
  this.attributeCount = a.length;
  for (var c = this.attributeCount - 1; 0 <= c; --c) {
    this.bufferUpdateRanges[a[c]] = {min:Number.POSITIVE_INFINITY, max:Number.NEGATIVE_INFINITY};
  }
};
ParticleEmitterControl.prototype._calculatePPSValue = function(a) {
  var c = this.particleCount;
  this.particlesPerSecond = this.duration ? c / (a < this.duration ? a : this.duration) : c / a;
};
ParticleEmitterControl.prototype._setAttributeOffset = function(a) {
  this.activationIndex = this.attributeOffset = a;
  this.activationEnd = a + this.particleCount;
};
ParticleEmitterControl.prototype._assignValue = function(a, c) {
  switch(a) {
    case "position":
      this._assignPositionValue(c);
      break;
    case "velocity":
    case "acceleration":
      this._assignForceValue(c, a);
      break;
    case "size":
    case "opacity":
      this._assignAbsLifetimeValue(c, a);
      break;
    case "angle":
      this._assignAngleValue(c);
      break;
    case "params":
      this._assignParamsValue(c);
      break;
    case "rotation":
      this._assignRotationValue(c);
      break;
    case "color":
      this._assignColorValue(c);
  }
};
ParticleEmitterControl.prototype._assignPositionValue = function(a) {
  var c = this.position, k = this.attributes.position, b = c._value, e = c._spread;
  switch(c._distribution) {
    case ParticleDistributions.BOX:
      ShaderUtils.randomVector3(k, a, b, e, c._spreadClamp);
      break;
    case ParticleDistributions.SPHERE:
      ShaderUtils.randomVector3OnSphere(k, a, b, c._radius, c._spread.x, c._radiusScale, c._spreadClamp.x, c._distributionClamp || this.particleCount);
      break;
    case ParticleDistributions.DISC:
      ShaderUtils.randomVector3OnDisc(k, a, b, c._radius, c._spread.x, c._radiusScale, c._spreadClamp.x);
  }
};
ParticleEmitterControl.prototype._assignForceValue = function(a, c) {
  var k = this[c], b = k._value, e = k._spread;
  switch(k._distribution) {
    case ParticleDistributions.BOX:
      ShaderUtils.randomVector3(this.attributes[c], a, b, e);
      break;
    case ParticleDistributions.SPHERE:
      var f = this.attributes.position.typedArray.array;
      var h = 3 * a;
      b = f[h];
      e = f[h + 1];
      f = f[h + 2];
      ShaderUtils.randomDirectionVector3OnSphere(this.attributes[c], a, b, e, f, this.position._value, k._value.x, k._spread.x);
      break;
    case ParticleDistributions.DISC:
      f = this.attributes.position.typedArray.array, h = 3 * a, b = f[h], e = f[h + 1], f = f[h + 2], ShaderUtils.randomDirectionVector3OnDisc(this.attributes[c], a, b, e, f, this.position._value, k._value.x, k._spread.x);
  }
  "acceleration" === c && (c = ShaderUtils.clamp(ShaderUtils.randomFloat(this.drag._value, this.drag._spread), 0, 1), this.attributes.acceleration.typedArray.array[4 * a + 3] = c);
};
ParticleEmitterControl.prototype._assignAbsLifetimeValue = function(a, c) {
  var k = this.attributes[c].typedArray;
  c = this[c];
  ShaderUtils.arrayValuesAreEqual(c._value) && ShaderUtils.arrayValuesAreEqual(c._spread) ? (c = Math.abs(ShaderUtils.randomFloat(c._value[0], c._spread[0])), k.setVec4Components(a, c, c, c, c)) : k.setVec4Components(a, Math.abs(ShaderUtils.randomFloat(c._value[0], c._spread[0])), Math.abs(ShaderUtils.randomFloat(c._value[1], c._spread[1])), Math.abs(ShaderUtils.randomFloat(c._value[2], c._spread[2])), Math.abs(ShaderUtils.randomFloat(c._value[3], c._spread[3])));
};
ParticleEmitterControl.prototype._assignAngleValue = function(a) {
  var c = this.attributes.angle.typedArray, k = this.angle;
  ShaderUtils.arrayValuesAreEqual(k._value) && ShaderUtils.arrayValuesAreEqual(k._spread) ? (k = ShaderUtils.randomFloat(k._value[0], k._spread[0]), c.setVec4Components(a, k, k, k, k)) : c.setVec4Components(a, ShaderUtils.randomFloat(k._value[0], k._spread[0]), ShaderUtils.randomFloat(k._value[1], k._spread[1]), ShaderUtils.randomFloat(k._value[2], k._spread[2]), ShaderUtils.randomFloat(k._value[3], k._spread[3]));
};
ParticleEmitterControl.prototype._assignParamsValue = function(a) {
  this.attributes.params.typedArray.setVec4Components(a, this.isStatic ? 1 : 0, 0, Math.abs(ShaderUtils.randomFloat(this.maxAge._value, this.maxAge._spread)), ShaderUtils.randomFloat(this.wiggle._value, this.wiggle._spread));
};
ParticleEmitterControl.prototype._assignRotationValue = function(a) {
  this.attributes.rotation.typedArray.setVec3Components(a, ShaderUtils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), ShaderUtils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1);
  this.attributes.rotationCenter.typedArray.setVec3(a, this.rotation._center);
};
ParticleEmitterControl.prototype._assignColorValue = function(a) {
  ShaderUtils.randomColorAsHex(this.attributes.color, a, this.color._value, this.color._spread);
};
ParticleEmitterControl.prototype._resetParticle = function(a) {
  for (var c = this.resetFlags, k = this.updateFlags, b = this.updateCounts, e = this.attributeKeys, f, h, r = this.attributeCount - 1; 0 <= r; --r) {
    if (f = e[r], h = k[f], !0 === c[f] || !0 === h) {
      this._assignValue(f, a), this._updateAttributeUpdateRange(f, a), !0 === h && b[f] === this.particleCount ? (k[f] = !1, b[f] = 0) : 1 == h && ++b[f];
    }
  }
};
ParticleEmitterControl.prototype._updateAttributeUpdateRange = function(a, c) {
  a = this.bufferUpdateRanges[a];
  a.min = Math.min(c, a.min);
  a.max = Math.max(c, a.max);
};
ParticleEmitterControl.prototype._resetBufferRanges = function() {
  for (var a = this.bufferUpdateRanges, c = this.bufferUpdateKeys, k = this.bufferUpdateCount - 1; 0 <= k; --k) {
    var b = c[k];
    a[b].min = Number.POSITIVE_INFINITY;
    a[b].max = Number.NEGATIVE_INFINITY;
  }
};
ParticleEmitterControl.prototype._onRemove = function() {
  this.activeParticleCount = this.activationIndex = this.attributeOffset = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.age = 0;
};
ParticleEmitterControl.prototype._decrementParticleCount = function() {
  --this.activeParticleCount;
};
ParticleEmitterControl.prototype._incrementParticleCount = function() {
  ++this.activeParticleCount;
};
ParticleEmitterControl.prototype._checkParticleAges = function(a, c, k, b) {
  --c;
  for (var e, f, h, r; c >= a; --c) {
    e = 4 * c, r = k[e], 0 !== r && (h = k[e + 1], f = k[e + 2], 1 === this.direction ? (h += b, h >= f && (r = h = 0, this._decrementParticleCount())) : (h -= b, 0 >= h && (h = f, r = 0, this._decrementParticleCount())), k[e] = r, k[e + 1] = h, this._updateAttributeUpdateRange("params", c));
  }
};
ParticleEmitterControl.prototype._activateParticles = function(a, c, k, b) {
  for (var e = this.direction, f = a, h, r; f < c; ++f) {
    if (h = 4 * f, 0 == k[h] || 1 === this.particleCount) {
      this._incrementParticleCount(), k[h] = 1, this._resetParticle(f), r = b * (f - a), k[h + 1] = -1 === e ? k[h + 2] - r : r, this._updateAttributeUpdateRange("params", f);
    }
  }
};
ParticleEmitterControl.prototype.tick = function(a) {
  if (!this.isStatic) {
    null === this.paramsArray && (this.paramsArray = this.attributes.params.typedArray.array);
    var c = this.attributeOffset, k = c + this.particleCount, b = this.paramsArray, e = this.particlesPerSecond * this.activeMultiplier * a, f = this.activationIndex;
    this._resetBufferRanges();
    this._checkParticleAges(c, k, b, a);
    if (!1 === this.alive) {
      this.age = 0;
    } else {
      if (null !== this.duration && this.age > this.duration) {
        this.alive = !1, this.age = 0;
      } else {
        f = 1 === this.particleCount ? f : f | 0;
        var h = Math.min(f + e, this.activationEnd), r = h - this.activationIndex | 0;
        this._activateParticles(f, h, b, 0 < r ? a / r : 0);
        this.activationIndex += e;
        this.activationIndex > k && (this.activationIndex = c);
        this.age += a;
      }
    }
  }
};
ParticleEmitterControl.prototype.reset = function(a) {
  this.age = 0;
  this.alive = !1;
  if (!0 === a) {
    a = this.attributeOffset;
    for (var c = this.paramsArray, k = this.attributes.params.bufferAttribute, b = a + this.particleCount - 1, e; b >= a; --b) {
      e = 4 * b, c[e] = 0, c[e + 1] = 0;
    }
    k.updateRange.offset = 0;
    k.updateRange.count = -1;
    k.needsUpdate = !0;
  }
  return this;
};
ParticleEmitterControl.prototype.enable = function() {
  this.alive = !0;
  return this;
};
ParticleEmitterControl.prototype.disable = function() {
  this.alive = !1;
  return this;
};
ParticleEmitterControl.prototype.remove = function() {
  null !== this.group ? this.group.removeEmitter(this) : console.error("nunuStudio: ParticleEmitterControl does not belong to a group, cannot remove.");
  return this;
};
ParticleEmitterControl.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.direction = this.direction;
  a.particleCount = this.particleCount;
  a.duration = this.duration;
  a.isStatic = this.isStatic;
  a.maxAge = {};
  a.maxAge.value = this.maxAge.value;
  a.maxAge.spread = this.maxAge.spread;
  a.position = {};
  a.position.value = this.position.value.toArray();
  a.position.spread = this.position.spread.toArray();
  a.position.radius = this.position.radius;
  a.position.radiusScale = this.position.radiusScale.toArray();
  a.velocity = {};
  a.velocity.value = this.velocity.value.toArray();
  a.velocity.spread = this.velocity.spread.toArray();
  a.acceleration = {};
  a.acceleration.value = this.acceleration.value.toArray();
  a.acceleration.spread = this.acceleration.spread.toArray();
  a.wiggle = {};
  a.wiggle.value = this.wiggle.value;
  a.wiggle.spread = this.wiggle.spread;
  a.opacity = {};
  a.opacity.value = this.opacity.value.slice(0);
  a.opacity.spread = this.opacity.spread;
  a.size = {};
  a.size.value = this.size.value.slice(0);
  a.size.spread = this.size.spread;
  a.angle = {};
  a.angle.value = this.angle.value.slice(0);
  a.angle.spread = this.angle.spread;
  a.color = {};
  a.color.value = [];
  for (var c = 0; c < this.color.value.length; c++) {
    a.color.value.push(this.color.value[c].getHex());
  }
  a.color.spread = [];
  for (c = 0; c < this.color.spread.length; c++) {
    a.color.spread.push(this.color.spread[c].toArray());
  }
  return a;
};
"use strict";
function ParticleGroup(a) {
  a = ShaderUtils.ensureTypedArg(a, ShaderUtils.types.OBJECT, {});
  a.texture = ShaderUtils.ensureTypedArg(a.texture, ShaderUtils.types.OBJECT, {});
  this.uuid = THREE.Math.generateUUID();
  this.fixedTimeStep = ShaderUtils.ensureTypedArg(a.fixedTimeStep, ShaderUtils.types.NUMBER, .016);
  this.texture = ShaderUtils.ensureInstanceOf(a.texture.value, THREE.Texture, null);
  this.textureFrames = ShaderUtils.ensureInstanceOf(a.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1));
  this.textureFrameCount = ShaderUtils.ensureTypedArg(a.texture.frameCount, ShaderUtils.types.NUMBER, this.textureFrames.x * this.textureFrames.y);
  this.textureLoop = ShaderUtils.ensureTypedArg(a.texture.loop, ShaderUtils.types.NUMBER, 1);
  this.textureFrames.max(new THREE.Vector2(1, 1));
  this.hasPerspective = ShaderUtils.ensureTypedArg(a.hasPerspective, ShaderUtils.types.BOOLEAN, !0);
  this.colorize = ShaderUtils.ensureTypedArg(a.colorize, ShaderUtils.types.BOOLEAN, !0);
  this.maxParticleCount = ShaderUtils.ensureTypedArg(a.maxParticleCount, ShaderUtils.types.NUMBER, null);
  this.blending = ShaderUtils.ensureTypedArg(a.blending, ShaderUtils.types.NUMBER, THREE.AdditiveBlending);
  this.transparent = ShaderUtils.ensureTypedArg(a.transparent, ShaderUtils.types.BOOLEAN, !0);
  this.alphaTest = parseFloat(ShaderUtils.ensureTypedArg(a.alphaTest, ShaderUtils.types.NUMBER, 0));
  this.depthWrite = ShaderUtils.ensureTypedArg(a.depthWrite, ShaderUtils.types.BOOLEAN, !1);
  this.depthTest = ShaderUtils.ensureTypedArg(a.depthTest, ShaderUtils.types.BOOLEAN, !0);
  this.fog = ShaderUtils.ensureTypedArg(a.fog, ShaderUtils.types.BOOLEAN, !0);
  this.scale = ShaderUtils.ensureTypedArg(a.scale, ShaderUtils.types.NUMBER, 300);
  this.emitters = [];
  this.emitterIDs = [];
  this.pool = [];
  this.poolCreationSettings = null;
  this._createNewWhenPoolEmpty = 0;
  this._attributesNeedDynamicReset = this._attributesNeedRefresh = !1;
  this.particleCount = 0;
  this.uniforms = {textureSampler:{type:"t", value:this.texture}, textureAnimation:{type:"v4", value:new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1))}, fogColor:{type:"c", value:null}, fogNear:{type:"f", value:10}, fogFar:{type:"f", value:200}, fogDensity:{type:"f", value:.5}, deltaTime:{type:"f", value:0}, runTime:{type:"f", value:0}, scale:{type:"f", value:this.scale}};
  this.defines = {HAS_PERSPECTIVE:this.hasPerspective, COLORIZE:this.colorize, VALUE_OVER_LIFETIME_LENGTH:ParticleEmitter.valueOverLifetimeLength, SHOULD_ROTATE_TEXTURE:!1, SHOULD_ROTATE_PARTICLES:!1, SHOULD_WIGGLE_PARTICLES:!1, SHOULD_CALCULATE_SPRITE:1 < this.textureFrames.x || 1 < this.textureFrames.y};
  this.attributes = {position:new ShaderAttribute("v3", !0), acceleration:new ShaderAttribute("v4", !0), velocity:new ShaderAttribute("v3", !0), rotation:new ShaderAttribute("v4", !0), rotationCenter:new ShaderAttribute("v3", !0), params:new ShaderAttribute("v4", !0), size:new ShaderAttribute("v4", !0), angle:new ShaderAttribute("v4", !0), color:new ShaderAttribute("v4", !0), opacity:new ShaderAttribute("v4", !0)};
  this.attributeKeys = Object.keys(this.attributes);
  this.attributeCount = this.attributeKeys.length;
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:ParticleShaders.vertex, fragmentShader:ParticleShaders.fragment, blending:this.blending, transparent:this.transparent, alphaTest:this.alphaTest, depthWrite:this.depthWrite, depthTest:this.depthTest, defines:this.defines, fog:this.fog});
  this.geometry = new THREE.BufferGeometry;
  this.mesh = new THREE.Points(this.geometry, this.material);
  null === this.maxParticleCount && console.warn("nunuStudio: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.");
}
ParticleGroup.constructor = ParticleGroup;
ParticleGroup.prototype._updateDefines = function() {
  for (var a = this.emitters, c, k = this.defines, b = a.length - 1; 0 <= b; --b) {
    c = a[b], k.SHOULD_CALCULATE_SPRITE || (k.SHOULD_ROTATE_TEXTURE = k.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, c.angle.value), Math.max.apply(null, c.angle.spread))), k.SHOULD_ROTATE_PARTICLES = k.SHOULD_ROTATE_PARTICLES || !!Math.max(c.rotation.angle, c.rotation.angleSpread), k.SHOULD_WIGGLE_PARTICLES = k.SHOULD_WIGGLE_PARTICLES || !!Math.max(c.wiggle.value, c.wiggle.spread);
  }
  this.material.needsUpdate = !0;
};
ParticleGroup.prototype._applyAttributesToGeometry = function() {
  var a = this.attributes, c = this.geometry, k = c.attributes, b, e;
  for (e in a) {
    if (a.hasOwnProperty(e)) {
      var f = a[e];
      (b = k[e]) ? b.array = f.typedArray.array : c.setAttribute(e, f.bufferAttribute);
      f.bufferAttribute.needsUpdate = !0;
    }
  }
  this.geometry.setDrawRange(0, this.particleCount);
};
ParticleGroup.prototype.addEmitter = function(a) {
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: emitter argument must be instance of ParticleEmitterControl.", a);
  } else {
    if (-1 < this.emitterIDs.indexOf(a.uuid)) {
      console.error("nunuStudio: ParticleEmitterControl already exists in this group.");
    } else {
      if (null !== a.group) {
        console.error("nunuStudio: ParticleEmitterControl already belongs to another group.");
      } else {
        var c = this.attributes, k = this.particleCount, b = k + a.particleCount;
        this.particleCount = b;
        null !== this.maxParticleCount && this.particleCount > this.maxParticleCount && console.warn("nunuStudio: ParticleGroup maxParticleCount exceeded. Requesting", this.particleCount, "particles, can support only", this.maxParticleCount);
        a._calculatePPSValue(a.maxAge._value + a.maxAge._spread);
        a._setBufferUpdateRanges(this.attributeKeys);
        a._setAttributeOffset(k);
        a.group = this;
        a.attributes = this.attributes;
        for (var e in c) {
          c.hasOwnProperty(e) && c[e]._createBufferAttribute(null !== this.maxParticleCount ? this.maxParticleCount : this.particleCount);
        }
        for (c = k; c < b; ++c) {
          a._assignPositionValue(c), a._assignForceValue(c, "velocity"), a._assignForceValue(c, "acceleration"), a._assignAbsLifetimeValue(c, "opacity"), a._assignAbsLifetimeValue(c, "size"), a._assignAngleValue(c), a._assignRotationValue(c), a._assignParamsValue(c), a._assignColorValue(c);
        }
        this._applyAttributesToGeometry();
        this.emitters.push(a);
        this.emitterIDs.push(a.uuid);
        this._updateDefines(a);
        this.material.needsUpdate = !0;
        this._attributesNeedRefresh = this.geometry.needsUpdate = !0;
        return this;
      }
    }
  }
};
ParticleGroup.prototype.removeEmitter = function(a) {
  var c = this.emitterIDs.indexOf(a.uuid);
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: emitter argument must be instance of ParticleEmitterControl. Was provided with:", a);
  } else {
    if (-1 === c) {
      console.error("nunuStudio: ParticleEmitterControl does not exist in this group. Will not remove.");
    } else {
      for (var k = a.attributeOffset, b = k + a.particleCount, e = this.attributes.params.typedArray, f = k; f < b; ++f) {
        e.array[4 * f] = 0, e.array[4 * f + 1] = 0;
      }
      this.emitters.splice(c, 1);
      this.emitterIDs.splice(c, 1);
      for (var h in this.attributes) {
        this.attributes.hasOwnProperty(h) && this.attributes[h].splice(k, b);
      }
      this.particleCount -= a.particleCount;
      a._onRemove();
      this._attributesNeedRefresh = !0;
    }
  }
};
ParticleGroup.prototype.getFromPool = function() {
  var a = this.pool, c = this._createNewWhenPoolEmpty;
  return a.length ? a.pop() : c ? (a = new ParticleEmitterControl(this.poolCreationSettings), this.addEmitter(a), a) : null;
};
ParticleGroup.prototype.releaseIntoPool = function(a) {
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: Argument is not instanceof ParticleEmitterControl:", a);
  } else {
    return a.reset(), this.pool.unshift(a), this;
  }
};
ParticleGroup.prototype.getPool = function() {
  return this.pool;
};
ParticleGroup.prototype.addPool = function(a, c, k) {
  this.poolCreationSettings = c;
  this._createNewWhenPoolEmpty = !!k;
  for (var b = 0; b < a; ++b) {
    k = Array.isArray(c) ? new ParticleEmitterControl(c[b]) : new ParticleEmitterControl(c), this.addEmitter(k), this.releaseIntoPool(k);
  }
  return this;
};
ParticleGroup.prototype._triggerSingleEmitter = function(a) {
  var c = this.getFromPool(), k = this;
  if (null === c) {
    console.log("nunuStudio: ParticleGroup pool ran out.");
  } else {
    return a instanceof THREE.Vector3 && (c.position.value.copy(a), c.position.value = c.position.value), c.enable(), setTimeout(function() {
      c.disable();
      k.releaseIntoPool(c);
    }, 1E3 * Math.max(c.duration, c.maxAge.value + c.maxAge.spread)), this;
  }
};
ParticleGroup.prototype.triggerEmitter = function(a, c) {
  if ("number" === typeof a && 1 < a) {
    for (var k = 0; k < a; ++k) {
      this._triggerSingleEmitter(c);
    }
  } else {
    this._triggerSingleEmitter(c);
  }
  return this;
};
ParticleGroup.prototype._updateUniforms = function(a) {
  this.uniforms.runTime.value += a;
  this.uniforms.deltaTime.value = a;
};
ParticleGroup.prototype._resetBufferRanges = function() {
  for (var a = this.attributeKeys, c = this.attributeCount - 1; 0 <= c; --c) {
    this.attributes[a[c]].resetUpdateRange();
  }
};
ParticleGroup.prototype._updateBuffers = function(a) {
  var c = this.attributeKeys, k = this.attributes;
  a = a.bufferUpdateRanges;
  for (var b, e, f = this.attributeCount - 1; 0 <= f; --f) {
    b = c[f], e = a[b], b = k[b], b.setUpdateRange(e.min, e.max), b.flagUpdate();
  }
};
ParticleGroup.prototype.tick = function(a) {
  var c = this.emitters, k = c.length;
  a = a || this.fixedTimeStep;
  var b = this.attributeKeys, e = this.attributes;
  this._updateUniforms(a);
  this._resetBufferRanges();
  if (0 !== k || !1 !== this._attributesNeedRefresh || !1 !== this._attributesNeedDynamicReset) {
    var f = 0;
    for (var h; f < k; ++f) {
      h = c[f], h.tick(a), this._updateBuffers(h);
    }
    if (!0 === this._attributesNeedDynamicReset) {
      f = this.attributeCount - 1;
      for (f; 0 <= f; --f) {
        e[b[f]].resetDynamic();
      }
      this._attributesNeedDynamicReset = !1;
    }
    if (!0 === this._attributesNeedRefresh) {
      f = this.attributeCount - 1;
      for (f; 0 <= f; --f) {
        e[b[f]].forceUpdateAll();
      }
      this._attributesNeedRefresh = !1;
      this._attributesNeedDynamicReset = !0;
    }
  }
};
ParticleGroup.prototype.dispose = function() {
  this.geometry.dispose();
  this.material.dispose();
  return this;
};
ParticleGroup.prototype.toJSON = function(a) {
  a = {texture:{}};
  a.texture.value = this.texture.uuid;
  a.texture.frames = this.textureFrames.toArray();
  a.texture.frameCount = this.textureFrameCount;
  a.texture.loop = this.textureLoop;
  a.fixedTimeStep = this.fixedTimeStep;
  a.hasPerspective = this.hasPerspective;
  a.colorize = this.colorize;
  a.maxParticleCount = this.maxParticleCount;
  a.transparent = this.transparent;
  a.blending = this.blending;
  a.alphaTest = this.alphaTest;
  a.depthWrite = this.depthWrite;
  a.depthTest = this.depthTest;
  a.fog = this.fog;
  a.scale = this.scale;
  return a;
};
"use strict";
var ShaderUtils = {types:{BOOLEAN:"boolean", STRING:"string", NUMBER:"number", OBJECT:"object"}, ensureTypedArg:function(a, c, k) {
  return typeof a === c ? a : k;
}, ensureArrayTypedArg:function(a, c, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (typeof a[b] !== c) {
        return k;
      }
    }
    return a;
  }
  return this.ensureTypedArg(a, c, k);
}, ensureInstanceOf:function(a, c, k) {
  return void 0 !== c && a instanceof c ? a : k;
}, ensureArrayInstanceOf:function(a, c, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (void 0 !== c && !1 === a[b] instanceof c) {
        return k;
      }
    }
    return a;
  }
  return this.ensureInstanceOf(a, c, k);
}, ensureValueOverLifetimeCompliance:function(a, c, k) {
  c = c || 3;
  k = k || 3;
  !1 === Array.isArray(a._value) && (a._value = [a._value]);
  !1 === Array.isArray(a._spread) && (a._spread = [a._spread]);
  var b = this.clamp(a._value.length, c, k);
  c = this.clamp(a._spread.length, c, k);
  b = Math.max(b, c);
  a._value.length !== b && (a._value = this.interpolateArray(a._value, b));
  a._spread.length !== b && (a._spread = this.interpolateArray(a._spread, b));
}, interpolateArray:function(a, c) {
  for (var k = a.length, b = ["function" === typeof a[0].clone ? a[0].clone() : a[0]], e = (k - 1) / (c - 1), f = 1; f < c - 1; ++f) {
    var h = f * e, r = Math.floor(h);
    b[f] = this.lerpTypeAgnostic(a[r], a[Math.ceil(h)], h - r);
  }
  b.push("function" === typeof a[k - 1].clone ? a[k - 1].clone() : a[k - 1]);
  return b;
}, clamp:function(a, c, k) {
  return Math.max(c, Math.min(a, k));
}, zeroToEpsilon:function(a, c) {
  c = c ? 1E-4 * Math.random() : 1E-5;
  0 > a && -1E-5 < a && (c = -c);
  return c;
}, lerpTypeAgnostic:function(a, c, k) {
  var b = this.types;
  if (typeof a === b.NUMBER && typeof c === b.NUMBER) {
    return a + (c - a) * k;
  }
  if (a instanceof THREE.Vector2 && c instanceof THREE.Vector2) {
    return b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, c.y, k), b;
  }
  if (a instanceof THREE.Vector3 && c instanceof THREE.Vector3) {
    return b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, c.y, k), b.z = this.lerp(a.z, c.z, k), b;
  }
  if (a instanceof THREE.Vector4 && c instanceof THREE.Vector4) {
    return b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, c.y, k), b.z = this.lerp(a.z, c.z, k), b.w = this.lerp(a.w, c.w, k), b;
  }
  if (a instanceof THREE.Color && c instanceof THREE.Color) {
    return b = a.clone(), b.r = this.lerp(a.r, c.r, k), b.g = this.lerp(a.g, c.g, k), b.b = this.lerp(a.b, c.b, k), b;
  }
  console.warn("nunuStudio: Invalid argument types, or argument types do not match.", a, c);
}, lerp:function(a, c, k) {
  return a + (c - a) * k;
}, roundToNearestMultiple:function(a, c) {
  if (0 === c) {
    return a;
  }
  var k = Math.abs(a) % c;
  return 0 === k ? a : 0 > a ? -(Math.abs(a) - k) : a + c - k;
}, arrayValuesAreEqual:function(a) {
  for (var c = 0; c < a.length - 1; ++c) {
    if (a[c] !== a[c + 1]) {
      return !1;
    }
  }
  return !0;
}, randomFloat:function(a, c) {
  return a + c * (Math.random() - .5);
}, randomVector3:function(a, c, k, b, e) {
  var f = k.x + (Math.random() * b.x - .5 * b.x), h = k.y + (Math.random() * b.y - .5 * b.y);
  k = k.z + (Math.random() * b.z - .5 * b.z);
  e && (f = .5 * -e.x + this.roundToNearestMultiple(f, e.x), h = .5 * -e.y + this.roundToNearestMultiple(h, e.y), k = .5 * -e.z + this.roundToNearestMultiple(k, e.z));
  a.typedArray.setVec3Components(c, f, h, k);
}, randomColor:function(a, c, k, b) {
  var e = k.r + Math.random() * b.x, f = k.g + Math.random() * b.y;
  k = k.b + Math.random() * b.z;
  e = this.clamp(e, 0, 1);
  f = this.clamp(f, 0, 1);
  k = this.clamp(k, 0, 1);
  a.typedArray.setVec3Components(c, e, f, k);
}, randomColorAsHex:function() {
  var a = new THREE.Color;
  return function(c, k, b, e) {
    for (var f = b.length, h = [], r = 0; r < f; ++r) {
      var q = e[r];
      a.copy(b[r]);
      a.r += Math.random() * q.x - .5 * q.x;
      a.g += Math.random() * q.y - .5 * q.y;
      a.b += Math.random() * q.z - .5 * q.z;
      a.r = this.clamp(a.r, 0, 1);
      a.g = this.clamp(a.g, 0, 1);
      a.b = this.clamp(a.b, 0, 1);
      h.push(a.getHex());
    }
    c.typedArray.setVec4Components(k, h[0], h[1], h[2], h[3]);
  };
}(), randomVector3OnSphere:function(a, c, k, b, e, f, h, r) {
  r = 2 * Math.random() - 1;
  var q = 6.2832 * Math.random(), n = Math.sqrt(1 - r * r);
  b = this.randomFloat(b, e);
  h && (b = Math.round(b / h) * h);
  h = n * Math.cos(q) * b;
  q = n * Math.sin(q) * b;
  h *= f.x;
  q *= f.y;
  f = r * b * f.z;
  h += k.x;
  q += k.y;
  f += k.z;
  a.typedArray.setVec3Components(c, h, q, f);
}, seededRandom:function(a) {
  a = 1E4 * Math.sin(a);
  return a - (a | 0);
}, randomVector3OnDisc:function(a, c, k, b, e, f, h) {
  var r = 6.2832 * Math.random();
  b = Math.abs(this.randomFloat(b, e));
  h && (b = Math.round(b / h) * h);
  h = Math.cos(r) * b;
  r = Math.sin(r) * b;
  h *= f.x;
  r *= f.y;
  h += k.x;
  r += k.y;
  a.typedArray.setVec3Components(c, h, r, 0 + k.z);
}, randomDirectionVector3OnSphere:function() {
  var a = new THREE.Vector3;
  return function(c, k, b, e, f, h, r, q) {
    a.copy(h);
    a.x -= b;
    a.y -= e;
    a.z -= f;
    a.normalize().multiplyScalar(-this.randomFloat(r, q));
    c.typedArray.setVec3Components(k, a.x, a.y, a.z);
  };
}(), randomDirectionVector3OnDisc:function() {
  var a = new THREE.Vector3;
  return function(c, k, b, e, f, h, r, q) {
    a.copy(h);
    a.x -= b;
    a.y -= e;
    a.z -= f;
    a.normalize().multiplyScalar(-this.randomFloat(r, q));
    c.typedArray.setVec3Components(k, a.x, a.y, 0);
  };
}(), getPackedRotationAxis:function() {
  var a = new THREE.Vector3, c = new THREE.Vector3, k = new THREE.Color, b = new THREE.Vector3(1, 1, 1);
  return function(e, f) {
    a.copy(e).normalize();
    c.copy(f).normalize();
    a.x += .5 * -f.x + Math.random() * f.x;
    a.y += .5 * -f.y + Math.random() * f.y;
    a.z += .5 * -f.z + Math.random() * f.z;
    a.normalize().add(b).multiplyScalar(.5);
    k.setRGB(a.x, a.y, a.z);
    return k.getHex();
  };
}()};
"use strict";
function ShaderAttribute(a, c, k) {
  var b = ShaderAttribute.typeSizeMap;
  this.type = "string" === typeof a && b.hasOwnProperty(a) ? a : "f";
  this.componentSize = b[this.type];
  this.arrayType = k || Float32Array;
  this.bufferAttribute = this.typedArray = null;
  this.dynamicBuffer = !!c;
  this.updateMax = this.updateMin = 0;
}
ShaderAttribute.constructor = ShaderAttribute;
ShaderAttribute.typeSizeMap = {f:1, v2:2, v3:3, v4:4, c:3, m3:9, m4:16};
ShaderAttribute.prototype.setUpdateRange = function(a, c) {
  this.updateMin = Math.min(a * this.componentSize, this.updateMin * this.componentSize);
  this.updateMax = Math.max(c * this.componentSize, this.updateMax * this.componentSize);
};
ShaderAttribute.prototype.flagUpdate = function() {
  var a = this.bufferAttribute, c = a.updateRange;
  c.offset = this.updateMin;
  c.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length);
  a.needsUpdate = !0;
};
ShaderAttribute.prototype.resetUpdateRange = function() {
  this.updateMax = this.updateMin = 0;
};
ShaderAttribute.prototype.resetDynamic = function() {
  this.bufferAttribute.dynamic = this.dynamicBuffer;
};
ShaderAttribute.prototype.splice = function(a, c) {
  this.typedArray.splice(a, c);
  this.forceUpdateAll();
};
ShaderAttribute.prototype.forceUpdateAll = function() {
  this.bufferAttribute.array = this.typedArray.array;
  this.bufferAttribute.updateRange.offset = 0;
  this.bufferAttribute.updateRange.count = -1;
  this.bufferAttribute.dynamic = !1;
  this.bufferAttribute.needsUpdate = !0;
};
ShaderAttribute.prototype._ensureTypedArray = function(a) {
  if (null === this.typedArray || this.typedArray.size !== a * this.componentSize) {
    null !== this.typedArray && this.typedArray.size !== a ? this.typedArray.setSize(a) : null === this.typedArray && (this.typedArray = new TypedArrayHelper(this.arrayType, a, this.componentSize));
  }
};
ShaderAttribute.prototype._createBufferAttribute = function(a) {
  this._ensureTypedArray(a);
  null !== this.bufferAttribute ? (this.bufferAttribute.array = this.typedArray.array, this.bufferAttribute.count = this.bufferAttribute.array.length / this.bufferAttribute.itemSize, this.bufferAttribute.needsUpdate = !0) : (this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize), this.bufferAttribute.dynamic = this.dynamicBuffer);
};
ShaderAttribute.prototype.getLength = function() {
  return null === this.typedArray ? 0 : this.typedArray.array.length;
};
"use strict";
function TypedArrayHelper(a, c, k, b) {
  this.componentSize = k || 1;
  this.size = c || 1;
  this.TypedArrayConstructor = a || Float32Array;
  this.array = new a(c * this.componentSize);
  this.indexOffset = b || 0;
}
TypedArrayHelper.constructor = TypedArrayHelper;
TypedArrayHelper.prototype.setSize = function(a, c) {
  var k = this.array.length;
  c || (a *= this.componentSize);
  if (a < k) {
    return this.shrink(a);
  }
  if (a > k) {
    return this.grow(a);
  }
};
TypedArrayHelper.prototype.shrink = function(a) {
  this.array = this.array.subarray(0, a);
  this.size = a;
  return this;
};
TypedArrayHelper.prototype.grow = function(a) {
  var c = this.array, k = new this.TypedArrayConstructor(a);
  k.set(c);
  this.array = k;
  this.size = a;
  return this;
};
TypedArrayHelper.prototype.splice = function(a, c) {
  a *= this.componentSize;
  c *= this.componentSize;
  for (var k = [], b = this.array, e = b.length, f = 0; f < e; ++f) {
    (f < a || f >= c) && k.push(b[f]);
  }
  this.setFromArray(0, k);
  return this;
};
TypedArrayHelper.prototype.setFromArray = function(a, c) {
  var k = a + c.length;
  k > this.array.length ? this.grow(k) : k < this.array.length && this.shrink(k);
  this.array.set(c, this.indexOffset + a);
  return this;
};
TypedArrayHelper.prototype.setVec2 = function(a, c) {
  return this.setVec2Components(a, c.x, c.y);
};
TypedArrayHelper.prototype.setVec2Components = function(a, c, k) {
  var b = this.array;
  a = this.indexOffset + a * this.componentSize;
  b[a] = c;
  b[a + 1] = k;
  return this;
};
TypedArrayHelper.prototype.setVec3 = function(a, c) {
  return this.setVec3Components(a, c.x, c.y, c.z);
};
TypedArrayHelper.prototype.setVec3Components = function(a, c, k, b) {
  var e = this.array;
  a = this.indexOffset + a * this.componentSize;
  e[a] = c;
  e[a + 1] = k;
  e[a + 2] = b;
  return this;
};
TypedArrayHelper.prototype.setVec4 = function(a, c) {
  return this.setVec4Components(a, c.x, c.y, c.z, c.w);
};
TypedArrayHelper.prototype.setVec4Components = function(a, c, k, b, e) {
  var f = this.array;
  a = this.indexOffset + a * this.componentSize;
  f[a] = c;
  f[a + 1] = k;
  f[a + 2] = b;
  f[a + 3] = e;
  return this;
};
TypedArrayHelper.prototype.setMat3 = function(a, c) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, c.elements);
};
TypedArrayHelper.prototype.setMat4 = function(a, c) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, c.elements);
};
TypedArrayHelper.prototype.setColor = function(a, c) {
  return this.setVec3Components(a, c.r, c.g, c.b);
};
TypedArrayHelper.prototype.setNumber = function(a, c) {
  this.array[this.indexOffset + a * this.componentSize] = c;
  return this;
};
TypedArrayHelper.prototype.getValueAtIndex = function(a) {
  return this.array[this.indexOffset + a];
};
TypedArrayHelper.prototype.getComponentValueAtIndex = function(a) {
  return this.array.subarray(this.indexOffset + a * this.componentSize);
};
"use strict";
var ParticleShaderChunks = {defines:"#define PACKED_COLOR_SIZE 256.0\n#define PACKED_COLOR_DIVISOR 255.0", uniforms:"uniform float deltaTime;\nuniform float runTime;\nuniform sampler2D textureSampler;\nuniform vec4 textureAnimation;\nuniform float scale;", attributes:"attribute vec4 acceleration;\nattribute vec3 velocity;\nattribute vec4 rotation;\nattribute vec3 rotationCenter;\nattribute vec4 params;\nattribute vec4 size;\nattribute vec4 angle;\nattribute vec4 color;\nattribute vec4 opacity;", 
varyings:"varying vec4 vColor;\n#ifdef SHOULD_ROTATE_TEXTURE\n    varying float vAngle;\n#endif\n#ifdef SHOULD_CALCULATE_SPRITE\n    varying vec4 vSpriteSheet;\n#endif", branchAvoidanceFunctions:"float when_gt(float x, float y) {\n    return max(sign(x - y), 0.0);\n}\nfloat when_lt(float x, float y) {\n    return min(max(1.0 - sign(x - y), 0.0), 1.0);\n}\nfloat when_eq(float x, float y) {\n    return 1.0 - abs(sign(x - y));\n}\nfloat when_ge(float x, float y) {\n  return 1.0 - when_lt(x, y);\n}\nfloat when_le(float x, float y) {\n  return 1.0 - when_gt(x, y);\n}\nfloat and(float a, float b) {\n    return a * b;\n}\nfloat or(float a, float b) {\n    return min(a + b, 1.0);\n}", 
unpackColor:"vec3 unpackColor(in float hex) {\n   vec3 c = vec3(0.0);\n   float r = mod((hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float g = mod((hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float b = mod(hex, PACKED_COLOR_SIZE);\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   return c;\n}", unpackRotationAxis:"vec3 unpackRotationAxis(in float hex) {\n   vec3 c = vec3(0.0);\n   float r = mod((hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float g = mod((hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float b = mod(hex, PACKED_COLOR_SIZE);\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   c *= vec3(2.0);\n   c -= vec3(1.0);\n   return c;\n}", 
floatOverLifetime:"float getFloatOverLifetime(in float positionInTime, in vec4 attr) {\n    highp float value = 0.0;\n    float deltaAge = positionInTime * float(VALUE_OVER_LIFETIME_LENGTH - 1);\n    float fIndex = 0.0;\n    float shouldApplyValue = 0.0;\n    value += attr[0] * when_eq(deltaAge, 0.0);\n\n    for(int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i) {\n       fIndex = float(i);\n       shouldApplyValue = and(when_gt(deltaAge, fIndex), when_le(deltaAge, fIndex + 1.0));\n       value += shouldApplyValue * mix(attr[i], attr[i + 1], deltaAge - fIndex);\n    }\n\n    return value;\n}", 
colorOverLifetime:"vec3 getColorOverLifetime(in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4) {\n    vec3 value = vec3(0.0);\n    value.x = getFloatOverLifetime(positionInTime, vec4(color1.x, color2.x, color3.x, color4.x));\n    value.y = getFloatOverLifetime(positionInTime, vec4(color1.y, color2.y, color3.y, color4.y));\n    value.z = getFloatOverLifetime(positionInTime, vec4(color1.z, color2.z, color3.z, color4.z));\n    return value;\n}", paramFetchingFunctions:"float getAlive() {\n   return params.x;\n}\nfloat getAge() {\n   return params.y;\n}\nfloat getMaxAge() {\n   return params.z;\n}\nfloat getWiggle() {\n   return params.w;\n}", 
forceFetchingFunctions:"vec4 getPosition(in float age) {\n   return modelViewMatrix * vec4(position, 1.0);\n}\nvec3 getVelocity(in float age) {\n   return velocity * age;\n}\nvec3 getAcceleration(in float age) {\n   return acceleration.xyz * age;\n}", rotationFunctions:"#ifdef SHOULD_ROTATE_PARTICLES\n   mat4 getRotationMatrix(in vec3 axis, in float angle) {\n       axis = normalize(axis);\n       float s = sin(angle);\n       float c = cos(angle);\n       float oc = 1.0 - c;\n\n       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                   0.0,                                0.0,                                0.0,                                1.0);\n   }\n\n   vec3 getRotation(in vec3 pos, in float positionInTime) {\n      if(rotation.y == 0.0) {\n           return pos;\n      }\n\n      vec3 axis = unpackRotationAxis(rotation.x);\n      vec3 center = rotationCenter;\n      vec3 translated;\n      mat4 rotationMatrix;\n      float angle = 0.0;\n      angle += when_eq(rotation.z, 0.0) * rotation.y;\n      angle += when_gt(rotation.z, 0.0) * mix(0.0, rotation.y, positionInTime);\n      translated = rotationCenter - pos;\n      rotationMatrix = getRotationMatrix(axis, angle);\n      return center - vec3(rotationMatrix * vec4(translated, 0.0));\n   }\n#endif", 
rotateTexture:"    vec2 vUv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y);\n\n    #ifdef SHOULD_ROTATE_TEXTURE\n       float x = gl_PointCoord.x - 0.5;\n       float y = 1.0 - gl_PointCoord.y - 0.5;\n       float c = cos(-vAngle);\n       float s = sin(-vAngle);\n       vUv = vec2(c * x + s * y + 0.5, c * y - s * x + 0.5);\n    #endif\n\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = vSpriteSheet.x;\n        float framesY = vSpriteSheet.y;\n        float columnNorm = vSpriteSheet.z;\n        float rowNorm = vSpriteSheet.w;\n        vUv.x = gl_PointCoord.x * framesX + columnNorm;\n        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);\n    #endif\n\n    vec4 rotatedTexture = texture2D(textureSampler, vUv);"};
"use strict";
var ParticleShaders = {vertex:[ParticleShaderChunks.defines, ParticleShaderChunks.uniforms, ParticleShaderChunks.attributes, ParticleShaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, ParticleShaderChunks.branchAvoidanceFunctions, ParticleShaderChunks.unpackColor, ParticleShaderChunks.unpackRotationAxis, ParticleShaderChunks.floatOverLifetime, ParticleShaderChunks.colorOverLifetime, ParticleShaderChunks.paramFetchingFunctions, 
ParticleShaderChunks.forceFetchingFunctions, ParticleShaderChunks.rotationFunctions, "void main() {\n    highp float age = getAge();\n    highp float alive = getAlive();\n    highp float maxAge = getMaxAge();\n    highp float positionInTime = (age / maxAge);\n    highp float isAlive = when_gt(alive, 0.0);\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        float wiggleAmount = positionInTime * getWiggle();\n        float wiggleSin = isAlive * sin(wiggleAmount);\n        float wiggleCos = isAlive * cos(wiggleAmount);\n    #endif\n    vec3 vel = getVelocity(age);\n    vec3 accel = getAcceleration(age);\n    vec3 force = vec3(0.0);\n    vec3 pos = vec3(position);\n    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;\n    force += vel;\n    force *= drag;\n    force += accel * age;\n    pos += force;\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        pos.x += wiggleSin;\n        pos.y += wiggleCos;\n        pos.z += wiggleSin;\n    #endif\n    #ifdef SHOULD_ROTATE_PARTICLES\n        pos = getRotation(pos, positionInTime);\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    highp float pointSize = getFloatOverLifetime(positionInTime, size) * isAlive;\n    #ifdef HAS_PERSPECTIVE\n        float perspective = scale / length(mvPosition.xyz);\n    #else\n        float perspective = 1.0;\n    #endif\n    float pointSizePerspective = pointSize * perspective;\n    #ifdef COLORIZE\n       vec3 c = isAlive * getColorOverLifetime(\n           positionInTime,\n           unpackColor(color.x),\n           unpackColor(color.y),\n           unpackColor(color.z),\n           unpackColor(color.w)\n      );\n    #else\n       vec3 c = vec3(1.0);\n    #endif\n    float o = isAlive * getFloatOverLifetime(positionInTime, opacity);\n    vColor = vec4(c, o);\n    #ifdef SHOULD_ROTATE_TEXTURE\n        vAngle = isAlive * getFloatOverLifetime(positionInTime, angle);\n    #endif\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = textureAnimation.x;\n        float framesY = textureAnimation.y;\n        float loopCount = textureAnimation.w;\n        float totalFrames = textureAnimation.z;\n        float frameNumber = mod((positionInTime * loopCount) * totalFrames, totalFrames);\n        float column = floor(mod(frameNumber, framesX));\n        float row = floor((frameNumber - column) / framesX);\n        float columnNorm = column / framesX;\n        float rowNorm = row / framesY;\n        vSpriteSheet.x = 1.0 / framesX;\n        vSpriteSheet.y = 1.0 / framesY;\n        vSpriteSheet.z = columnNorm;\n        vSpriteSheet.w = rowNorm;\n    #endif\n    gl_PointSize = pointSizePerspective;\n    gl_Position = projectionMatrix * mvPosition;", 
THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, "}"].join("\n"), fragment:[ParticleShaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, ParticleShaderChunks.varyings, ParticleShaderChunks.branchAvoidanceFunctions, "void main() {\n    vec3 outgoingLight = vColor.xyz;\n    \n    #ifdef ALPHATEST\n       if(vColor.w < float(ALPHATEST)) discard;\n    #endif", ParticleShaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, 
"    outgoingLight = vColor.xyz * rotatedTexture.xyz;\n    gl_FragColor = vec4(outgoingLight.xyz, rotatedTexture.w * vColor.w);", THREE.ShaderChunk.fog_fragment, "}"].join("\n")};
"use strict";
function ParticleEmitter(a, c) {
  this.group = new ParticleGroup(void 0 !== a ? a : ParticleEmitter.defaultGroup);
  this.emitter = new ParticleEmitterControl(void 0 !== c ? c : ParticleEmitter.defaultEmitter);
  this.group.addEmitter(this.emitter);
  THREE.Points.call(this, this.group.geometry, this.group.material);
  this.type = "ParticleEmiter";
  this.name = "particle";
  this.dynamicEmitter = this.frustumCulled = !1;
  this.clock = new THREE.Clock;
  this.temp = new THREE.Vector4;
  var k = this;
  Object.defineProperties(this, {texture:{get:function() {
    return k.group.texture;
  }, set:function(a) {
    k.group.texture = a;
  }}});
}
var ParticleDistributions = {BOX:1, SPHERE:2, DISC:3};
ParticleEmitter.valueOverLifetimeLength = 4;
ParticleEmitter.prototype = Object.create(THREE.Points.prototype);
ParticleEmitter.defaultEmitter = {particleCount:200, velocity:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(3, 3, 3)}, acceleration:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(0, 0, 0)}};
ParticleEmitter.defaultGroup = {texture:{value:null}, maxParticleCount:200, blending:THREE.AdditiveBlending, fog:!1, depthWrite:!1, depthTest:!0, transparent:!0, hasPerspective:!0};
ParticleEmitter.prototype.reload = function() {
  this.dispose();
  var a = this.children;
  this.children = [];
  var c = (new ObjectLoader).parse(this.toJSON());
  this.children = a;
  this.group = c.group;
  this.emitter = c.emitter;
  this.geometry = this.group.geometry;
  this.material = this.group.material;
};
ParticleEmitter.prototype.updateMatrix = function() {
  this.dynamicEmitter ? (this.matrix.makeRotationFromQuaternion(this.quaternion), this.matrix.scale(this.scale)) : this.matrix.compose(this.position, this.quaternion, this.scale);
  this.matrixWorldNeedsUpdate = !0;
};
ParticleEmitter.prototype.onBeforeRender = function(a, c, k, b) {
  this.group.uniforms.scale.value = a.getCurrentViewport(this.temp).w;
  this.group.tick(this.clock.getDelta());
  !0 === this.dynamicEmitter && (this.emitter.position.value = this.position);
};
ParticleEmitter.prototype.dispose = function() {
  this.group.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
ParticleEmitter.prototype.toJSON = function(a) {
  var c = this.material, k = this.geometry;
  this.geometry = this.material = void 0;
  var b = this.group.texture, e = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    b = b.toJSON(a);
  });
  this.material = c;
  this.geometry = k;
  e.object.group = this.group.toJSON(a);
  e.object.emitter = this.emitter.toJSON(a);
  return e;
};
"use strict";
function Sky(a, c, k, b) {
  THREE.Group.call(this);
  this.name = "sky";
  this.type = "Sky";
  this.colorTop = [new THREE.Color(7844859), new THREE.Color(30463), new THREE.Color(220086), new THREE.Color(9273)];
  this.colorBottom = [new THREE.Color(15461606), new THREE.Color(16777215), new THREE.Color(16705495), new THREE.Color(26023)];
  this.sunColor = 16777130;
  this.intensity = .3;
  this.moonColor = 5592507;
  this.hemisphere = new THREE.HemisphereLight(3310847, 16764031, .5);
  this.hemisphere.locked = !0;
  this.hemisphere.matrixAutoUpdate = !1;
  this.add(this.hemisphere);
  this.sun = new DirectionalLight(this.sunColor, this.intensity);
  this.sun.castShadow = !0;
  this.sun.locked = !0;
  this.add(this.sun);
  var e = {topColor:{type:"c", value:new THREE.Color(0, .46, 1)}, bottomColor:{type:"c", value:new THREE.Color(1, 1, 1)}, offset:{type:"f", value:20}, exponent:{type:"f", value:.2}};
  e.topColor.value.copy(this.hemisphere.color);
  var f = new THREE.SphereBufferGeometry(1500, 16, 16);
  e = new THREE.ShaderMaterial({vertexShader:Sky.VERTEX, fragmentShader:Sky.FRAGMENT, uniforms:e, side:THREE.BackSide});
  this.sky = new THREE.Mesh(f, e);
  this.sky.locked = !0;
  this.sky.matrixAutoUpdate = !1;
  this.add(this.sky);
  this.sky.raycast = function() {
    return null;
  };
  this.autoUpdate = void 0 !== a ? a : !0;
  this.sunDistance = void 0 !== k ? k : 100;
  this.dayTime = void 0 !== c ? c : 120;
  this.time = void 0 !== b ? b : 75;
  this.updateSky();
}
Sky.prototype = Object.create(THREE.Group.prototype);
Sky.VERTEX = "varying vec3 vWorldPosition;\nvoid main()\n{\n\tvec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
Sky.FRAGMENT = "uniform vec3 topColor;\nuniform vec3 bottomColor;\nuniform float offset;\nuniform float exponent;\nvarying vec3 vWorldPosition;\nvoid main()\n{\n\tfloat h = normalize(vWorldPosition + offset).y;\n\tgl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h , 0.0), exponent), 0.0)), 1.0);\n}";
Sky.prototype.initialize = function() {
  this.updateSky();
  THREE.Object3D.prototype.initialize.call(this);
};
Sky.prototype.update = function(a) {
  this.autoUpdate && (this.time += a, this.time > this.dayTime && (this.time -= this.dayTime), this.updateSky());
  THREE.Object3D.prototype.update.call(this, a);
};
Sky.prototype.updateSky = function() {
  var a = this.time / this.dayTime;
  if (.25 > a) {
    this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, this.colorBottom[3].g, this.colorBottom[3].b);
  } else {
    if (.292 > a) {
      var c = 23.81 * (a - .25), k = 1 - c;
      this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[3].r + c * this.colorTop[0].r, k * this.colorTop[3].g + c * this.colorTop[0].g, k * this.colorTop[3].b + c * this.colorTop[0].b);
      this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[3].r + c * this.colorBottom[0].r, k * this.colorBottom[3].g + c * this.colorBottom[0].g, k * this.colorBottom[3].b + c * this.colorBottom[0].b);
    } else {
      .4167 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[0].r, this.colorTop[0].g, this.colorTop[0].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[0].r, this.colorBottom[0].g, this.colorBottom[0].b)) : .5 > a ? (c = 12 * (a - .4167), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[0].r + c * this.colorTop[1].r, k * this.colorTop[0].g + c * this.colorTop[1].g, k * this.colorTop[0].b + c * this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * 
      this.colorBottom[0].r + c * this.colorBottom[1].r, k * this.colorBottom[0].g + c * this.colorBottom[1].g, k * this.colorBottom[0].b + c * this.colorBottom[1].b)) : .708 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[1].r, this.colorTop[1].g, this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[1].r, this.colorBottom[1].g, this.colorBottom[1].b)) : .75 > a ? (c = 23.81 * (a - .708), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * 
      this.colorTop[1].r + c * this.colorTop[2].r, k * this.colorTop[1].g + c * this.colorTop[2].g, k * this.colorTop[1].b + c * this.colorTop[2].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[1].r + c * this.colorBottom[2].r, k * this.colorBottom[1].g + c * this.colorBottom[2].g, k * this.colorBottom[1].b + c * this.colorBottom[2].b)) : .8333 > a ? (c = 12.048 * (a - .75), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[2].r + c * this.colorTop[3].r, 
      k * this.colorTop[2].g + c * this.colorTop[3].g, k * this.colorTop[2].b + c * this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[2].r + c * this.colorBottom[3].r, k * this.colorBottom[2].g + c * this.colorBottom[3].g, k * this.colorBottom[2].b + c * this.colorBottom[3].b)) : (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, 
      this.colorBottom[3].g, this.colorBottom[3].b));
    }
  }
  .2 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor)) : .3 > a ? (c = 10 * (a - .2), .5 > c ? (this.sun.intensity = (2 - 2 * c) * this.intensity, this.sun.color.setHex(this.moonColor)) : (this.sun.intensity = 2 * c * this.intensity, this.sun.color.setHex(this.sunColor))) : .7 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.sunColor)) : .8 > a ? (c = 10 * (a - .7), .5 > c ? (this.sun.intensity = (2 - 2 * c) * this.intensity, this.sun.color.setHex(this.sunColor)) : 
  (this.sun.intensity = 2 * c * this.intensity, this.sun.color.setHex(this.moonColor))) : (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor));
  c = MathUtils.PI2 * a - MathUtils.PID2;
  .25 < a && .75 > a ? (this.sun.position.x = this.sunDistance * Math.cos(c), this.sun.position.y = this.sunDistance * Math.sin(c)) : (this.sun.position.x = this.sunDistance * Math.cos(c + Math.PI), this.sun.position.y = this.sunDistance * Math.sin(c + Math.PI));
};
Sky.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.colorTop = [];
  for (var c = 0; c < this.colorTop.length; c++) {
    a.object.colorTop.push(this.colorTop[c].toJSON());
  }
  a.object.colorBottom = [];
  for (c = 0; c < this.colorBottom.length; c++) {
    a.object.colorBottom.push(this.colorBottom[c].toJSON());
  }
  a.object.sunColor = this.sunColor;
  a.object.moonColor = this.moonColor;
  a.object.intensity = this.intensity;
  a.object.autoUpdate = this.autoUpdate;
  a.object.sunDistance = this.sunDistance;
  a.object.dayTime = this.dayTime;
  a.object.time = this.time;
  a.object.sun = {};
  a.object.sun.castShadow = this.sun.castShadow;
  a.object.sun.shadow = this.sun.shadow.toJSON();
  return a;
};
"use strict";
function Container() {
  THREE.Group.call(this);
  this.name = "container";
  this.type = "Group";
}
Container.prototype = Object.create(THREE.Group.prototype);
"use strict";
function LensFlare() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.name = "lensflare";
  this.type = "LensFlare";
  this.renderOrder = Infinity;
  this.castShadow = this.receiveShadow = this.frustumCulled = !1;
  this.elements = [];
  var a = new THREE.Vector3, c = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  c.minFilter = THREE.NearestFilter;
  c.magFilter = THREE.NearestFilter;
  c.wrapS = THREE.ClampToEdgeWrapping;
  c.wrapT = THREE.ClampToEdgeWrapping;
  c.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, e = THREE.Lensflare.Shader, f = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n\t\t\t}", 
  depthTest:!0, depthWrite:!1, transparent:!1}), h = new THREE.RawShaderMaterial({uniforms:{map:{value:c}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUV = uv;\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tuniform sampler2D map;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = texture2D(map, vUV);\n\t\t\t}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), r = new THREE.Mesh(b, f);
  e = THREE.LensflareElement.Shader;
  var q = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:e.vertexShader, fragmentShader:e.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), n = new THREE.Mesh(b, q), m = new THREE.Vector2, d = new THREE.Vector2, l = new THREE.Box2, v = new THREE.Vector4;
  this.onBeforeRender = function(e, x, z) {
    e.getCurrentViewport(v);
    x = v.w / v.z;
    var p = v.z / 2, u = v.w / 2, w = 16 / v.w;
    m.set(w * x, w);
    l.min.set(v.x, v.y);
    l.max.set(v.x + (v.z - 16), v.y + (v.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(z.matrixWorldInverse);
    a.applyMatrix4(z.projectionMatrix);
    d.x = v.x + a.x * p + p - 8;
    d.y = v.y + a.y * u + u - 8;
    if (l.containsPoint(d)) {
      e.copyFramebufferToTexture(d, c);
      p = f.uniforms;
      p.scale.value = m;
      p.screenPosition.value = a;
      e.renderBufferDirect(z, null, b, f, r, null);
      e.copyFramebufferToTexture(d, k);
      p = h.uniforms;
      p.scale.value = m;
      p.screenPosition.value = a;
      e.renderBufferDirect(z, null, b, h, r, null);
      u = 2 * -a.x;
      for (var A = 2 * -a.y, B = 0, D = this.elements.length; B < D; B++) {
        x = this.elements[B], p = q.uniforms, p.color.value.copy(x.color), p.map.value = x.texture, p.screenPosition.value.x = a.x + u * x.distance, p.screenPosition.value.y = a.y + A * x.distance, w = x.size / v.w, x = v.w / v.z, p.scale.value.set(w * x, w), q.uniformsNeedUpdate = !0, e.renderBufferDirect(z, null, b, q, n, null);
      }
    }
  };
  this.dispose = function() {
    f.dispose();
    h.dispose();
    q.dispose();
    c.dispose();
    k.dispose();
    for (var a = 0; a < this.elements.length; a++) {
      this.elements[a].texture.dispose();
    }
  };
}
LensFlare.prototype = Object.create(THREE.Mesh.prototype);
LensFlare.prototype.addFlare = function(a, c, k, b) {
  void 0 === c && (c = -1);
  void 0 === k && (k = 0);
  void 0 === b && (b = new Color(16777215));
  k = Math.min(k, Math.max(0, k));
  this.addElement(new THREE.LensflareElement(a, c, k, b));
};
LensFlare.prototype.addElement = function(a) {
  this.elements.push(a);
};
LensFlare.prototype.toJSON = function(a) {
  var c = this, k = [];
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, e) {
    for (e = 0; e < c.elements.length; e++) {
      var b = {};
      b.texture = c.elements[e].texture.toJSON(a).uuid;
      b.size = c.elements[e].size;
      b.distance = c.elements[e].distance;
      b.color = c.elements[e].color.getHex();
      k.push(b);
    }
  });
  a.object.elements = k;
  return a;
};
"use strict";
function BrowserView(a) {
  var c = document.createElement("iframe");
  c.style.border = "none";
  CSS3DObject.call(this, c);
  this.name = "browserview";
  var k = this, b, e;
  Object.defineProperties(this, {url:{get:function() {
    return a;
  }, set:function(b) {
    a = void 0 !== b ? BrowserView.processURL(b) : "";
    k.element.src = a;
  }}, width:{get:function() {
    return b;
  }, set:function(a) {
    b = a;
    k.element.style.width = b + "px";
  }}, height:{get:function() {
    return e;
  }, set:function(a) {
    e = a;
    k.element.style.height = e + "px";
  }}});
  this.height = this.width = 512;
  this.url = void 0 !== a ? a : "";
}
BrowserView.prototype = Object.create(CSS3DObject.prototype);
BrowserView.prototype.constructor = BrowserView;
BrowserView.processURL = function(a) {
  return a = a.replace("watch?v=", "embed/");
};
BrowserView.prototype.toJSON = function(a) {
  a = CSS3DObject.prototype.toJSON.call(this, a);
  a.object.height = this.height;
  a.object.width = this.width;
  a.object.url = this.url;
  return a;
};
"use strict";
function Skeleton(a, c) {
  this.uuid = THREE.Math.generateUUID();
  void 0 === a && (a = []);
  this.bones = a.slice(0);
  this.boneMatrices = new Float32Array(16 * this.bones.length);
  if (void 0 === c) {
    this.calculateInverses();
  } else {
    if (this.bones.length === c.length) {
      this.boneInverses = c.slice(0);
    } else {
      for (console.warn("nunuStudio: Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0; a < this.bones.length; a++) {
        this.boneInverses.push(new Matrix4);
      }
    }
  }
}
THREE._Skeleton = THREE.Skeleton;
THREE.Skeleton = Skeleton;
Skeleton.prototype = Object.create(THREE._Skeleton.prototype);
Skeleton.prototype.toJSON = function(a) {
  a = {};
  for (var c = [], k = [], b = 0; b < this.bones.length; b++) {
    c.push(this.bones[b].uuid);
  }
  for (b = 0; b < this.boneInverses.length; b++) {
    k.push(this.boneInverses[b].toArray());
  }
  a.uuid = this.uuid;
  a.bones = c;
  a.boneInverses = k;
  return a;
};
"use strict";
function OrbitControls() {
  THREE.Group.call(this);
  this.name = "orbit";
  this.type = "OrbitControls";
  this.distance = 4;
  this.maxDistance = 20;
  this.minDistance = 2;
  this.sensitivity = .002;
  this.zoomSensitivity = .001;
  this.limitUp = 1.57;
  this.limitDown = -1.57;
  this.movementEnabled = this.zoomEnabled = this.needsButtonPressed = !0;
  this.center = new THREE.Vector3(0, 0, 0);
  this.vector = new THREE.Vector2(Math.PI / 2, 0);
  this.smooth = !0;
  this.friction = .8;
  this.speed = .3;
  this.invertNavigation = !1;
  this.keyboard = this.mouse = null;
  this.speedDistance = 0;
  this.speedCenter = new THREE.Vector3(0, 0, 0);
  this.speedOrientation = new THREE.Vector2(0, 0);
  this.tempVector = new THREE.Vector3;
}
OrbitControls.UP = new THREE.Vector3(0, 1, 0);
OrbitControls.ZERO = new THREE.Vector3(0, 0, 0);
OrbitControls.prototype = Object.create(THREE.Group.prototype);
OrbitControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.center.copy(this.position);
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
OrbitControls.prototype.update = function(a) {
  var c = !1;
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    !0 === this.smooth ? (this.speedOrientation.y += this.speed * this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.speedOrientation.x -= this.speed * this.sensitivity * this.mouse.delta.x) : (this.vector.y -= this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.vector.x -= this.sensitivity * this.mouse.delta.x), c = !0;
  }
  this.zoomEnabled && (this.mouse.buttonPressed(Mouse.MIDDLE) && (!0 === this.smooth ? this.speedCenter.y += this.speed * this.sensitivity * this.mouse.delta.y * this.distance : this.center.y += this.sensitivity * this.mouse.delta.y * this.distance, c = !0), 0 !== this.mouse.wheel && (!0 === this.smooth ? this.speedDistance += this.speed * this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity : this.distance += this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity, 
  c = !0));
  if (this.movementEnabled && this.mouse.buttonPressed(Mouse.RIGHT)) {
    c = this.getWorldDirection(this.tempVector);
    c.y = 0;
    c.normalize();
    if (!0 === this.smooth) {
      var k = this.speed * this.mouse.delta.y * this.sensitivity * this.distance;
      this.speedCenter.x += -c.x * k;
      this.speedCenter.z += -c.z * k;
      c.applyAxisAngle(OrbitControls.UP, Math.PI / 2);
      k = this.speed * this.mouse.delta.x * this.sensitivity * this.distance;
      this.speedCenter.x -= c.x * k;
      this.speedCenter.z -= c.z * k;
    } else {
      k = this.mouse.delta.y * this.sensitivity * this.distance, this.center.x += -c.x * k, this.center.z += -c.z * k, c.applyAxisAngle(OrbitControls.UP, Math.PI / 2), k = this.mouse.delta.x * this.sensitivity * this.distance, this.center.x -= c.x * k, this.center.z -= c.z * k;
    }
    c = !0;
  }
  !0 === this.smooth ? (this.distance += this.speedDistance, this.center.add(this.speedCenter), this.vector.add(this.speedOrientation), this.speedDistance *= this.friction, this.speedOrientation.multiplyScalar(this.friction), this.speedCenter.multiplyScalar(this.friction), this.updateControls()) : (!0 === c && this.updateControls(), THREE.Object3D.prototype.update.call(this, a));
};
OrbitControls.prototype.updateControls = function() {
  this.vector.y < this.limitDown ? this.vector.y = this.limitDown : this.vector.y > this.limitUp && (this.vector.y = this.limitUp);
  this.distance < this.minDistance ? this.distance = this.minDistance : this.distance > this.maxDistance && (this.distance = this.maxDistance);
  var a = this.distance * Math.cos(this.vector.y);
  this.position.set(Math.cos(this.vector.x) * a, this.distance * Math.sin(this.vector.y), Math.sin(this.vector.x) * a);
  this.position.add(this.center);
  a = new THREE.Matrix4;
  a.lookAt(this.position, this.center, OrbitControls.UP);
  this.quaternion.setFromRotationMatrix(a);
};
OrbitControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.distance = this.distance;
  a.object.maxDistance = this.maxDistance;
  a.object.minDistance = this.minDistance;
  a.object.sensitivity = this.sensitivity;
  a.object.limitUp = this.limitUp;
  a.object.limitDown = this.limitDown;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.zoomEnabled = this.zoomEnabled;
  a.object.movementEnabled = this.movementEnabled;
  a.object.smooth = this.smooth;
  a.object.friction = this.friction;
  a.object.speed = this.speed;
  a.object.invertNavigation = this.invertNavigation;
  a.object.center = this.center.toArray();
  a.object.vector = this.vector.toArray();
  return a;
};
"use strict";
function FirstPersonControls() {
  THREE.Group.call(this);
  this.name = "controls";
  this.type = "FirstPersonControls";
  this.sensitivity = .005;
  this.movementEnabled = this.needsButtonPressed = !0;
  this.moveSpeed = .05;
  this.moveOnPlane = !1;
  this.moveKeys = [Keyboard.W, Keyboard.S, Keyboard.A, Keyboard.D];
  this.vector = new THREE.Vector2(0, 0);
  this.keyboard = this.mouse = null;
  this.tempVector = new THREE.Vector3;
}
FirstPersonControls.UP = new THREE.Vector3(0, 1, 0);
FirstPersonControls.prototype = Object.create(THREE.Group.prototype);
FirstPersonControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
FirstPersonControls.prototype.update = function(a) {
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    this.vector.y -= this.sensitivity * this.mouse.delta.y, this.vector.x -= this.sensitivity * this.mouse.delta.x, -1.57 > this.vector.y ? this.vector.y = -1.57 : 1.57 < this.vector.y && (this.vector.y = 1.57), this.updateControls();
  }
  if (this.movementEnabled) {
    if (this.keyboard.keyPressed(this.moveKeys[0])) {
      var c = this.getWorldDirection(this.tempVector);
      this.moveOnPlane && (c.y = 0);
      c.normalize();
      c.multiplyScalar(this.moveSpeed);
      this.position.sub(c);
    }
    this.keyboard.keyPressed(this.moveKeys[1]) && (c = this.getWorldDirection(this.tempVector), this.moveOnPlane && (c.y = 0), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.add(c));
    this.keyboard.keyPressed(this.moveKeys[2]) && (c = new THREE.Vector3(Math.sin(this.vector.x - 1.57), 0, Math.cos(this.vector.x - 1.57)), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.sub(c));
    this.keyboard.keyPressed(this.moveKeys[3]) && (c = new THREE.Vector3(Math.sin(this.vector.x + 1.57), 0, Math.cos(this.vector.x + 1.57)), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.sub(c));
  }
  THREE.Object3D.prototype.update.call(this, a);
};
FirstPersonControls.prototype.updateControls = function() {
  var a = Math.cos(this.vector.y);
  a = new THREE.Vector3(Math.sin(this.vector.x) * a, Math.sin(this.vector.y), Math.cos(this.vector.x) * a);
  a.add(this.position);
  var c = new THREE.Matrix4;
  c.lookAt(this.position, a, FirstPersonControls.UP);
  this.quaternion.setFromRotationMatrix(c);
};
FirstPersonControls.prototype.getDirection = function() {
  var a = this.getWorldDirection(this.tempVector);
  a.normalize();
  return a;
};
FirstPersonControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.moveSpeed = this.moveSpeed;
  a.object.sensitivity = this.sensitivity;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.movementEnabled = this.movementEnabled;
  a.object.moveOnPlane = this.moveOnPlane;
  a.object.moveKeys = this.moveKeys;
  return a;
};
"use strict";
function Program(a) {
  ResourceManager.call(this);
  this.type = "Program";
  this.matrixAutoUpdate = !1;
  this.app = null;
  this.name = void 0 !== a ? a : "program";
  this.author = this.description = "";
  this.version = "0.0.0";
  this.vr = this.handlePixelRatio = this.lockPointer = !1;
  this.vrScale = 1;
  this.rendererConfig = new RendererConfiguration;
  this.targetConfig = new TargetConfig;
  this.division = this.canvas = this.scene = this.renderer = this.mouse = this.keyboard = this.defaultCamera = this.defaultScene = null;
  this.manager = new EventManager;
  this.clock = new THREE.Clock;
  this.vrRunning = !1;
}
Program.prototype = Object.create(ResourceManager.prototype);
Program.prototype.initialize = function() {
  this.manager.create();
  null === this.mouse && (this.mouse = new Mouse);
  null === this.keyboard && (this.keyboard = new keyboard);
  if (null !== this.defaultScene) {
    for (var a = 0; a < this.children.length; a++) {
      if (this.children[a].uuid === this.defaultScene) {
        this.setScene(this.children[a]);
        break;
      }
    }
  } else {
    0 < this.children.length && this.setScene(this.children[0]);
  }
  this.clock.start();
};
Program.prototype.setMouseKeyboard = function(a, c) {
  this.mouse = a;
  this.keyboard = c;
};
Program.prototype.setRenderer = function(a, c) {
  this.renderer = a;
  this.renderer.autoClear = !1;
  this.canvas = a.domElement;
  this.division = this.canvas.parentElement;
  c && this.updateRenderer();
};
Program.prototype.update = function() {
  var a = this.clock.getDelta();
  this.scene.update(a);
};
Program.prototype.render = function(a) {
  this.scene.render(a);
};
Program.prototype.resize = function(a, c) {
  null !== this.defaultCamera && this.defaultCamera.resize(a, c);
  this.scene.resize(a, c);
};
Program.prototype.updateRenderer = function() {
  null !== this.renderer && (this.renderer.shadowMap.enabled = this.shadows, this.renderer.shadowMap.type = this.shadowsType, this.renderer.toneMapping = this.toneMapping, this.renderer.toneMappingExposure = this.toneMappingExposure, this.renderer.toneMappingWhitePoint = this.toneMappingWhitePoint);
};
Program.prototype.vrAvailable = function() {
  return this.vr && Nunu.vrAvailable();
};
Program.prototype.enterVR = function() {
  if (this.vr) {
    var a = this;
    Nunu.enterVR(this.renderer, function() {
      a.vrRunning = !0;
    });
  }
};
Program.prototype.exitVR = function() {
  this.vr && (Nunu.exitVR(this.renderer), this.vrRunning = !1);
};
Program.prototype.setScene = function(a) {
  null !== this.scene && this.scene.dispose();
  a instanceof Scene ? this.scene = a : "string" === typeof a && (this.scene = this.getObjectByName(a));
  null !== this.scene && (null === this.scene.defaultCamera && (this.scene.defaultCamera = this.defaultCamera), this.scene.initialize());
};
Program.prototype.remove = function(a) {
  if (a instanceof Scene) {
    var c = this.children.indexOf(a);
    -1 < c && (this.children.splice(c, 1), a.parent = null);
    a === this.scene && (this.scene.dispose(), this.scene = null);
    0 === this.children.length && (this.scene = null);
  } else {
    console.warn("nunuStudio: Trying to remove Object3D from program, only Scene objects allowed.");
  }
};
Program.prototype.add = function(a) {
  a instanceof Scene ? (a.parent = this, this.children.push(a), 1 === this.children.length && (this.scene = this.children[0])) : console.warn("nunuStudio: Trying to add Object3D to program, only Scene objects allowed.");
};
Program.prototype.clone = function() {
  return (new ObjectLoader).parse(this.toJSON());
};
Program.prototype.setInitialScene = function(a) {
  this.defaultScene = a.uuid;
};
Program.prototype.dispose = function() {
  this.manager.destroy();
  null !== this.scene ? this.scene.dispose() : console.warn("nunuStudio: Program dispose() scene is null.", this);
  ResourceManager.prototype.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Program.prototype.receiveDataApp = function(a) {
  var c = !1;
  this.traverse(function(k) {
    k instanceof Script && (k.appData(a), c = !0);
  });
  c || console.warn("nunuStudio: No script with onAppData found", a);
};
Program.prototype.sendDataApp = function(a) {
  if (null !== this.app) {
    if (void 0 !== this.app.onDataReceived) {
      this.app.onDataReceived(a);
    } else {
      console.warn("nunuStudio: Send app data communication", a);
    }
  } else {
    console.warn("nunuStudio: Data sent to app", a);
  }
};
Program.prototype.toJSON = function(a, c) {
  var k = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, e) {
    if (!1 !== c) {
      e = k.textures;
      for (var b in e) {
        var h = e[b];
        void 0 === a.textures[h.uuid] && (a.textures[h.uuid] = h.toJSON(a));
      }
      e = k.materials;
      for (b in e) {
        h = e[b], void 0 === a.materials[h.uuid] && (a.materials[h.uuid] = h.toJSON(a));
      }
      e = k.fonts;
      for (b in e) {
        h = e[b], void 0 === a.fonts[h.uuid] && (a.fonts[h.uuid] = h.toJSON(a));
      }
      e = k.audio;
      for (b in e) {
        h = e[b], void 0 === a.audio[h.uuid] && (a.audio[h.uuid] = h.toJSON(a));
      }
      e = k.resources;
      for (b in e) {
        h = e[b], void 0 === a.resources[h.uuid] && (a.resources[h.uuid] = h.toJSON(a));
      }
    }
  });
  null !== this.defaultScene && (a.object.defaultScene = this.defaultScene);
  a.object.author = this.author;
  a.object.description = this.description;
  a.object.version = this.version;
  a.object.lockPointer = this.lockPointer;
  a.object.handlePixelRatio = this.handlePixelRatio;
  a.object.vr = this.vr;
  a.object.vrScale = this.vrScale;
  a.object.rendererConfig = this.rendererConfig.toJSON();
  return a;
};
"use strict";
function Scene() {
  THREE._Scene.call(this);
  this.name = "scene";
  this.matrixAutoUpdate = !1;
  this.usePhysics = !0;
  this.world = new CANNON.World;
  this.world.defaultContactMaterial.contactEquationStiffness = 1E9;
  this.world.defaultContactMaterial.contactEquationRelaxation = 4;
  this.world.quatNormalizeSkip = 0;
  this.world.quatNormalizeFast = !1;
  this.world.gravity.set(0, -9.8, 0);
  this.world.broadphase = new CANNON.NaiveBroadphase;
  this.world.solver = new CANNON.SplitSolver(new CANNON.GSSolver);
  this.world.solver.tolerance = .05;
  this.world.solver.iterations = 7;
  this.background = new THREE.Color(0);
  this.cameras = [];
  this.defaultCamera = null;
  this.delta = 0;
  this.raycaster = new THREE.Raycaster;
  this.canvas = this.program = null;
  this.mouse = new THREE.Vector2(0, 0);
}
THREE._Scene = THREE.Scene;
Scene.prototype = Object.create(THREE._Scene.prototype);
Scene.prototype.initialize = function() {
  this.program = this.parent;
  this.canvas = this.parent.canvas;
  THREE.Object3D.prototype.initialize.call(this);
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.initialize();
    });
  }
};
Scene.prototype.update = function(a) {
  this.mouse.set(this.program.mouse.position.x / this.canvas.width * 2 - 1, -2 * this.program.mouse.position.y / this.canvas.height + 1);
  0 < this.cameras.length && this.raycaster.setFromCamera(this.mouse, this.cameras[0]);
  this.usePhysics && this.world.step(.05 > a ? a : .05);
  for (var c = 0; c < this.children.length; c++) {
    this.children[c].traverse(function(c) {
      c.update(a);
    });
  }
};
Scene.prototype.resize = function(a, c) {
  null !== this.defaultCamera && this.defaultCamera.resize(a, c);
  for (var k = 0; k < this.cameras.length; k++) {
    this.cameras[k].resize(a, c);
  }
  for (k = 0; k < this.children.length; k++) {
    this.children[k].traverse(function(b) {
      b.resize(a, c);
    });
  }
};
Scene.prototype.dispose = function() {
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.dispose();
    });
  }
};
Scene.prototype.render = function(a) {
  a.setClearColor(this.background);
  if (0 < this.cameras.length) {
    a.setScissorTest(!0);
    for (var c = 0; c < this.cameras.length; c++) {
      this.cameras[c].setupRenderer(a), this.cameras[c].render(a, this);
    }
    a.setScissorTest(!1);
  } else {
    null !== this.defaultCamera && this.defaultCamera.render(a, this);
  }
};
Scene.prototype.getCamera = function(a, c) {
  void 0 === c && (c = this);
  if (a === c.uuid) {
    return c;
  }
  c = c.children;
  for (var k = 0; k < c.length; k++) {
    var b = this.getCamera(a, c[k]);
    if (null !== b) {
      return b;
    }
  }
  return null;
};
Scene.prototype.addCamera = function(a) {
  -1 === this.cameras.indexOf(a) && (this.cameras.push(a), this.updateCameraOrder());
};
Scene.prototype.updateCameraOrder = function() {
  this.cameras.sort(function(a, c) {
    return a.order > c.order;
  });
};
Scene.prototype.removeCamera = function(a) {
  a = this.cameras.indexOf(a);
  -1 < a && this.cameras.splice(a, 1);
};
Scene.prototype.isCameraActive = function(a) {
  return -1 < this.cameras.indexOf(a);
};
Scene.prototype.setFogMode = function(a) {
  var c = null !== this.fog ? this.fog.color.getHex() : "#FFFFFF";
  a === THREE.Fog.LINEAR ? this.fog = new THREE.Fog(c, 5, 20) : a === THREE.Fog.EXPONENTIAL ? this.fog = new THREE.FogExp2(c, .01) : a === THREE.Fog.NONE && (this.fog = null);
};
Scene.prototype.toJSON = function(a) {
  if (null == this.parent || "Program" !== this.parent.type) {
    return console.warn("nunuStudio: Scene is not on top level serializing as Group."), this.type = "Group", THREE.Object3D.prototype.toJSON.call(this, a);
  }
  var c = this.background, k = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    c instanceof THREE.Color ? c = c.toJSON(a) : c instanceof THREE.Texture && (c = c.toJSON(a).uuid);
  });
  null !== c && (k.object.background = c);
  if (null !== this.defaultCamera) {
    var b = new THREE.Vector3, e = new THREE.Quaternion, f = new THREE.Vector3;
    this.defaultCamera.matrixWorld.decompose(b, e, f);
    a = this.defaultCamera.toJSON(a);
    a.object.position = b.toArray();
    a.object.quaternion = e.toArray();
    a.object.scale = f.toArray();
    k.object.defaultCamera = a;
  }
  null !== this.fog && (k.object.fog = this.fog.toJSON());
  k.object.usePhysics = this.usePhysics;
  k.object.cameras = [];
  for (b = 0; b < this.cameras.length; b++) {
    k.object.cameras.push(this.cameras[b].uuid);
  }
  k.object.world = {};
  k.object.world.gravity = this.world.gravity;
  k.object.world.quatNormalizeSkip = this.world.quatNormalizeSkip;
  k.object.world.quatNormalizeFast = this.world.quatNormalizeFast;
  k.object.world.solver = {};
  k.object.world.solver.tolerance = this.world.solver.tolerance;
  k.object.world.solver.iterations = this.world.solver.iterations;
  return k;
};
"use strict";
function Base64Utils() {
}
Base64Utils.encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
Base64Utils.isBase64 = function(a) {
  if ("string" !== typeof a) {
    return !1;
  }
  if (a.startsWith("data:")) {
    return !0;
  }
  for (var c = 0; c < a.length; c++) {
    if (!Base64Utils.encoding.includes(a.charAt(c))) {
      return !1;
    }
  }
  return !0;
};
Base64Utils.removeHeader = function(a) {
  return a.slice(a.search(";base64,") + 8);
};
Base64Utils.getFileFormat = function(a) {
  var c = a.indexOf("/") + 1, k = a.indexOf(";");
  return a.substr(c, k - c);
};
Base64Utils.fromArraybuffer = function(a) {
  var c = "";
  a = new Uint8Array(a);
  for (var k = a.byteLength % 3, b = a.byteLength - k, e, f, h, r, q = 0; q < b; q += 3) {
    r = a[q] << 16 | a[q + 1] << 8 | a[q + 2], e = (r & 16515072) >> 18, f = (r & 258048) >> 12, h = (r & 4032) >> 6, r &= 63, c += Base64Utils.encoding[e] + Base64Utils.encoding[f] + Base64Utils.encoding[h] + Base64Utils.encoding[r];
  }
  1 === k ? (r = a[b], c += Base64Utils.encoding[(r & 252) >> 2] + Base64Utils.encoding[(r & 3) << 4] + "==") : 2 === k && (r = a[b] << 8 | a[b + 1], c += Base64Utils.encoding[(r & 64512) >> 10] + Base64Utils.encoding[(r & 1008) >> 4] + Base64Utils.encoding[(r & 15) << 2] + "=");
  return c;
};
Base64Utils.fromBinaryString = function(a) {
  for (var c = "", k = a.length % 3, b = a.length - k, e, f, h, r = 0; r < b; r += 3) {
    e = a.charCodeAt(r) & 255, f = a.charCodeAt(r + 1), h = a.charCodeAt(r + 2), c += Base64Utils.encoding.charAt(e >> 2), c += Base64Utils.encoding.charAt((e & 3) << 4 | (f & 240) >> 4), c += Base64Utils.encoding.charAt((f & 15) << 2 | (h & 192) >> 6), c += Base64Utils.encoding.charAt(h & 63);
  }
  1 === k ? (e = a.charCodeAt(r) & 255, c += Base64Utils.encoding.charAt(e >> 2), c += Base64Utils.encoding.charAt((e & 3) << 4), c += "==") : 2 === k && (e = a.charCodeAt(r) & 255, f = a.charCodeAt(r + 1), c += Base64Utils.encoding.charAt(e >> 2), c += Base64Utils.encoding.charAt((e & 3) << 4 | (f & 240) >> 4), c += Base64Utils.encoding.charAt((f & 15) << 2), c += "=");
  return c;
};
"use strict";
function ArraybufferUtils() {
}
ArraybufferUtils.fromBinaryString = function(a) {
  for (var c = a.length, k = new ArrayBuffer(c), b = new Uint8Array(k), e = 0; e < c; e++) {
    b[e] = a.charCodeAt(e);
  }
  return k;
};
ArraybufferUtils.fromBase64 = function(a) {
  for (var c = a.length / 4 * 3, k = new ArrayBuffer(c), b = new Uint8Array(k), e, f, h, r, q = 0, n = 0; q < c; q += 3) {
    e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(n++)), f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(n++)), h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(n++)), r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(n++)), b[q] = e << 2 | f >> 4, 64 !== h && (b[q + 1] = (f & 15) << 4 | h >> 2), 64 !== r && (b[q + 2] = (h & 3) << 6 | r);
  }
  return k;
};
ArraybufferUtils.fromBuffer = function(a) {
  for (var c = new ArrayBuffer(a.length), k = new Uint8Array(c), b = 0; b < a.length; b++) {
    k[b] = a[b];
  }
  return c;
};
"use strict";
function BufferUtils() {
}
BufferUtils.fromArrayBuffer = function(a) {
  var c = new Buffer(a.byteLength);
  a = new Uint8Array(a);
  for (var k = 0; k < c.length; k++) {
    c[k] = a[k];
  }
  return c;
};
"use strict";
function Timer(a, c) {
  this.callback = a;
  this.time = c;
  this.running = !1;
  this.id = -1;
}
Timer.prototype.start = function() {
  function a() {
    c.callback();
    c.running && (c.id = setTimeout(a, c.time));
  }
  if (!this.running) {
    this.running = !0;
    var c = this;
    a();
  }
};
Timer.prototype.stop = function() {
  this.running = !1;
  clearTimeout(self.id);
};
"use strict";
function AnimationTimer(a) {
  this.callback = a;
  this.running = !1;
  this.id = -1;
}
AnimationTimer.prototype.start = function() {
  function a() {
    c.callback();
    c.running && (c.id = requestAnimationFrame(a));
  }
  if (!this.running) {
    this.running = !0;
    var c = this;
    a();
  }
};
AnimationTimer.prototype.stop = function() {
  this.running = !1;
  cancelAnimationFrame(this.id);
};
"use strict";
function LocalStorage() {
}
LocalStorage.set = function(a, c) {
  "object" === typeof c ? window.localStorage.setItem(a, JSON.stringify(c)) : window.localStorage.setItem(a, c);
};
LocalStorage.get = function(a) {
  a = window.localStorage.getItem(a);
  try {
    return JSON.parse(a);
  } catch (c) {
    return a;
  }
};
LocalStorage.exists = function(a) {
  return null !== window.localStorage.getItem(a);
};
LocalStorage.delete = function(a) {
  return window.localStorage.removeItem(a);
};
"use strict";
function EventManager() {
  this.events = [];
}
EventManager.prototype.add = function(a, c, k) {
  this.events.push([a, c, k, !1]);
};
EventManager.prototype.clear = function() {
  this.destroy();
  this.events = [];
};
EventManager.prototype.create = function() {
  for (var a = 0; a < this.events.length; a++) {
    var c = this.events[a];
    c[0].addEventListener(c[1], c[2]);
    c[3] = !0;
  }
};
EventManager.prototype.destroy = function() {
  for (var a = 0; a < this.events.length; a++) {
    var c = this.events[a];
    c[0].removeEventListener(c[1], c[2]);
    c[3] = !1;
  }
};
EventManager.prototype.addScrollEvent = function(a, c) {
  void 0 !== window.onmousewheel ? this.add(a, "mousewheel", c) : void 0 !== window.addEventListener ? this.add(a, "DOMMouseScroll", function(a) {
    a.deltaY = 30 * a.detail;
    c(a);
  }) : this.add(a, "wheel", c);
};
"use strict";
function MathUtils() {
}
MathUtils.PI2 = 2 * Math.PI;
MathUtils.PID3 = Math.PI / 3;
MathUtils.PID2 = Math.PI / 2;
MathUtils.randomColor = function() {
  for (var a = "#", c = 0; 6 > c; c++) {
    a += "0123456789ABCDEF"[Math.floor(16 * Math.random())];
  }
  return a;
};
"use strict";
function ObjectUtils() {
}
ObjectUtils.getRoot = function(a) {
  for (; null !== a.parent;) {
    a = a.parent;
  }
  return a;
};
ObjectUtils.scaleAndCenterObject = function(a) {
  var c = ObjectUtils.calculateBoundingBox(a);
  if (null !== c) {
    var k = new THREE.Vector3;
    c.getSize(k);
    k = 1 / (k.x > k.y ? k.x > k.z ? k.x : k.z : k.y > k.z ? k.y : k.z);
    var b = new THREE.Vector3;
    c.getCenter(b);
    b.multiplyScalar(k);
    a.scale.set(k, k, k);
    a.position.set(-b.x, -k * c.min.y, -b.z);
  }
};
ObjectUtils.calculateBoundingBox = function(a) {
  var c = null;
  a.traverse(function(a) {
    void 0 !== a.geometry && (a.geometry.computeBoundingBox(), a = a.geometry.boundingBox, null === c ? c = a.clone() : (a.min.x < c.min.x && (c.min.x = a.min.x), a.max.x > c.max.x && (c.max.x = a.max.x), a.min.y < c.min.y && (c.min.y = a.min.y), a.max.y > c.max.y && (c.max.y = a.max.y), a.min.z < c.min.z && (c.min.z = a.min.z), a.max.z > c.max.z && (c.max.z = a.max.z)));
  });
  return c;
};
ObjectUtils.recalculateGeometryOrigin = function(a) {
  a.traverse(function(a) {
    if (void 0 !== a.geometry) {
      a.geometry.computeBoundingBox();
      var c = a.geometry.boundingBox.clone().getCenter(new THREE.Vector3);
      a.position.add(c);
      var b = new THREE.Matrix4;
      b.makeTranslation(-c.x, -c.y, -c.z);
      a.geometry.applyMatrix(b);
    }
  });
};
ObjectUtils.convertToBufferGeometry = function(a) {
  a.traverse(function(a) {
    void 0 !== a.geometry && !0 === a.geometry.isGeometry && (a.geometry = (new THREE.BufferGeometry).fromGeometry(a.geometry));
  });
};
"use strict";
function PhysicsGenerator() {
}
PhysicsGenerator.Type = {BOX:"Box", CYLINDER:"Cylinder", SPHERE:"Sphere", HULL:"ConvexPolyhedron"};
PhysicsGenerator.createShape = function(a, c) {
  if (void 0 !== c) {
    return c === PhysicsGenerator.Type.BOX ? PhysicsGenerator.createBoundingBoxShape(a) : c === PhysicsGenerator.Type.CYLINDER ? PhysicsGenerator.createBoundingCylinderShape(a) : c === PhysicsGenerator.Type.SPHERE ? PhysicsGenerator.createBoundingSphereShape(a) : c === PhysicsGenerator.Type.HULL ? PhysicsGenerator.createConvexPolyhedron(a) : null;
  }
  c = PhysicsGenerator.getGeometry(a);
  if (!c) {
    return null;
  }
  switch(c.type) {
    case "BoxGeometry":
    case "BoxBufferGeometry":
      return PhysicsGenerator.createBoxShape(c);
    case "CylinderGeometry":
    case "CylinderBufferGeometry":
      return PhysicsGenerator.createCylinderShape(c);
    case "PlaneGeometry":
    case "PlaneBufferGeometry":
      return PhysicsGenerator.createPlaneShape(c);
    case "SphereGeometry":
    case "SphereBufferGeometry":
      return PhysicsGenerator.createSphereShape(c);
    case "TubeGeometry":
      return PhysicsGenerator.createTubeShape(c);
    case "Geometry":
    case "BufferGeometry":
      return PhysicsGenerator.createConvexPolyhedron(a);
    default:
      return PhysicsGenerator.createBoxShape(c);
  }
};
PhysicsGenerator.createBoxShape = function(a) {
  if (!PhysicsGenerator.getVertices(a).length) {
    return null;
  }
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createBoundingBoxShape = function(a) {
  var c = new Box3;
  c.setFromObject(a);
  if (!isFinite(c.min.lengthSq())) {
    return null;
  }
  c = new CANNON.Box(new CANNON.Vec3((c.max.x - c.min.x) / 2, (c.max.y - c.min.y) / 2, (c.max.z - c.min.z) / 2));
  a.updateMatrixWorld();
  (new THREE.Vector3).setFromMatrixPosition(a.matrixWorld);
  return c;
};
PhysicsGenerator.createConvexPolyhedron = function(a) {
  var c = new THREE.QuickHull;
  c.setFromObject(a);
  a = [];
  for (var k = [], b = [], e = 0; e < c.faces.length; e++) {
    var f = c.faces[e], h = f.edge;
    do {
      var r = h.head().point;
      a.push(new CANNON.Vec3(r.x, r.y, r.z));
      h = h.next;
    } while (h !== f.edge);
    k.push([a.length - 3, a.length - 2, a.length - 1]);
    b.push(new CANNON.Vec3(f.normal.x, f.normal.y, f.normal.z));
  }
  return new CANNON.ConvexPolyhedron(a, k, b);
};
PhysicsGenerator.createCylinderShape = function(a) {
  a = a.parameters;
  a = new CANNON.Cylinder(a.radiusTop, a.radiusBottom, a.height, a.radialSegments);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(0, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createBoundingCylinderShape = function(a) {
  var c = ["x", "y", "z"];
  c = c.splice(c.indexOf("y"), 1) && c;
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingBox();
  a.computeBoundingSphere();
  c = .5 * Math.max(a.boundingBox.max[c[0]] - a.boundingBox.min[c[0]], a.boundingBox.max[c[1]] - a.boundingBox.min[c[1]]);
  a = new CANNON.Cylinder(c, c, a.boundingBox.max.y - a.boundingBox.min.y, 12);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(Math.PI / 2, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createPlaneShape = function(a) {
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createSphereShape = function(a) {
  return new CANNON.Sphere(a.parameters.radius);
};
PhysicsGenerator.createBoundingSphereShape = function(a) {
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingSphere();
  return new CANNON.Sphere(a.boundingSphere.radius);
};
PhysicsGenerator.createTubeShape = function(a) {
  var c = new THREE.BufferGeometry;
  c.fromGeometry(a);
  return createTrimeshShape(c);
};
PhysicsGenerator.createTrimeshShape = function(a) {
  var c = PhysicsGenerator.getVertices(a);
  if (!c.length) {
    return null;
  }
  a = Object.keys(c).map(Number);
  return new CANNON.Trimesh(c, a);
};
PhysicsGenerator.getGeometry = function(a) {
  var c = PhysicsGenerator.getMeshes(a);
  if (0 === c.length) {
    return null;
  }
  var k = new THREE.Geometry;
  if (1 === c.length) {
    a = new THREE.Vector3;
    var b = new THREE.Quaternion, e = new THREE.Vector3(1, 1, 1);
    k = c[0].geometry.clone();
    c[0].updateMatrixWorld();
    c[0].matrixWorld.decompose(a, b, e);
    return k.scale(e.x, e.y, e.z);
  }
  for (b = new THREE.Geometry; e = c.pop();) {
    e.updateMatrixWorld(), e.geometry instanceof THREE.BufferGeometry ? (k.fromBufferGeometry(e.geometry), b.merge(k, e.matrixWorld)) : b.merge(e.geometry, e.matrixWorld);
  }
  c = new THREE.Matrix4;
  c.scale(a.scale);
  b.applyMatrix(c);
  return b;
};
PhysicsGenerator.getVertices = function(a) {
  a.attributes || (a = (new THREE.BufferGeometry).fromGeometry(a));
  return a.attributes.position.array;
};
PhysicsGenerator.getMeshes = function(a) {
  var c = [];
  a.traverse(function(a) {
    a instanceof THREE.Mesh && c.push(a);
  });
  return c;
};

